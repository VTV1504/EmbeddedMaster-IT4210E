
gg.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000263b8  08010000  08010000  00010000  2**16
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000593c  080363c0  080363c0  000363c0  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0803bcfc  0803bcfc  0003d364  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0803bcfc  0803bcfc  0003bcfc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0803bd04  0803bd04  0003d364  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0803bd04  0803bd04  0003bd04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0803bd08  0803bd08  0003bd08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00001364  20000000  0803bd0c  0003c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0003d364  2**0
                  CONTENTS
 10 .bss          00004474  20001380  20001380  0003d380  2**5
                  ALLOC
 11 ._user_heap_stack 00003004  200057f4  200057f4  0003d380  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0003d364  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002612a  00000000  00000000  0003d394  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004f92  00000000  00000000  000634be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002048  00000000  00000000  00068450  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000018ff  00000000  00000000  0006a498  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002bfb5  00000000  00000000  0006bd97  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000269a5  00000000  00000000  00097d4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000fd5de  00000000  00000000  000be6f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000086  00000000  00000000  001bbccf  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00009da0  00000000  00000000  001bbd58  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005c  00000000  00000000  001c5af8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08010000 <__do_global_dtors_aux>:
 8010000:	b510      	push	{r4, lr}
 8010002:	4c05      	ldr	r4, [pc, #20]	@ (8010018 <__do_global_dtors_aux+0x18>)
 8010004:	7823      	ldrb	r3, [r4, #0]
 8010006:	b933      	cbnz	r3, 8010016 <__do_global_dtors_aux+0x16>
 8010008:	4b04      	ldr	r3, [pc, #16]	@ (801001c <__do_global_dtors_aux+0x1c>)
 801000a:	b113      	cbz	r3, 8010012 <__do_global_dtors_aux+0x12>
 801000c:	4804      	ldr	r0, [pc, #16]	@ (8010020 <__do_global_dtors_aux+0x20>)
 801000e:	f3af 8000 	nop.w
 8010012:	2301      	movs	r3, #1
 8010014:	7023      	strb	r3, [r4, #0]
 8010016:	bd10      	pop	{r4, pc}
 8010018:	20001380 	.word	0x20001380
 801001c:	00000000 	.word	0x00000000
 8010020:	080363a0 	.word	0x080363a0

08010024 <frame_dummy>:
 8010024:	b508      	push	{r3, lr}
 8010026:	4b03      	ldr	r3, [pc, #12]	@ (8010034 <frame_dummy+0x10>)
 8010028:	b11b      	cbz	r3, 8010032 <frame_dummy+0xe>
 801002a:	4903      	ldr	r1, [pc, #12]	@ (8010038 <frame_dummy+0x14>)
 801002c:	4803      	ldr	r0, [pc, #12]	@ (801003c <frame_dummy+0x18>)
 801002e:	f3af 8000 	nop.w
 8010032:	bd08      	pop	{r3, pc}
 8010034:	00000000 	.word	0x00000000
 8010038:	20001384 	.word	0x20001384
 801003c:	080363a0 	.word	0x080363a0

08010040 <memchr>:
 8010040:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8010044:	2a10      	cmp	r2, #16
 8010046:	db2b      	blt.n	80100a0 <memchr+0x60>
 8010048:	f010 0f07 	tst.w	r0, #7
 801004c:	d008      	beq.n	8010060 <memchr+0x20>
 801004e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8010052:	3a01      	subs	r2, #1
 8010054:	428b      	cmp	r3, r1
 8010056:	d02d      	beq.n	80100b4 <memchr+0x74>
 8010058:	f010 0f07 	tst.w	r0, #7
 801005c:	b342      	cbz	r2, 80100b0 <memchr+0x70>
 801005e:	d1f6      	bne.n	801004e <memchr+0xe>
 8010060:	b4f0      	push	{r4, r5, r6, r7}
 8010062:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8010066:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 801006a:	f022 0407 	bic.w	r4, r2, #7
 801006e:	f07f 0700 	mvns.w	r7, #0
 8010072:	2300      	movs	r3, #0
 8010074:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8010078:	3c08      	subs	r4, #8
 801007a:	ea85 0501 	eor.w	r5, r5, r1
 801007e:	ea86 0601 	eor.w	r6, r6, r1
 8010082:	fa85 f547 	uadd8	r5, r5, r7
 8010086:	faa3 f587 	sel	r5, r3, r7
 801008a:	fa86 f647 	uadd8	r6, r6, r7
 801008e:	faa5 f687 	sel	r6, r5, r7
 8010092:	b98e      	cbnz	r6, 80100b8 <memchr+0x78>
 8010094:	d1ee      	bne.n	8010074 <memchr+0x34>
 8010096:	bcf0      	pop	{r4, r5, r6, r7}
 8010098:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 801009c:	f002 0207 	and.w	r2, r2, #7
 80100a0:	b132      	cbz	r2, 80100b0 <memchr+0x70>
 80100a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80100a6:	3a01      	subs	r2, #1
 80100a8:	ea83 0301 	eor.w	r3, r3, r1
 80100ac:	b113      	cbz	r3, 80100b4 <memchr+0x74>
 80100ae:	d1f8      	bne.n	80100a2 <memchr+0x62>
 80100b0:	2000      	movs	r0, #0
 80100b2:	4770      	bx	lr
 80100b4:	3801      	subs	r0, #1
 80100b6:	4770      	bx	lr
 80100b8:	2d00      	cmp	r5, #0
 80100ba:	bf06      	itte	eq
 80100bc:	4635      	moveq	r5, r6
 80100be:	3803      	subeq	r0, #3
 80100c0:	3807      	subne	r0, #7
 80100c2:	f015 0f01 	tst.w	r5, #1
 80100c6:	d107      	bne.n	80100d8 <memchr+0x98>
 80100c8:	3001      	adds	r0, #1
 80100ca:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80100ce:	bf02      	ittt	eq
 80100d0:	3001      	addeq	r0, #1
 80100d2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80100d6:	3001      	addeq	r0, #1
 80100d8:	bcf0      	pop	{r4, r5, r6, r7}
 80100da:	3801      	subs	r0, #1
 80100dc:	4770      	bx	lr
 80100de:	bf00      	nop

080100e0 <strlen>:
 80100e0:	4603      	mov	r3, r0
 80100e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80100e6:	2a00      	cmp	r2, #0
 80100e8:	d1fb      	bne.n	80100e2 <strlen+0x2>
 80100ea:	1a18      	subs	r0, r3, r0
 80100ec:	3801      	subs	r0, #1
 80100ee:	4770      	bx	lr

080100f0 <__aeabi_drsub>:
 80100f0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80100f4:	e002      	b.n	80100fc <__adddf3>
 80100f6:	bf00      	nop

080100f8 <__aeabi_dsub>:
 80100f8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080100fc <__adddf3>:
 80100fc:	b530      	push	{r4, r5, lr}
 80100fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8010102:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8010106:	ea94 0f05 	teq	r4, r5
 801010a:	bf08      	it	eq
 801010c:	ea90 0f02 	teqeq	r0, r2
 8010110:	bf1f      	itttt	ne
 8010112:	ea54 0c00 	orrsne.w	ip, r4, r0
 8010116:	ea55 0c02 	orrsne.w	ip, r5, r2
 801011a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 801011e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8010122:	f000 80e2 	beq.w	80102ea <__adddf3+0x1ee>
 8010126:	ea4f 5454 	mov.w	r4, r4, lsr #21
 801012a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 801012e:	bfb8      	it	lt
 8010130:	426d      	neglt	r5, r5
 8010132:	dd0c      	ble.n	801014e <__adddf3+0x52>
 8010134:	442c      	add	r4, r5
 8010136:	ea80 0202 	eor.w	r2, r0, r2
 801013a:	ea81 0303 	eor.w	r3, r1, r3
 801013e:	ea82 0000 	eor.w	r0, r2, r0
 8010142:	ea83 0101 	eor.w	r1, r3, r1
 8010146:	ea80 0202 	eor.w	r2, r0, r2
 801014a:	ea81 0303 	eor.w	r3, r1, r3
 801014e:	2d36      	cmp	r5, #54	@ 0x36
 8010150:	bf88      	it	hi
 8010152:	bd30      	pophi	{r4, r5, pc}
 8010154:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8010158:	ea4f 3101 	mov.w	r1, r1, lsl #12
 801015c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8010160:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8010164:	d002      	beq.n	801016c <__adddf3+0x70>
 8010166:	4240      	negs	r0, r0
 8010168:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 801016c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8010170:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8010174:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8010178:	d002      	beq.n	8010180 <__adddf3+0x84>
 801017a:	4252      	negs	r2, r2
 801017c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8010180:	ea94 0f05 	teq	r4, r5
 8010184:	f000 80a7 	beq.w	80102d6 <__adddf3+0x1da>
 8010188:	f1a4 0401 	sub.w	r4, r4, #1
 801018c:	f1d5 0e20 	rsbs	lr, r5, #32
 8010190:	db0d      	blt.n	80101ae <__adddf3+0xb2>
 8010192:	fa02 fc0e 	lsl.w	ip, r2, lr
 8010196:	fa22 f205 	lsr.w	r2, r2, r5
 801019a:	1880      	adds	r0, r0, r2
 801019c:	f141 0100 	adc.w	r1, r1, #0
 80101a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80101a4:	1880      	adds	r0, r0, r2
 80101a6:	fa43 f305 	asr.w	r3, r3, r5
 80101aa:	4159      	adcs	r1, r3
 80101ac:	e00e      	b.n	80101cc <__adddf3+0xd0>
 80101ae:	f1a5 0520 	sub.w	r5, r5, #32
 80101b2:	f10e 0e20 	add.w	lr, lr, #32
 80101b6:	2a01      	cmp	r2, #1
 80101b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80101bc:	bf28      	it	cs
 80101be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80101c2:	fa43 f305 	asr.w	r3, r3, r5
 80101c6:	18c0      	adds	r0, r0, r3
 80101c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80101cc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80101d0:	d507      	bpl.n	80101e2 <__adddf3+0xe6>
 80101d2:	f04f 0e00 	mov.w	lr, #0
 80101d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80101da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80101de:	eb6e 0101 	sbc.w	r1, lr, r1
 80101e2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80101e6:	d31b      	bcc.n	8010220 <__adddf3+0x124>
 80101e8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80101ec:	d30c      	bcc.n	8010208 <__adddf3+0x10c>
 80101ee:	0849      	lsrs	r1, r1, #1
 80101f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80101f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80101f8:	f104 0401 	add.w	r4, r4, #1
 80101fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8010200:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8010204:	f080 809a 	bcs.w	801033c <__adddf3+0x240>
 8010208:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 801020c:	bf08      	it	eq
 801020e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8010212:	f150 0000 	adcs.w	r0, r0, #0
 8010216:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 801021a:	ea41 0105 	orr.w	r1, r1, r5
 801021e:	bd30      	pop	{r4, r5, pc}
 8010220:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8010224:	4140      	adcs	r0, r0
 8010226:	eb41 0101 	adc.w	r1, r1, r1
 801022a:	3c01      	subs	r4, #1
 801022c:	bf28      	it	cs
 801022e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8010232:	d2e9      	bcs.n	8010208 <__adddf3+0x10c>
 8010234:	f091 0f00 	teq	r1, #0
 8010238:	bf04      	itt	eq
 801023a:	4601      	moveq	r1, r0
 801023c:	2000      	moveq	r0, #0
 801023e:	fab1 f381 	clz	r3, r1
 8010242:	bf08      	it	eq
 8010244:	3320      	addeq	r3, #32
 8010246:	f1a3 030b 	sub.w	r3, r3, #11
 801024a:	f1b3 0220 	subs.w	r2, r3, #32
 801024e:	da0c      	bge.n	801026a <__adddf3+0x16e>
 8010250:	320c      	adds	r2, #12
 8010252:	dd08      	ble.n	8010266 <__adddf3+0x16a>
 8010254:	f102 0c14 	add.w	ip, r2, #20
 8010258:	f1c2 020c 	rsb	r2, r2, #12
 801025c:	fa01 f00c 	lsl.w	r0, r1, ip
 8010260:	fa21 f102 	lsr.w	r1, r1, r2
 8010264:	e00c      	b.n	8010280 <__adddf3+0x184>
 8010266:	f102 0214 	add.w	r2, r2, #20
 801026a:	bfd8      	it	le
 801026c:	f1c2 0c20 	rsble	ip, r2, #32
 8010270:	fa01 f102 	lsl.w	r1, r1, r2
 8010274:	fa20 fc0c 	lsr.w	ip, r0, ip
 8010278:	bfdc      	itt	le
 801027a:	ea41 010c 	orrle.w	r1, r1, ip
 801027e:	4090      	lslle	r0, r2
 8010280:	1ae4      	subs	r4, r4, r3
 8010282:	bfa2      	ittt	ge
 8010284:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8010288:	4329      	orrge	r1, r5
 801028a:	bd30      	popge	{r4, r5, pc}
 801028c:	ea6f 0404 	mvn.w	r4, r4
 8010290:	3c1f      	subs	r4, #31
 8010292:	da1c      	bge.n	80102ce <__adddf3+0x1d2>
 8010294:	340c      	adds	r4, #12
 8010296:	dc0e      	bgt.n	80102b6 <__adddf3+0x1ba>
 8010298:	f104 0414 	add.w	r4, r4, #20
 801029c:	f1c4 0220 	rsb	r2, r4, #32
 80102a0:	fa20 f004 	lsr.w	r0, r0, r4
 80102a4:	fa01 f302 	lsl.w	r3, r1, r2
 80102a8:	ea40 0003 	orr.w	r0, r0, r3
 80102ac:	fa21 f304 	lsr.w	r3, r1, r4
 80102b0:	ea45 0103 	orr.w	r1, r5, r3
 80102b4:	bd30      	pop	{r4, r5, pc}
 80102b6:	f1c4 040c 	rsb	r4, r4, #12
 80102ba:	f1c4 0220 	rsb	r2, r4, #32
 80102be:	fa20 f002 	lsr.w	r0, r0, r2
 80102c2:	fa01 f304 	lsl.w	r3, r1, r4
 80102c6:	ea40 0003 	orr.w	r0, r0, r3
 80102ca:	4629      	mov	r1, r5
 80102cc:	bd30      	pop	{r4, r5, pc}
 80102ce:	fa21 f004 	lsr.w	r0, r1, r4
 80102d2:	4629      	mov	r1, r5
 80102d4:	bd30      	pop	{r4, r5, pc}
 80102d6:	f094 0f00 	teq	r4, #0
 80102da:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80102de:	bf06      	itte	eq
 80102e0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80102e4:	3401      	addeq	r4, #1
 80102e6:	3d01      	subne	r5, #1
 80102e8:	e74e      	b.n	8010188 <__adddf3+0x8c>
 80102ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80102ee:	bf18      	it	ne
 80102f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80102f4:	d029      	beq.n	801034a <__adddf3+0x24e>
 80102f6:	ea94 0f05 	teq	r4, r5
 80102fa:	bf08      	it	eq
 80102fc:	ea90 0f02 	teqeq	r0, r2
 8010300:	d005      	beq.n	801030e <__adddf3+0x212>
 8010302:	ea54 0c00 	orrs.w	ip, r4, r0
 8010306:	bf04      	itt	eq
 8010308:	4619      	moveq	r1, r3
 801030a:	4610      	moveq	r0, r2
 801030c:	bd30      	pop	{r4, r5, pc}
 801030e:	ea91 0f03 	teq	r1, r3
 8010312:	bf1e      	ittt	ne
 8010314:	2100      	movne	r1, #0
 8010316:	2000      	movne	r0, #0
 8010318:	bd30      	popne	{r4, r5, pc}
 801031a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 801031e:	d105      	bne.n	801032c <__adddf3+0x230>
 8010320:	0040      	lsls	r0, r0, #1
 8010322:	4149      	adcs	r1, r1
 8010324:	bf28      	it	cs
 8010326:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 801032a:	bd30      	pop	{r4, r5, pc}
 801032c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8010330:	bf3c      	itt	cc
 8010332:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8010336:	bd30      	popcc	{r4, r5, pc}
 8010338:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 801033c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8010340:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8010344:	f04f 0000 	mov.w	r0, #0
 8010348:	bd30      	pop	{r4, r5, pc}
 801034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 801034e:	bf1a      	itte	ne
 8010350:	4619      	movne	r1, r3
 8010352:	4610      	movne	r0, r2
 8010354:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8010358:	bf1c      	itt	ne
 801035a:	460b      	movne	r3, r1
 801035c:	4602      	movne	r2, r0
 801035e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8010362:	bf06      	itte	eq
 8010364:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8010368:	ea91 0f03 	teqeq	r1, r3
 801036c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8010370:	bd30      	pop	{r4, r5, pc}
 8010372:	bf00      	nop

08010374 <__aeabi_ui2d>:
 8010374:	f090 0f00 	teq	r0, #0
 8010378:	bf04      	itt	eq
 801037a:	2100      	moveq	r1, #0
 801037c:	4770      	bxeq	lr
 801037e:	b530      	push	{r4, r5, lr}
 8010380:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8010384:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8010388:	f04f 0500 	mov.w	r5, #0
 801038c:	f04f 0100 	mov.w	r1, #0
 8010390:	e750      	b.n	8010234 <__adddf3+0x138>
 8010392:	bf00      	nop

08010394 <__aeabi_i2d>:
 8010394:	f090 0f00 	teq	r0, #0
 8010398:	bf04      	itt	eq
 801039a:	2100      	moveq	r1, #0
 801039c:	4770      	bxeq	lr
 801039e:	b530      	push	{r4, r5, lr}
 80103a0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80103a4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80103a8:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80103ac:	bf48      	it	mi
 80103ae:	4240      	negmi	r0, r0
 80103b0:	f04f 0100 	mov.w	r1, #0
 80103b4:	e73e      	b.n	8010234 <__adddf3+0x138>
 80103b6:	bf00      	nop

080103b8 <__aeabi_f2d>:
 80103b8:	0042      	lsls	r2, r0, #1
 80103ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80103be:	ea4f 0131 	mov.w	r1, r1, rrx
 80103c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80103c6:	bf1f      	itttt	ne
 80103c8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80103cc:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80103d0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80103d4:	4770      	bxne	lr
 80103d6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80103da:	bf08      	it	eq
 80103dc:	4770      	bxeq	lr
 80103de:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80103e2:	bf04      	itt	eq
 80103e4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80103e8:	4770      	bxeq	lr
 80103ea:	b530      	push	{r4, r5, lr}
 80103ec:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80103f0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80103f4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80103f8:	e71c      	b.n	8010234 <__adddf3+0x138>
 80103fa:	bf00      	nop

080103fc <__aeabi_ul2d>:
 80103fc:	ea50 0201 	orrs.w	r2, r0, r1
 8010400:	bf08      	it	eq
 8010402:	4770      	bxeq	lr
 8010404:	b530      	push	{r4, r5, lr}
 8010406:	f04f 0500 	mov.w	r5, #0
 801040a:	e00a      	b.n	8010422 <__aeabi_l2d+0x16>

0801040c <__aeabi_l2d>:
 801040c:	ea50 0201 	orrs.w	r2, r0, r1
 8010410:	bf08      	it	eq
 8010412:	4770      	bxeq	lr
 8010414:	b530      	push	{r4, r5, lr}
 8010416:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 801041a:	d502      	bpl.n	8010422 <__aeabi_l2d+0x16>
 801041c:	4240      	negs	r0, r0
 801041e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8010422:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8010426:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 801042a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 801042e:	f43f aed8 	beq.w	80101e2 <__adddf3+0xe6>
 8010432:	f04f 0203 	mov.w	r2, #3
 8010436:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 801043a:	bf18      	it	ne
 801043c:	3203      	addne	r2, #3
 801043e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8010442:	bf18      	it	ne
 8010444:	3203      	addne	r2, #3
 8010446:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 801044a:	f1c2 0320 	rsb	r3, r2, #32
 801044e:	fa00 fc03 	lsl.w	ip, r0, r3
 8010452:	fa20 f002 	lsr.w	r0, r0, r2
 8010456:	fa01 fe03 	lsl.w	lr, r1, r3
 801045a:	ea40 000e 	orr.w	r0, r0, lr
 801045e:	fa21 f102 	lsr.w	r1, r1, r2
 8010462:	4414      	add	r4, r2
 8010464:	e6bd      	b.n	80101e2 <__adddf3+0xe6>
 8010466:	bf00      	nop

08010468 <__aeabi_dmul>:
 8010468:	b570      	push	{r4, r5, r6, lr}
 801046a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 801046e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8010472:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8010476:	bf1d      	ittte	ne
 8010478:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 801047c:	ea94 0f0c 	teqne	r4, ip
 8010480:	ea95 0f0c 	teqne	r5, ip
 8010484:	f000 f8de 	bleq	8010644 <__aeabi_dmul+0x1dc>
 8010488:	442c      	add	r4, r5
 801048a:	ea81 0603 	eor.w	r6, r1, r3
 801048e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8010492:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8010496:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 801049a:	bf18      	it	ne
 801049c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80104a0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80104a4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80104a8:	d038      	beq.n	801051c <__aeabi_dmul+0xb4>
 80104aa:	fba0 ce02 	umull	ip, lr, r0, r2
 80104ae:	f04f 0500 	mov.w	r5, #0
 80104b2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80104b6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80104ba:	fbe0 e503 	umlal	lr, r5, r0, r3
 80104be:	f04f 0600 	mov.w	r6, #0
 80104c2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80104c6:	f09c 0f00 	teq	ip, #0
 80104ca:	bf18      	it	ne
 80104cc:	f04e 0e01 	orrne.w	lr, lr, #1
 80104d0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80104d4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80104d8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80104dc:	d204      	bcs.n	80104e8 <__aeabi_dmul+0x80>
 80104de:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80104e2:	416d      	adcs	r5, r5
 80104e4:	eb46 0606 	adc.w	r6, r6, r6
 80104e8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80104ec:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80104f0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80104f4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80104f8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80104fc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8010500:	bf88      	it	hi
 8010502:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8010506:	d81e      	bhi.n	8010546 <__aeabi_dmul+0xde>
 8010508:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 801050c:	bf08      	it	eq
 801050e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8010512:	f150 0000 	adcs.w	r0, r0, #0
 8010516:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 801051a:	bd70      	pop	{r4, r5, r6, pc}
 801051c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8010520:	ea46 0101 	orr.w	r1, r6, r1
 8010524:	ea40 0002 	orr.w	r0, r0, r2
 8010528:	ea81 0103 	eor.w	r1, r1, r3
 801052c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8010530:	bfc2      	ittt	gt
 8010532:	ebd4 050c 	rsbsgt	r5, r4, ip
 8010536:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 801053a:	bd70      	popgt	{r4, r5, r6, pc}
 801053c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8010540:	f04f 0e00 	mov.w	lr, #0
 8010544:	3c01      	subs	r4, #1
 8010546:	f300 80ab 	bgt.w	80106a0 <__aeabi_dmul+0x238>
 801054a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 801054e:	bfde      	ittt	le
 8010550:	2000      	movle	r0, #0
 8010552:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8010556:	bd70      	pople	{r4, r5, r6, pc}
 8010558:	f1c4 0400 	rsb	r4, r4, #0
 801055c:	3c20      	subs	r4, #32
 801055e:	da35      	bge.n	80105cc <__aeabi_dmul+0x164>
 8010560:	340c      	adds	r4, #12
 8010562:	dc1b      	bgt.n	801059c <__aeabi_dmul+0x134>
 8010564:	f104 0414 	add.w	r4, r4, #20
 8010568:	f1c4 0520 	rsb	r5, r4, #32
 801056c:	fa00 f305 	lsl.w	r3, r0, r5
 8010570:	fa20 f004 	lsr.w	r0, r0, r4
 8010574:	fa01 f205 	lsl.w	r2, r1, r5
 8010578:	ea40 0002 	orr.w	r0, r0, r2
 801057c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8010580:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8010584:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8010588:	fa21 f604 	lsr.w	r6, r1, r4
 801058c:	eb42 0106 	adc.w	r1, r2, r6
 8010590:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8010594:	bf08      	it	eq
 8010596:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 801059a:	bd70      	pop	{r4, r5, r6, pc}
 801059c:	f1c4 040c 	rsb	r4, r4, #12
 80105a0:	f1c4 0520 	rsb	r5, r4, #32
 80105a4:	fa00 f304 	lsl.w	r3, r0, r4
 80105a8:	fa20 f005 	lsr.w	r0, r0, r5
 80105ac:	fa01 f204 	lsl.w	r2, r1, r4
 80105b0:	ea40 0002 	orr.w	r0, r0, r2
 80105b4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80105b8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80105bc:	f141 0100 	adc.w	r1, r1, #0
 80105c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80105c4:	bf08      	it	eq
 80105c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80105ca:	bd70      	pop	{r4, r5, r6, pc}
 80105cc:	f1c4 0520 	rsb	r5, r4, #32
 80105d0:	fa00 f205 	lsl.w	r2, r0, r5
 80105d4:	ea4e 0e02 	orr.w	lr, lr, r2
 80105d8:	fa20 f304 	lsr.w	r3, r0, r4
 80105dc:	fa01 f205 	lsl.w	r2, r1, r5
 80105e0:	ea43 0302 	orr.w	r3, r3, r2
 80105e4:	fa21 f004 	lsr.w	r0, r1, r4
 80105e8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80105ec:	fa21 f204 	lsr.w	r2, r1, r4
 80105f0:	ea20 0002 	bic.w	r0, r0, r2
 80105f4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80105f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80105fc:	bf08      	it	eq
 80105fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8010602:	bd70      	pop	{r4, r5, r6, pc}
 8010604:	f094 0f00 	teq	r4, #0
 8010608:	d10f      	bne.n	801062a <__aeabi_dmul+0x1c2>
 801060a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 801060e:	0040      	lsls	r0, r0, #1
 8010610:	eb41 0101 	adc.w	r1, r1, r1
 8010614:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8010618:	bf08      	it	eq
 801061a:	3c01      	subeq	r4, #1
 801061c:	d0f7      	beq.n	801060e <__aeabi_dmul+0x1a6>
 801061e:	ea41 0106 	orr.w	r1, r1, r6
 8010622:	f095 0f00 	teq	r5, #0
 8010626:	bf18      	it	ne
 8010628:	4770      	bxne	lr
 801062a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 801062e:	0052      	lsls	r2, r2, #1
 8010630:	eb43 0303 	adc.w	r3, r3, r3
 8010634:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8010638:	bf08      	it	eq
 801063a:	3d01      	subeq	r5, #1
 801063c:	d0f7      	beq.n	801062e <__aeabi_dmul+0x1c6>
 801063e:	ea43 0306 	orr.w	r3, r3, r6
 8010642:	4770      	bx	lr
 8010644:	ea94 0f0c 	teq	r4, ip
 8010648:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 801064c:	bf18      	it	ne
 801064e:	ea95 0f0c 	teqne	r5, ip
 8010652:	d00c      	beq.n	801066e <__aeabi_dmul+0x206>
 8010654:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8010658:	bf18      	it	ne
 801065a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 801065e:	d1d1      	bne.n	8010604 <__aeabi_dmul+0x19c>
 8010660:	ea81 0103 	eor.w	r1, r1, r3
 8010664:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8010668:	f04f 0000 	mov.w	r0, #0
 801066c:	bd70      	pop	{r4, r5, r6, pc}
 801066e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8010672:	bf06      	itte	eq
 8010674:	4610      	moveq	r0, r2
 8010676:	4619      	moveq	r1, r3
 8010678:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 801067c:	d019      	beq.n	80106b2 <__aeabi_dmul+0x24a>
 801067e:	ea94 0f0c 	teq	r4, ip
 8010682:	d102      	bne.n	801068a <__aeabi_dmul+0x222>
 8010684:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8010688:	d113      	bne.n	80106b2 <__aeabi_dmul+0x24a>
 801068a:	ea95 0f0c 	teq	r5, ip
 801068e:	d105      	bne.n	801069c <__aeabi_dmul+0x234>
 8010690:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8010694:	bf1c      	itt	ne
 8010696:	4610      	movne	r0, r2
 8010698:	4619      	movne	r1, r3
 801069a:	d10a      	bne.n	80106b2 <__aeabi_dmul+0x24a>
 801069c:	ea81 0103 	eor.w	r1, r1, r3
 80106a0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80106a4:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80106a8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80106ac:	f04f 0000 	mov.w	r0, #0
 80106b0:	bd70      	pop	{r4, r5, r6, pc}
 80106b2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80106b6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80106ba:	bd70      	pop	{r4, r5, r6, pc}

080106bc <__aeabi_ddiv>:
 80106bc:	b570      	push	{r4, r5, r6, lr}
 80106be:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80106c2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80106c6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80106ca:	bf1d      	ittte	ne
 80106cc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80106d0:	ea94 0f0c 	teqne	r4, ip
 80106d4:	ea95 0f0c 	teqne	r5, ip
 80106d8:	f000 f8a7 	bleq	801082a <__aeabi_ddiv+0x16e>
 80106dc:	eba4 0405 	sub.w	r4, r4, r5
 80106e0:	ea81 0e03 	eor.w	lr, r1, r3
 80106e4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80106e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80106ec:	f000 8088 	beq.w	8010800 <__aeabi_ddiv+0x144>
 80106f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80106f4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80106f8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80106fc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8010700:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8010704:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8010708:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 801070c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8010710:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8010714:	429d      	cmp	r5, r3
 8010716:	bf08      	it	eq
 8010718:	4296      	cmpeq	r6, r2
 801071a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 801071e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8010722:	d202      	bcs.n	801072a <__aeabi_ddiv+0x6e>
 8010724:	085b      	lsrs	r3, r3, #1
 8010726:	ea4f 0232 	mov.w	r2, r2, rrx
 801072a:	1ab6      	subs	r6, r6, r2
 801072c:	eb65 0503 	sbc.w	r5, r5, r3
 8010730:	085b      	lsrs	r3, r3, #1
 8010732:	ea4f 0232 	mov.w	r2, r2, rrx
 8010736:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 801073a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 801073e:	ebb6 0e02 	subs.w	lr, r6, r2
 8010742:	eb75 0e03 	sbcs.w	lr, r5, r3
 8010746:	bf22      	ittt	cs
 8010748:	1ab6      	subcs	r6, r6, r2
 801074a:	4675      	movcs	r5, lr
 801074c:	ea40 000c 	orrcs.w	r0, r0, ip
 8010750:	085b      	lsrs	r3, r3, #1
 8010752:	ea4f 0232 	mov.w	r2, r2, rrx
 8010756:	ebb6 0e02 	subs.w	lr, r6, r2
 801075a:	eb75 0e03 	sbcs.w	lr, r5, r3
 801075e:	bf22      	ittt	cs
 8010760:	1ab6      	subcs	r6, r6, r2
 8010762:	4675      	movcs	r5, lr
 8010764:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8010768:	085b      	lsrs	r3, r3, #1
 801076a:	ea4f 0232 	mov.w	r2, r2, rrx
 801076e:	ebb6 0e02 	subs.w	lr, r6, r2
 8010772:	eb75 0e03 	sbcs.w	lr, r5, r3
 8010776:	bf22      	ittt	cs
 8010778:	1ab6      	subcs	r6, r6, r2
 801077a:	4675      	movcs	r5, lr
 801077c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8010780:	085b      	lsrs	r3, r3, #1
 8010782:	ea4f 0232 	mov.w	r2, r2, rrx
 8010786:	ebb6 0e02 	subs.w	lr, r6, r2
 801078a:	eb75 0e03 	sbcs.w	lr, r5, r3
 801078e:	bf22      	ittt	cs
 8010790:	1ab6      	subcs	r6, r6, r2
 8010792:	4675      	movcs	r5, lr
 8010794:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8010798:	ea55 0e06 	orrs.w	lr, r5, r6
 801079c:	d018      	beq.n	80107d0 <__aeabi_ddiv+0x114>
 801079e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80107a2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80107a6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80107aa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80107ae:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80107b2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80107b6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80107ba:	d1c0      	bne.n	801073e <__aeabi_ddiv+0x82>
 80107bc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80107c0:	d10b      	bne.n	80107da <__aeabi_ddiv+0x11e>
 80107c2:	ea41 0100 	orr.w	r1, r1, r0
 80107c6:	f04f 0000 	mov.w	r0, #0
 80107ca:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80107ce:	e7b6      	b.n	801073e <__aeabi_ddiv+0x82>
 80107d0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80107d4:	bf04      	itt	eq
 80107d6:	4301      	orreq	r1, r0
 80107d8:	2000      	moveq	r0, #0
 80107da:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80107de:	bf88      	it	hi
 80107e0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80107e4:	f63f aeaf 	bhi.w	8010546 <__aeabi_dmul+0xde>
 80107e8:	ebb5 0c03 	subs.w	ip, r5, r3
 80107ec:	bf04      	itt	eq
 80107ee:	ebb6 0c02 	subseq.w	ip, r6, r2
 80107f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80107f6:	f150 0000 	adcs.w	r0, r0, #0
 80107fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80107fe:	bd70      	pop	{r4, r5, r6, pc}
 8010800:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8010804:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8010808:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 801080c:	bfc2      	ittt	gt
 801080e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8010812:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8010816:	bd70      	popgt	{r4, r5, r6, pc}
 8010818:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 801081c:	f04f 0e00 	mov.w	lr, #0
 8010820:	3c01      	subs	r4, #1
 8010822:	e690      	b.n	8010546 <__aeabi_dmul+0xde>
 8010824:	ea45 0e06 	orr.w	lr, r5, r6
 8010828:	e68d      	b.n	8010546 <__aeabi_dmul+0xde>
 801082a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 801082e:	ea94 0f0c 	teq	r4, ip
 8010832:	bf08      	it	eq
 8010834:	ea95 0f0c 	teqeq	r5, ip
 8010838:	f43f af3b 	beq.w	80106b2 <__aeabi_dmul+0x24a>
 801083c:	ea94 0f0c 	teq	r4, ip
 8010840:	d10a      	bne.n	8010858 <__aeabi_ddiv+0x19c>
 8010842:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8010846:	f47f af34 	bne.w	80106b2 <__aeabi_dmul+0x24a>
 801084a:	ea95 0f0c 	teq	r5, ip
 801084e:	f47f af25 	bne.w	801069c <__aeabi_dmul+0x234>
 8010852:	4610      	mov	r0, r2
 8010854:	4619      	mov	r1, r3
 8010856:	e72c      	b.n	80106b2 <__aeabi_dmul+0x24a>
 8010858:	ea95 0f0c 	teq	r5, ip
 801085c:	d106      	bne.n	801086c <__aeabi_ddiv+0x1b0>
 801085e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8010862:	f43f aefd 	beq.w	8010660 <__aeabi_dmul+0x1f8>
 8010866:	4610      	mov	r0, r2
 8010868:	4619      	mov	r1, r3
 801086a:	e722      	b.n	80106b2 <__aeabi_dmul+0x24a>
 801086c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8010870:	bf18      	it	ne
 8010872:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8010876:	f47f aec5 	bne.w	8010604 <__aeabi_dmul+0x19c>
 801087a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 801087e:	f47f af0d 	bne.w	801069c <__aeabi_dmul+0x234>
 8010882:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8010886:	f47f aeeb 	bne.w	8010660 <__aeabi_dmul+0x1f8>
 801088a:	e712      	b.n	80106b2 <__aeabi_dmul+0x24a>

0801088c <__gedf2>:
 801088c:	f04f 3cff 	mov.w	ip, #4294967295
 8010890:	e006      	b.n	80108a0 <__cmpdf2+0x4>
 8010892:	bf00      	nop

08010894 <__ledf2>:
 8010894:	f04f 0c01 	mov.w	ip, #1
 8010898:	e002      	b.n	80108a0 <__cmpdf2+0x4>
 801089a:	bf00      	nop

0801089c <__cmpdf2>:
 801089c:	f04f 0c01 	mov.w	ip, #1
 80108a0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80108a4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80108a8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80108ac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80108b0:	bf18      	it	ne
 80108b2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80108b6:	d01b      	beq.n	80108f0 <__cmpdf2+0x54>
 80108b8:	b001      	add	sp, #4
 80108ba:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80108be:	bf0c      	ite	eq
 80108c0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80108c4:	ea91 0f03 	teqne	r1, r3
 80108c8:	bf02      	ittt	eq
 80108ca:	ea90 0f02 	teqeq	r0, r2
 80108ce:	2000      	moveq	r0, #0
 80108d0:	4770      	bxeq	lr
 80108d2:	f110 0f00 	cmn.w	r0, #0
 80108d6:	ea91 0f03 	teq	r1, r3
 80108da:	bf58      	it	pl
 80108dc:	4299      	cmppl	r1, r3
 80108de:	bf08      	it	eq
 80108e0:	4290      	cmpeq	r0, r2
 80108e2:	bf2c      	ite	cs
 80108e4:	17d8      	asrcs	r0, r3, #31
 80108e6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80108ea:	f040 0001 	orr.w	r0, r0, #1
 80108ee:	4770      	bx	lr
 80108f0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80108f4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80108f8:	d102      	bne.n	8010900 <__cmpdf2+0x64>
 80108fa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80108fe:	d107      	bne.n	8010910 <__cmpdf2+0x74>
 8010900:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8010904:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8010908:	d1d6      	bne.n	80108b8 <__cmpdf2+0x1c>
 801090a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 801090e:	d0d3      	beq.n	80108b8 <__cmpdf2+0x1c>
 8010910:	f85d 0b04 	ldr.w	r0, [sp], #4
 8010914:	4770      	bx	lr
 8010916:	bf00      	nop

08010918 <__aeabi_cdrcmple>:
 8010918:	4684      	mov	ip, r0
 801091a:	4610      	mov	r0, r2
 801091c:	4662      	mov	r2, ip
 801091e:	468c      	mov	ip, r1
 8010920:	4619      	mov	r1, r3
 8010922:	4663      	mov	r3, ip
 8010924:	e000      	b.n	8010928 <__aeabi_cdcmpeq>
 8010926:	bf00      	nop

08010928 <__aeabi_cdcmpeq>:
 8010928:	b501      	push	{r0, lr}
 801092a:	f7ff ffb7 	bl	801089c <__cmpdf2>
 801092e:	2800      	cmp	r0, #0
 8010930:	bf48      	it	mi
 8010932:	f110 0f00 	cmnmi.w	r0, #0
 8010936:	bd01      	pop	{r0, pc}

08010938 <__aeabi_dcmpeq>:
 8010938:	f84d ed08 	str.w	lr, [sp, #-8]!
 801093c:	f7ff fff4 	bl	8010928 <__aeabi_cdcmpeq>
 8010940:	bf0c      	ite	eq
 8010942:	2001      	moveq	r0, #1
 8010944:	2000      	movne	r0, #0
 8010946:	f85d fb08 	ldr.w	pc, [sp], #8
 801094a:	bf00      	nop

0801094c <__aeabi_dcmplt>:
 801094c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8010950:	f7ff ffea 	bl	8010928 <__aeabi_cdcmpeq>
 8010954:	bf34      	ite	cc
 8010956:	2001      	movcc	r0, #1
 8010958:	2000      	movcs	r0, #0
 801095a:	f85d fb08 	ldr.w	pc, [sp], #8
 801095e:	bf00      	nop

08010960 <__aeabi_dcmple>:
 8010960:	f84d ed08 	str.w	lr, [sp, #-8]!
 8010964:	f7ff ffe0 	bl	8010928 <__aeabi_cdcmpeq>
 8010968:	bf94      	ite	ls
 801096a:	2001      	movls	r0, #1
 801096c:	2000      	movhi	r0, #0
 801096e:	f85d fb08 	ldr.w	pc, [sp], #8
 8010972:	bf00      	nop

08010974 <__aeabi_dcmpge>:
 8010974:	f84d ed08 	str.w	lr, [sp, #-8]!
 8010978:	f7ff ffce 	bl	8010918 <__aeabi_cdrcmple>
 801097c:	bf94      	ite	ls
 801097e:	2001      	movls	r0, #1
 8010980:	2000      	movhi	r0, #0
 8010982:	f85d fb08 	ldr.w	pc, [sp], #8
 8010986:	bf00      	nop

08010988 <__aeabi_dcmpgt>:
 8010988:	f84d ed08 	str.w	lr, [sp, #-8]!
 801098c:	f7ff ffc4 	bl	8010918 <__aeabi_cdrcmple>
 8010990:	bf34      	ite	cc
 8010992:	2001      	movcc	r0, #1
 8010994:	2000      	movcs	r0, #0
 8010996:	f85d fb08 	ldr.w	pc, [sp], #8
 801099a:	bf00      	nop

0801099c <__aeabi_dcmpun>:
 801099c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80109a0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80109a4:	d102      	bne.n	80109ac <__aeabi_dcmpun+0x10>
 80109a6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80109aa:	d10a      	bne.n	80109c2 <__aeabi_dcmpun+0x26>
 80109ac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80109b0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80109b4:	d102      	bne.n	80109bc <__aeabi_dcmpun+0x20>
 80109b6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80109ba:	d102      	bne.n	80109c2 <__aeabi_dcmpun+0x26>
 80109bc:	f04f 0000 	mov.w	r0, #0
 80109c0:	4770      	bx	lr
 80109c2:	f04f 0001 	mov.w	r0, #1
 80109c6:	4770      	bx	lr

080109c8 <__aeabi_d2iz>:
 80109c8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80109cc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 80109d0:	d215      	bcs.n	80109fe <__aeabi_d2iz+0x36>
 80109d2:	d511      	bpl.n	80109f8 <__aeabi_d2iz+0x30>
 80109d4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 80109d8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80109dc:	d912      	bls.n	8010a04 <__aeabi_d2iz+0x3c>
 80109de:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80109e2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80109e6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80109ea:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80109ee:	fa23 f002 	lsr.w	r0, r3, r2
 80109f2:	bf18      	it	ne
 80109f4:	4240      	negne	r0, r0
 80109f6:	4770      	bx	lr
 80109f8:	f04f 0000 	mov.w	r0, #0
 80109fc:	4770      	bx	lr
 80109fe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8010a02:	d105      	bne.n	8010a10 <__aeabi_d2iz+0x48>
 8010a04:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8010a08:	bf08      	it	eq
 8010a0a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8010a0e:	4770      	bx	lr
 8010a10:	f04f 0000 	mov.w	r0, #0
 8010a14:	4770      	bx	lr
 8010a16:	bf00      	nop

08010a18 <__aeabi_uldivmod>:
 8010a18:	b953      	cbnz	r3, 8010a30 <__aeabi_uldivmod+0x18>
 8010a1a:	b94a      	cbnz	r2, 8010a30 <__aeabi_uldivmod+0x18>
 8010a1c:	2900      	cmp	r1, #0
 8010a1e:	bf08      	it	eq
 8010a20:	2800      	cmpeq	r0, #0
 8010a22:	bf1c      	itt	ne
 8010a24:	f04f 31ff 	movne.w	r1, #4294967295
 8010a28:	f04f 30ff 	movne.w	r0, #4294967295
 8010a2c:	f000 b9bc 	b.w	8010da8 <__aeabi_idiv0>
 8010a30:	f1ad 0c08 	sub.w	ip, sp, #8
 8010a34:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8010a38:	f000 f83a 	bl	8010ab0 <__udivmoddi4>
 8010a3c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8010a40:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010a44:	b004      	add	sp, #16
 8010a46:	4770      	bx	lr

08010a48 <__aeabi_f2lz>:
 8010a48:	ee07 0a90 	vmov	s15, r0
 8010a4c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8010a50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010a54:	d401      	bmi.n	8010a5a <__aeabi_f2lz+0x12>
 8010a56:	f000 b80b 	b.w	8010a70 <__aeabi_f2ulz>
 8010a5a:	eef1 7a67 	vneg.f32	s15, s15
 8010a5e:	b508      	push	{r3, lr}
 8010a60:	ee17 0a90 	vmov	r0, s15
 8010a64:	f000 f804 	bl	8010a70 <__aeabi_f2ulz>
 8010a68:	4240      	negs	r0, r0
 8010a6a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8010a6e:	bd08      	pop	{r3, pc}

08010a70 <__aeabi_f2ulz>:
 8010a70:	b5d0      	push	{r4, r6, r7, lr}
 8010a72:	f7ff fca1 	bl	80103b8 <__aeabi_f2d>
 8010a76:	4b0c      	ldr	r3, [pc, #48]	@ (8010aa8 <__aeabi_f2ulz+0x38>)
 8010a78:	2200      	movs	r2, #0
 8010a7a:	4606      	mov	r6, r0
 8010a7c:	460f      	mov	r7, r1
 8010a7e:	f7ff fcf3 	bl	8010468 <__aeabi_dmul>
 8010a82:	f000 f993 	bl	8010dac <__aeabi_d2uiz>
 8010a86:	4604      	mov	r4, r0
 8010a88:	f7ff fc74 	bl	8010374 <__aeabi_ui2d>
 8010a8c:	4b07      	ldr	r3, [pc, #28]	@ (8010aac <__aeabi_f2ulz+0x3c>)
 8010a8e:	2200      	movs	r2, #0
 8010a90:	f7ff fcea 	bl	8010468 <__aeabi_dmul>
 8010a94:	4602      	mov	r2, r0
 8010a96:	460b      	mov	r3, r1
 8010a98:	4630      	mov	r0, r6
 8010a9a:	4639      	mov	r1, r7
 8010a9c:	f7ff fb2c 	bl	80100f8 <__aeabi_dsub>
 8010aa0:	f000 f984 	bl	8010dac <__aeabi_d2uiz>
 8010aa4:	4621      	mov	r1, r4
 8010aa6:	bdd0      	pop	{r4, r6, r7, pc}
 8010aa8:	3df00000 	.word	0x3df00000
 8010aac:	41f00000 	.word	0x41f00000

08010ab0 <__udivmoddi4>:
 8010ab0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010ab4:	9d08      	ldr	r5, [sp, #32]
 8010ab6:	468e      	mov	lr, r1
 8010ab8:	4604      	mov	r4, r0
 8010aba:	4688      	mov	r8, r1
 8010abc:	2b00      	cmp	r3, #0
 8010abe:	d14a      	bne.n	8010b56 <__udivmoddi4+0xa6>
 8010ac0:	428a      	cmp	r2, r1
 8010ac2:	4617      	mov	r7, r2
 8010ac4:	d962      	bls.n	8010b8c <__udivmoddi4+0xdc>
 8010ac6:	fab2 f682 	clz	r6, r2
 8010aca:	b14e      	cbz	r6, 8010ae0 <__udivmoddi4+0x30>
 8010acc:	f1c6 0320 	rsb	r3, r6, #32
 8010ad0:	fa01 f806 	lsl.w	r8, r1, r6
 8010ad4:	fa20 f303 	lsr.w	r3, r0, r3
 8010ad8:	40b7      	lsls	r7, r6
 8010ada:	ea43 0808 	orr.w	r8, r3, r8
 8010ade:	40b4      	lsls	r4, r6
 8010ae0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8010ae4:	fa1f fc87 	uxth.w	ip, r7
 8010ae8:	fbb8 f1fe 	udiv	r1, r8, lr
 8010aec:	0c23      	lsrs	r3, r4, #16
 8010aee:	fb0e 8811 	mls	r8, lr, r1, r8
 8010af2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8010af6:	fb01 f20c 	mul.w	r2, r1, ip
 8010afa:	429a      	cmp	r2, r3
 8010afc:	d909      	bls.n	8010b12 <__udivmoddi4+0x62>
 8010afe:	18fb      	adds	r3, r7, r3
 8010b00:	f101 30ff 	add.w	r0, r1, #4294967295
 8010b04:	f080 80ea 	bcs.w	8010cdc <__udivmoddi4+0x22c>
 8010b08:	429a      	cmp	r2, r3
 8010b0a:	f240 80e7 	bls.w	8010cdc <__udivmoddi4+0x22c>
 8010b0e:	3902      	subs	r1, #2
 8010b10:	443b      	add	r3, r7
 8010b12:	1a9a      	subs	r2, r3, r2
 8010b14:	b2a3      	uxth	r3, r4
 8010b16:	fbb2 f0fe 	udiv	r0, r2, lr
 8010b1a:	fb0e 2210 	mls	r2, lr, r0, r2
 8010b1e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8010b22:	fb00 fc0c 	mul.w	ip, r0, ip
 8010b26:	459c      	cmp	ip, r3
 8010b28:	d909      	bls.n	8010b3e <__udivmoddi4+0x8e>
 8010b2a:	18fb      	adds	r3, r7, r3
 8010b2c:	f100 32ff 	add.w	r2, r0, #4294967295
 8010b30:	f080 80d6 	bcs.w	8010ce0 <__udivmoddi4+0x230>
 8010b34:	459c      	cmp	ip, r3
 8010b36:	f240 80d3 	bls.w	8010ce0 <__udivmoddi4+0x230>
 8010b3a:	443b      	add	r3, r7
 8010b3c:	3802      	subs	r0, #2
 8010b3e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8010b42:	eba3 030c 	sub.w	r3, r3, ip
 8010b46:	2100      	movs	r1, #0
 8010b48:	b11d      	cbz	r5, 8010b52 <__udivmoddi4+0xa2>
 8010b4a:	40f3      	lsrs	r3, r6
 8010b4c:	2200      	movs	r2, #0
 8010b4e:	e9c5 3200 	strd	r3, r2, [r5]
 8010b52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010b56:	428b      	cmp	r3, r1
 8010b58:	d905      	bls.n	8010b66 <__udivmoddi4+0xb6>
 8010b5a:	b10d      	cbz	r5, 8010b60 <__udivmoddi4+0xb0>
 8010b5c:	e9c5 0100 	strd	r0, r1, [r5]
 8010b60:	2100      	movs	r1, #0
 8010b62:	4608      	mov	r0, r1
 8010b64:	e7f5      	b.n	8010b52 <__udivmoddi4+0xa2>
 8010b66:	fab3 f183 	clz	r1, r3
 8010b6a:	2900      	cmp	r1, #0
 8010b6c:	d146      	bne.n	8010bfc <__udivmoddi4+0x14c>
 8010b6e:	4573      	cmp	r3, lr
 8010b70:	d302      	bcc.n	8010b78 <__udivmoddi4+0xc8>
 8010b72:	4282      	cmp	r2, r0
 8010b74:	f200 8105 	bhi.w	8010d82 <__udivmoddi4+0x2d2>
 8010b78:	1a84      	subs	r4, r0, r2
 8010b7a:	eb6e 0203 	sbc.w	r2, lr, r3
 8010b7e:	2001      	movs	r0, #1
 8010b80:	4690      	mov	r8, r2
 8010b82:	2d00      	cmp	r5, #0
 8010b84:	d0e5      	beq.n	8010b52 <__udivmoddi4+0xa2>
 8010b86:	e9c5 4800 	strd	r4, r8, [r5]
 8010b8a:	e7e2      	b.n	8010b52 <__udivmoddi4+0xa2>
 8010b8c:	2a00      	cmp	r2, #0
 8010b8e:	f000 8090 	beq.w	8010cb2 <__udivmoddi4+0x202>
 8010b92:	fab2 f682 	clz	r6, r2
 8010b96:	2e00      	cmp	r6, #0
 8010b98:	f040 80a4 	bne.w	8010ce4 <__udivmoddi4+0x234>
 8010b9c:	1a8a      	subs	r2, r1, r2
 8010b9e:	0c03      	lsrs	r3, r0, #16
 8010ba0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8010ba4:	b280      	uxth	r0, r0
 8010ba6:	b2bc      	uxth	r4, r7
 8010ba8:	2101      	movs	r1, #1
 8010baa:	fbb2 fcfe 	udiv	ip, r2, lr
 8010bae:	fb0e 221c 	mls	r2, lr, ip, r2
 8010bb2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8010bb6:	fb04 f20c 	mul.w	r2, r4, ip
 8010bba:	429a      	cmp	r2, r3
 8010bbc:	d907      	bls.n	8010bce <__udivmoddi4+0x11e>
 8010bbe:	18fb      	adds	r3, r7, r3
 8010bc0:	f10c 38ff 	add.w	r8, ip, #4294967295
 8010bc4:	d202      	bcs.n	8010bcc <__udivmoddi4+0x11c>
 8010bc6:	429a      	cmp	r2, r3
 8010bc8:	f200 80e0 	bhi.w	8010d8c <__udivmoddi4+0x2dc>
 8010bcc:	46c4      	mov	ip, r8
 8010bce:	1a9b      	subs	r3, r3, r2
 8010bd0:	fbb3 f2fe 	udiv	r2, r3, lr
 8010bd4:	fb0e 3312 	mls	r3, lr, r2, r3
 8010bd8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8010bdc:	fb02 f404 	mul.w	r4, r2, r4
 8010be0:	429c      	cmp	r4, r3
 8010be2:	d907      	bls.n	8010bf4 <__udivmoddi4+0x144>
 8010be4:	18fb      	adds	r3, r7, r3
 8010be6:	f102 30ff 	add.w	r0, r2, #4294967295
 8010bea:	d202      	bcs.n	8010bf2 <__udivmoddi4+0x142>
 8010bec:	429c      	cmp	r4, r3
 8010bee:	f200 80ca 	bhi.w	8010d86 <__udivmoddi4+0x2d6>
 8010bf2:	4602      	mov	r2, r0
 8010bf4:	1b1b      	subs	r3, r3, r4
 8010bf6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8010bfa:	e7a5      	b.n	8010b48 <__udivmoddi4+0x98>
 8010bfc:	f1c1 0620 	rsb	r6, r1, #32
 8010c00:	408b      	lsls	r3, r1
 8010c02:	fa22 f706 	lsr.w	r7, r2, r6
 8010c06:	431f      	orrs	r7, r3
 8010c08:	fa0e f401 	lsl.w	r4, lr, r1
 8010c0c:	fa20 f306 	lsr.w	r3, r0, r6
 8010c10:	fa2e fe06 	lsr.w	lr, lr, r6
 8010c14:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8010c18:	4323      	orrs	r3, r4
 8010c1a:	fa00 f801 	lsl.w	r8, r0, r1
 8010c1e:	fa1f fc87 	uxth.w	ip, r7
 8010c22:	fbbe f0f9 	udiv	r0, lr, r9
 8010c26:	0c1c      	lsrs	r4, r3, #16
 8010c28:	fb09 ee10 	mls	lr, r9, r0, lr
 8010c2c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8010c30:	fb00 fe0c 	mul.w	lr, r0, ip
 8010c34:	45a6      	cmp	lr, r4
 8010c36:	fa02 f201 	lsl.w	r2, r2, r1
 8010c3a:	d909      	bls.n	8010c50 <__udivmoddi4+0x1a0>
 8010c3c:	193c      	adds	r4, r7, r4
 8010c3e:	f100 3aff 	add.w	sl, r0, #4294967295
 8010c42:	f080 809c 	bcs.w	8010d7e <__udivmoddi4+0x2ce>
 8010c46:	45a6      	cmp	lr, r4
 8010c48:	f240 8099 	bls.w	8010d7e <__udivmoddi4+0x2ce>
 8010c4c:	3802      	subs	r0, #2
 8010c4e:	443c      	add	r4, r7
 8010c50:	eba4 040e 	sub.w	r4, r4, lr
 8010c54:	fa1f fe83 	uxth.w	lr, r3
 8010c58:	fbb4 f3f9 	udiv	r3, r4, r9
 8010c5c:	fb09 4413 	mls	r4, r9, r3, r4
 8010c60:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8010c64:	fb03 fc0c 	mul.w	ip, r3, ip
 8010c68:	45a4      	cmp	ip, r4
 8010c6a:	d908      	bls.n	8010c7e <__udivmoddi4+0x1ce>
 8010c6c:	193c      	adds	r4, r7, r4
 8010c6e:	f103 3eff 	add.w	lr, r3, #4294967295
 8010c72:	f080 8082 	bcs.w	8010d7a <__udivmoddi4+0x2ca>
 8010c76:	45a4      	cmp	ip, r4
 8010c78:	d97f      	bls.n	8010d7a <__udivmoddi4+0x2ca>
 8010c7a:	3b02      	subs	r3, #2
 8010c7c:	443c      	add	r4, r7
 8010c7e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8010c82:	eba4 040c 	sub.w	r4, r4, ip
 8010c86:	fba0 ec02 	umull	lr, ip, r0, r2
 8010c8a:	4564      	cmp	r4, ip
 8010c8c:	4673      	mov	r3, lr
 8010c8e:	46e1      	mov	r9, ip
 8010c90:	d362      	bcc.n	8010d58 <__udivmoddi4+0x2a8>
 8010c92:	d05f      	beq.n	8010d54 <__udivmoddi4+0x2a4>
 8010c94:	b15d      	cbz	r5, 8010cae <__udivmoddi4+0x1fe>
 8010c96:	ebb8 0203 	subs.w	r2, r8, r3
 8010c9a:	eb64 0409 	sbc.w	r4, r4, r9
 8010c9e:	fa04 f606 	lsl.w	r6, r4, r6
 8010ca2:	fa22 f301 	lsr.w	r3, r2, r1
 8010ca6:	431e      	orrs	r6, r3
 8010ca8:	40cc      	lsrs	r4, r1
 8010caa:	e9c5 6400 	strd	r6, r4, [r5]
 8010cae:	2100      	movs	r1, #0
 8010cb0:	e74f      	b.n	8010b52 <__udivmoddi4+0xa2>
 8010cb2:	fbb1 fcf2 	udiv	ip, r1, r2
 8010cb6:	0c01      	lsrs	r1, r0, #16
 8010cb8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8010cbc:	b280      	uxth	r0, r0
 8010cbe:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8010cc2:	463b      	mov	r3, r7
 8010cc4:	4638      	mov	r0, r7
 8010cc6:	463c      	mov	r4, r7
 8010cc8:	46b8      	mov	r8, r7
 8010cca:	46be      	mov	lr, r7
 8010ccc:	2620      	movs	r6, #32
 8010cce:	fbb1 f1f7 	udiv	r1, r1, r7
 8010cd2:	eba2 0208 	sub.w	r2, r2, r8
 8010cd6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8010cda:	e766      	b.n	8010baa <__udivmoddi4+0xfa>
 8010cdc:	4601      	mov	r1, r0
 8010cde:	e718      	b.n	8010b12 <__udivmoddi4+0x62>
 8010ce0:	4610      	mov	r0, r2
 8010ce2:	e72c      	b.n	8010b3e <__udivmoddi4+0x8e>
 8010ce4:	f1c6 0220 	rsb	r2, r6, #32
 8010ce8:	fa2e f302 	lsr.w	r3, lr, r2
 8010cec:	40b7      	lsls	r7, r6
 8010cee:	40b1      	lsls	r1, r6
 8010cf0:	fa20 f202 	lsr.w	r2, r0, r2
 8010cf4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8010cf8:	430a      	orrs	r2, r1
 8010cfa:	fbb3 f8fe 	udiv	r8, r3, lr
 8010cfe:	b2bc      	uxth	r4, r7
 8010d00:	fb0e 3318 	mls	r3, lr, r8, r3
 8010d04:	0c11      	lsrs	r1, r2, #16
 8010d06:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8010d0a:	fb08 f904 	mul.w	r9, r8, r4
 8010d0e:	40b0      	lsls	r0, r6
 8010d10:	4589      	cmp	r9, r1
 8010d12:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8010d16:	b280      	uxth	r0, r0
 8010d18:	d93e      	bls.n	8010d98 <__udivmoddi4+0x2e8>
 8010d1a:	1879      	adds	r1, r7, r1
 8010d1c:	f108 3cff 	add.w	ip, r8, #4294967295
 8010d20:	d201      	bcs.n	8010d26 <__udivmoddi4+0x276>
 8010d22:	4589      	cmp	r9, r1
 8010d24:	d81f      	bhi.n	8010d66 <__udivmoddi4+0x2b6>
 8010d26:	eba1 0109 	sub.w	r1, r1, r9
 8010d2a:	fbb1 f9fe 	udiv	r9, r1, lr
 8010d2e:	fb09 f804 	mul.w	r8, r9, r4
 8010d32:	fb0e 1119 	mls	r1, lr, r9, r1
 8010d36:	b292      	uxth	r2, r2
 8010d38:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8010d3c:	4542      	cmp	r2, r8
 8010d3e:	d229      	bcs.n	8010d94 <__udivmoddi4+0x2e4>
 8010d40:	18ba      	adds	r2, r7, r2
 8010d42:	f109 31ff 	add.w	r1, r9, #4294967295
 8010d46:	d2c4      	bcs.n	8010cd2 <__udivmoddi4+0x222>
 8010d48:	4542      	cmp	r2, r8
 8010d4a:	d2c2      	bcs.n	8010cd2 <__udivmoddi4+0x222>
 8010d4c:	f1a9 0102 	sub.w	r1, r9, #2
 8010d50:	443a      	add	r2, r7
 8010d52:	e7be      	b.n	8010cd2 <__udivmoddi4+0x222>
 8010d54:	45f0      	cmp	r8, lr
 8010d56:	d29d      	bcs.n	8010c94 <__udivmoddi4+0x1e4>
 8010d58:	ebbe 0302 	subs.w	r3, lr, r2
 8010d5c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8010d60:	3801      	subs	r0, #1
 8010d62:	46e1      	mov	r9, ip
 8010d64:	e796      	b.n	8010c94 <__udivmoddi4+0x1e4>
 8010d66:	eba7 0909 	sub.w	r9, r7, r9
 8010d6a:	4449      	add	r1, r9
 8010d6c:	f1a8 0c02 	sub.w	ip, r8, #2
 8010d70:	fbb1 f9fe 	udiv	r9, r1, lr
 8010d74:	fb09 f804 	mul.w	r8, r9, r4
 8010d78:	e7db      	b.n	8010d32 <__udivmoddi4+0x282>
 8010d7a:	4673      	mov	r3, lr
 8010d7c:	e77f      	b.n	8010c7e <__udivmoddi4+0x1ce>
 8010d7e:	4650      	mov	r0, sl
 8010d80:	e766      	b.n	8010c50 <__udivmoddi4+0x1a0>
 8010d82:	4608      	mov	r0, r1
 8010d84:	e6fd      	b.n	8010b82 <__udivmoddi4+0xd2>
 8010d86:	443b      	add	r3, r7
 8010d88:	3a02      	subs	r2, #2
 8010d8a:	e733      	b.n	8010bf4 <__udivmoddi4+0x144>
 8010d8c:	f1ac 0c02 	sub.w	ip, ip, #2
 8010d90:	443b      	add	r3, r7
 8010d92:	e71c      	b.n	8010bce <__udivmoddi4+0x11e>
 8010d94:	4649      	mov	r1, r9
 8010d96:	e79c      	b.n	8010cd2 <__udivmoddi4+0x222>
 8010d98:	eba1 0109 	sub.w	r1, r1, r9
 8010d9c:	46c4      	mov	ip, r8
 8010d9e:	fbb1 f9fe 	udiv	r9, r1, lr
 8010da2:	fb09 f804 	mul.w	r8, r9, r4
 8010da6:	e7c4      	b.n	8010d32 <__udivmoddi4+0x282>

08010da8 <__aeabi_idiv0>:
 8010da8:	4770      	bx	lr
 8010daa:	bf00      	nop

08010dac <__aeabi_d2uiz>:
 8010dac:	004a      	lsls	r2, r1, #1
 8010dae:	d211      	bcs.n	8010dd4 <__aeabi_d2uiz+0x28>
 8010db0:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8010db4:	d211      	bcs.n	8010dda <__aeabi_d2uiz+0x2e>
 8010db6:	d50d      	bpl.n	8010dd4 <__aeabi_d2uiz+0x28>
 8010db8:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8010dbc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8010dc0:	d40e      	bmi.n	8010de0 <__aeabi_d2uiz+0x34>
 8010dc2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8010dc6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8010dca:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8010dce:	fa23 f002 	lsr.w	r0, r3, r2
 8010dd2:	4770      	bx	lr
 8010dd4:	f04f 0000 	mov.w	r0, #0
 8010dd8:	4770      	bx	lr
 8010dda:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8010dde:	d102      	bne.n	8010de6 <__aeabi_d2uiz+0x3a>
 8010de0:	f04f 30ff 	mov.w	r0, #4294967295
 8010de4:	4770      	bx	lr
 8010de6:	f04f 0000 	mov.w	r0, #0
 8010dea:	4770      	bx	lr

08010dec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8010dec:	b580      	push	{r7, lr}
 8010dee:	b082      	sub	sp, #8
 8010df0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8010df2:	f003 fdb9 	bl	8014968 <HAL_Init>

  /* USER CODE BEGIN Init */
  // Initialize SDRAM (used for LCD framebuffer)
  BSP_SDRAM_Init();
 8010df6:	f003 fb01 	bl	80143fc <BSP_SDRAM_Init>

  // Initialize the LCD
  BSP_LCD_Init();
 8010dfa:	f002 fbff 	bl	80135fc <BSP_LCD_Init>
  BSP_TS_Init(LCD_WIDTH, LCD_HEIGHT);
 8010dfe:	f44f 71a0 	mov.w	r1, #320	@ 0x140
 8010e02:	20f0      	movs	r0, #240	@ 0xf0
 8010e04:	f003 fcc4 	bl	8014790 <BSP_TS_Init>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8010e08:	f000 f88c 	bl	8010f24 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8010e0c:	f000 fb26 	bl	801145c <MX_GPIO_Init>
  MX_CRC_Init();
 8010e10:	f000 f8f2 	bl	8010ff8 <MX_CRC_Init>
  MX_DMA2D_Init();
 8010e14:	f000 f904 	bl	8011020 <MX_DMA2D_Init>
  MX_FMC_Init();
 8010e18:	f000 fad0 	bl	80113bc <MX_FMC_Init>
  MX_I2C3_Init();
 8010e1c:	f000 f932 	bl	8011084 <MX_I2C3_Init>
  MX_LTDC_Init();
 8010e20:	f000 f970 	bl	8011104 <MX_LTDC_Init>
  MX_SPI5_Init();
 8010e24:	f000 f9ee 	bl	8011204 <MX_SPI5_Init>
  MX_TIM1_Init();
 8010e28:	f000 fa22 	bl	8011270 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8010e2c:	f000 fa70 	bl	8011310 <MX_USART1_UART_Init>
  MX_USB_OTG_HS_HCD_Init();
 8010e30:	f000 fa98 	bl	8011364 <MX_USB_OTG_HS_HCD_Init>
  MX_X_CUBE_AI_Init();
 8010e34:	f00b fc34 	bl	801c6a0 <MX_X_CUBE_AI_Init>
  /* USER CODE BEGIN 2 */
  DrawBackgroundUI();
 8010e38:	f000 fc20 	bl	801167c <DrawBackgroundUI>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  BSP_TS_GetState(&ts);
 8010e3c:	4834      	ldr	r0, [pc, #208]	@ (8010f10 <main+0x124>)
 8010e3e:	f003 fce1 	bl	8014804 <BSP_TS_GetState>
	  if (ts.TouchDetected) {
 8010e42:	4b33      	ldr	r3, [pc, #204]	@ (8010f10 <main+0x124>)
 8010e44:	881b      	ldrh	r3, [r3, #0]
 8010e46:	2b00      	cmp	r3, #0
 8010e48:	d050      	beq.n	8010eec <main+0x100>
		  uint16_t x = ts.X;
 8010e4a:	4b31      	ldr	r3, [pc, #196]	@ (8010f10 <main+0x124>)
 8010e4c:	885b      	ldrh	r3, [r3, #2]
 8010e4e:	80fb      	strh	r3, [r7, #6]
		  uint16_t y = 320-ts.Y;
 8010e50:	4b2f      	ldr	r3, [pc, #188]	@ (8010f10 <main+0x124>)
 8010e52:	889b      	ldrh	r3, [r3, #4]
 8010e54:	f5c3 73a0 	rsb	r3, r3, #320	@ 0x140
 8010e58:	80bb      	strh	r3, [r7, #4]
		  if (in_clear_button(x, y))
 8010e5a:	88ba      	ldrh	r2, [r7, #4]
 8010e5c:	88fb      	ldrh	r3, [r7, #6]
 8010e5e:	4611      	mov	r1, r2
 8010e60:	4618      	mov	r0, r3
 8010e62:	f000 fcea 	bl	801183a <in_clear_button>
 8010e66:	4603      	mov	r3, r0
 8010e68:	2b00      	cmp	r3, #0
 8010e6a:	d002      	beq.n	8010e72 <main+0x86>
		  {
			  // Request canvas clear
			  clear_canvas();
 8010e6c:	f000 fd5e 	bl	801192c <clear_canvas>
 8010e70:	e036      	b.n	8010ee0 <main+0xf4>
		  }
		  else if (in_run_button(x, y))
 8010e72:	88ba      	ldrh	r2, [r7, #4]
 8010e74:	88fb      	ldrh	r3, [r7, #6]
 8010e76:	4611      	mov	r1, r2
 8010e78:	4618      	mov	r0, r3
 8010e7a:	f000 fd00 	bl	801187e <in_run_button>
 8010e7e:	4603      	mov	r3, r0
 8010e80:	2b00      	cmp	r3, #0
 8010e82:	d004      	beq.n	8010e8e <main+0xa2>
		  {
			  MX_X_CUBE_AI_Process();
 8010e84:	f00b fc1a 	bl	801c6bc <MX_X_CUBE_AI_Process>
			  DisplayResult();
 8010e88:	f000 fe0e 	bl	8011aa8 <DisplayResult>
 8010e8c:	e028      	b.n	8010ee0 <main+0xf4>
		  }
		  else if (in_canvas_area(x, y))
 8010e8e:	88ba      	ldrh	r2, [r7, #4]
 8010e90:	88fb      	ldrh	r3, [r7, #6]
 8010e92:	4611      	mov	r1, r2
 8010e94:	4618      	mov	r0, r3
 8010e96:	f000 fd1a 	bl	80118ce <in_canvas_area>
 8010e9a:	4603      	mov	r3, r0
 8010e9c:	2b00      	cmp	r3, #0
 8010e9e:	d01f      	beq.n	8010ee0 <main+0xf4>
		  {
			  if (firstTouch){
 8010ea0:	4b1c      	ldr	r3, [pc, #112]	@ (8010f14 <main+0x128>)
 8010ea2:	781b      	ldrb	r3, [r3, #0]
 8010ea4:	2b00      	cmp	r3, #0
 8010ea6:	d009      	beq.n	8010ebc <main+0xd0>
				  lastX = x;
 8010ea8:	4a1b      	ldr	r2, [pc, #108]	@ (8010f18 <main+0x12c>)
 8010eaa:	88fb      	ldrh	r3, [r7, #6]
 8010eac:	8013      	strh	r3, [r2, #0]
				  lastY = y;
 8010eae:	4a1b      	ldr	r2, [pc, #108]	@ (8010f1c <main+0x130>)
 8010eb0:	88bb      	ldrh	r3, [r7, #4]
 8010eb2:	8013      	strh	r3, [r2, #0]
				  firstTouch = false;
 8010eb4:	4b17      	ldr	r3, [pc, #92]	@ (8010f14 <main+0x128>)
 8010eb6:	2200      	movs	r2, #0
 8010eb8:	701a      	strb	r2, [r3, #0]
 8010eba:	e011      	b.n	8010ee0 <main+0xf4>
			  }
			  else
			  {
				  BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8010ebc:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
 8010ec0:	f002 fc92 	bl	80137e8 <BSP_LCD_SetTextColor>
				  DrawThickLine(lastX, lastY, x, y);
 8010ec4:	4b14      	ldr	r3, [pc, #80]	@ (8010f18 <main+0x12c>)
 8010ec6:	8818      	ldrh	r0, [r3, #0]
 8010ec8:	4b14      	ldr	r3, [pc, #80]	@ (8010f1c <main+0x130>)
 8010eca:	8819      	ldrh	r1, [r3, #0]
 8010ecc:	88bb      	ldrh	r3, [r7, #4]
 8010ece:	88fa      	ldrh	r2, [r7, #6]
 8010ed0:	f000 fc28 	bl	8011724 <DrawThickLine>
				  lastX = x;
 8010ed4:	4a10      	ldr	r2, [pc, #64]	@ (8010f18 <main+0x12c>)
 8010ed6:	88fb      	ldrh	r3, [r7, #6]
 8010ed8:	8013      	strh	r3, [r2, #0]
				  lastY = y;
 8010eda:	4a10      	ldr	r2, [pc, #64]	@ (8010f1c <main+0x130>)
 8010edc:	88bb      	ldrh	r3, [r7, #4]
 8010ede:	8013      	strh	r3, [r2, #0]
			  }
		  }
		  // Reset the release timer since touch is active
		  touchReleaseTime = HAL_GetTick();
 8010ee0:	f003 fd78 	bl	80149d4 <HAL_GetTick>
 8010ee4:	4603      	mov	r3, r0
 8010ee6:	4a0e      	ldr	r2, [pc, #56]	@ (8010f20 <main+0x134>)
 8010ee8:	6013      	str	r3, [r2, #0]
 8010eea:	e00a      	b.n	8010f02 <main+0x116>
	  }
	  else
	  {
		  // If no touch for > 200ms, reset firstTouch flag
		  if (HAL_GetTick() - touchReleaseTime > 200) {
 8010eec:	f003 fd72 	bl	80149d4 <HAL_GetTick>
 8010ef0:	4602      	mov	r2, r0
 8010ef2:	4b0b      	ldr	r3, [pc, #44]	@ (8010f20 <main+0x134>)
 8010ef4:	681b      	ldr	r3, [r3, #0]
 8010ef6:	1ad3      	subs	r3, r2, r3
 8010ef8:	2bc8      	cmp	r3, #200	@ 0xc8
 8010efa:	d902      	bls.n	8010f02 <main+0x116>
			  firstTouch = true;
 8010efc:	4b05      	ldr	r3, [pc, #20]	@ (8010f14 <main+0x128>)
 8010efe:	2201      	movs	r2, #1
 8010f00:	701a      	strb	r2, [r3, #0]
		  }
	  }

    /* USER CODE END WHILE */

  MX_X_CUBE_AI_Process();
 8010f02:	f00b fbdb 	bl	801c6bc <MX_X_CUBE_AI_Process>
    /* USER CODE BEGIN 3 */
	  HAL_Delay(50);
 8010f06:	2032      	movs	r0, #50	@ 0x32
 8010f08:	f003 fd70 	bl	80149ec <HAL_Delay>
	  BSP_TS_GetState(&ts);
 8010f0c:	e796      	b.n	8010e3c <main+0x50>
 8010f0e:	bf00      	nop
 8010f10:	200019dc 	.word	0x200019dc
 8010f14:	20000000 	.word	0x20000000
 8010f18:	200019e4 	.word	0x200019e4
 8010f1c:	200019e6 	.word	0x200019e6
 8010f20:	200019e8 	.word	0x200019e8

08010f24 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8010f24:	b580      	push	{r7, lr}
 8010f26:	b094      	sub	sp, #80	@ 0x50
 8010f28:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8010f2a:	f107 0320 	add.w	r3, r7, #32
 8010f2e:	2230      	movs	r2, #48	@ 0x30
 8010f30:	2100      	movs	r1, #0
 8010f32:	4618      	mov	r0, r3
 8010f34:	f022 ff12 	bl	8033d5c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8010f38:	f107 030c 	add.w	r3, r7, #12
 8010f3c:	2200      	movs	r2, #0
 8010f3e:	601a      	str	r2, [r3, #0]
 8010f40:	605a      	str	r2, [r3, #4]
 8010f42:	609a      	str	r2, [r3, #8]
 8010f44:	60da      	str	r2, [r3, #12]
 8010f46:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8010f48:	2300      	movs	r3, #0
 8010f4a:	60bb      	str	r3, [r7, #8]
 8010f4c:	4b28      	ldr	r3, [pc, #160]	@ (8010ff0 <SystemClock_Config+0xcc>)
 8010f4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010f50:	4a27      	ldr	r2, [pc, #156]	@ (8010ff0 <SystemClock_Config+0xcc>)
 8010f52:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8010f56:	6413      	str	r3, [r2, #64]	@ 0x40
 8010f58:	4b25      	ldr	r3, [pc, #148]	@ (8010ff0 <SystemClock_Config+0xcc>)
 8010f5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010f5c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8010f60:	60bb      	str	r3, [r7, #8]
 8010f62:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8010f64:	2300      	movs	r3, #0
 8010f66:	607b      	str	r3, [r7, #4]
 8010f68:	4b22      	ldr	r3, [pc, #136]	@ (8010ff4 <SystemClock_Config+0xd0>)
 8010f6a:	681b      	ldr	r3, [r3, #0]
 8010f6c:	4a21      	ldr	r2, [pc, #132]	@ (8010ff4 <SystemClock_Config+0xd0>)
 8010f6e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8010f72:	6013      	str	r3, [r2, #0]
 8010f74:	4b1f      	ldr	r3, [pc, #124]	@ (8010ff4 <SystemClock_Config+0xd0>)
 8010f76:	681b      	ldr	r3, [r3, #0]
 8010f78:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8010f7c:	607b      	str	r3, [r7, #4]
 8010f7e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8010f80:	2301      	movs	r3, #1
 8010f82:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8010f84:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8010f88:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8010f8a:	2302      	movs	r3, #2
 8010f8c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8010f8e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8010f92:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8010f94:	2304      	movs	r3, #4
 8010f96:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8010f98:	23a8      	movs	r3, #168	@ 0xa8
 8010f9a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8010f9c:	2302      	movs	r3, #2
 8010f9e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8010fa0:	2307      	movs	r3, #7
 8010fa2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8010fa4:	f107 0320 	add.w	r3, r7, #32
 8010fa8:	4618      	mov	r0, r3
 8010faa:	f008 f8b5 	bl	8019118 <HAL_RCC_OscConfig>
 8010fae:	4603      	mov	r3, r0
 8010fb0:	2b00      	cmp	r3, #0
 8010fb2:	d001      	beq.n	8010fb8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8010fb4:	f000 fdd4 	bl	8011b60 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8010fb8:	230f      	movs	r3, #15
 8010fba:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8010fbc:	2302      	movs	r3, #2
 8010fbe:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8010fc0:	2300      	movs	r3, #0
 8010fc2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8010fc4:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8010fc8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8010fca:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8010fce:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8010fd0:	f107 030c 	add.w	r3, r7, #12
 8010fd4:	2105      	movs	r1, #5
 8010fd6:	4618      	mov	r0, r3
 8010fd8:	f008 fb16 	bl	8019608 <HAL_RCC_ClockConfig>
 8010fdc:	4603      	mov	r3, r0
 8010fde:	2b00      	cmp	r3, #0
 8010fe0:	d001      	beq.n	8010fe6 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8010fe2:	f000 fdbd 	bl	8011b60 <Error_Handler>
  }
}
 8010fe6:	bf00      	nop
 8010fe8:	3750      	adds	r7, #80	@ 0x50
 8010fea:	46bd      	mov	sp, r7
 8010fec:	bd80      	pop	{r7, pc}
 8010fee:	bf00      	nop
 8010ff0:	40023800 	.word	0x40023800
 8010ff4:	40007000 	.word	0x40007000

08010ff8 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8010ff8:	b580      	push	{r7, lr}
 8010ffa:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8010ffc:	4b06      	ldr	r3, [pc, #24]	@ (8011018 <MX_CRC_Init+0x20>)
 8010ffe:	4a07      	ldr	r2, [pc, #28]	@ (801101c <MX_CRC_Init+0x24>)
 8011000:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8011002:	4805      	ldr	r0, [pc, #20]	@ (8011018 <MX_CRC_Init+0x20>)
 8011004:	f003 fdf8 	bl	8014bf8 <HAL_CRC_Init>
 8011008:	4603      	mov	r3, r0
 801100a:	2b00      	cmp	r3, #0
 801100c:	d001      	beq.n	8011012 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 801100e:	f000 fda7 	bl	8011b60 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8011012:	bf00      	nop
 8011014:	bd80      	pop	{r7, pc}
 8011016:	bf00      	nop
 8011018:	2000139c 	.word	0x2000139c
 801101c:	40023000 	.word	0x40023000

08011020 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 8011020:	b580      	push	{r7, lr}
 8011022:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8011024:	4b15      	ldr	r3, [pc, #84]	@ (801107c <MX_DMA2D_Init+0x5c>)
 8011026:	4a16      	ldr	r2, [pc, #88]	@ (8011080 <MX_DMA2D_Init+0x60>)
 8011028:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 801102a:	4b14      	ldr	r3, [pc, #80]	@ (801107c <MX_DMA2D_Init+0x5c>)
 801102c:	2200      	movs	r2, #0
 801102e:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 8011030:	4b12      	ldr	r3, [pc, #72]	@ (801107c <MX_DMA2D_Init+0x5c>)
 8011032:	2200      	movs	r2, #0
 8011034:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8011036:	4b11      	ldr	r3, [pc, #68]	@ (801107c <MX_DMA2D_Init+0x5c>)
 8011038:	2200      	movs	r2, #0
 801103a:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 801103c:	4b0f      	ldr	r3, [pc, #60]	@ (801107c <MX_DMA2D_Init+0x5c>)
 801103e:	2200      	movs	r2, #0
 8011040:	629a      	str	r2, [r3, #40]	@ 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 8011042:	4b0e      	ldr	r3, [pc, #56]	@ (801107c <MX_DMA2D_Init+0x5c>)
 8011044:	2200      	movs	r2, #0
 8011046:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8011048:	4b0c      	ldr	r3, [pc, #48]	@ (801107c <MX_DMA2D_Init+0x5c>)
 801104a:	2200      	movs	r2, #0
 801104c:	631a      	str	r2, [r3, #48]	@ 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 801104e:	4b0b      	ldr	r3, [pc, #44]	@ (801107c <MX_DMA2D_Init+0x5c>)
 8011050:	2200      	movs	r2, #0
 8011052:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8011054:	4809      	ldr	r0, [pc, #36]	@ (801107c <MX_DMA2D_Init+0x5c>)
 8011056:	f003 ffa9 	bl	8014fac <HAL_DMA2D_Init>
 801105a:	4603      	mov	r3, r0
 801105c:	2b00      	cmp	r3, #0
 801105e:	d001      	beq.n	8011064 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 8011060:	f000 fd7e 	bl	8011b60 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8011064:	2101      	movs	r1, #1
 8011066:	4805      	ldr	r0, [pc, #20]	@ (801107c <MX_DMA2D_Init+0x5c>)
 8011068:	f004 fa0e 	bl	8015488 <HAL_DMA2D_ConfigLayer>
 801106c:	4603      	mov	r3, r0
 801106e:	2b00      	cmp	r3, #0
 8011070:	d001      	beq.n	8011076 <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 8011072:	f000 fd75 	bl	8011b60 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 8011076:	bf00      	nop
 8011078:	bd80      	pop	{r7, pc}
 801107a:	bf00      	nop
 801107c:	200013a4 	.word	0x200013a4
 8011080:	4002b000 	.word	0x4002b000

08011084 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8011084:	b580      	push	{r7, lr}
 8011086:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8011088:	4b1b      	ldr	r3, [pc, #108]	@ (80110f8 <MX_I2C3_Init+0x74>)
 801108a:	4a1c      	ldr	r2, [pc, #112]	@ (80110fc <MX_I2C3_Init+0x78>)
 801108c:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 801108e:	4b1a      	ldr	r3, [pc, #104]	@ (80110f8 <MX_I2C3_Init+0x74>)
 8011090:	4a1b      	ldr	r2, [pc, #108]	@ (8011100 <MX_I2C3_Init+0x7c>)
 8011092:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8011094:	4b18      	ldr	r3, [pc, #96]	@ (80110f8 <MX_I2C3_Init+0x74>)
 8011096:	2200      	movs	r2, #0
 8011098:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 801109a:	4b17      	ldr	r3, [pc, #92]	@ (80110f8 <MX_I2C3_Init+0x74>)
 801109c:	2200      	movs	r2, #0
 801109e:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80110a0:	4b15      	ldr	r3, [pc, #84]	@ (80110f8 <MX_I2C3_Init+0x74>)
 80110a2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80110a6:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80110a8:	4b13      	ldr	r3, [pc, #76]	@ (80110f8 <MX_I2C3_Init+0x74>)
 80110aa:	2200      	movs	r2, #0
 80110ac:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 80110ae:	4b12      	ldr	r3, [pc, #72]	@ (80110f8 <MX_I2C3_Init+0x74>)
 80110b0:	2200      	movs	r2, #0
 80110b2:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80110b4:	4b10      	ldr	r3, [pc, #64]	@ (80110f8 <MX_I2C3_Init+0x74>)
 80110b6:	2200      	movs	r2, #0
 80110b8:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80110ba:	4b0f      	ldr	r3, [pc, #60]	@ (80110f8 <MX_I2C3_Init+0x74>)
 80110bc:	2200      	movs	r2, #0
 80110be:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80110c0:	480d      	ldr	r0, [pc, #52]	@ (80110f8 <MX_I2C3_Init+0x74>)
 80110c2:	f006 fc11 	bl	80178e8 <HAL_I2C_Init>
 80110c6:	4603      	mov	r3, r0
 80110c8:	2b00      	cmp	r3, #0
 80110ca:	d001      	beq.n	80110d0 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 80110cc:	f000 fd48 	bl	8011b60 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80110d0:	2100      	movs	r1, #0
 80110d2:	4809      	ldr	r0, [pc, #36]	@ (80110f8 <MX_I2C3_Init+0x74>)
 80110d4:	f007 fc6a 	bl	80189ac <HAL_I2CEx_ConfigAnalogFilter>
 80110d8:	4603      	mov	r3, r0
 80110da:	2b00      	cmp	r3, #0
 80110dc:	d001      	beq.n	80110e2 <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 80110de:	f000 fd3f 	bl	8011b60 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 80110e2:	2100      	movs	r1, #0
 80110e4:	4804      	ldr	r0, [pc, #16]	@ (80110f8 <MX_I2C3_Init+0x74>)
 80110e6:	f007 fc9d 	bl	8018a24 <HAL_I2CEx_ConfigDigitalFilter>
 80110ea:	4603      	mov	r3, r0
 80110ec:	2b00      	cmp	r3, #0
 80110ee:	d001      	beq.n	80110f4 <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 80110f0:	f000 fd36 	bl	8011b60 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80110f4:	bf00      	nop
 80110f6:	bd80      	pop	{r7, pc}
 80110f8:	200013e4 	.word	0x200013e4
 80110fc:	40005c00 	.word	0x40005c00
 8011100:	000186a0 	.word	0x000186a0

08011104 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8011104:	b580      	push	{r7, lr}
 8011106:	b08e      	sub	sp, #56	@ 0x38
 8011108:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 801110a:	1d3b      	adds	r3, r7, #4
 801110c:	2234      	movs	r2, #52	@ 0x34
 801110e:	2100      	movs	r1, #0
 8011110:	4618      	mov	r0, r3
 8011112:	f022 fe23 	bl	8033d5c <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8011116:	4b39      	ldr	r3, [pc, #228]	@ (80111fc <MX_LTDC_Init+0xf8>)
 8011118:	4a39      	ldr	r2, [pc, #228]	@ (8011200 <MX_LTDC_Init+0xfc>)
 801111a:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 801111c:	4b37      	ldr	r3, [pc, #220]	@ (80111fc <MX_LTDC_Init+0xf8>)
 801111e:	2200      	movs	r2, #0
 8011120:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8011122:	4b36      	ldr	r3, [pc, #216]	@ (80111fc <MX_LTDC_Init+0xf8>)
 8011124:	2200      	movs	r2, #0
 8011126:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8011128:	4b34      	ldr	r3, [pc, #208]	@ (80111fc <MX_LTDC_Init+0xf8>)
 801112a:	2200      	movs	r2, #0
 801112c:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 801112e:	4b33      	ldr	r3, [pc, #204]	@ (80111fc <MX_LTDC_Init+0xf8>)
 8011130:	2200      	movs	r2, #0
 8011132:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 9;
 8011134:	4b31      	ldr	r3, [pc, #196]	@ (80111fc <MX_LTDC_Init+0xf8>)
 8011136:	2209      	movs	r2, #9
 8011138:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 1;
 801113a:	4b30      	ldr	r3, [pc, #192]	@ (80111fc <MX_LTDC_Init+0xf8>)
 801113c:	2201      	movs	r2, #1
 801113e:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 29;
 8011140:	4b2e      	ldr	r3, [pc, #184]	@ (80111fc <MX_LTDC_Init+0xf8>)
 8011142:	221d      	movs	r2, #29
 8011144:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 3;
 8011146:	4b2d      	ldr	r3, [pc, #180]	@ (80111fc <MX_LTDC_Init+0xf8>)
 8011148:	2203      	movs	r2, #3
 801114a:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 269;
 801114c:	4b2b      	ldr	r3, [pc, #172]	@ (80111fc <MX_LTDC_Init+0xf8>)
 801114e:	f240 120d 	movw	r2, #269	@ 0x10d
 8011152:	625a      	str	r2, [r3, #36]	@ 0x24
  hltdc.Init.AccumulatedActiveH = 323;
 8011154:	4b29      	ldr	r3, [pc, #164]	@ (80111fc <MX_LTDC_Init+0xf8>)
 8011156:	f240 1243 	movw	r2, #323	@ 0x143
 801115a:	629a      	str	r2, [r3, #40]	@ 0x28
  hltdc.Init.TotalWidth = 279;
 801115c:	4b27      	ldr	r3, [pc, #156]	@ (80111fc <MX_LTDC_Init+0xf8>)
 801115e:	f240 1217 	movw	r2, #279	@ 0x117
 8011162:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc.Init.TotalHeigh = 327;
 8011164:	4b25      	ldr	r3, [pc, #148]	@ (80111fc <MX_LTDC_Init+0xf8>)
 8011166:	f240 1247 	movw	r2, #327	@ 0x147
 801116a:	631a      	str	r2, [r3, #48]	@ 0x30
  hltdc.Init.Backcolor.Blue = 0;
 801116c:	4b23      	ldr	r3, [pc, #140]	@ (80111fc <MX_LTDC_Init+0xf8>)
 801116e:	2200      	movs	r2, #0
 8011170:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hltdc.Init.Backcolor.Green = 0;
 8011174:	4b21      	ldr	r3, [pc, #132]	@ (80111fc <MX_LTDC_Init+0xf8>)
 8011176:	2200      	movs	r2, #0
 8011178:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  hltdc.Init.Backcolor.Red = 0;
 801117c:	4b1f      	ldr	r3, [pc, #124]	@ (80111fc <MX_LTDC_Init+0xf8>)
 801117e:	2200      	movs	r2, #0
 8011180:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8011184:	481d      	ldr	r0, [pc, #116]	@ (80111fc <MX_LTDC_Init+0xf8>)
 8011186:	f007 fc8c 	bl	8018aa2 <HAL_LTDC_Init>
 801118a:	4603      	mov	r3, r0
 801118c:	2b00      	cmp	r3, #0
 801118e:	d001      	beq.n	8011194 <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 8011190:	f000 fce6 	bl	8011b60 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8011194:	2300      	movs	r3, #0
 8011196:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 240;
 8011198:	23f0      	movs	r3, #240	@ 0xf0
 801119a:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 801119c:	2300      	movs	r3, #0
 801119e:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 320;
 80111a0:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 80111a4:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 80111a6:	2302      	movs	r3, #2
 80111a8:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 80111aa:	23ff      	movs	r3, #255	@ 0xff
 80111ac:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 80111ae:	2300      	movs	r3, #0
 80111b0:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 80111b2:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80111b6:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 80111b8:	2307      	movs	r3, #7
 80111ba:	627b      	str	r3, [r7, #36]	@ 0x24
  pLayerCfg.FBStartAdress = 0xD0000000;
 80111bc:	f04f 4350 	mov.w	r3, #3489660928	@ 0xd0000000
 80111c0:	62bb      	str	r3, [r7, #40]	@ 0x28
  pLayerCfg.ImageWidth = 240;
 80111c2:	23f0      	movs	r3, #240	@ 0xf0
 80111c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  pLayerCfg.ImageHeight = 320;
 80111c6:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 80111ca:	633b      	str	r3, [r7, #48]	@ 0x30
  pLayerCfg.Backcolor.Blue = 0;
 80111cc:	2300      	movs	r3, #0
 80111ce:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
  pLayerCfg.Backcolor.Green = 0;
 80111d2:	2300      	movs	r3, #0
 80111d4:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
  pLayerCfg.Backcolor.Red = 0;
 80111d8:	2300      	movs	r3, #0
 80111da:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 80111de:	1d3b      	adds	r3, r7, #4
 80111e0:	2200      	movs	r2, #0
 80111e2:	4619      	mov	r1, r3
 80111e4:	4805      	ldr	r0, [pc, #20]	@ (80111fc <MX_LTDC_Init+0xf8>)
 80111e6:	f007 fdbb 	bl	8018d60 <HAL_LTDC_ConfigLayer>
 80111ea:	4603      	mov	r3, r0
 80111ec:	2b00      	cmp	r3, #0
 80111ee:	d001      	beq.n	80111f4 <MX_LTDC_Init+0xf0>
  {
    Error_Handler();
 80111f0:	f000 fcb6 	bl	8011b60 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 80111f4:	bf00      	nop
 80111f6:	3738      	adds	r7, #56	@ 0x38
 80111f8:	46bd      	mov	sp, r7
 80111fa:	bd80      	pop	{r7, pc}
 80111fc:	20001438 	.word	0x20001438
 8011200:	40016800 	.word	0x40016800

08011204 <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 8011204:	b580      	push	{r7, lr}
 8011206:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 8011208:	4b17      	ldr	r3, [pc, #92]	@ (8011268 <MX_SPI5_Init+0x64>)
 801120a:	4a18      	ldr	r2, [pc, #96]	@ (801126c <MX_SPI5_Init+0x68>)
 801120c:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 801120e:	4b16      	ldr	r3, [pc, #88]	@ (8011268 <MX_SPI5_Init+0x64>)
 8011210:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8011214:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8011216:	4b14      	ldr	r3, [pc, #80]	@ (8011268 <MX_SPI5_Init+0x64>)
 8011218:	2200      	movs	r2, #0
 801121a:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 801121c:	4b12      	ldr	r3, [pc, #72]	@ (8011268 <MX_SPI5_Init+0x64>)
 801121e:	2200      	movs	r2, #0
 8011220:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8011222:	4b11      	ldr	r3, [pc, #68]	@ (8011268 <MX_SPI5_Init+0x64>)
 8011224:	2200      	movs	r2, #0
 8011226:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8011228:	4b0f      	ldr	r3, [pc, #60]	@ (8011268 <MX_SPI5_Init+0x64>)
 801122a:	2200      	movs	r2, #0
 801122c:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 801122e:	4b0e      	ldr	r3, [pc, #56]	@ (8011268 <MX_SPI5_Init+0x64>)
 8011230:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8011234:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8011236:	4b0c      	ldr	r3, [pc, #48]	@ (8011268 <MX_SPI5_Init+0x64>)
 8011238:	2218      	movs	r2, #24
 801123a:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 801123c:	4b0a      	ldr	r3, [pc, #40]	@ (8011268 <MX_SPI5_Init+0x64>)
 801123e:	2200      	movs	r2, #0
 8011240:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8011242:	4b09      	ldr	r3, [pc, #36]	@ (8011268 <MX_SPI5_Init+0x64>)
 8011244:	2200      	movs	r2, #0
 8011246:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8011248:	4b07      	ldr	r3, [pc, #28]	@ (8011268 <MX_SPI5_Init+0x64>)
 801124a:	2200      	movs	r2, #0
 801124c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi5.Init.CRCPolynomial = 10;
 801124e:	4b06      	ldr	r3, [pc, #24]	@ (8011268 <MX_SPI5_Init+0x64>)
 8011250:	220a      	movs	r2, #10
 8011252:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8011254:	4804      	ldr	r0, [pc, #16]	@ (8011268 <MX_SPI5_Init+0x64>)
 8011256:	f008 fe7a 	bl	8019f4e <HAL_SPI_Init>
 801125a:	4603      	mov	r3, r0
 801125c:	2b00      	cmp	r3, #0
 801125e:	d001      	beq.n	8011264 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 8011260:	f000 fc7e 	bl	8011b60 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8011264:	bf00      	nop
 8011266:	bd80      	pop	{r7, pc}
 8011268:	200014e0 	.word	0x200014e0
 801126c:	40015000 	.word	0x40015000

08011270 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8011270:	b580      	push	{r7, lr}
 8011272:	b086      	sub	sp, #24
 8011274:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8011276:	f107 0308 	add.w	r3, r7, #8
 801127a:	2200      	movs	r2, #0
 801127c:	601a      	str	r2, [r3, #0]
 801127e:	605a      	str	r2, [r3, #4]
 8011280:	609a      	str	r2, [r3, #8]
 8011282:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8011284:	463b      	mov	r3, r7
 8011286:	2200      	movs	r2, #0
 8011288:	601a      	str	r2, [r3, #0]
 801128a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 801128c:	4b1e      	ldr	r3, [pc, #120]	@ (8011308 <MX_TIM1_Init+0x98>)
 801128e:	4a1f      	ldr	r2, [pc, #124]	@ (801130c <MX_TIM1_Init+0x9c>)
 8011290:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8011292:	4b1d      	ldr	r3, [pc, #116]	@ (8011308 <MX_TIM1_Init+0x98>)
 8011294:	2200      	movs	r2, #0
 8011296:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8011298:	4b1b      	ldr	r3, [pc, #108]	@ (8011308 <MX_TIM1_Init+0x98>)
 801129a:	2200      	movs	r2, #0
 801129c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 801129e:	4b1a      	ldr	r3, [pc, #104]	@ (8011308 <MX_TIM1_Init+0x98>)
 80112a0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80112a4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80112a6:	4b18      	ldr	r3, [pc, #96]	@ (8011308 <MX_TIM1_Init+0x98>)
 80112a8:	2200      	movs	r2, #0
 80112aa:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80112ac:	4b16      	ldr	r3, [pc, #88]	@ (8011308 <MX_TIM1_Init+0x98>)
 80112ae:	2200      	movs	r2, #0
 80112b0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80112b2:	4b15      	ldr	r3, [pc, #84]	@ (8011308 <MX_TIM1_Init+0x98>)
 80112b4:	2200      	movs	r2, #0
 80112b6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80112b8:	4813      	ldr	r0, [pc, #76]	@ (8011308 <MX_TIM1_Init+0x98>)
 80112ba:	f009 fc4f 	bl	801ab5c <HAL_TIM_Base_Init>
 80112be:	4603      	mov	r3, r0
 80112c0:	2b00      	cmp	r3, #0
 80112c2:	d001      	beq.n	80112c8 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 80112c4:	f000 fc4c 	bl	8011b60 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80112c8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80112cc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80112ce:	f107 0308 	add.w	r3, r7, #8
 80112d2:	4619      	mov	r1, r3
 80112d4:	480c      	ldr	r0, [pc, #48]	@ (8011308 <MX_TIM1_Init+0x98>)
 80112d6:	f009 fdf1 	bl	801aebc <HAL_TIM_ConfigClockSource>
 80112da:	4603      	mov	r3, r0
 80112dc:	2b00      	cmp	r3, #0
 80112de:	d001      	beq.n	80112e4 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 80112e0:	f000 fc3e 	bl	8011b60 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80112e4:	2300      	movs	r3, #0
 80112e6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80112e8:	2300      	movs	r3, #0
 80112ea:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80112ec:	463b      	mov	r3, r7
 80112ee:	4619      	mov	r1, r3
 80112f0:	4805      	ldr	r0, [pc, #20]	@ (8011308 <MX_TIM1_Init+0x98>)
 80112f2:	f00a f813 	bl	801b31c <HAL_TIMEx_MasterConfigSynchronization>
 80112f6:	4603      	mov	r3, r0
 80112f8:	2b00      	cmp	r3, #0
 80112fa:	d001      	beq.n	8011300 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80112fc:	f000 fc30 	bl	8011b60 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8011300:	bf00      	nop
 8011302:	3718      	adds	r7, #24
 8011304:	46bd      	mov	sp, r7
 8011306:	bd80      	pop	{r7, pc}
 8011308:	20001538 	.word	0x20001538
 801130c:	40010000 	.word	0x40010000

08011310 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8011310:	b580      	push	{r7, lr}
 8011312:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8011314:	4b11      	ldr	r3, [pc, #68]	@ (801135c <MX_USART1_UART_Init+0x4c>)
 8011316:	4a12      	ldr	r2, [pc, #72]	@ (8011360 <MX_USART1_UART_Init+0x50>)
 8011318:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 801131a:	4b10      	ldr	r3, [pc, #64]	@ (801135c <MX_USART1_UART_Init+0x4c>)
 801131c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8011320:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8011322:	4b0e      	ldr	r3, [pc, #56]	@ (801135c <MX_USART1_UART_Init+0x4c>)
 8011324:	2200      	movs	r2, #0
 8011326:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8011328:	4b0c      	ldr	r3, [pc, #48]	@ (801135c <MX_USART1_UART_Init+0x4c>)
 801132a:	2200      	movs	r2, #0
 801132c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 801132e:	4b0b      	ldr	r3, [pc, #44]	@ (801135c <MX_USART1_UART_Init+0x4c>)
 8011330:	2200      	movs	r2, #0
 8011332:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8011334:	4b09      	ldr	r3, [pc, #36]	@ (801135c <MX_USART1_UART_Init+0x4c>)
 8011336:	220c      	movs	r2, #12
 8011338:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 801133a:	4b08      	ldr	r3, [pc, #32]	@ (801135c <MX_USART1_UART_Init+0x4c>)
 801133c:	2200      	movs	r2, #0
 801133e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8011340:	4b06      	ldr	r3, [pc, #24]	@ (801135c <MX_USART1_UART_Init+0x4c>)
 8011342:	2200      	movs	r2, #0
 8011344:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8011346:	4805      	ldr	r0, [pc, #20]	@ (801135c <MX_USART1_UART_Init+0x4c>)
 8011348:	f00a f878 	bl	801b43c <HAL_UART_Init>
 801134c:	4603      	mov	r3, r0
 801134e:	2b00      	cmp	r3, #0
 8011350:	d001      	beq.n	8011356 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8011352:	f000 fc05 	bl	8011b60 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8011356:	bf00      	nop
 8011358:	bd80      	pop	{r7, pc}
 801135a:	bf00      	nop
 801135c:	20001580 	.word	0x20001580
 8011360:	40011000 	.word	0x40011000

08011364 <MX_USB_OTG_HS_HCD_Init>:
  * @brief USB_OTG_HS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_HS_HCD_Init(void)
{
 8011364:	b580      	push	{r7, lr}
 8011366:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 0 */

  /* USER CODE BEGIN USB_OTG_HS_Init 1 */

  /* USER CODE END USB_OTG_HS_Init 1 */
  hhcd_USB_OTG_HS.Instance = USB_OTG_HS;
 8011368:	4b12      	ldr	r3, [pc, #72]	@ (80113b4 <MX_USB_OTG_HS_HCD_Init+0x50>)
 801136a:	4a13      	ldr	r2, [pc, #76]	@ (80113b8 <MX_USB_OTG_HS_HCD_Init+0x54>)
 801136c:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_HS.Init.Host_channels = 12;
 801136e:	4b11      	ldr	r3, [pc, #68]	@ (80113b4 <MX_USB_OTG_HS_HCD_Init+0x50>)
 8011370:	220c      	movs	r2, #12
 8011372:	715a      	strb	r2, [r3, #5]
  hhcd_USB_OTG_HS.Init.speed = HCD_SPEED_FULL;
 8011374:	4b0f      	ldr	r3, [pc, #60]	@ (80113b4 <MX_USB_OTG_HS_HCD_Init+0x50>)
 8011376:	2201      	movs	r2, #1
 8011378:	71da      	strb	r2, [r3, #7]
  hhcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 801137a:	4b0e      	ldr	r3, [pc, #56]	@ (80113b4 <MX_USB_OTG_HS_HCD_Init+0x50>)
 801137c:	2200      	movs	r2, #0
 801137e:	719a      	strb	r2, [r3, #6]
  hhcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 8011380:	4b0c      	ldr	r3, [pc, #48]	@ (80113b4 <MX_USB_OTG_HS_HCD_Init+0x50>)
 8011382:	2202      	movs	r2, #2
 8011384:	725a      	strb	r2, [r3, #9]
  hhcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 8011386:	4b0b      	ldr	r3, [pc, #44]	@ (80113b4 <MX_USB_OTG_HS_HCD_Init+0x50>)
 8011388:	2200      	movs	r2, #0
 801138a:	729a      	strb	r2, [r3, #10]
  hhcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 801138c:	4b09      	ldr	r3, [pc, #36]	@ (80113b4 <MX_USB_OTG_HS_HCD_Init+0x50>)
 801138e:	2200      	movs	r2, #0
 8011390:	72da      	strb	r2, [r3, #11]
  hhcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 8011392:	4b08      	ldr	r3, [pc, #32]	@ (80113b4 <MX_USB_OTG_HS_HCD_Init+0x50>)
 8011394:	2200      	movs	r2, #0
 8011396:	739a      	strb	r2, [r3, #14]
  hhcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 8011398:	4b06      	ldr	r3, [pc, #24]	@ (80113b4 <MX_USB_OTG_HS_HCD_Init+0x50>)
 801139a:	2200      	movs	r2, #0
 801139c:	741a      	strb	r2, [r3, #16]
  if (HAL_HCD_Init(&hhcd_USB_OTG_HS) != HAL_OK)
 801139e:	4805      	ldr	r0, [pc, #20]	@ (80113b4 <MX_USB_OTG_HS_HCD_Init+0x50>)
 80113a0:	f004 fc71 	bl	8015c86 <HAL_HCD_Init>
 80113a4:	4603      	mov	r3, r0
 80113a6:	2b00      	cmp	r3, #0
 80113a8:	d001      	beq.n	80113ae <MX_USB_OTG_HS_HCD_Init+0x4a>
  {
    Error_Handler();
 80113aa:	f000 fbd9 	bl	8011b60 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 80113ae:	bf00      	nop
 80113b0:	bd80      	pop	{r7, pc}
 80113b2:	bf00      	nop
 80113b4:	200015c8 	.word	0x200015c8
 80113b8:	40040000 	.word	0x40040000

080113bc <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 80113bc:	b580      	push	{r7, lr}
 80113be:	b088      	sub	sp, #32
 80113c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 80113c2:	1d3b      	adds	r3, r7, #4
 80113c4:	2200      	movs	r2, #0
 80113c6:	601a      	str	r2, [r3, #0]
 80113c8:	605a      	str	r2, [r3, #4]
 80113ca:	609a      	str	r2, [r3, #8]
 80113cc:	60da      	str	r2, [r3, #12]
 80113ce:	611a      	str	r2, [r3, #16]
 80113d0:	615a      	str	r2, [r3, #20]
 80113d2:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 80113d4:	4b1f      	ldr	r3, [pc, #124]	@ (8011454 <MX_FMC_Init+0x98>)
 80113d6:	4a20      	ldr	r2, [pc, #128]	@ (8011458 <MX_FMC_Init+0x9c>)
 80113d8:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 80113da:	4b1e      	ldr	r3, [pc, #120]	@ (8011454 <MX_FMC_Init+0x98>)
 80113dc:	2201      	movs	r2, #1
 80113de:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 80113e0:	4b1c      	ldr	r3, [pc, #112]	@ (8011454 <MX_FMC_Init+0x98>)
 80113e2:	2200      	movs	r2, #0
 80113e4:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 80113e6:	4b1b      	ldr	r3, [pc, #108]	@ (8011454 <MX_FMC_Init+0x98>)
 80113e8:	2204      	movs	r2, #4
 80113ea:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 80113ec:	4b19      	ldr	r3, [pc, #100]	@ (8011454 <MX_FMC_Init+0x98>)
 80113ee:	2210      	movs	r2, #16
 80113f0:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 80113f2:	4b18      	ldr	r3, [pc, #96]	@ (8011454 <MX_FMC_Init+0x98>)
 80113f4:	2240      	movs	r2, #64	@ 0x40
 80113f6:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 80113f8:	4b16      	ldr	r3, [pc, #88]	@ (8011454 <MX_FMC_Init+0x98>)
 80113fa:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 80113fe:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8011400:	4b14      	ldr	r3, [pc, #80]	@ (8011454 <MX_FMC_Init+0x98>)
 8011402:	2200      	movs	r2, #0
 8011404:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8011406:	4b13      	ldr	r3, [pc, #76]	@ (8011454 <MX_FMC_Init+0x98>)
 8011408:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 801140c:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 801140e:	4b11      	ldr	r3, [pc, #68]	@ (8011454 <MX_FMC_Init+0x98>)
 8011410:	2200      	movs	r2, #0
 8011412:	625a      	str	r2, [r3, #36]	@ 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_1;
 8011414:	4b0f      	ldr	r3, [pc, #60]	@ (8011454 <MX_FMC_Init+0x98>)
 8011416:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 801141a:	629a      	str	r2, [r3, #40]	@ 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 801141c:	2302      	movs	r3, #2
 801141e:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8011420:	2307      	movs	r3, #7
 8011422:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 8011424:	2304      	movs	r3, #4
 8011426:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 8011428:	2307      	movs	r3, #7
 801142a:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 801142c:	2303      	movs	r3, #3
 801142e:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 8011430:	2302      	movs	r3, #2
 8011432:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 8011434:	2302      	movs	r3, #2
 8011436:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8011438:	1d3b      	adds	r3, r7, #4
 801143a:	4619      	mov	r1, r3
 801143c:	4805      	ldr	r0, [pc, #20]	@ (8011454 <MX_FMC_Init+0x98>)
 801143e:	f008 fcf5 	bl	8019e2c <HAL_SDRAM_Init>
 8011442:	4603      	mov	r3, r0
 8011444:	2b00      	cmp	r3, #0
 8011446:	d001      	beq.n	801144c <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 8011448:	f000 fb8a 	bl	8011b60 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 801144c:	bf00      	nop
 801144e:	3720      	adds	r7, #32
 8011450:	46bd      	mov	sp, r7
 8011452:	bd80      	pop	{r7, pc}
 8011454:	200019a8 	.word	0x200019a8
 8011458:	a0000140 	.word	0xa0000140

0801145c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 801145c:	b580      	push	{r7, lr}
 801145e:	b08e      	sub	sp, #56	@ 0x38
 8011460:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8011462:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8011466:	2200      	movs	r2, #0
 8011468:	601a      	str	r2, [r3, #0]
 801146a:	605a      	str	r2, [r3, #4]
 801146c:	609a      	str	r2, [r3, #8]
 801146e:	60da      	str	r2, [r3, #12]
 8011470:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8011472:	2300      	movs	r3, #0
 8011474:	623b      	str	r3, [r7, #32]
 8011476:	4b7b      	ldr	r3, [pc, #492]	@ (8011664 <MX_GPIO_Init+0x208>)
 8011478:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801147a:	4a7a      	ldr	r2, [pc, #488]	@ (8011664 <MX_GPIO_Init+0x208>)
 801147c:	f043 0304 	orr.w	r3, r3, #4
 8011480:	6313      	str	r3, [r2, #48]	@ 0x30
 8011482:	4b78      	ldr	r3, [pc, #480]	@ (8011664 <MX_GPIO_Init+0x208>)
 8011484:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011486:	f003 0304 	and.w	r3, r3, #4
 801148a:	623b      	str	r3, [r7, #32]
 801148c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 801148e:	2300      	movs	r3, #0
 8011490:	61fb      	str	r3, [r7, #28]
 8011492:	4b74      	ldr	r3, [pc, #464]	@ (8011664 <MX_GPIO_Init+0x208>)
 8011494:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011496:	4a73      	ldr	r2, [pc, #460]	@ (8011664 <MX_GPIO_Init+0x208>)
 8011498:	f043 0320 	orr.w	r3, r3, #32
 801149c:	6313      	str	r3, [r2, #48]	@ 0x30
 801149e:	4b71      	ldr	r3, [pc, #452]	@ (8011664 <MX_GPIO_Init+0x208>)
 80114a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80114a2:	f003 0320 	and.w	r3, r3, #32
 80114a6:	61fb      	str	r3, [r7, #28]
 80114a8:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80114aa:	2300      	movs	r3, #0
 80114ac:	61bb      	str	r3, [r7, #24]
 80114ae:	4b6d      	ldr	r3, [pc, #436]	@ (8011664 <MX_GPIO_Init+0x208>)
 80114b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80114b2:	4a6c      	ldr	r2, [pc, #432]	@ (8011664 <MX_GPIO_Init+0x208>)
 80114b4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80114b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80114ba:	4b6a      	ldr	r3, [pc, #424]	@ (8011664 <MX_GPIO_Init+0x208>)
 80114bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80114be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80114c2:	61bb      	str	r3, [r7, #24]
 80114c4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80114c6:	2300      	movs	r3, #0
 80114c8:	617b      	str	r3, [r7, #20]
 80114ca:	4b66      	ldr	r3, [pc, #408]	@ (8011664 <MX_GPIO_Init+0x208>)
 80114cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80114ce:	4a65      	ldr	r2, [pc, #404]	@ (8011664 <MX_GPIO_Init+0x208>)
 80114d0:	f043 0301 	orr.w	r3, r3, #1
 80114d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80114d6:	4b63      	ldr	r3, [pc, #396]	@ (8011664 <MX_GPIO_Init+0x208>)
 80114d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80114da:	f003 0301 	and.w	r3, r3, #1
 80114de:	617b      	str	r3, [r7, #20]
 80114e0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80114e2:	2300      	movs	r3, #0
 80114e4:	613b      	str	r3, [r7, #16]
 80114e6:	4b5f      	ldr	r3, [pc, #380]	@ (8011664 <MX_GPIO_Init+0x208>)
 80114e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80114ea:	4a5e      	ldr	r2, [pc, #376]	@ (8011664 <MX_GPIO_Init+0x208>)
 80114ec:	f043 0302 	orr.w	r3, r3, #2
 80114f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80114f2:	4b5c      	ldr	r3, [pc, #368]	@ (8011664 <MX_GPIO_Init+0x208>)
 80114f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80114f6:	f003 0302 	and.w	r3, r3, #2
 80114fa:	613b      	str	r3, [r7, #16]
 80114fc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80114fe:	2300      	movs	r3, #0
 8011500:	60fb      	str	r3, [r7, #12]
 8011502:	4b58      	ldr	r3, [pc, #352]	@ (8011664 <MX_GPIO_Init+0x208>)
 8011504:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011506:	4a57      	ldr	r2, [pc, #348]	@ (8011664 <MX_GPIO_Init+0x208>)
 8011508:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801150c:	6313      	str	r3, [r2, #48]	@ 0x30
 801150e:	4b55      	ldr	r3, [pc, #340]	@ (8011664 <MX_GPIO_Init+0x208>)
 8011510:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011512:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8011516:	60fb      	str	r3, [r7, #12]
 8011518:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 801151a:	2300      	movs	r3, #0
 801151c:	60bb      	str	r3, [r7, #8]
 801151e:	4b51      	ldr	r3, [pc, #324]	@ (8011664 <MX_GPIO_Init+0x208>)
 8011520:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011522:	4a50      	ldr	r2, [pc, #320]	@ (8011664 <MX_GPIO_Init+0x208>)
 8011524:	f043 0310 	orr.w	r3, r3, #16
 8011528:	6313      	str	r3, [r2, #48]	@ 0x30
 801152a:	4b4e      	ldr	r3, [pc, #312]	@ (8011664 <MX_GPIO_Init+0x208>)
 801152c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801152e:	f003 0310 	and.w	r3, r3, #16
 8011532:	60bb      	str	r3, [r7, #8]
 8011534:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8011536:	2300      	movs	r3, #0
 8011538:	607b      	str	r3, [r7, #4]
 801153a:	4b4a      	ldr	r3, [pc, #296]	@ (8011664 <MX_GPIO_Init+0x208>)
 801153c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801153e:	4a49      	ldr	r2, [pc, #292]	@ (8011664 <MX_GPIO_Init+0x208>)
 8011540:	f043 0308 	orr.w	r3, r3, #8
 8011544:	6313      	str	r3, [r2, #48]	@ 0x30
 8011546:	4b47      	ldr	r3, [pc, #284]	@ (8011664 <MX_GPIO_Init+0x208>)
 8011548:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801154a:	f003 0308 	and.w	r3, r3, #8
 801154e:	607b      	str	r3, [r7, #4]
 8011550:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 8011552:	2200      	movs	r2, #0
 8011554:	2116      	movs	r1, #22
 8011556:	4844      	ldr	r0, [pc, #272]	@ (8011668 <MX_GPIO_Init+0x20c>)
 8011558:	f004 fb7c 	bl	8015c54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 801155c:	2200      	movs	r2, #0
 801155e:	2180      	movs	r1, #128	@ 0x80
 8011560:	4842      	ldr	r0, [pc, #264]	@ (801166c <MX_GPIO_Init+0x210>)
 8011562:	f004 fb77 	bl	8015c54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 8011566:	2200      	movs	r2, #0
 8011568:	f44f 5140 	mov.w	r1, #12288	@ 0x3000
 801156c:	4840      	ldr	r0, [pc, #256]	@ (8011670 <MX_GPIO_Init+0x214>)
 801156e:	f004 fb71 	bl	8015c54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 8011572:	2200      	movs	r2, #0
 8011574:	f44f 41c0 	mov.w	r1, #24576	@ 0x6000
 8011578:	483e      	ldr	r0, [pc, #248]	@ (8011674 <MX_GPIO_Init+0x218>)
 801157a:	f004 fb6b 	bl	8015c54 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : NCS_MEMS_SPI_Pin CSX_Pin OTG_FS_PSO_Pin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 801157e:	2316      	movs	r3, #22
 8011580:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8011582:	2301      	movs	r3, #1
 8011584:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011586:	2300      	movs	r3, #0
 8011588:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801158a:	2300      	movs	r3, #0
 801158c:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 801158e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8011592:	4619      	mov	r1, r3
 8011594:	4834      	ldr	r0, [pc, #208]	@ (8011668 <MX_GPIO_Init+0x20c>)
 8011596:	f004 f8a5 	bl	80156e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : B1_Pin MEMS_INT1_Pin MEMS_INT2_Pin TP_INT1_Pin */
  GPIO_InitStruct.Pin = B1_Pin|MEMS_INT1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
 801159a:	f248 0307 	movw	r3, #32775	@ 0x8007
 801159e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80115a0:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 80115a4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80115a6:	2300      	movs	r3, #0
 80115a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80115aa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80115ae:	4619      	mov	r1, r3
 80115b0:	482e      	ldr	r0, [pc, #184]	@ (801166c <MX_GPIO_Init+0x210>)
 80115b2:	f004 f897 	bl	80156e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : ACP_RST_Pin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 80115b6:	2380      	movs	r3, #128	@ 0x80
 80115b8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80115ba:	2301      	movs	r3, #1
 80115bc:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80115be:	2300      	movs	r3, #0
 80115c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80115c2:	2300      	movs	r3, #0
 80115c4:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 80115c6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80115ca:	4619      	mov	r1, r3
 80115cc:	4827      	ldr	r0, [pc, #156]	@ (801166c <MX_GPIO_Init+0x210>)
 80115ce:	f004 f889 	bl	80156e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OC_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 80115d2:	2320      	movs	r3, #32
 80115d4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80115d6:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 80115da:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80115dc:	2300      	movs	r3, #0
 80115de:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 80115e0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80115e4:	4619      	mov	r1, r3
 80115e6:	4820      	ldr	r0, [pc, #128]	@ (8011668 <MX_GPIO_Init+0x20c>)
 80115e8:	f004 f87c 	bl	80156e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80115ec:	2304      	movs	r3, #4
 80115ee:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80115f0:	2300      	movs	r3, #0
 80115f2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80115f4:	2300      	movs	r3, #0
 80115f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80115f8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80115fc:	4619      	mov	r1, r3
 80115fe:	481e      	ldr	r0, [pc, #120]	@ (8011678 <MX_GPIO_Init+0x21c>)
 8011600:	f004 f870 	bl	80156e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : TE_Pin */
  GPIO_InitStruct.Pin = TE_Pin;
 8011604:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8011608:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 801160a:	2300      	movs	r3, #0
 801160c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 801160e:	2300      	movs	r3, #0
 8011610:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 8011612:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8011616:	4619      	mov	r1, r3
 8011618:	4815      	ldr	r0, [pc, #84]	@ (8011670 <MX_GPIO_Init+0x214>)
 801161a:	f004 f863 	bl	80156e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : RDX_Pin WRX_DCX_Pin */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 801161e:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8011622:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8011624:	2301      	movs	r3, #1
 8011626:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011628:	2300      	movs	r3, #0
 801162a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801162c:	2300      	movs	r3, #0
 801162e:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8011630:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8011634:	4619      	mov	r1, r3
 8011636:	480e      	ldr	r0, [pc, #56]	@ (8011670 <MX_GPIO_Init+0x214>)
 8011638:	f004 f854 	bl	80156e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD4_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 801163c:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8011640:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8011642:	2301      	movs	r3, #1
 8011644:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011646:	2300      	movs	r3, #0
 8011648:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801164a:	2300      	movs	r3, #0
 801164c:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 801164e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8011652:	4619      	mov	r1, r3
 8011654:	4807      	ldr	r0, [pc, #28]	@ (8011674 <MX_GPIO_Init+0x218>)
 8011656:	f004 f845 	bl	80156e4 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 801165a:	bf00      	nop
 801165c:	3738      	adds	r7, #56	@ 0x38
 801165e:	46bd      	mov	sp, r7
 8011660:	bd80      	pop	{r7, pc}
 8011662:	bf00      	nop
 8011664:	40023800 	.word	0x40023800
 8011668:	40020800 	.word	0x40020800
 801166c:	40020000 	.word	0x40020000
 8011670:	40020c00 	.word	0x40020c00
 8011674:	40021800 	.word	0x40021800
 8011678:	40020400 	.word	0x40020400

0801167c <DrawBackgroundUI>:

/* USER CODE BEGIN 4 */
void DrawBackgroundUI(void)
{
 801167c:	b580      	push	{r7, lr}
 801167e:	af00      	add	r7, sp, #0
	// Init background layer (canvas + UI)
	BSP_LCD_LayerDefaultInit(0, LCD_FRAME_BUFFER);
 8011680:	f04f 4150 	mov.w	r1, #3489660928	@ 0xd0000000
 8011684:	2000      	movs	r0, #0
 8011686:	f002 f83b 	bl	8013700 <BSP_LCD_LayerDefaultInit>
	BSP_LCD_SelectLayer(0);
 801168a:	2000      	movs	r0, #0
 801168c:	f002 f89c 	bl	80137c8 <BSP_LCD_SelectLayer>
	BSP_LCD_DisplayOn();
 8011690:	f002 fcb6 	bl	8014000 <BSP_LCD_DisplayOn>
	BSP_LCD_Clear(LCD_COLOR_WHITE);
 8011694:	f04f 30ff 	mov.w	r0, #4294967295
 8011698:	f002 f8f2 	bl	8013880 <BSP_LCD_Clear>
    // ----------------------------
    // Draw Canvas Bounding Box
    // ----------------------------
    BSP_LCD_SetTextColor(LCD_COLOR_ORANGE);
 801169c:	481d      	ldr	r0, [pc, #116]	@ (8011714 <DrawBackgroundUI+0x98>)
 801169e:	f002 f8a3 	bl	80137e8 <BSP_LCD_SetTextColor>
    BSP_LCD_DrawRect(CANVAS_X-1, CANVAS_Y-1, CANVAS_SIZE+2, CANVAS_SIZE+2);
 80116a2:	23e2      	movs	r3, #226	@ 0xe2
 80116a4:	22e2      	movs	r2, #226	@ 0xe2
 80116a6:	2107      	movs	r1, #7
 80116a8:	2007      	movs	r0, #7
 80116aa:	f002 fa93 	bl	8013bd4 <BSP_LCD_DrawRect>

    // ----------------------------
    // Draw Clear Button
    // ----------------------------
    BSP_LCD_SetTextColor(LCD_COLOR_LIGHTGRAY);
 80116ae:	481a      	ldr	r0, [pc, #104]	@ (8011718 <DrawBackgroundUI+0x9c>)
 80116b0:	f002 f89a 	bl	80137e8 <BSP_LCD_SetTextColor>
    BSP_LCD_FillRect(8, BUTTON_Y, BUTTON_WIDTH, BUTTON_HEIGHT);
 80116b4:	231e      	movs	r3, #30
 80116b6:	2264      	movs	r2, #100	@ 0x64
 80116b8:	f44f 718c 	mov.w	r1, #280	@ 0x118
 80116bc:	2008      	movs	r0, #8
 80116be:	f002 fba5 	bl	8013e0c <BSP_LCD_FillRect>
    BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 80116c2:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
 80116c6:	f002 f88f 	bl	80137e8 <BSP_LCD_SetTextColor>
    BSP_LCD_SetBackColor(LCD_COLOR_LIGHTGRAY);
 80116ca:	4813      	ldr	r0, [pc, #76]	@ (8011718 <DrawBackgroundUI+0x9c>)
 80116cc:	f002 f8a4 	bl	8013818 <BSP_LCD_SetBackColor>
    BSP_LCD_DisplayStringAt(16, BUTTON_Y + 4, (uint8_t *)"Clear", LEFT_MODE);
 80116d0:	2303      	movs	r3, #3
 80116d2:	4a12      	ldr	r2, [pc, #72]	@ (801171c <DrawBackgroundUI+0xa0>)
 80116d4:	f44f 718e 	mov.w	r1, #284	@ 0x11c
 80116d8:	2010      	movs	r0, #16
 80116da:	f002 f93d 	bl	8013958 <BSP_LCD_DisplayStringAt>

    // ----------------------------
    // Draw Predict Button
    // ----------------------------
    BSP_LCD_SetTextColor(LCD_COLOR_LIGHTGRAY);
 80116de:	480e      	ldr	r0, [pc, #56]	@ (8011718 <DrawBackgroundUI+0x9c>)
 80116e0:	f002 f882 	bl	80137e8 <BSP_LCD_SetTextColor>
    BSP_LCD_FillRect(LCD_WIDTH - BUTTON_WIDTH-8, BUTTON_Y, BUTTON_WIDTH, BUTTON_HEIGHT);
 80116e4:	231e      	movs	r3, #30
 80116e6:	2264      	movs	r2, #100	@ 0x64
 80116e8:	f44f 718c 	mov.w	r1, #280	@ 0x118
 80116ec:	2084      	movs	r0, #132	@ 0x84
 80116ee:	f002 fb8d 	bl	8013e0c <BSP_LCD_FillRect>
    BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 80116f2:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
 80116f6:	f002 f877 	bl	80137e8 <BSP_LCD_SetTextColor>
    BSP_LCD_SetBackColor(LCD_COLOR_LIGHTGRAY);
 80116fa:	4807      	ldr	r0, [pc, #28]	@ (8011718 <DrawBackgroundUI+0x9c>)
 80116fc:	f002 f88c 	bl	8013818 <BSP_LCD_SetBackColor>
    BSP_LCD_DisplayStringAt(LCD_WIDTH - BUTTON_WIDTH+16, BUTTON_Y + 4, (uint8_t *)"Run", LEFT_MODE);
 8011700:	2303      	movs	r3, #3
 8011702:	4a07      	ldr	r2, [pc, #28]	@ (8011720 <DrawBackgroundUI+0xa4>)
 8011704:	f44f 718e 	mov.w	r1, #284	@ 0x11c
 8011708:	209c      	movs	r0, #156	@ 0x9c
 801170a:	f002 f925 	bl	8013958 <BSP_LCD_DisplayStringAt>
}
 801170e:	bf00      	nop
 8011710:	bd80      	pop	{r7, pc}
 8011712:	bf00      	nop
 8011714:	ffffa500 	.word	0xffffa500
 8011718:	ffd3d3d3 	.word	0xffd3d3d3
 801171c:	080363c0 	.word	0x080363c0
 8011720:	080363c8 	.word	0x080363c8

08011724 <DrawThickLine>:

void DrawThickLine(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1)
{
 8011724:	b590      	push	{r4, r7, lr}
 8011726:	b08d      	sub	sp, #52	@ 0x34
 8011728:	af00      	add	r7, sp, #0
 801172a:	4604      	mov	r4, r0
 801172c:	4608      	mov	r0, r1
 801172e:	4611      	mov	r1, r2
 8011730:	461a      	mov	r2, r3
 8011732:	4623      	mov	r3, r4
 8011734:	80fb      	strh	r3, [r7, #6]
 8011736:	4603      	mov	r3, r0
 8011738:	80bb      	strh	r3, [r7, #4]
 801173a:	460b      	mov	r3, r1
 801173c:	807b      	strh	r3, [r7, #2]
 801173e:	4613      	mov	r3, r2
 8011740:	803b      	strh	r3, [r7, #0]
	uint16_t thickness = THICKNESS;
 8011742:	230c      	movs	r3, #12
 8011744:	857b      	strh	r3, [r7, #42]	@ 0x2a
    const float dx = x1 - x0;
 8011746:	887a      	ldrh	r2, [r7, #2]
 8011748:	88fb      	ldrh	r3, [r7, #6]
 801174a:	1ad3      	subs	r3, r2, r3
 801174c:	ee07 3a90 	vmov	s15, r3
 8011750:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8011754:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
    const float dy = y1 - y0;
 8011758:	883a      	ldrh	r2, [r7, #0]
 801175a:	88bb      	ldrh	r3, [r7, #4]
 801175c:	1ad3      	subs	r3, r2, r3
 801175e:	ee07 3a90 	vmov	s15, r3
 8011762:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8011766:	edc7 7a08 	vstr	s15, [r7, #32]
    const float distance = sqrtf(dx * dx + dy * dy);
 801176a:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 801176e:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8011772:	edd7 7a08 	vldr	s15, [r7, #32]
 8011776:	ee67 7aa7 	vmul.f32	s15, s15, s15
 801177a:	ee77 7a27 	vadd.f32	s15, s14, s15
 801177e:	eeb0 0a67 	vmov.f32	s0, s15
 8011782:	f024 fa7f 	bl	8035c84 <sqrtf>
 8011786:	ed87 0a07 	vstr	s0, [r7, #28]

    const float steps = distance;
 801178a:	69fb      	ldr	r3, [r7, #28]
 801178c:	61bb      	str	r3, [r7, #24]
    const float stepX = dx / steps;
 801178e:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8011792:	ed97 7a06 	vldr	s14, [r7, #24]
 8011796:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801179a:	edc7 7a05 	vstr	s15, [r7, #20]
    const float stepY = dy / steps;
 801179e:	edd7 6a08 	vldr	s13, [r7, #32]
 80117a2:	ed97 7a06 	vldr	s14, [r7, #24]
 80117a6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80117aa:	edc7 7a04 	vstr	s15, [r7, #16]

    for (int i = 0; i < (int)steps; ++i) {
 80117ae:	2300      	movs	r3, #0
 80117b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80117b2:	e034      	b.n	801181e <DrawThickLine+0xfa>
        uint16_t x = x0 + i * stepX;
 80117b4:	88fb      	ldrh	r3, [r7, #6]
 80117b6:	ee07 3a90 	vmov	s15, r3
 80117ba:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80117be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80117c0:	ee07 3a90 	vmov	s15, r3
 80117c4:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80117c8:	edd7 7a05 	vldr	s15, [r7, #20]
 80117cc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80117d0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80117d4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80117d8:	ee17 3a90 	vmov	r3, s15
 80117dc:	81fb      	strh	r3, [r7, #14]
        uint16_t y = y0 + i * stepY;
 80117de:	88bb      	ldrh	r3, [r7, #4]
 80117e0:	ee07 3a90 	vmov	s15, r3
 80117e4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80117e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80117ea:	ee07 3a90 	vmov	s15, r3
 80117ee:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80117f2:	edd7 7a04 	vldr	s15, [r7, #16]
 80117f6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80117fa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80117fe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8011802:	ee17 3a90 	vmov	r3, s15
 8011806:	81bb      	strh	r3, [r7, #12]
        BSP_LCD_FillCircle(x, y, thickness / 2);
 8011808:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 801180a:	085b      	lsrs	r3, r3, #1
 801180c:	b29a      	uxth	r2, r3
 801180e:	89b9      	ldrh	r1, [r7, #12]
 8011810:	89fb      	ldrh	r3, [r7, #14]
 8011812:	4618      	mov	r0, r3
 8011814:	f002 fb54 	bl	8013ec0 <BSP_LCD_FillCircle>
    for (int i = 0; i < (int)steps; ++i) {
 8011818:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801181a:	3301      	adds	r3, #1
 801181c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801181e:	edd7 7a06 	vldr	s15, [r7, #24]
 8011822:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8011826:	ee17 2a90 	vmov	r2, s15
 801182a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801182c:	4293      	cmp	r3, r2
 801182e:	dbc1      	blt.n	80117b4 <DrawThickLine+0x90>
    }
}
 8011830:	bf00      	nop
 8011832:	bf00      	nop
 8011834:	3734      	adds	r7, #52	@ 0x34
 8011836:	46bd      	mov	sp, r7
 8011838:	bd90      	pop	{r4, r7, pc}

0801183a <in_clear_button>:

bool in_clear_button(uint16_t x, uint16_t y)
{
 801183a:	b480      	push	{r7}
 801183c:	b083      	sub	sp, #12
 801183e:	af00      	add	r7, sp, #0
 8011840:	4603      	mov	r3, r0
 8011842:	460a      	mov	r2, r1
 8011844:	80fb      	strh	r3, [r7, #6]
 8011846:	4613      	mov	r3, r2
 8011848:	80bb      	strh	r3, [r7, #4]
    return (
        x >= 8 &&
        x < (8 + BUTTON_WIDTH) &&
        y >= BUTTON_Y &&
 801184a:	88fb      	ldrh	r3, [r7, #6]
 801184c:	2b07      	cmp	r3, #7
 801184e:	d90c      	bls.n	801186a <in_clear_button+0x30>
        x >= 8 &&
 8011850:	88fb      	ldrh	r3, [r7, #6]
 8011852:	2b6b      	cmp	r3, #107	@ 0x6b
 8011854:	d809      	bhi.n	801186a <in_clear_button+0x30>
        x < (8 + BUTTON_WIDTH) &&
 8011856:	88bb      	ldrh	r3, [r7, #4]
 8011858:	f5b3 7f8c 	cmp.w	r3, #280	@ 0x118
 801185c:	d305      	bcc.n	801186a <in_clear_button+0x30>
        y >= BUTTON_Y &&
 801185e:	88bb      	ldrh	r3, [r7, #4]
 8011860:	f5b3 7f9b 	cmp.w	r3, #310	@ 0x136
 8011864:	d201      	bcs.n	801186a <in_clear_button+0x30>
 8011866:	2301      	movs	r3, #1
 8011868:	e000      	b.n	801186c <in_clear_button+0x32>
 801186a:	2300      	movs	r3, #0
 801186c:	f003 0301 	and.w	r3, r3, #1
 8011870:	b2db      	uxtb	r3, r3
        y < (BUTTON_Y + BUTTON_HEIGHT)
    );
}
 8011872:	4618      	mov	r0, r3
 8011874:	370c      	adds	r7, #12
 8011876:	46bd      	mov	sp, r7
 8011878:	f85d 7b04 	ldr.w	r7, [sp], #4
 801187c:	4770      	bx	lr

0801187e <in_run_button>:

bool in_run_button(uint16_t x, uint16_t y)
{
 801187e:	b480      	push	{r7}
 8011880:	b085      	sub	sp, #20
 8011882:	af00      	add	r7, sp, #0
 8011884:	4603      	mov	r3, r0
 8011886:	460a      	mov	r2, r1
 8011888:	80fb      	strh	r3, [r7, #6]
 801188a:	4613      	mov	r3, r2
 801188c:	80bb      	strh	r3, [r7, #4]
    uint16_t buttonX = LCD_WIDTH - BUTTON_WIDTH - 8;
 801188e:	2384      	movs	r3, #132	@ 0x84
 8011890:	81fb      	strh	r3, [r7, #14]
    return (
        x >= buttonX &&
        x < (buttonX + BUTTON_WIDTH) &&
        y >= BUTTON_Y &&
 8011892:	88fa      	ldrh	r2, [r7, #6]
 8011894:	89fb      	ldrh	r3, [r7, #14]
 8011896:	429a      	cmp	r2, r3
 8011898:	d30f      	bcc.n	80118ba <in_run_button+0x3c>
        x < (buttonX + BUTTON_WIDTH) &&
 801189a:	89fb      	ldrh	r3, [r7, #14]
 801189c:	f103 0263 	add.w	r2, r3, #99	@ 0x63
 80118a0:	88fb      	ldrh	r3, [r7, #6]
        x >= buttonX &&
 80118a2:	429a      	cmp	r2, r3
 80118a4:	db09      	blt.n	80118ba <in_run_button+0x3c>
        x < (buttonX + BUTTON_WIDTH) &&
 80118a6:	88bb      	ldrh	r3, [r7, #4]
 80118a8:	f5b3 7f8c 	cmp.w	r3, #280	@ 0x118
 80118ac:	d305      	bcc.n	80118ba <in_run_button+0x3c>
        y >= BUTTON_Y &&
 80118ae:	88bb      	ldrh	r3, [r7, #4]
 80118b0:	f5b3 7f9b 	cmp.w	r3, #310	@ 0x136
 80118b4:	d201      	bcs.n	80118ba <in_run_button+0x3c>
 80118b6:	2301      	movs	r3, #1
 80118b8:	e000      	b.n	80118bc <in_run_button+0x3e>
 80118ba:	2300      	movs	r3, #0
 80118bc:	f003 0301 	and.w	r3, r3, #1
 80118c0:	b2db      	uxtb	r3, r3
        y < (BUTTON_Y + BUTTON_HEIGHT)
    );
}
 80118c2:	4618      	mov	r0, r3
 80118c4:	3714      	adds	r7, #20
 80118c6:	46bd      	mov	sp, r7
 80118c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118cc:	4770      	bx	lr

080118ce <in_canvas_area>:

bool in_canvas_area(uint16_t x, uint16_t y)
{
 80118ce:	b480      	push	{r7}
 80118d0:	b085      	sub	sp, #20
 80118d2:	af00      	add	r7, sp, #0
 80118d4:	4603      	mov	r3, r0
 80118d6:	460a      	mov	r2, r1
 80118d8:	80fb      	strh	r3, [r7, #6]
 80118da:	4613      	mov	r3, r2
 80118dc:	80bb      	strh	r3, [r7, #4]
	uint16_t thickness = THICKNESS;
 80118de:	230c      	movs	r3, #12
 80118e0:	81fb      	strh	r3, [r7, #14]
	thickness /= 2;
 80118e2:	89fb      	ldrh	r3, [r7, #14]
 80118e4:	085b      	lsrs	r3, r3, #1
 80118e6:	81fb      	strh	r3, [r7, #14]
    return (
        x >= (CANVAS_X + thickness) &&
 80118e8:	89fb      	ldrh	r3, [r7, #14]
 80118ea:	1dda      	adds	r2, r3, #7
 80118ec:	88fb      	ldrh	r3, [r7, #6]
        x < (CANVAS_X + CANVAS_SIZE - thickness) &&
        y >= (CANVAS_Y + thickness) &&
 80118ee:	429a      	cmp	r2, r3
 80118f0:	da12      	bge.n	8011918 <in_canvas_area+0x4a>
        x < (CANVAS_X + CANVAS_SIZE - thickness) &&
 80118f2:	88fa      	ldrh	r2, [r7, #6]
 80118f4:	89fb      	ldrh	r3, [r7, #14]
 80118f6:	f1c3 03e8 	rsb	r3, r3, #232	@ 0xe8
        x >= (CANVAS_X + thickness) &&
 80118fa:	429a      	cmp	r2, r3
 80118fc:	da0c      	bge.n	8011918 <in_canvas_area+0x4a>
        y >= (CANVAS_Y + thickness) &&
 80118fe:	89fb      	ldrh	r3, [r7, #14]
 8011900:	1dda      	adds	r2, r3, #7
 8011902:	88bb      	ldrh	r3, [r7, #4]
        x < (CANVAS_X + CANVAS_SIZE - thickness) &&
 8011904:	429a      	cmp	r2, r3
 8011906:	da07      	bge.n	8011918 <in_canvas_area+0x4a>
        y < (CANVAS_Y + CANVAS_SIZE - thickness)
 8011908:	88ba      	ldrh	r2, [r7, #4]
 801190a:	89fb      	ldrh	r3, [r7, #14]
 801190c:	f1c3 03e8 	rsb	r3, r3, #232	@ 0xe8
        y >= (CANVAS_Y + thickness) &&
 8011910:	429a      	cmp	r2, r3
 8011912:	da01      	bge.n	8011918 <in_canvas_area+0x4a>
 8011914:	2301      	movs	r3, #1
 8011916:	e000      	b.n	801191a <in_canvas_area+0x4c>
 8011918:	2300      	movs	r3, #0
 801191a:	f003 0301 	and.w	r3, r3, #1
 801191e:	b2db      	uxtb	r3, r3
    );
}
 8011920:	4618      	mov	r0, r3
 8011922:	3714      	adds	r7, #20
 8011924:	46bd      	mov	sp, r7
 8011926:	f85d 7b04 	ldr.w	r7, [sp], #4
 801192a:	4770      	bx	lr

0801192c <clear_canvas>:

void clear_canvas(void)
{
 801192c:	b580      	push	{r7, lr}
 801192e:	af00      	add	r7, sp, #0
    BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8011930:	f04f 30ff 	mov.w	r0, #4294967295
 8011934:	f001 ff58 	bl	80137e8 <BSP_LCD_SetTextColor>

    // Fill the canvas area (inside the orange box) without erasing the border
    BSP_LCD_FillRect(CANVAS_X, CANVAS_Y, CANVAS_SIZE, CANVAS_SIZE);
 8011938:	23e0      	movs	r3, #224	@ 0xe0
 801193a:	22e0      	movs	r2, #224	@ 0xe0
 801193c:	2108      	movs	r1, #8
 801193e:	2008      	movs	r0, #8
 8011940:	f002 fa64 	bl	8013e0c <BSP_LCD_FillRect>
    firstTouch = true;
 8011944:	4b02      	ldr	r3, [pc, #8]	@ (8011950 <clear_canvas+0x24>)
 8011946:	2201      	movs	r2, #1
 8011948:	701a      	strb	r2, [r3, #0]
}
 801194a:	bf00      	nop
 801194c:	bd80      	pop	{r7, pc}
 801194e:	bf00      	nop
 8011950:	20000000 	.word	0x20000000

08011954 <extract_canvas>:

void extract_canvas(uint8_t *out)
{
 8011954:	b480      	push	{r7}
 8011956:	b08f      	sub	sp, #60	@ 0x3c
 8011958:	af00      	add	r7, sp, #0
 801195a:	6078      	str	r0, [r7, #4]
    const int scale = SCALE;
 801195c:	2308      	movs	r3, #8
 801195e:	623b      	str	r3, [r7, #32]
    const uint16_t *framebuffer = (uint16_t *)LCD_FRAME_BUFFER;
 8011960:	f04f 4350 	mov.w	r3, #3489660928	@ 0xd0000000
 8011964:	61fb      	str	r3, [r7, #28]

    for (int oy = 0; oy < 28; oy++) {
 8011966:	2300      	movs	r3, #0
 8011968:	637b      	str	r3, [r7, #52]	@ 0x34
 801196a:	e08b      	b.n	8011a84 <extract_canvas+0x130>
    	for (int ox = 0; ox < 28; ox++) {
 801196c:	2300      	movs	r3, #0
 801196e:	633b      	str	r3, [r7, #48]	@ 0x30
 8011970:	e081      	b.n	8011a76 <extract_canvas+0x122>

            int sum = 0;
 8011972:	2300      	movs	r3, #0
 8011974:	62fb      	str	r3, [r7, #44]	@ 0x2c
            for (int dy = 0; dy < scale; dy++) {
 8011976:	2300      	movs	r3, #0
 8011978:	62bb      	str	r3, [r7, #40]	@ 0x28
 801197a:	e062      	b.n	8011a42 <extract_canvas+0xee>
                for (int dx = 0; dx < scale; dx++) {
 801197c:	2300      	movs	r3, #0
 801197e:	627b      	str	r3, [r7, #36]	@ 0x24
 8011980:	e058      	b.n	8011a34 <extract_canvas+0xe0>
                    int px = CANVAS_X + ox * scale + dx;
 8011982:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011984:	6a3a      	ldr	r2, [r7, #32]
 8011986:	fb02 f303 	mul.w	r3, r2, r3
 801198a:	3308      	adds	r3, #8
 801198c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801198e:	4413      	add	r3, r2
 8011990:	61bb      	str	r3, [r7, #24]
                    int py = CANVAS_Y + oy * scale + dy;
 8011992:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011994:	6a3a      	ldr	r2, [r7, #32]
 8011996:	fb02 f303 	mul.w	r3, r2, r3
 801199a:	3308      	adds	r3, #8
 801199c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801199e:	4413      	add	r3, r2
 80119a0:	617b      	str	r3, [r7, #20]
                    uint16_t pixel = framebuffer[py * LCD_WIDTH + px];
 80119a2:	697a      	ldr	r2, [r7, #20]
 80119a4:	4613      	mov	r3, r2
 80119a6:	011b      	lsls	r3, r3, #4
 80119a8:	1a9b      	subs	r3, r3, r2
 80119aa:	011b      	lsls	r3, r3, #4
 80119ac:	461a      	mov	r2, r3
 80119ae:	69bb      	ldr	r3, [r7, #24]
 80119b0:	4413      	add	r3, r2
 80119b2:	005b      	lsls	r3, r3, #1
 80119b4:	69fa      	ldr	r2, [r7, #28]
 80119b6:	4413      	add	r3, r2
 80119b8:	881b      	ldrh	r3, [r3, #0]
 80119ba:	827b      	strh	r3, [r7, #18]

                    // Convert RGB565 to grayscale
                    uint8_t r = ((pixel >> 11) & 0x1F) << 3;
 80119bc:	8a7b      	ldrh	r3, [r7, #18]
 80119be:	0adb      	lsrs	r3, r3, #11
 80119c0:	b29b      	uxth	r3, r3
 80119c2:	b2db      	uxtb	r3, r3
 80119c4:	00db      	lsls	r3, r3, #3
 80119c6:	747b      	strb	r3, [r7, #17]
                    uint8_t g = ((pixel >> 5) & 0x3F) << 2;
 80119c8:	8a7b      	ldrh	r3, [r7, #18]
 80119ca:	095b      	lsrs	r3, r3, #5
 80119cc:	b29b      	uxth	r3, r3
 80119ce:	b2db      	uxtb	r3, r3
 80119d0:	009b      	lsls	r3, r3, #2
 80119d2:	743b      	strb	r3, [r7, #16]
                    uint8_t b = (pixel & 0x1F) << 3;
 80119d4:	8a7b      	ldrh	r3, [r7, #18]
 80119d6:	b2db      	uxtb	r3, r3
 80119d8:	00db      	lsls	r3, r3, #3
 80119da:	73fb      	strb	r3, [r7, #15]
                    uint8_t gray = (uint8_t)(r * 0.299f + g * 0.587f + b * 0.114f);
 80119dc:	7c7b      	ldrb	r3, [r7, #17]
 80119de:	ee07 3a90 	vmov	s15, r3
 80119e2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80119e6:	ed9f 7a2d 	vldr	s14, [pc, #180]	@ 8011a9c <extract_canvas+0x148>
 80119ea:	ee27 7a87 	vmul.f32	s14, s15, s14
 80119ee:	7c3b      	ldrb	r3, [r7, #16]
 80119f0:	ee07 3a90 	vmov	s15, r3
 80119f4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80119f8:	eddf 6a29 	vldr	s13, [pc, #164]	@ 8011aa0 <extract_canvas+0x14c>
 80119fc:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8011a00:	ee37 7a27 	vadd.f32	s14, s14, s15
 8011a04:	7bfb      	ldrb	r3, [r7, #15]
 8011a06:	ee07 3a90 	vmov	s15, r3
 8011a0a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8011a0e:	eddf 6a25 	vldr	s13, [pc, #148]	@ 8011aa4 <extract_canvas+0x150>
 8011a12:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8011a16:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011a1a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8011a1e:	edc7 7a00 	vstr	s15, [r7]
 8011a22:	783b      	ldrb	r3, [r7, #0]
 8011a24:	73bb      	strb	r3, [r7, #14]

                    sum += gray;
 8011a26:	7bbb      	ldrb	r3, [r7, #14]
 8011a28:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8011a2a:	4413      	add	r3, r2
 8011a2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
                for (int dx = 0; dx < scale; dx++) {
 8011a2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011a30:	3301      	adds	r3, #1
 8011a32:	627b      	str	r3, [r7, #36]	@ 0x24
 8011a34:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011a36:	6a3b      	ldr	r3, [r7, #32]
 8011a38:	429a      	cmp	r2, r3
 8011a3a:	dba2      	blt.n	8011982 <extract_canvas+0x2e>
            for (int dy = 0; dy < scale; dy++) {
 8011a3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011a3e:	3301      	adds	r3, #1
 8011a40:	62bb      	str	r3, [r7, #40]	@ 0x28
 8011a42:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8011a44:	6a3b      	ldr	r3, [r7, #32]
 8011a46:	429a      	cmp	r2, r3
 8011a48:	db98      	blt.n	801197c <extract_canvas+0x28>
                }
            }

            out[oy * 28 + ox] = (uint8_t)(sum / (scale * scale));
 8011a4a:	6a3b      	ldr	r3, [r7, #32]
 8011a4c:	fb03 f303 	mul.w	r3, r3, r3
 8011a50:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8011a52:	fb92 f1f3 	sdiv	r1, r2, r3
 8011a56:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8011a58:	4613      	mov	r3, r2
 8011a5a:	00db      	lsls	r3, r3, #3
 8011a5c:	1a9b      	subs	r3, r3, r2
 8011a5e:	009b      	lsls	r3, r3, #2
 8011a60:	461a      	mov	r2, r3
 8011a62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011a64:	4413      	add	r3, r2
 8011a66:	461a      	mov	r2, r3
 8011a68:	687b      	ldr	r3, [r7, #4]
 8011a6a:	4413      	add	r3, r2
 8011a6c:	b2ca      	uxtb	r2, r1
 8011a6e:	701a      	strb	r2, [r3, #0]
    	for (int ox = 0; ox < 28; ox++) {
 8011a70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011a72:	3301      	adds	r3, #1
 8011a74:	633b      	str	r3, [r7, #48]	@ 0x30
 8011a76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011a78:	2b1b      	cmp	r3, #27
 8011a7a:	f77f af7a 	ble.w	8011972 <extract_canvas+0x1e>
    for (int oy = 0; oy < 28; oy++) {
 8011a7e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011a80:	3301      	adds	r3, #1
 8011a82:	637b      	str	r3, [r7, #52]	@ 0x34
 8011a84:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011a86:	2b1b      	cmp	r3, #27
 8011a88:	f77f af70 	ble.w	801196c <extract_canvas+0x18>
        }
    }
}
 8011a8c:	bf00      	nop
 8011a8e:	bf00      	nop
 8011a90:	373c      	adds	r7, #60	@ 0x3c
 8011a92:	46bd      	mov	sp, r7
 8011a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a98:	4770      	bx	lr
 8011a9a:	bf00      	nop
 8011a9c:	3e991687 	.word	0x3e991687
 8011aa0:	3f1645a2 	.word	0x3f1645a2
 8011aa4:	3de978d5 	.word	0x3de978d5

08011aa8 <DisplayResult>:

void DisplayResult(void)
{
 8011aa8:	b590      	push	{r4, r7, lr}
 8011aaa:	b093      	sub	sp, #76	@ 0x4c
 8011aac:	af02      	add	r7, sp, #8
    BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8011aae:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
 8011ab2:	f001 fe99 	bl	80137e8 <BSP_LCD_SetTextColor>
    BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 8011ab6:	f04f 30ff 	mov.w	r0, #4294967295
 8011aba:	f001 fead 	bl	8013818 <BSP_LCD_SetBackColor>
    BSP_LCD_SetFont(&Font16);
 8011abe:	4818      	ldr	r0, [pc, #96]	@ (8011b20 <DisplayResult+0x78>)
 8011ac0:	f001 fec4 	bl	801384c <BSP_LCD_SetFont>

    char result[64];

    if (status != 0) {
 8011ac4:	4b17      	ldr	r3, [pc, #92]	@ (8011b24 <DisplayResult+0x7c>)
 8011ac6:	781b      	ldrb	r3, [r3, #0]
 8011ac8:	2b00      	cmp	r3, #0
 8011aca:	d006      	beq.n	8011ada <DisplayResult+0x32>
        snprintf(result, sizeof(result), "Prediction Failed");
 8011acc:	463b      	mov	r3, r7
 8011ace:	4a16      	ldr	r2, [pc, #88]	@ (8011b28 <DisplayResult+0x80>)
 8011ad0:	2140      	movs	r1, #64	@ 0x40
 8011ad2:	4618      	mov	r0, r3
 8011ad4:	f022 f81a 	bl	8033b0c <sniprintf>
 8011ad8:	e017      	b.n	8011b0a <DisplayResult+0x62>
    } else {
        snprintf(result, sizeof(result), "Predicted: %c (%.1f%%)", ai_predicted_char, ai_predicted_confidence * 100.0f);
 8011ada:	4b14      	ldr	r3, [pc, #80]	@ (8011b2c <DisplayResult+0x84>)
 8011adc:	781b      	ldrb	r3, [r3, #0]
 8011ade:	461c      	mov	r4, r3
 8011ae0:	4b13      	ldr	r3, [pc, #76]	@ (8011b30 <DisplayResult+0x88>)
 8011ae2:	edd3 7a00 	vldr	s15, [r3]
 8011ae6:	ed9f 7a13 	vldr	s14, [pc, #76]	@ 8011b34 <DisplayResult+0x8c>
 8011aea:	ee67 7a87 	vmul.f32	s15, s15, s14
 8011aee:	ee17 0a90 	vmov	r0, s15
 8011af2:	f7fe fc61 	bl	80103b8 <__aeabi_f2d>
 8011af6:	4602      	mov	r2, r0
 8011af8:	460b      	mov	r3, r1
 8011afa:	4638      	mov	r0, r7
 8011afc:	e9cd 2300 	strd	r2, r3, [sp]
 8011b00:	4623      	mov	r3, r4
 8011b02:	4a0d      	ldr	r2, [pc, #52]	@ (8011b38 <DisplayResult+0x90>)
 8011b04:	2140      	movs	r1, #64	@ 0x40
 8011b06:	f022 f801 	bl	8033b0c <sniprintf>
    }

    // Display result
    BSP_LCD_DisplayStringAt(8, RESULT_Y, (uint8_t*)result, LEFT_MODE);
 8011b0a:	463a      	mov	r2, r7
 8011b0c:	2303      	movs	r3, #3
 8011b0e:	21f0      	movs	r1, #240	@ 0xf0
 8011b10:	2008      	movs	r0, #8
 8011b12:	f001 ff21 	bl	8013958 <BSP_LCD_DisplayStringAt>
}
 8011b16:	bf00      	nop
 8011b18:	3744      	adds	r7, #68	@ 0x44
 8011b1a:	46bd      	mov	sp, r7
 8011b1c:	bd90      	pop	{r4, r7, pc}
 8011b1e:	bf00      	nop
 8011b20:	20000078 	.word	0x20000078
 8011b24:	200055b0 	.word	0x200055b0
 8011b28:	080363cc 	.word	0x080363cc
 8011b2c:	20000090 	.word	0x20000090
 8011b30:	200055ac 	.word	0x200055ac
 8011b34:	42c80000 	.word	0x42c80000
 8011b38:	080363e0 	.word	0x080363e0

08011b3c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8011b3c:	b580      	push	{r7, lr}
 8011b3e:	b082      	sub	sp, #8
 8011b40:	af00      	add	r7, sp, #0
 8011b42:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6)
 8011b44:	687b      	ldr	r3, [r7, #4]
 8011b46:	681b      	ldr	r3, [r3, #0]
 8011b48:	4a04      	ldr	r2, [pc, #16]	@ (8011b5c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8011b4a:	4293      	cmp	r3, r2
 8011b4c:	d101      	bne.n	8011b52 <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8011b4e:	f002 ff2d 	bl	80149ac <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8011b52:	bf00      	nop
 8011b54:	3708      	adds	r7, #8
 8011b56:	46bd      	mov	sp, r7
 8011b58:	bd80      	pop	{r7, pc}
 8011b5a:	bf00      	nop
 8011b5c:	40001000 	.word	0x40001000

08011b60 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8011b60:	b480      	push	{r7}
 8011b62:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8011b64:	b672      	cpsid	i
}
 8011b66:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1);
 8011b68:	bf00      	nop
 8011b6a:	e7fd      	b.n	8011b68 <Error_Handler+0x8>

08011b6c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8011b6c:	b480      	push	{r7}
 8011b6e:	b083      	sub	sp, #12
 8011b70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8011b72:	2300      	movs	r3, #0
 8011b74:	607b      	str	r3, [r7, #4]
 8011b76:	4b10      	ldr	r3, [pc, #64]	@ (8011bb8 <HAL_MspInit+0x4c>)
 8011b78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011b7a:	4a0f      	ldr	r2, [pc, #60]	@ (8011bb8 <HAL_MspInit+0x4c>)
 8011b7c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8011b80:	6453      	str	r3, [r2, #68]	@ 0x44
 8011b82:	4b0d      	ldr	r3, [pc, #52]	@ (8011bb8 <HAL_MspInit+0x4c>)
 8011b84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011b86:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8011b8a:	607b      	str	r3, [r7, #4]
 8011b8c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8011b8e:	2300      	movs	r3, #0
 8011b90:	603b      	str	r3, [r7, #0]
 8011b92:	4b09      	ldr	r3, [pc, #36]	@ (8011bb8 <HAL_MspInit+0x4c>)
 8011b94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011b96:	4a08      	ldr	r2, [pc, #32]	@ (8011bb8 <HAL_MspInit+0x4c>)
 8011b98:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8011b9c:	6413      	str	r3, [r2, #64]	@ 0x40
 8011b9e:	4b06      	ldr	r3, [pc, #24]	@ (8011bb8 <HAL_MspInit+0x4c>)
 8011ba0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011ba2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8011ba6:	603b      	str	r3, [r7, #0]
 8011ba8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8011baa:	bf00      	nop
 8011bac:	370c      	adds	r7, #12
 8011bae:	46bd      	mov	sp, r7
 8011bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011bb4:	4770      	bx	lr
 8011bb6:	bf00      	nop
 8011bb8:	40023800 	.word	0x40023800

08011bbc <HAL_CRC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcrc: CRC handle pointer
  * @retval None
  */
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8011bbc:	b480      	push	{r7}
 8011bbe:	b085      	sub	sp, #20
 8011bc0:	af00      	add	r7, sp, #0
 8011bc2:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8011bc4:	687b      	ldr	r3, [r7, #4]
 8011bc6:	681b      	ldr	r3, [r3, #0]
 8011bc8:	4a0b      	ldr	r2, [pc, #44]	@ (8011bf8 <HAL_CRC_MspInit+0x3c>)
 8011bca:	4293      	cmp	r3, r2
 8011bcc:	d10d      	bne.n	8011bea <HAL_CRC_MspInit+0x2e>
  {
    /* USER CODE BEGIN CRC_MspInit 0 */

    /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8011bce:	2300      	movs	r3, #0
 8011bd0:	60fb      	str	r3, [r7, #12]
 8011bd2:	4b0a      	ldr	r3, [pc, #40]	@ (8011bfc <HAL_CRC_MspInit+0x40>)
 8011bd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011bd6:	4a09      	ldr	r2, [pc, #36]	@ (8011bfc <HAL_CRC_MspInit+0x40>)
 8011bd8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8011bdc:	6313      	str	r3, [r2, #48]	@ 0x30
 8011bde:	4b07      	ldr	r3, [pc, #28]	@ (8011bfc <HAL_CRC_MspInit+0x40>)
 8011be0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011be2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8011be6:	60fb      	str	r3, [r7, #12]
 8011be8:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END CRC_MspInit 1 */

  }

}
 8011bea:	bf00      	nop
 8011bec:	3714      	adds	r7, #20
 8011bee:	46bd      	mov	sp, r7
 8011bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011bf4:	4770      	bx	lr
 8011bf6:	bf00      	nop
 8011bf8:	40023000 	.word	0x40023000
 8011bfc:	40023800 	.word	0x40023800

08011c00 <HAL_DMA2D_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hdma2d: DMA2D handle pointer
  * @retval None
  */
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8011c00:	b580      	push	{r7, lr}
 8011c02:	b084      	sub	sp, #16
 8011c04:	af00      	add	r7, sp, #0
 8011c06:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8011c08:	687b      	ldr	r3, [r7, #4]
 8011c0a:	681b      	ldr	r3, [r3, #0]
 8011c0c:	4a0e      	ldr	r2, [pc, #56]	@ (8011c48 <HAL_DMA2D_MspInit+0x48>)
 8011c0e:	4293      	cmp	r3, r2
 8011c10:	d115      	bne.n	8011c3e <HAL_DMA2D_MspInit+0x3e>
  {
    /* USER CODE BEGIN DMA2D_MspInit 0 */

    /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8011c12:	2300      	movs	r3, #0
 8011c14:	60fb      	str	r3, [r7, #12]
 8011c16:	4b0d      	ldr	r3, [pc, #52]	@ (8011c4c <HAL_DMA2D_MspInit+0x4c>)
 8011c18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011c1a:	4a0c      	ldr	r2, [pc, #48]	@ (8011c4c <HAL_DMA2D_MspInit+0x4c>)
 8011c1c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8011c20:	6313      	str	r3, [r2, #48]	@ 0x30
 8011c22:	4b0a      	ldr	r3, [pc, #40]	@ (8011c4c <HAL_DMA2D_MspInit+0x4c>)
 8011c24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011c26:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8011c2a:	60fb      	str	r3, [r7, #12]
 8011c2c:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 8011c2e:	2200      	movs	r2, #0
 8011c30:	2105      	movs	r1, #5
 8011c32:	205a      	movs	r0, #90	@ 0x5a
 8011c34:	f002 ffb6 	bl	8014ba4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8011c38:	205a      	movs	r0, #90	@ 0x5a
 8011c3a:	f002 ffcf 	bl	8014bdc <HAL_NVIC_EnableIRQ>

    /* USER CODE END DMA2D_MspInit 1 */

  }

}
 8011c3e:	bf00      	nop
 8011c40:	3710      	adds	r7, #16
 8011c42:	46bd      	mov	sp, r7
 8011c44:	bd80      	pop	{r7, pc}
 8011c46:	bf00      	nop
 8011c48:	4002b000 	.word	0x4002b000
 8011c4c:	40023800 	.word	0x40023800

08011c50 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8011c50:	b580      	push	{r7, lr}
 8011c52:	b08a      	sub	sp, #40	@ 0x28
 8011c54:	af00      	add	r7, sp, #0
 8011c56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8011c58:	f107 0314 	add.w	r3, r7, #20
 8011c5c:	2200      	movs	r2, #0
 8011c5e:	601a      	str	r2, [r3, #0]
 8011c60:	605a      	str	r2, [r3, #4]
 8011c62:	609a      	str	r2, [r3, #8]
 8011c64:	60da      	str	r2, [r3, #12]
 8011c66:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 8011c68:	687b      	ldr	r3, [r7, #4]
 8011c6a:	681b      	ldr	r3, [r3, #0]
 8011c6c:	4a29      	ldr	r2, [pc, #164]	@ (8011d14 <HAL_I2C_MspInit+0xc4>)
 8011c6e:	4293      	cmp	r3, r2
 8011c70:	d14b      	bne.n	8011d0a <HAL_I2C_MspInit+0xba>
  {
    /* USER CODE BEGIN I2C3_MspInit 0 */

    /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8011c72:	2300      	movs	r3, #0
 8011c74:	613b      	str	r3, [r7, #16]
 8011c76:	4b28      	ldr	r3, [pc, #160]	@ (8011d18 <HAL_I2C_MspInit+0xc8>)
 8011c78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011c7a:	4a27      	ldr	r2, [pc, #156]	@ (8011d18 <HAL_I2C_MspInit+0xc8>)
 8011c7c:	f043 0304 	orr.w	r3, r3, #4
 8011c80:	6313      	str	r3, [r2, #48]	@ 0x30
 8011c82:	4b25      	ldr	r3, [pc, #148]	@ (8011d18 <HAL_I2C_MspInit+0xc8>)
 8011c84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011c86:	f003 0304 	and.w	r3, r3, #4
 8011c8a:	613b      	str	r3, [r7, #16]
 8011c8c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8011c8e:	2300      	movs	r3, #0
 8011c90:	60fb      	str	r3, [r7, #12]
 8011c92:	4b21      	ldr	r3, [pc, #132]	@ (8011d18 <HAL_I2C_MspInit+0xc8>)
 8011c94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011c96:	4a20      	ldr	r2, [pc, #128]	@ (8011d18 <HAL_I2C_MspInit+0xc8>)
 8011c98:	f043 0301 	orr.w	r3, r3, #1
 8011c9c:	6313      	str	r3, [r2, #48]	@ 0x30
 8011c9e:	4b1e      	ldr	r3, [pc, #120]	@ (8011d18 <HAL_I2C_MspInit+0xc8>)
 8011ca0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011ca2:	f003 0301 	and.w	r3, r3, #1
 8011ca6:	60fb      	str	r3, [r7, #12]
 8011ca8:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 8011caa:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8011cae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8011cb0:	2312      	movs	r3, #18
 8011cb2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8011cb4:	2301      	movs	r3, #1
 8011cb6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8011cb8:	2300      	movs	r3, #0
 8011cba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8011cbc:	2304      	movs	r3, #4
 8011cbe:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 8011cc0:	f107 0314 	add.w	r3, r7, #20
 8011cc4:	4619      	mov	r1, r3
 8011cc6:	4815      	ldr	r0, [pc, #84]	@ (8011d1c <HAL_I2C_MspInit+0xcc>)
 8011cc8:	f003 fd0c 	bl	80156e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 8011ccc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8011cd0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8011cd2:	2312      	movs	r3, #18
 8011cd4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8011cd6:	2301      	movs	r3, #1
 8011cd8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8011cda:	2300      	movs	r3, #0
 8011cdc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8011cde:	2304      	movs	r3, #4
 8011ce0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 8011ce2:	f107 0314 	add.w	r3, r7, #20
 8011ce6:	4619      	mov	r1, r3
 8011ce8:	480d      	ldr	r0, [pc, #52]	@ (8011d20 <HAL_I2C_MspInit+0xd0>)
 8011cea:	f003 fcfb 	bl	80156e4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8011cee:	2300      	movs	r3, #0
 8011cf0:	60bb      	str	r3, [r7, #8]
 8011cf2:	4b09      	ldr	r3, [pc, #36]	@ (8011d18 <HAL_I2C_MspInit+0xc8>)
 8011cf4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011cf6:	4a08      	ldr	r2, [pc, #32]	@ (8011d18 <HAL_I2C_MspInit+0xc8>)
 8011cf8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8011cfc:	6413      	str	r3, [r2, #64]	@ 0x40
 8011cfe:	4b06      	ldr	r3, [pc, #24]	@ (8011d18 <HAL_I2C_MspInit+0xc8>)
 8011d00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011d02:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8011d06:	60bb      	str	r3, [r7, #8]
 8011d08:	68bb      	ldr	r3, [r7, #8]

    /* USER CODE END I2C3_MspInit 1 */

  }

}
 8011d0a:	bf00      	nop
 8011d0c:	3728      	adds	r7, #40	@ 0x28
 8011d0e:	46bd      	mov	sp, r7
 8011d10:	bd80      	pop	{r7, pc}
 8011d12:	bf00      	nop
 8011d14:	40005c00 	.word	0x40005c00
 8011d18:	40023800 	.word	0x40023800
 8011d1c:	40020800 	.word	0x40020800
 8011d20:	40020000 	.word	0x40020000

08011d24 <HAL_I2C_MspDeInit>:
  * This function freeze the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8011d24:	b580      	push	{r7, lr}
 8011d26:	b082      	sub	sp, #8
 8011d28:	af00      	add	r7, sp, #0
 8011d2a:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C3)
 8011d2c:	687b      	ldr	r3, [r7, #4]
 8011d2e:	681b      	ldr	r3, [r3, #0]
 8011d30:	4a0b      	ldr	r2, [pc, #44]	@ (8011d60 <HAL_I2C_MspDeInit+0x3c>)
 8011d32:	4293      	cmp	r3, r2
 8011d34:	d10f      	bne.n	8011d56 <HAL_I2C_MspDeInit+0x32>
  {
    /* USER CODE BEGIN I2C3_MspDeInit 0 */

    /* USER CODE END I2C3_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C3_CLK_DISABLE();
 8011d36:	4b0b      	ldr	r3, [pc, #44]	@ (8011d64 <HAL_I2C_MspDeInit+0x40>)
 8011d38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011d3a:	4a0a      	ldr	r2, [pc, #40]	@ (8011d64 <HAL_I2C_MspDeInit+0x40>)
 8011d3c:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8011d40:	6413      	str	r3, [r2, #64]	@ 0x40

    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    HAL_GPIO_DeInit(I2C3_SDA_GPIO_Port, I2C3_SDA_Pin);
 8011d42:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8011d46:	4808      	ldr	r0, [pc, #32]	@ (8011d68 <HAL_I2C_MspDeInit+0x44>)
 8011d48:	f003 fe78 	bl	8015a3c <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(I2C3_SCL_GPIO_Port, I2C3_SCL_Pin);
 8011d4c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8011d50:	4806      	ldr	r0, [pc, #24]	@ (8011d6c <HAL_I2C_MspDeInit+0x48>)
 8011d52:	f003 fe73 	bl	8015a3c <HAL_GPIO_DeInit>
    /* USER CODE BEGIN I2C3_MspDeInit 1 */

    /* USER CODE END I2C3_MspDeInit 1 */
  }

}
 8011d56:	bf00      	nop
 8011d58:	3708      	adds	r7, #8
 8011d5a:	46bd      	mov	sp, r7
 8011d5c:	bd80      	pop	{r7, pc}
 8011d5e:	bf00      	nop
 8011d60:	40005c00 	.word	0x40005c00
 8011d64:	40023800 	.word	0x40023800
 8011d68:	40020800 	.word	0x40020800
 8011d6c:	40020000 	.word	0x40020000

08011d70 <HAL_LTDC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hltdc: LTDC handle pointer
  * @retval None
  */
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8011d70:	b580      	push	{r7, lr}
 8011d72:	b09a      	sub	sp, #104	@ 0x68
 8011d74:	af00      	add	r7, sp, #0
 8011d76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8011d78:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8011d7c:	2200      	movs	r2, #0
 8011d7e:	601a      	str	r2, [r3, #0]
 8011d80:	605a      	str	r2, [r3, #4]
 8011d82:	609a      	str	r2, [r3, #8]
 8011d84:	60da      	str	r2, [r3, #12]
 8011d86:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8011d88:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8011d8c:	2230      	movs	r2, #48	@ 0x30
 8011d8e:	2100      	movs	r1, #0
 8011d90:	4618      	mov	r0, r3
 8011d92:	f021 ffe3 	bl	8033d5c <memset>
  if(hltdc->Instance==LTDC)
 8011d96:	687b      	ldr	r3, [r7, #4]
 8011d98:	681b      	ldr	r3, [r3, #0]
 8011d9a:	4a85      	ldr	r2, [pc, #532]	@ (8011fb0 <HAL_LTDC_MspInit+0x240>)
 8011d9c:	4293      	cmp	r3, r2
 8011d9e:	f040 8102 	bne.w	8011fa6 <HAL_LTDC_MspInit+0x236>

    /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8011da2:	2308      	movs	r3, #8
 8011da4:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 50;
 8011da6:	2332      	movs	r3, #50	@ 0x32
 8011da8:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 8011daa:	2302      	movs	r3, #2
 8011dac:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 8011dae:	2300      	movs	r3, #0
 8011db0:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8011db2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8011db6:	4618      	mov	r0, r3
 8011db8:	f007 fe78 	bl	8019aac <HAL_RCCEx_PeriphCLKConfig>
 8011dbc:	4603      	mov	r3, r0
 8011dbe:	2b00      	cmp	r3, #0
 8011dc0:	d001      	beq.n	8011dc6 <HAL_LTDC_MspInit+0x56>
    {
      Error_Handler();
 8011dc2:	f7ff fecd 	bl	8011b60 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8011dc6:	2300      	movs	r3, #0
 8011dc8:	623b      	str	r3, [r7, #32]
 8011dca:	4b7a      	ldr	r3, [pc, #488]	@ (8011fb4 <HAL_LTDC_MspInit+0x244>)
 8011dcc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011dce:	4a79      	ldr	r2, [pc, #484]	@ (8011fb4 <HAL_LTDC_MspInit+0x244>)
 8011dd0:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8011dd4:	6453      	str	r3, [r2, #68]	@ 0x44
 8011dd6:	4b77      	ldr	r3, [pc, #476]	@ (8011fb4 <HAL_LTDC_MspInit+0x244>)
 8011dd8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011dda:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8011dde:	623b      	str	r3, [r7, #32]
 8011de0:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8011de2:	2300      	movs	r3, #0
 8011de4:	61fb      	str	r3, [r7, #28]
 8011de6:	4b73      	ldr	r3, [pc, #460]	@ (8011fb4 <HAL_LTDC_MspInit+0x244>)
 8011de8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011dea:	4a72      	ldr	r2, [pc, #456]	@ (8011fb4 <HAL_LTDC_MspInit+0x244>)
 8011dec:	f043 0320 	orr.w	r3, r3, #32
 8011df0:	6313      	str	r3, [r2, #48]	@ 0x30
 8011df2:	4b70      	ldr	r3, [pc, #448]	@ (8011fb4 <HAL_LTDC_MspInit+0x244>)
 8011df4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011df6:	f003 0320 	and.w	r3, r3, #32
 8011dfa:	61fb      	str	r3, [r7, #28]
 8011dfc:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8011dfe:	2300      	movs	r3, #0
 8011e00:	61bb      	str	r3, [r7, #24]
 8011e02:	4b6c      	ldr	r3, [pc, #432]	@ (8011fb4 <HAL_LTDC_MspInit+0x244>)
 8011e04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011e06:	4a6b      	ldr	r2, [pc, #428]	@ (8011fb4 <HAL_LTDC_MspInit+0x244>)
 8011e08:	f043 0301 	orr.w	r3, r3, #1
 8011e0c:	6313      	str	r3, [r2, #48]	@ 0x30
 8011e0e:	4b69      	ldr	r3, [pc, #420]	@ (8011fb4 <HAL_LTDC_MspInit+0x244>)
 8011e10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011e12:	f003 0301 	and.w	r3, r3, #1
 8011e16:	61bb      	str	r3, [r7, #24]
 8011e18:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8011e1a:	2300      	movs	r3, #0
 8011e1c:	617b      	str	r3, [r7, #20]
 8011e1e:	4b65      	ldr	r3, [pc, #404]	@ (8011fb4 <HAL_LTDC_MspInit+0x244>)
 8011e20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011e22:	4a64      	ldr	r2, [pc, #400]	@ (8011fb4 <HAL_LTDC_MspInit+0x244>)
 8011e24:	f043 0302 	orr.w	r3, r3, #2
 8011e28:	6313      	str	r3, [r2, #48]	@ 0x30
 8011e2a:	4b62      	ldr	r3, [pc, #392]	@ (8011fb4 <HAL_LTDC_MspInit+0x244>)
 8011e2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011e2e:	f003 0302 	and.w	r3, r3, #2
 8011e32:	617b      	str	r3, [r7, #20]
 8011e34:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8011e36:	2300      	movs	r3, #0
 8011e38:	613b      	str	r3, [r7, #16]
 8011e3a:	4b5e      	ldr	r3, [pc, #376]	@ (8011fb4 <HAL_LTDC_MspInit+0x244>)
 8011e3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011e3e:	4a5d      	ldr	r2, [pc, #372]	@ (8011fb4 <HAL_LTDC_MspInit+0x244>)
 8011e40:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011e44:	6313      	str	r3, [r2, #48]	@ 0x30
 8011e46:	4b5b      	ldr	r3, [pc, #364]	@ (8011fb4 <HAL_LTDC_MspInit+0x244>)
 8011e48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011e4a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8011e4e:	613b      	str	r3, [r7, #16]
 8011e50:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8011e52:	2300      	movs	r3, #0
 8011e54:	60fb      	str	r3, [r7, #12]
 8011e56:	4b57      	ldr	r3, [pc, #348]	@ (8011fb4 <HAL_LTDC_MspInit+0x244>)
 8011e58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011e5a:	4a56      	ldr	r2, [pc, #344]	@ (8011fb4 <HAL_LTDC_MspInit+0x244>)
 8011e5c:	f043 0304 	orr.w	r3, r3, #4
 8011e60:	6313      	str	r3, [r2, #48]	@ 0x30
 8011e62:	4b54      	ldr	r3, [pc, #336]	@ (8011fb4 <HAL_LTDC_MspInit+0x244>)
 8011e64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011e66:	f003 0304 	and.w	r3, r3, #4
 8011e6a:	60fb      	str	r3, [r7, #12]
 8011e6c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8011e6e:	2300      	movs	r3, #0
 8011e70:	60bb      	str	r3, [r7, #8]
 8011e72:	4b50      	ldr	r3, [pc, #320]	@ (8011fb4 <HAL_LTDC_MspInit+0x244>)
 8011e74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011e76:	4a4f      	ldr	r2, [pc, #316]	@ (8011fb4 <HAL_LTDC_MspInit+0x244>)
 8011e78:	f043 0308 	orr.w	r3, r3, #8
 8011e7c:	6313      	str	r3, [r2, #48]	@ 0x30
 8011e7e:	4b4d      	ldr	r3, [pc, #308]	@ (8011fb4 <HAL_LTDC_MspInit+0x244>)
 8011e80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011e82:	f003 0308 	and.w	r3, r3, #8
 8011e86:	60bb      	str	r3, [r7, #8]
 8011e88:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = ENABLE_Pin;
 8011e8a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8011e8e:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8011e90:	2302      	movs	r3, #2
 8011e92:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011e94:	2300      	movs	r3, #0
 8011e96:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8011e98:	2300      	movs	r3, #0
 8011e9a:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8011e9c:	230e      	movs	r3, #14
 8011e9e:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 8011ea0:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8011ea4:	4619      	mov	r1, r3
 8011ea6:	4844      	ldr	r0, [pc, #272]	@ (8011fb8 <HAL_LTDC_MspInit+0x248>)
 8011ea8:	f003 fc1c 	bl	80156e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 8011eac:	f641 0358 	movw	r3, #6232	@ 0x1858
 8011eb0:	657b      	str	r3, [r7, #84]	@ 0x54
                          |R5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8011eb2:	2302      	movs	r3, #2
 8011eb4:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011eb6:	2300      	movs	r3, #0
 8011eb8:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8011eba:	2300      	movs	r3, #0
 8011ebc:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8011ebe:	230e      	movs	r3, #14
 8011ec0:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8011ec2:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8011ec6:	4619      	mov	r1, r3
 8011ec8:	483c      	ldr	r0, [pc, #240]	@ (8011fbc <HAL_LTDC_MspInit+0x24c>)
 8011eca:	f003 fc0b 	bl	80156e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 8011ece:	2303      	movs	r3, #3
 8011ed0:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8011ed2:	2302      	movs	r3, #2
 8011ed4:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011ed6:	2300      	movs	r3, #0
 8011ed8:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8011eda:	2300      	movs	r3, #0
 8011edc:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8011ede:	2309      	movs	r3, #9
 8011ee0:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8011ee2:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8011ee6:	4619      	mov	r1, r3
 8011ee8:	4835      	ldr	r0, [pc, #212]	@ (8011fc0 <HAL_LTDC_MspInit+0x250>)
 8011eea:	f003 fbfb 	bl	80156e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 8011eee:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 8011ef2:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8011ef4:	2302      	movs	r3, #2
 8011ef6:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011ef8:	2300      	movs	r3, #0
 8011efa:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8011efc:	2300      	movs	r3, #0
 8011efe:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8011f00:	230e      	movs	r3, #14
 8011f02:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8011f04:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8011f08:	4619      	mov	r1, r3
 8011f0a:	482d      	ldr	r0, [pc, #180]	@ (8011fc0 <HAL_LTDC_MspInit+0x250>)
 8011f0c:	f003 fbea 	bl	80156e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 8011f10:	f44f 630c 	mov.w	r3, #2240	@ 0x8c0
 8011f14:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8011f16:	2302      	movs	r3, #2
 8011f18:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011f1a:	2300      	movs	r3, #0
 8011f1c:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8011f1e:	2300      	movs	r3, #0
 8011f20:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8011f22:	230e      	movs	r3, #14
 8011f24:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8011f26:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8011f2a:	4619      	mov	r1, r3
 8011f2c:	4825      	ldr	r0, [pc, #148]	@ (8011fc4 <HAL_LTDC_MspInit+0x254>)
 8011f2e:	f003 fbd9 	bl	80156e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 8011f32:	f44f 6398 	mov.w	r3, #1216	@ 0x4c0
 8011f36:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8011f38:	2302      	movs	r3, #2
 8011f3a:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011f3c:	2300      	movs	r3, #0
 8011f3e:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8011f40:	2300      	movs	r3, #0
 8011f42:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8011f44:	230e      	movs	r3, #14
 8011f46:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8011f48:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8011f4c:	4619      	mov	r1, r3
 8011f4e:	481e      	ldr	r0, [pc, #120]	@ (8011fc8 <HAL_LTDC_MspInit+0x258>)
 8011f50:	f003 fbc8 	bl	80156e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 8011f54:	2348      	movs	r3, #72	@ 0x48
 8011f56:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8011f58:	2302      	movs	r3, #2
 8011f5a:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011f5c:	2300      	movs	r3, #0
 8011f5e:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8011f60:	2300      	movs	r3, #0
 8011f62:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8011f64:	230e      	movs	r3, #14
 8011f66:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8011f68:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8011f6c:	4619      	mov	r1, r3
 8011f6e:	4817      	ldr	r0, [pc, #92]	@ (8011fcc <HAL_LTDC_MspInit+0x25c>)
 8011f70:	f003 fbb8 	bl	80156e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 8011f74:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8011f78:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8011f7a:	2302      	movs	r3, #2
 8011f7c:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011f7e:	2300      	movs	r3, #0
 8011f80:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8011f82:	2300      	movs	r3, #0
 8011f84:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8011f86:	2309      	movs	r3, #9
 8011f88:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8011f8a:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8011f8e:	4619      	mov	r1, r3
 8011f90:	480c      	ldr	r0, [pc, #48]	@ (8011fc4 <HAL_LTDC_MspInit+0x254>)
 8011f92:	f003 fba7 	bl	80156e4 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 8011f96:	2200      	movs	r2, #0
 8011f98:	2105      	movs	r1, #5
 8011f9a:	2058      	movs	r0, #88	@ 0x58
 8011f9c:	f002 fe02 	bl	8014ba4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8011fa0:	2058      	movs	r0, #88	@ 0x58
 8011fa2:	f002 fe1b 	bl	8014bdc <HAL_NVIC_EnableIRQ>

    /* USER CODE END LTDC_MspInit 1 */

  }

}
 8011fa6:	bf00      	nop
 8011fa8:	3768      	adds	r7, #104	@ 0x68
 8011faa:	46bd      	mov	sp, r7
 8011fac:	bd80      	pop	{r7, pc}
 8011fae:	bf00      	nop
 8011fb0:	40016800 	.word	0x40016800
 8011fb4:	40023800 	.word	0x40023800
 8011fb8:	40021400 	.word	0x40021400
 8011fbc:	40020000 	.word	0x40020000
 8011fc0:	40020400 	.word	0x40020400
 8011fc4:	40021800 	.word	0x40021800
 8011fc8:	40020800 	.word	0x40020800
 8011fcc:	40020c00 	.word	0x40020c00

08011fd0 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8011fd0:	b580      	push	{r7, lr}
 8011fd2:	b08a      	sub	sp, #40	@ 0x28
 8011fd4:	af00      	add	r7, sp, #0
 8011fd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8011fd8:	f107 0314 	add.w	r3, r7, #20
 8011fdc:	2200      	movs	r2, #0
 8011fde:	601a      	str	r2, [r3, #0]
 8011fe0:	605a      	str	r2, [r3, #4]
 8011fe2:	609a      	str	r2, [r3, #8]
 8011fe4:	60da      	str	r2, [r3, #12]
 8011fe6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI5)
 8011fe8:	687b      	ldr	r3, [r7, #4]
 8011fea:	681b      	ldr	r3, [r3, #0]
 8011fec:	4a19      	ldr	r2, [pc, #100]	@ (8012054 <HAL_SPI_MspInit+0x84>)
 8011fee:	4293      	cmp	r3, r2
 8011ff0:	d12c      	bne.n	801204c <HAL_SPI_MspInit+0x7c>
  {
    /* USER CODE BEGIN SPI5_MspInit 0 */

    /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 8011ff2:	2300      	movs	r3, #0
 8011ff4:	613b      	str	r3, [r7, #16]
 8011ff6:	4b18      	ldr	r3, [pc, #96]	@ (8012058 <HAL_SPI_MspInit+0x88>)
 8011ff8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011ffa:	4a17      	ldr	r2, [pc, #92]	@ (8012058 <HAL_SPI_MspInit+0x88>)
 8011ffc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8012000:	6453      	str	r3, [r2, #68]	@ 0x44
 8012002:	4b15      	ldr	r3, [pc, #84]	@ (8012058 <HAL_SPI_MspInit+0x88>)
 8012004:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8012006:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 801200a:	613b      	str	r3, [r7, #16]
 801200c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 801200e:	2300      	movs	r3, #0
 8012010:	60fb      	str	r3, [r7, #12]
 8012012:	4b11      	ldr	r3, [pc, #68]	@ (8012058 <HAL_SPI_MspInit+0x88>)
 8012014:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012016:	4a10      	ldr	r2, [pc, #64]	@ (8012058 <HAL_SPI_MspInit+0x88>)
 8012018:	f043 0320 	orr.w	r3, r3, #32
 801201c:	6313      	str	r3, [r2, #48]	@ 0x30
 801201e:	4b0e      	ldr	r3, [pc, #56]	@ (8012058 <HAL_SPI_MspInit+0x88>)
 8012020:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012022:	f003 0320 	and.w	r3, r3, #32
 8012026:	60fb      	str	r3, [r7, #12]
 8012028:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 801202a:	f44f 7360 	mov.w	r3, #896	@ 0x380
 801202e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8012030:	2302      	movs	r3, #2
 8012032:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012034:	2300      	movs	r3, #0
 8012036:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8012038:	2300      	movs	r3, #0
 801203a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 801203c:	2305      	movs	r3, #5
 801203e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8012040:	f107 0314 	add.w	r3, r7, #20
 8012044:	4619      	mov	r1, r3
 8012046:	4805      	ldr	r0, [pc, #20]	@ (801205c <HAL_SPI_MspInit+0x8c>)
 8012048:	f003 fb4c 	bl	80156e4 <HAL_GPIO_Init>

    /* USER CODE END SPI5_MspInit 1 */

  }

}
 801204c:	bf00      	nop
 801204e:	3728      	adds	r7, #40	@ 0x28
 8012050:	46bd      	mov	sp, r7
 8012052:	bd80      	pop	{r7, pc}
 8012054:	40015000 	.word	0x40015000
 8012058:	40023800 	.word	0x40023800
 801205c:	40021400 	.word	0x40021400

08012060 <HAL_SPI_MspDeInit>:
  * This function freeze the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 8012060:	b580      	push	{r7, lr}
 8012062:	b082      	sub	sp, #8
 8012064:	af00      	add	r7, sp, #0
 8012066:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI5)
 8012068:	687b      	ldr	r3, [r7, #4]
 801206a:	681b      	ldr	r3, [r3, #0]
 801206c:	4a08      	ldr	r2, [pc, #32]	@ (8012090 <HAL_SPI_MspDeInit+0x30>)
 801206e:	4293      	cmp	r3, r2
 8012070:	d10a      	bne.n	8012088 <HAL_SPI_MspDeInit+0x28>
  {
    /* USER CODE BEGIN SPI5_MspDeInit 0 */

    /* USER CODE END SPI5_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI5_CLK_DISABLE();
 8012072:	4b08      	ldr	r3, [pc, #32]	@ (8012094 <HAL_SPI_MspDeInit+0x34>)
 8012074:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8012076:	4a07      	ldr	r2, [pc, #28]	@ (8012094 <HAL_SPI_MspDeInit+0x34>)
 8012078:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 801207c:	6453      	str	r3, [r2, #68]	@ 0x44
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    HAL_GPIO_DeInit(GPIOF, SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin);
 801207e:	f44f 7160 	mov.w	r1, #896	@ 0x380
 8012082:	4805      	ldr	r0, [pc, #20]	@ (8012098 <HAL_SPI_MspDeInit+0x38>)
 8012084:	f003 fcda 	bl	8015a3c <HAL_GPIO_DeInit>
    /* USER CODE BEGIN SPI5_MspDeInit 1 */

    /* USER CODE END SPI5_MspDeInit 1 */
  }

}
 8012088:	bf00      	nop
 801208a:	3708      	adds	r7, #8
 801208c:	46bd      	mov	sp, r7
 801208e:	bd80      	pop	{r7, pc}
 8012090:	40015000 	.word	0x40015000
 8012094:	40023800 	.word	0x40023800
 8012098:	40021400 	.word	0x40021400

0801209c <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 801209c:	b480      	push	{r7}
 801209e:	b085      	sub	sp, #20
 80120a0:	af00      	add	r7, sp, #0
 80120a2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80120a4:	687b      	ldr	r3, [r7, #4]
 80120a6:	681b      	ldr	r3, [r3, #0]
 80120a8:	4a0b      	ldr	r2, [pc, #44]	@ (80120d8 <HAL_TIM_Base_MspInit+0x3c>)
 80120aa:	4293      	cmp	r3, r2
 80120ac:	d10d      	bne.n	80120ca <HAL_TIM_Base_MspInit+0x2e>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80120ae:	2300      	movs	r3, #0
 80120b0:	60fb      	str	r3, [r7, #12]
 80120b2:	4b0a      	ldr	r3, [pc, #40]	@ (80120dc <HAL_TIM_Base_MspInit+0x40>)
 80120b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80120b6:	4a09      	ldr	r2, [pc, #36]	@ (80120dc <HAL_TIM_Base_MspInit+0x40>)
 80120b8:	f043 0301 	orr.w	r3, r3, #1
 80120bc:	6453      	str	r3, [r2, #68]	@ 0x44
 80120be:	4b07      	ldr	r3, [pc, #28]	@ (80120dc <HAL_TIM_Base_MspInit+0x40>)
 80120c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80120c2:	f003 0301 	and.w	r3, r3, #1
 80120c6:	60fb      	str	r3, [r7, #12]
 80120c8:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM1_MspInit 1 */

  }

}
 80120ca:	bf00      	nop
 80120cc:	3714      	adds	r7, #20
 80120ce:	46bd      	mov	sp, r7
 80120d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120d4:	4770      	bx	lr
 80120d6:	bf00      	nop
 80120d8:	40010000 	.word	0x40010000
 80120dc:	40023800 	.word	0x40023800

080120e0 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80120e0:	b580      	push	{r7, lr}
 80120e2:	b08a      	sub	sp, #40	@ 0x28
 80120e4:	af00      	add	r7, sp, #0
 80120e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80120e8:	f107 0314 	add.w	r3, r7, #20
 80120ec:	2200      	movs	r2, #0
 80120ee:	601a      	str	r2, [r3, #0]
 80120f0:	605a      	str	r2, [r3, #4]
 80120f2:	609a      	str	r2, [r3, #8]
 80120f4:	60da      	str	r2, [r3, #12]
 80120f6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80120f8:	687b      	ldr	r3, [r7, #4]
 80120fa:	681b      	ldr	r3, [r3, #0]
 80120fc:	4a19      	ldr	r2, [pc, #100]	@ (8012164 <HAL_UART_MspInit+0x84>)
 80120fe:	4293      	cmp	r3, r2
 8012100:	d12c      	bne.n	801215c <HAL_UART_MspInit+0x7c>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8012102:	2300      	movs	r3, #0
 8012104:	613b      	str	r3, [r7, #16]
 8012106:	4b18      	ldr	r3, [pc, #96]	@ (8012168 <HAL_UART_MspInit+0x88>)
 8012108:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801210a:	4a17      	ldr	r2, [pc, #92]	@ (8012168 <HAL_UART_MspInit+0x88>)
 801210c:	f043 0310 	orr.w	r3, r3, #16
 8012110:	6453      	str	r3, [r2, #68]	@ 0x44
 8012112:	4b15      	ldr	r3, [pc, #84]	@ (8012168 <HAL_UART_MspInit+0x88>)
 8012114:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8012116:	f003 0310 	and.w	r3, r3, #16
 801211a:	613b      	str	r3, [r7, #16]
 801211c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 801211e:	2300      	movs	r3, #0
 8012120:	60fb      	str	r3, [r7, #12]
 8012122:	4b11      	ldr	r3, [pc, #68]	@ (8012168 <HAL_UART_MspInit+0x88>)
 8012124:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012126:	4a10      	ldr	r2, [pc, #64]	@ (8012168 <HAL_UART_MspInit+0x88>)
 8012128:	f043 0301 	orr.w	r3, r3, #1
 801212c:	6313      	str	r3, [r2, #48]	@ 0x30
 801212e:	4b0e      	ldr	r3, [pc, #56]	@ (8012168 <HAL_UART_MspInit+0x88>)
 8012130:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012132:	f003 0301 	and.w	r3, r3, #1
 8012136:	60fb      	str	r3, [r7, #12]
 8012138:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 801213a:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 801213e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8012140:	2302      	movs	r3, #2
 8012142:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012144:	2300      	movs	r3, #0
 8012146:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8012148:	2303      	movs	r3, #3
 801214a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 801214c:	2307      	movs	r3, #7
 801214e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8012150:	f107 0314 	add.w	r3, r7, #20
 8012154:	4619      	mov	r1, r3
 8012156:	4805      	ldr	r0, [pc, #20]	@ (801216c <HAL_UART_MspInit+0x8c>)
 8012158:	f003 fac4 	bl	80156e4 <HAL_GPIO_Init>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 801215c:	bf00      	nop
 801215e:	3728      	adds	r7, #40	@ 0x28
 8012160:	46bd      	mov	sp, r7
 8012162:	bd80      	pop	{r7, pc}
 8012164:	40011000 	.word	0x40011000
 8012168:	40023800 	.word	0x40023800
 801216c:	40020000 	.word	0x40020000

08012170 <HAL_HCD_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hhcd: HCD handle pointer
  * @retval None
  */
void HAL_HCD_MspInit(HCD_HandleTypeDef* hhcd)
{
 8012170:	b580      	push	{r7, lr}
 8012172:	b08a      	sub	sp, #40	@ 0x28
 8012174:	af00      	add	r7, sp, #0
 8012176:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8012178:	f107 0314 	add.w	r3, r7, #20
 801217c:	2200      	movs	r2, #0
 801217e:	601a      	str	r2, [r3, #0]
 8012180:	605a      	str	r2, [r3, #4]
 8012182:	609a      	str	r2, [r3, #8]
 8012184:	60da      	str	r2, [r3, #12]
 8012186:	611a      	str	r2, [r3, #16]
  if(hhcd->Instance==USB_OTG_HS)
 8012188:	687b      	ldr	r3, [r7, #4]
 801218a:	681b      	ldr	r3, [r3, #0]
 801218c:	4a24      	ldr	r2, [pc, #144]	@ (8012220 <HAL_HCD_MspInit+0xb0>)
 801218e:	4293      	cmp	r3, r2
 8012190:	d141      	bne.n	8012216 <HAL_HCD_MspInit+0xa6>
  {
    /* USER CODE BEGIN USB_OTG_HS_MspInit 0 */

    /* USER CODE END USB_OTG_HS_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8012192:	2300      	movs	r3, #0
 8012194:	613b      	str	r3, [r7, #16]
 8012196:	4b23      	ldr	r3, [pc, #140]	@ (8012224 <HAL_HCD_MspInit+0xb4>)
 8012198:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801219a:	4a22      	ldr	r2, [pc, #136]	@ (8012224 <HAL_HCD_MspInit+0xb4>)
 801219c:	f043 0302 	orr.w	r3, r3, #2
 80121a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80121a2:	4b20      	ldr	r3, [pc, #128]	@ (8012224 <HAL_HCD_MspInit+0xb4>)
 80121a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80121a6:	f003 0302 	and.w	r3, r3, #2
 80121aa:	613b      	str	r3, [r7, #16]
 80121ac:	693b      	ldr	r3, [r7, #16]
    PB12     ------> USB_OTG_HS_ID
    PB13     ------> USB_OTG_HS_VBUS
    PB14     ------> USB_OTG_HS_DM
    PB15     ------> USB_OTG_HS_DP
    */
    GPIO_InitStruct.Pin = OTG_HS_ID_Pin|OTG_HS_DM_Pin|OTG_HS_DP_Pin;
 80121ae:	f44f 4350 	mov.w	r3, #53248	@ 0xd000
 80121b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80121b4:	2302      	movs	r3, #2
 80121b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80121b8:	2300      	movs	r3, #0
 80121ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80121bc:	2300      	movs	r3, #0
 80121be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 80121c0:	230c      	movs	r3, #12
 80121c2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80121c4:	f107 0314 	add.w	r3, r7, #20
 80121c8:	4619      	mov	r1, r3
 80121ca:	4817      	ldr	r0, [pc, #92]	@ (8012228 <HAL_HCD_MspInit+0xb8>)
 80121cc:	f003 fa8a 	bl	80156e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VBUS_HS_Pin;
 80121d0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80121d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80121d6:	2300      	movs	r3, #0
 80121d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80121da:	2300      	movs	r3, #0
 80121dc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_HS_GPIO_Port, &GPIO_InitStruct);
 80121de:	f107 0314 	add.w	r3, r7, #20
 80121e2:	4619      	mov	r1, r3
 80121e4:	4810      	ldr	r0, [pc, #64]	@ (8012228 <HAL_HCD_MspInit+0xb8>)
 80121e6:	f003 fa7d 	bl	80156e4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 80121ea:	2300      	movs	r3, #0
 80121ec:	60fb      	str	r3, [r7, #12]
 80121ee:	4b0d      	ldr	r3, [pc, #52]	@ (8012224 <HAL_HCD_MspInit+0xb4>)
 80121f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80121f2:	4a0c      	ldr	r2, [pc, #48]	@ (8012224 <HAL_HCD_MspInit+0xb4>)
 80121f4:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80121f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80121fa:	4b0a      	ldr	r3, [pc, #40]	@ (8012224 <HAL_HCD_MspInit+0xb4>)
 80121fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80121fe:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8012202:	60fb      	str	r3, [r7, #12]
 8012204:	68fb      	ldr	r3, [r7, #12]
    /* USB_OTG_HS interrupt Init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 0, 0);
 8012206:	2200      	movs	r2, #0
 8012208:	2100      	movs	r1, #0
 801220a:	204d      	movs	r0, #77	@ 0x4d
 801220c:	f002 fcca 	bl	8014ba4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 8012210:	204d      	movs	r0, #77	@ 0x4d
 8012212:	f002 fce3 	bl	8014bdc <HAL_NVIC_EnableIRQ>

    /* USER CODE END USB_OTG_HS_MspInit 1 */

  }

}
 8012216:	bf00      	nop
 8012218:	3728      	adds	r7, #40	@ 0x28
 801221a:	46bd      	mov	sp, r7
 801221c:	bd80      	pop	{r7, pc}
 801221e:	bf00      	nop
 8012220:	40040000 	.word	0x40040000
 8012224:	40023800 	.word	0x40023800
 8012228:	40020400 	.word	0x40020400

0801222c <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 801222c:	b580      	push	{r7, lr}
 801222e:	b086      	sub	sp, #24
 8012230:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8012232:	1d3b      	adds	r3, r7, #4
 8012234:	2200      	movs	r2, #0
 8012236:	601a      	str	r2, [r3, #0]
 8012238:	605a      	str	r2, [r3, #4]
 801223a:	609a      	str	r2, [r3, #8]
 801223c:	60da      	str	r2, [r3, #12]
 801223e:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8012240:	4b3b      	ldr	r3, [pc, #236]	@ (8012330 <HAL_FMC_MspInit+0x104>)
 8012242:	681b      	ldr	r3, [r3, #0]
 8012244:	2b00      	cmp	r3, #0
 8012246:	d16f      	bne.n	8012328 <HAL_FMC_MspInit+0xfc>
    return;
  }
  FMC_Initialized = 1;
 8012248:	4b39      	ldr	r3, [pc, #228]	@ (8012330 <HAL_FMC_MspInit+0x104>)
 801224a:	2201      	movs	r2, #1
 801224c:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 801224e:	2300      	movs	r3, #0
 8012250:	603b      	str	r3, [r7, #0]
 8012252:	4b38      	ldr	r3, [pc, #224]	@ (8012334 <HAL_FMC_MspInit+0x108>)
 8012254:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012256:	4a37      	ldr	r2, [pc, #220]	@ (8012334 <HAL_FMC_MspInit+0x108>)
 8012258:	f043 0301 	orr.w	r3, r3, #1
 801225c:	6393      	str	r3, [r2, #56]	@ 0x38
 801225e:	4b35      	ldr	r3, [pc, #212]	@ (8012334 <HAL_FMC_MspInit+0x108>)
 8012260:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012262:	f003 0301 	and.w	r3, r3, #1
 8012266:	603b      	str	r3, [r7, #0]
 8012268:	683b      	ldr	r3, [r7, #0]
  PB5   ------> FMC_SDCKE1
  PB6   ------> FMC_SDNE1
  PE0   ------> FMC_NBL0
  PE1   ------> FMC_NBL1
  */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 801226a:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 801226e:	607b      	str	r3, [r7, #4]
                          |A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin
                          |A7_Pin|A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8012270:	2302      	movs	r3, #2
 8012272:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012274:	2300      	movs	r3, #0
 8012276:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8012278:	2303      	movs	r3, #3
 801227a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 801227c:	230c      	movs	r3, #12
 801227e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8012280:	1d3b      	adds	r3, r7, #4
 8012282:	4619      	mov	r1, r3
 8012284:	482c      	ldr	r0, [pc, #176]	@ (8012338 <HAL_FMC_MspInit+0x10c>)
 8012286:	f003 fa2d 	bl	80156e4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SDNWE_Pin;
 801228a:	2301      	movs	r3, #1
 801228c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801228e:	2302      	movs	r3, #2
 8012290:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012292:	2300      	movs	r3, #0
 8012294:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8012296:	2303      	movs	r3, #3
 8012298:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 801229a:	230c      	movs	r3, #12
 801229c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 801229e:	1d3b      	adds	r3, r7, #4
 80122a0:	4619      	mov	r1, r3
 80122a2:	4826      	ldr	r0, [pc, #152]	@ (801233c <HAL_FMC_MspInit+0x110>)
 80122a4:	f003 fa1e 	bl	80156e4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin
 80122a8:	f248 1333 	movw	r3, #33075	@ 0x8133
 80122ac:	607b      	str	r3, [r7, #4]
                          |SDCLK_Pin|SDNCAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80122ae:	2302      	movs	r3, #2
 80122b0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80122b2:	2300      	movs	r3, #0
 80122b4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80122b6:	2303      	movs	r3, #3
 80122b8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80122ba:	230c      	movs	r3, #12
 80122bc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80122be:	1d3b      	adds	r3, r7, #4
 80122c0:	4619      	mov	r1, r3
 80122c2:	481f      	ldr	r0, [pc, #124]	@ (8012340 <HAL_FMC_MspInit+0x114>)
 80122c4:	f003 fa0e 	bl	80156e4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 80122c8:	f64f 7383 	movw	r3, #65411	@ 0xff83
 80122cc:	607b      	str	r3, [r7, #4]
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin
                          |D12_Pin|NBL0_Pin|NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80122ce:	2302      	movs	r3, #2
 80122d0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80122d2:	2300      	movs	r3, #0
 80122d4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80122d6:	2303      	movs	r3, #3
 80122d8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80122da:	230c      	movs	r3, #12
 80122dc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80122de:	1d3b      	adds	r3, r7, #4
 80122e0:	4619      	mov	r1, r3
 80122e2:	4818      	ldr	r0, [pc, #96]	@ (8012344 <HAL_FMC_MspInit+0x118>)
 80122e4:	f003 f9fe 	bl	80156e4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin
 80122e8:	f24c 7303 	movw	r3, #50947	@ 0xc703
 80122ec:	607b      	str	r3, [r7, #4]
                          |D1_Pin|D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80122ee:	2302      	movs	r3, #2
 80122f0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80122f2:	2300      	movs	r3, #0
 80122f4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80122f6:	2303      	movs	r3, #3
 80122f8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80122fa:	230c      	movs	r3, #12
 80122fc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80122fe:	1d3b      	adds	r3, r7, #4
 8012300:	4619      	mov	r1, r3
 8012302:	4811      	ldr	r0, [pc, #68]	@ (8012348 <HAL_FMC_MspInit+0x11c>)
 8012304:	f003 f9ee 	bl	80156e4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 8012308:	2360      	movs	r3, #96	@ 0x60
 801230a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801230c:	2302      	movs	r3, #2
 801230e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012310:	2300      	movs	r3, #0
 8012312:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8012314:	2303      	movs	r3, #3
 8012316:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8012318:	230c      	movs	r3, #12
 801231a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 801231c:	1d3b      	adds	r3, r7, #4
 801231e:	4619      	mov	r1, r3
 8012320:	480a      	ldr	r0, [pc, #40]	@ (801234c <HAL_FMC_MspInit+0x120>)
 8012322:	f003 f9df 	bl	80156e4 <HAL_GPIO_Init>
 8012326:	e000      	b.n	801232a <HAL_FMC_MspInit+0xfe>
    return;
 8012328:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 801232a:	3718      	adds	r7, #24
 801232c:	46bd      	mov	sp, r7
 801232e:	bd80      	pop	{r7, pc}
 8012330:	200019ec 	.word	0x200019ec
 8012334:	40023800 	.word	0x40023800
 8012338:	40021400 	.word	0x40021400
 801233c:	40020800 	.word	0x40020800
 8012340:	40021800 	.word	0x40021800
 8012344:	40021000 	.word	0x40021000
 8012348:	40020c00 	.word	0x40020c00
 801234c:	40020400 	.word	0x40020400

08012350 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8012350:	b580      	push	{r7, lr}
 8012352:	b082      	sub	sp, #8
 8012354:	af00      	add	r7, sp, #0
 8012356:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8012358:	f7ff ff68 	bl	801222c <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 801235c:	bf00      	nop
 801235e:	3708      	adds	r7, #8
 8012360:	46bd      	mov	sp, r7
 8012362:	bd80      	pop	{r7, pc}

08012364 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8012364:	b580      	push	{r7, lr}
 8012366:	b08e      	sub	sp, #56	@ 0x38
 8012368:	af00      	add	r7, sp, #0
 801236a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 801236c:	2300      	movs	r3, #0
 801236e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8012370:	2300      	movs	r3, #0
 8012372:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8012374:	2300      	movs	r3, #0
 8012376:	60fb      	str	r3, [r7, #12]
 8012378:	4b33      	ldr	r3, [pc, #204]	@ (8012448 <HAL_InitTick+0xe4>)
 801237a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801237c:	4a32      	ldr	r2, [pc, #200]	@ (8012448 <HAL_InitTick+0xe4>)
 801237e:	f043 0310 	orr.w	r3, r3, #16
 8012382:	6413      	str	r3, [r2, #64]	@ 0x40
 8012384:	4b30      	ldr	r3, [pc, #192]	@ (8012448 <HAL_InitTick+0xe4>)
 8012386:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8012388:	f003 0310 	and.w	r3, r3, #16
 801238c:	60fb      	str	r3, [r7, #12]
 801238e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8012390:	f107 0210 	add.w	r2, r7, #16
 8012394:	f107 0314 	add.w	r3, r7, #20
 8012398:	4611      	mov	r1, r2
 801239a:	4618      	mov	r0, r3
 801239c:	f007 fb54 	bl	8019a48 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80123a0:	6a3b      	ldr	r3, [r7, #32]
 80123a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80123a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80123a6:	2b00      	cmp	r3, #0
 80123a8:	d103      	bne.n	80123b2 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80123aa:	f007 fb25 	bl	80199f8 <HAL_RCC_GetPCLK1Freq>
 80123ae:	6378      	str	r0, [r7, #52]	@ 0x34
 80123b0:	e004      	b.n	80123bc <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80123b2:	f007 fb21 	bl	80199f8 <HAL_RCC_GetPCLK1Freq>
 80123b6:	4603      	mov	r3, r0
 80123b8:	005b      	lsls	r3, r3, #1
 80123ba:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80123bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80123be:	4a23      	ldr	r2, [pc, #140]	@ (801244c <HAL_InitTick+0xe8>)
 80123c0:	fba2 2303 	umull	r2, r3, r2, r3
 80123c4:	0c9b      	lsrs	r3, r3, #18
 80123c6:	3b01      	subs	r3, #1
 80123c8:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80123ca:	4b21      	ldr	r3, [pc, #132]	@ (8012450 <HAL_InitTick+0xec>)
 80123cc:	4a21      	ldr	r2, [pc, #132]	@ (8012454 <HAL_InitTick+0xf0>)
 80123ce:	601a      	str	r2, [r3, #0]
   * Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80123d0:	4b1f      	ldr	r3, [pc, #124]	@ (8012450 <HAL_InitTick+0xec>)
 80123d2:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80123d6:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80123d8:	4a1d      	ldr	r2, [pc, #116]	@ (8012450 <HAL_InitTick+0xec>)
 80123da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80123dc:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80123de:	4b1c      	ldr	r3, [pc, #112]	@ (8012450 <HAL_InitTick+0xec>)
 80123e0:	2200      	movs	r2, #0
 80123e2:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80123e4:	4b1a      	ldr	r3, [pc, #104]	@ (8012450 <HAL_InitTick+0xec>)
 80123e6:	2200      	movs	r2, #0
 80123e8:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80123ea:	4b19      	ldr	r3, [pc, #100]	@ (8012450 <HAL_InitTick+0xec>)
 80123ec:	2200      	movs	r2, #0
 80123ee:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 80123f0:	4817      	ldr	r0, [pc, #92]	@ (8012450 <HAL_InitTick+0xec>)
 80123f2:	f008 fbb3 	bl	801ab5c <HAL_TIM_Base_Init>
 80123f6:	4603      	mov	r3, r0
 80123f8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 80123fc:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8012400:	2b00      	cmp	r3, #0
 8012402:	d11b      	bne.n	801243c <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8012404:	4812      	ldr	r0, [pc, #72]	@ (8012450 <HAL_InitTick+0xec>)
 8012406:	f008 fbf9 	bl	801abfc <HAL_TIM_Base_Start_IT>
 801240a:	4603      	mov	r3, r0
 801240c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8012410:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8012414:	2b00      	cmp	r3, #0
 8012416:	d111      	bne.n	801243c <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8012418:	2036      	movs	r0, #54	@ 0x36
 801241a:	f002 fbdf 	bl	8014bdc <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 801241e:	687b      	ldr	r3, [r7, #4]
 8012420:	2b0f      	cmp	r3, #15
 8012422:	d808      	bhi.n	8012436 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8012424:	2200      	movs	r2, #0
 8012426:	6879      	ldr	r1, [r7, #4]
 8012428:	2036      	movs	r0, #54	@ 0x36
 801242a:	f002 fbbb 	bl	8014ba4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 801242e:	4a0a      	ldr	r2, [pc, #40]	@ (8012458 <HAL_InitTick+0xf4>)
 8012430:	687b      	ldr	r3, [r7, #4]
 8012432:	6013      	str	r3, [r2, #0]
 8012434:	e002      	b.n	801243c <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8012436:	2301      	movs	r3, #1
 8012438:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 801243c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8012440:	4618      	mov	r0, r3
 8012442:	3738      	adds	r7, #56	@ 0x38
 8012444:	46bd      	mov	sp, r7
 8012446:	bd80      	pop	{r7, pc}
 8012448:	40023800 	.word	0x40023800
 801244c:	431bde83 	.word	0x431bde83
 8012450:	200019f0 	.word	0x200019f0
 8012454:	40001000 	.word	0x40001000
 8012458:	20000084 	.word	0x20000084

0801245c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 801245c:	b480      	push	{r7}
 801245e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8012460:	bf00      	nop
 8012462:	e7fd      	b.n	8012460 <NMI_Handler+0x4>

08012464 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8012464:	b480      	push	{r7}
 8012466:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8012468:	bf00      	nop
 801246a:	e7fd      	b.n	8012468 <HardFault_Handler+0x4>

0801246c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 801246c:	b480      	push	{r7}
 801246e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8012470:	bf00      	nop
 8012472:	e7fd      	b.n	8012470 <MemManage_Handler+0x4>

08012474 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8012474:	b480      	push	{r7}
 8012476:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8012478:	bf00      	nop
 801247a:	e7fd      	b.n	8012478 <BusFault_Handler+0x4>

0801247c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 801247c:	b480      	push	{r7}
 801247e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8012480:	bf00      	nop
 8012482:	e7fd      	b.n	8012480 <UsageFault_Handler+0x4>

08012484 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8012484:	b480      	push	{r7}
 8012486:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8012488:	bf00      	nop
 801248a:	46bd      	mov	sp, r7
 801248c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012490:	4770      	bx	lr

08012492 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8012492:	b480      	push	{r7}
 8012494:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8012496:	bf00      	nop
 8012498:	46bd      	mov	sp, r7
 801249a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801249e:	4770      	bx	lr

080124a0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80124a0:	b480      	push	{r7}
 80124a2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80124a4:	bf00      	nop
 80124a6:	46bd      	mov	sp, r7
 80124a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124ac:	4770      	bx	lr

080124ae <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80124ae:	b480      	push	{r7}
 80124b0:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80124b2:	bf00      	nop
 80124b4:	46bd      	mov	sp, r7
 80124b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124ba:	4770      	bx	lr

080124bc <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80124bc:	b580      	push	{r7, lr}
 80124be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80124c0:	4802      	ldr	r0, [pc, #8]	@ (80124cc <TIM6_DAC_IRQHandler+0x10>)
 80124c2:	f008 fc0b 	bl	801acdc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80124c6:	bf00      	nop
 80124c8:	bd80      	pop	{r7, pc}
 80124ca:	bf00      	nop
 80124cc:	200019f0 	.word	0x200019f0

080124d0 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 80124d0:	b580      	push	{r7, lr}
 80124d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_HS);
 80124d4:	4802      	ldr	r0, [pc, #8]	@ (80124e0 <OTG_HS_IRQHandler+0x10>)
 80124d6:	f003 fc3d 	bl	8015d54 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 80124da:	bf00      	nop
 80124dc:	bd80      	pop	{r7, pc}
 80124de:	bf00      	nop
 80124e0:	200015c8 	.word	0x200015c8

080124e4 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 80124e4:	b580      	push	{r7, lr}
 80124e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 80124e8:	4802      	ldr	r0, [pc, #8]	@ (80124f4 <LTDC_IRQHandler+0x10>)
 80124ea:	f006 fb77 	bl	8018bdc <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 80124ee:	bf00      	nop
 80124f0:	bd80      	pop	{r7, pc}
 80124f2:	bf00      	nop
 80124f4:	20001438 	.word	0x20001438

080124f8 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 80124f8:	b580      	push	{r7, lr}
 80124fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 80124fc:	4802      	ldr	r0, [pc, #8]	@ (8012508 <DMA2D_IRQHandler+0x10>)
 80124fe:	f002 feb2 	bl	8015266 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 8012502:	bf00      	nop
 8012504:	bd80      	pop	{r7, pc}
 8012506:	bf00      	nop
 8012508:	200013a4 	.word	0x200013a4

0801250c <_write>:

#include <sys/stat.h>
#include <errno.h>
#include <unistd.h>

int _write(int file, char *ptr, int len) {
 801250c:	b480      	push	{r7}
 801250e:	b085      	sub	sp, #20
 8012510:	af00      	add	r7, sp, #0
 8012512:	60f8      	str	r0, [r7, #12]
 8012514:	60b9      	str	r1, [r7, #8]
 8012516:	607a      	str	r2, [r7, #4]
    return len;
 8012518:	687b      	ldr	r3, [r7, #4]
}
 801251a:	4618      	mov	r0, r3
 801251c:	3714      	adds	r7, #20
 801251e:	46bd      	mov	sp, r7
 8012520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012524:	4770      	bx	lr

08012526 <_read>:

int _read(int file, char *ptr, int len) {
 8012526:	b580      	push	{r7, lr}
 8012528:	b084      	sub	sp, #16
 801252a:	af00      	add	r7, sp, #0
 801252c:	60f8      	str	r0, [r7, #12]
 801252e:	60b9      	str	r1, [r7, #8]
 8012530:	607a      	str	r2, [r7, #4]
    errno = ENOSYS;
 8012532:	f021 fc75 	bl	8033e20 <__errno>
 8012536:	4603      	mov	r3, r0
 8012538:	2258      	movs	r2, #88	@ 0x58
 801253a:	601a      	str	r2, [r3, #0]
    return -1;
 801253c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8012540:	4618      	mov	r0, r3
 8012542:	3710      	adds	r7, #16
 8012544:	46bd      	mov	sp, r7
 8012546:	bd80      	pop	{r7, pc}

08012548 <_close>:

int _close(int file) {
 8012548:	b580      	push	{r7, lr}
 801254a:	b082      	sub	sp, #8
 801254c:	af00      	add	r7, sp, #0
 801254e:	6078      	str	r0, [r7, #4]
    errno = ENOSYS;
 8012550:	f021 fc66 	bl	8033e20 <__errno>
 8012554:	4603      	mov	r3, r0
 8012556:	2258      	movs	r2, #88	@ 0x58
 8012558:	601a      	str	r2, [r3, #0]
    return -1;
 801255a:	f04f 33ff 	mov.w	r3, #4294967295
}
 801255e:	4618      	mov	r0, r3
 8012560:	3708      	adds	r7, #8
 8012562:	46bd      	mov	sp, r7
 8012564:	bd80      	pop	{r7, pc}

08012566 <_lseek>:

int _lseek(int file, int ptr, int dir) {
 8012566:	b580      	push	{r7, lr}
 8012568:	b084      	sub	sp, #16
 801256a:	af00      	add	r7, sp, #0
 801256c:	60f8      	str	r0, [r7, #12]
 801256e:	60b9      	str	r1, [r7, #8]
 8012570:	607a      	str	r2, [r7, #4]
    errno = ENOSYS;
 8012572:	f021 fc55 	bl	8033e20 <__errno>
 8012576:	4603      	mov	r3, r0
 8012578:	2258      	movs	r2, #88	@ 0x58
 801257a:	601a      	str	r2, [r3, #0]
    return -1;
 801257c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8012580:	4618      	mov	r0, r3
 8012582:	3710      	adds	r7, #16
 8012584:	46bd      	mov	sp, r7
 8012586:	bd80      	pop	{r7, pc}

08012588 <_fstat>:

int _fstat(int file, struct stat *st) {
 8012588:	b480      	push	{r7}
 801258a:	b083      	sub	sp, #12
 801258c:	af00      	add	r7, sp, #0
 801258e:	6078      	str	r0, [r7, #4]
 8012590:	6039      	str	r1, [r7, #0]
    st->st_mode = S_IFCHR;
 8012592:	683b      	ldr	r3, [r7, #0]
 8012594:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8012598:	605a      	str	r2, [r3, #4]
    return 0;
 801259a:	2300      	movs	r3, #0
}
 801259c:	4618      	mov	r0, r3
 801259e:	370c      	adds	r7, #12
 80125a0:	46bd      	mov	sp, r7
 80125a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125a6:	4770      	bx	lr

080125a8 <_isatty>:

int _isatty(int file) {
 80125a8:	b480      	push	{r7}
 80125aa:	b083      	sub	sp, #12
 80125ac:	af00      	add	r7, sp, #0
 80125ae:	6078      	str	r0, [r7, #4]
    return 1;
 80125b0:	2301      	movs	r3, #1
}
 80125b2:	4618      	mov	r0, r3
 80125b4:	370c      	adds	r7, #12
 80125b6:	46bd      	mov	sp, r7
 80125b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125bc:	4770      	bx	lr

080125be <_kill>:

int _kill(int pid, int sig) {
 80125be:	b480      	push	{r7}
 80125c0:	b083      	sub	sp, #12
 80125c2:	af00      	add	r7, sp, #0
 80125c4:	6078      	str	r0, [r7, #4]
 80125c6:	6039      	str	r1, [r7, #0]
  return -1;
 80125c8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80125cc:	4618      	mov	r0, r3
 80125ce:	370c      	adds	r7, #12
 80125d0:	46bd      	mov	sp, r7
 80125d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125d6:	4770      	bx	lr

080125d8 <_getpid>:

int _getpid(void) {
 80125d8:	b480      	push	{r7}
 80125da:	af00      	add	r7, sp, #0
  return 1;
 80125dc:	2301      	movs	r3, #1
}
 80125de:	4618      	mov	r0, r3
 80125e0:	46bd      	mov	sp, r7
 80125e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125e6:	4770      	bx	lr

080125e8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80125e8:	b580      	push	{r7, lr}
 80125ea:	b086      	sub	sp, #24
 80125ec:	af00      	add	r7, sp, #0
 80125ee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80125f0:	4a14      	ldr	r2, [pc, #80]	@ (8012644 <_sbrk+0x5c>)
 80125f2:	4b15      	ldr	r3, [pc, #84]	@ (8012648 <_sbrk+0x60>)
 80125f4:	1ad3      	subs	r3, r2, r3
 80125f6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80125f8:	697b      	ldr	r3, [r7, #20]
 80125fa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80125fc:	4b13      	ldr	r3, [pc, #76]	@ (801264c <_sbrk+0x64>)
 80125fe:	681b      	ldr	r3, [r3, #0]
 8012600:	2b00      	cmp	r3, #0
 8012602:	d102      	bne.n	801260a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8012604:	4b11      	ldr	r3, [pc, #68]	@ (801264c <_sbrk+0x64>)
 8012606:	4a12      	ldr	r2, [pc, #72]	@ (8012650 <_sbrk+0x68>)
 8012608:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 801260a:	4b10      	ldr	r3, [pc, #64]	@ (801264c <_sbrk+0x64>)
 801260c:	681a      	ldr	r2, [r3, #0]
 801260e:	687b      	ldr	r3, [r7, #4]
 8012610:	4413      	add	r3, r2
 8012612:	693a      	ldr	r2, [r7, #16]
 8012614:	429a      	cmp	r2, r3
 8012616:	d207      	bcs.n	8012628 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8012618:	f021 fc02 	bl	8033e20 <__errno>
 801261c:	4603      	mov	r3, r0
 801261e:	220c      	movs	r2, #12
 8012620:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8012622:	f04f 33ff 	mov.w	r3, #4294967295
 8012626:	e009      	b.n	801263c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8012628:	4b08      	ldr	r3, [pc, #32]	@ (801264c <_sbrk+0x64>)
 801262a:	681b      	ldr	r3, [r3, #0]
 801262c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 801262e:	4b07      	ldr	r3, [pc, #28]	@ (801264c <_sbrk+0x64>)
 8012630:	681a      	ldr	r2, [r3, #0]
 8012632:	687b      	ldr	r3, [r7, #4]
 8012634:	4413      	add	r3, r2
 8012636:	4a05      	ldr	r2, [pc, #20]	@ (801264c <_sbrk+0x64>)
 8012638:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 801263a:	68fb      	ldr	r3, [r7, #12]
}
 801263c:	4618      	mov	r0, r3
 801263e:	3718      	adds	r7, #24
 8012640:	46bd      	mov	sp, r7
 8012642:	bd80      	pop	{r7, pc}
 8012644:	20030000 	.word	0x20030000
 8012648:	00002000 	.word	0x00002000
 801264c:	20001a38 	.word	0x20001a38
 8012650:	200057f8 	.word	0x200057f8

08012654 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8012654:	b480      	push	{r7}
 8012656:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8012658:	4b06      	ldr	r3, [pc, #24]	@ (8012674 <SystemInit+0x20>)
 801265a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801265e:	4a05      	ldr	r2, [pc, #20]	@ (8012674 <SystemInit+0x20>)
 8012660:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8012664:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8012668:	bf00      	nop
 801266a:	46bd      	mov	sp, r7
 801266c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012670:	4770      	bx	lr
 8012672:	bf00      	nop
 8012674:	e000ed00 	.word	0xe000ed00

08012678 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8012678:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80126b0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 801267c:	f7ff ffea 	bl	8012654 <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8012680:	480c      	ldr	r0, [pc, #48]	@ (80126b4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8012682:	490d      	ldr	r1, [pc, #52]	@ (80126b8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8012684:	4a0d      	ldr	r2, [pc, #52]	@ (80126bc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8012686:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8012688:	e002      	b.n	8012690 <LoopCopyDataInit>

0801268a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 801268a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 801268c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 801268e:	3304      	adds	r3, #4

08012690 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8012690:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8012692:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8012694:	d3f9      	bcc.n	801268a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8012696:	4a0a      	ldr	r2, [pc, #40]	@ (80126c0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8012698:	4c0a      	ldr	r4, [pc, #40]	@ (80126c4 <LoopFillZerobss+0x22>)
  movs r3, #0
 801269a:	2300      	movs	r3, #0
  b LoopFillZerobss
 801269c:	e001      	b.n	80126a2 <LoopFillZerobss>

0801269e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 801269e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80126a0:	3204      	adds	r2, #4

080126a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80126a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80126a4:	d3fb      	bcc.n	801269e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80126a6:	f021 fbc1 	bl	8033e2c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80126aa:	f7fe fb9f 	bl	8010dec <main>
  bx  lr    
 80126ae:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80126b0:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80126b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80126b8:	20001364 	.word	0x20001364
  ldr r2, =_sidata
 80126bc:	0803bd0c 	.word	0x0803bd0c
  ldr r2, =_sbss
 80126c0:	20001380 	.word	0x20001380
  ldr r4, =_ebss
 80126c4:	200057f4 	.word	0x200057f4

080126c8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80126c8:	e7fe      	b.n	80126c8 <ADC_IRQHandler>

080126ca <ili9341_Init>:
  * @brief  Power on the LCD.
  * @param  None
  * @retval None
  */
void ili9341_Init(void)
{
 80126ca:	b580      	push	{r7, lr}
 80126cc:	af00      	add	r7, sp, #0
  /* Initialize ILI9341 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 80126ce:	f000 fe49 	bl	8013364 <LCD_IO_Init>
  
  /* Configure LCD */
  ili9341_WriteReg(0xCA);
 80126d2:	20ca      	movs	r0, #202	@ 0xca
 80126d4:	f000 f95d 	bl	8012992 <ili9341_WriteReg>
  ili9341_WriteData(0xC3);
 80126d8:	20c3      	movs	r0, #195	@ 0xc3
 80126da:	f000 f967 	bl	80129ac <ili9341_WriteData>
  ili9341_WriteData(0x08);
 80126de:	2008      	movs	r0, #8
 80126e0:	f000 f964 	bl	80129ac <ili9341_WriteData>
  ili9341_WriteData(0x50);
 80126e4:	2050      	movs	r0, #80	@ 0x50
 80126e6:	f000 f961 	bl	80129ac <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERB);
 80126ea:	20cf      	movs	r0, #207	@ 0xcf
 80126ec:	f000 f951 	bl	8012992 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 80126f0:	2000      	movs	r0, #0
 80126f2:	f000 f95b 	bl	80129ac <ili9341_WriteData>
  ili9341_WriteData(0xC1);
 80126f6:	20c1      	movs	r0, #193	@ 0xc1
 80126f8:	f000 f958 	bl	80129ac <ili9341_WriteData>
  ili9341_WriteData(0x30);
 80126fc:	2030      	movs	r0, #48	@ 0x30
 80126fe:	f000 f955 	bl	80129ac <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER_SEQ);
 8012702:	20ed      	movs	r0, #237	@ 0xed
 8012704:	f000 f945 	bl	8012992 <ili9341_WriteReg>
  ili9341_WriteData(0x64);
 8012708:	2064      	movs	r0, #100	@ 0x64
 801270a:	f000 f94f 	bl	80129ac <ili9341_WriteData>
  ili9341_WriteData(0x03);
 801270e:	2003      	movs	r0, #3
 8012710:	f000 f94c 	bl	80129ac <ili9341_WriteData>
  ili9341_WriteData(0x12);
 8012714:	2012      	movs	r0, #18
 8012716:	f000 f949 	bl	80129ac <ili9341_WriteData>
  ili9341_WriteData(0x81);
 801271a:	2081      	movs	r0, #129	@ 0x81
 801271c:	f000 f946 	bl	80129ac <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCA);
 8012720:	20e8      	movs	r0, #232	@ 0xe8
 8012722:	f000 f936 	bl	8012992 <ili9341_WriteReg>
  ili9341_WriteData(0x85);
 8012726:	2085      	movs	r0, #133	@ 0x85
 8012728:	f000 f940 	bl	80129ac <ili9341_WriteData>
  ili9341_WriteData(0x00);
 801272c:	2000      	movs	r0, #0
 801272e:	f000 f93d 	bl	80129ac <ili9341_WriteData>
  ili9341_WriteData(0x78);
 8012732:	2078      	movs	r0, #120	@ 0x78
 8012734:	f000 f93a 	bl	80129ac <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERA);
 8012738:	20cb      	movs	r0, #203	@ 0xcb
 801273a:	f000 f92a 	bl	8012992 <ili9341_WriteReg>
  ili9341_WriteData(0x39);
 801273e:	2039      	movs	r0, #57	@ 0x39
 8012740:	f000 f934 	bl	80129ac <ili9341_WriteData>
  ili9341_WriteData(0x2C);
 8012744:	202c      	movs	r0, #44	@ 0x2c
 8012746:	f000 f931 	bl	80129ac <ili9341_WriteData>
  ili9341_WriteData(0x00);
 801274a:	2000      	movs	r0, #0
 801274c:	f000 f92e 	bl	80129ac <ili9341_WriteData>
  ili9341_WriteData(0x34);
 8012750:	2034      	movs	r0, #52	@ 0x34
 8012752:	f000 f92b 	bl	80129ac <ili9341_WriteData>
  ili9341_WriteData(0x02);
 8012756:	2002      	movs	r0, #2
 8012758:	f000 f928 	bl	80129ac <ili9341_WriteData>
  ili9341_WriteReg(LCD_PRC);
 801275c:	20f7      	movs	r0, #247	@ 0xf7
 801275e:	f000 f918 	bl	8012992 <ili9341_WriteReg>
  ili9341_WriteData(0x20);
 8012762:	2020      	movs	r0, #32
 8012764:	f000 f922 	bl	80129ac <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCB);
 8012768:	20ea      	movs	r0, #234	@ 0xea
 801276a:	f000 f912 	bl	8012992 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 801276e:	2000      	movs	r0, #0
 8012770:	f000 f91c 	bl	80129ac <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8012774:	2000      	movs	r0, #0
 8012776:	f000 f919 	bl	80129ac <ili9341_WriteData>
  ili9341_WriteReg(LCD_FRMCTR1);
 801277a:	20b1      	movs	r0, #177	@ 0xb1
 801277c:	f000 f909 	bl	8012992 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8012780:	2000      	movs	r0, #0
 8012782:	f000 f913 	bl	80129ac <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 8012786:	201b      	movs	r0, #27
 8012788:	f000 f910 	bl	80129ac <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 801278c:	20b6      	movs	r0, #182	@ 0xb6
 801278e:	f000 f900 	bl	8012992 <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 8012792:	200a      	movs	r0, #10
 8012794:	f000 f90a 	bl	80129ac <ili9341_WriteData>
  ili9341_WriteData(0xA2);
 8012798:	20a2      	movs	r0, #162	@ 0xa2
 801279a:	f000 f907 	bl	80129ac <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER1);
 801279e:	20c0      	movs	r0, #192	@ 0xc0
 80127a0:	f000 f8f7 	bl	8012992 <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 80127a4:	2010      	movs	r0, #16
 80127a6:	f000 f901 	bl	80129ac <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER2);
 80127aa:	20c1      	movs	r0, #193	@ 0xc1
 80127ac:	f000 f8f1 	bl	8012992 <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 80127b0:	2010      	movs	r0, #16
 80127b2:	f000 f8fb 	bl	80129ac <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM1);
 80127b6:	20c5      	movs	r0, #197	@ 0xc5
 80127b8:	f000 f8eb 	bl	8012992 <ili9341_WriteReg>
  ili9341_WriteData(0x45);
 80127bc:	2045      	movs	r0, #69	@ 0x45
 80127be:	f000 f8f5 	bl	80129ac <ili9341_WriteData>
  ili9341_WriteData(0x15);
 80127c2:	2015      	movs	r0, #21
 80127c4:	f000 f8f2 	bl	80129ac <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM2);
 80127c8:	20c7      	movs	r0, #199	@ 0xc7
 80127ca:	f000 f8e2 	bl	8012992 <ili9341_WriteReg>
  ili9341_WriteData(0x90);
 80127ce:	2090      	movs	r0, #144	@ 0x90
 80127d0:	f000 f8ec 	bl	80129ac <ili9341_WriteData>
  ili9341_WriteReg(LCD_MAC);
 80127d4:	2036      	movs	r0, #54	@ 0x36
 80127d6:	f000 f8dc 	bl	8012992 <ili9341_WriteReg>
  ili9341_WriteData(0xC8);
 80127da:	20c8      	movs	r0, #200	@ 0xc8
 80127dc:	f000 f8e6 	bl	80129ac <ili9341_WriteData>
  ili9341_WriteReg(LCD_3GAMMA_EN);
 80127e0:	20f2      	movs	r0, #242	@ 0xf2
 80127e2:	f000 f8d6 	bl	8012992 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 80127e6:	2000      	movs	r0, #0
 80127e8:	f000 f8e0 	bl	80129ac <ili9341_WriteData>
  ili9341_WriteReg(LCD_RGB_INTERFACE);
 80127ec:	20b0      	movs	r0, #176	@ 0xb0
 80127ee:	f000 f8d0 	bl	8012992 <ili9341_WriteReg>
  ili9341_WriteData(0xC2);
 80127f2:	20c2      	movs	r0, #194	@ 0xc2
 80127f4:	f000 f8da 	bl	80129ac <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 80127f8:	20b6      	movs	r0, #182	@ 0xb6
 80127fa:	f000 f8ca 	bl	8012992 <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 80127fe:	200a      	movs	r0, #10
 8012800:	f000 f8d4 	bl	80129ac <ili9341_WriteData>
  ili9341_WriteData(0xA7);
 8012804:	20a7      	movs	r0, #167	@ 0xa7
 8012806:	f000 f8d1 	bl	80129ac <ili9341_WriteData>
  ili9341_WriteData(0x27);
 801280a:	2027      	movs	r0, #39	@ 0x27
 801280c:	f000 f8ce 	bl	80129ac <ili9341_WriteData>
  ili9341_WriteData(0x04);
 8012810:	2004      	movs	r0, #4
 8012812:	f000 f8cb 	bl	80129ac <ili9341_WriteData>
  
  /* Colomn address set */
  ili9341_WriteReg(LCD_COLUMN_ADDR);
 8012816:	202a      	movs	r0, #42	@ 0x2a
 8012818:	f000 f8bb 	bl	8012992 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 801281c:	2000      	movs	r0, #0
 801281e:	f000 f8c5 	bl	80129ac <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8012822:	2000      	movs	r0, #0
 8012824:	f000 f8c2 	bl	80129ac <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8012828:	2000      	movs	r0, #0
 801282a:	f000 f8bf 	bl	80129ac <ili9341_WriteData>
  ili9341_WriteData(0xEF);
 801282e:	20ef      	movs	r0, #239	@ 0xef
 8012830:	f000 f8bc 	bl	80129ac <ili9341_WriteData>
  /* Page address set */
  ili9341_WriteReg(LCD_PAGE_ADDR);
 8012834:	202b      	movs	r0, #43	@ 0x2b
 8012836:	f000 f8ac 	bl	8012992 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 801283a:	2000      	movs	r0, #0
 801283c:	f000 f8b6 	bl	80129ac <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8012840:	2000      	movs	r0, #0
 8012842:	f000 f8b3 	bl	80129ac <ili9341_WriteData>
  ili9341_WriteData(0x01);
 8012846:	2001      	movs	r0, #1
 8012848:	f000 f8b0 	bl	80129ac <ili9341_WriteData>
  ili9341_WriteData(0x3F);
 801284c:	203f      	movs	r0, #63	@ 0x3f
 801284e:	f000 f8ad 	bl	80129ac <ili9341_WriteData>
  ili9341_WriteReg(LCD_INTERFACE);
 8012852:	20f6      	movs	r0, #246	@ 0xf6
 8012854:	f000 f89d 	bl	8012992 <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 8012858:	2001      	movs	r0, #1
 801285a:	f000 f8a7 	bl	80129ac <ili9341_WriteData>
  ili9341_WriteData(0x00);
 801285e:	2000      	movs	r0, #0
 8012860:	f000 f8a4 	bl	80129ac <ili9341_WriteData>
  ili9341_WriteData(0x06);
 8012864:	2006      	movs	r0, #6
 8012866:	f000 f8a1 	bl	80129ac <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_GRAM);
 801286a:	202c      	movs	r0, #44	@ 0x2c
 801286c:	f000 f891 	bl	8012992 <ili9341_WriteReg>
  LCD_Delay(200);
 8012870:	20c8      	movs	r0, #200	@ 0xc8
 8012872:	f000 fe65 	bl	8013540 <LCD_Delay>
  
  ili9341_WriteReg(LCD_GAMMA);
 8012876:	2026      	movs	r0, #38	@ 0x26
 8012878:	f000 f88b 	bl	8012992 <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 801287c:	2001      	movs	r0, #1
 801287e:	f000 f895 	bl	80129ac <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_PGAMMA);
 8012882:	20e0      	movs	r0, #224	@ 0xe0
 8012884:	f000 f885 	bl	8012992 <ili9341_WriteReg>
  ili9341_WriteData(0x0F);
 8012888:	200f      	movs	r0, #15
 801288a:	f000 f88f 	bl	80129ac <ili9341_WriteData>
  ili9341_WriteData(0x29);
 801288e:	2029      	movs	r0, #41	@ 0x29
 8012890:	f000 f88c 	bl	80129ac <ili9341_WriteData>
  ili9341_WriteData(0x24);
 8012894:	2024      	movs	r0, #36	@ 0x24
 8012896:	f000 f889 	bl	80129ac <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 801289a:	200c      	movs	r0, #12
 801289c:	f000 f886 	bl	80129ac <ili9341_WriteData>
  ili9341_WriteData(0x0E);
 80128a0:	200e      	movs	r0, #14
 80128a2:	f000 f883 	bl	80129ac <ili9341_WriteData>
  ili9341_WriteData(0x09);
 80128a6:	2009      	movs	r0, #9
 80128a8:	f000 f880 	bl	80129ac <ili9341_WriteData>
  ili9341_WriteData(0x4E);
 80128ac:	204e      	movs	r0, #78	@ 0x4e
 80128ae:	f000 f87d 	bl	80129ac <ili9341_WriteData>
  ili9341_WriteData(0x78);
 80128b2:	2078      	movs	r0, #120	@ 0x78
 80128b4:	f000 f87a 	bl	80129ac <ili9341_WriteData>
  ili9341_WriteData(0x3C);
 80128b8:	203c      	movs	r0, #60	@ 0x3c
 80128ba:	f000 f877 	bl	80129ac <ili9341_WriteData>
  ili9341_WriteData(0x09);
 80128be:	2009      	movs	r0, #9
 80128c0:	f000 f874 	bl	80129ac <ili9341_WriteData>
  ili9341_WriteData(0x13);
 80128c4:	2013      	movs	r0, #19
 80128c6:	f000 f871 	bl	80129ac <ili9341_WriteData>
  ili9341_WriteData(0x05);
 80128ca:	2005      	movs	r0, #5
 80128cc:	f000 f86e 	bl	80129ac <ili9341_WriteData>
  ili9341_WriteData(0x17);
 80128d0:	2017      	movs	r0, #23
 80128d2:	f000 f86b 	bl	80129ac <ili9341_WriteData>
  ili9341_WriteData(0x11);
 80128d6:	2011      	movs	r0, #17
 80128d8:	f000 f868 	bl	80129ac <ili9341_WriteData>
  ili9341_WriteData(0x00);
 80128dc:	2000      	movs	r0, #0
 80128de:	f000 f865 	bl	80129ac <ili9341_WriteData>
  ili9341_WriteReg(LCD_NGAMMA);
 80128e2:	20e1      	movs	r0, #225	@ 0xe1
 80128e4:	f000 f855 	bl	8012992 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 80128e8:	2000      	movs	r0, #0
 80128ea:	f000 f85f 	bl	80129ac <ili9341_WriteData>
  ili9341_WriteData(0x16);
 80128ee:	2016      	movs	r0, #22
 80128f0:	f000 f85c 	bl	80129ac <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 80128f4:	201b      	movs	r0, #27
 80128f6:	f000 f859 	bl	80129ac <ili9341_WriteData>
  ili9341_WriteData(0x04);
 80128fa:	2004      	movs	r0, #4
 80128fc:	f000 f856 	bl	80129ac <ili9341_WriteData>
  ili9341_WriteData(0x11);
 8012900:	2011      	movs	r0, #17
 8012902:	f000 f853 	bl	80129ac <ili9341_WriteData>
  ili9341_WriteData(0x07);
 8012906:	2007      	movs	r0, #7
 8012908:	f000 f850 	bl	80129ac <ili9341_WriteData>
  ili9341_WriteData(0x31);
 801290c:	2031      	movs	r0, #49	@ 0x31
 801290e:	f000 f84d 	bl	80129ac <ili9341_WriteData>
  ili9341_WriteData(0x33);
 8012912:	2033      	movs	r0, #51	@ 0x33
 8012914:	f000 f84a 	bl	80129ac <ili9341_WriteData>
  ili9341_WriteData(0x42);
 8012918:	2042      	movs	r0, #66	@ 0x42
 801291a:	f000 f847 	bl	80129ac <ili9341_WriteData>
  ili9341_WriteData(0x05);
 801291e:	2005      	movs	r0, #5
 8012920:	f000 f844 	bl	80129ac <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 8012924:	200c      	movs	r0, #12
 8012926:	f000 f841 	bl	80129ac <ili9341_WriteData>
  ili9341_WriteData(0x0A);
 801292a:	200a      	movs	r0, #10
 801292c:	f000 f83e 	bl	80129ac <ili9341_WriteData>
  ili9341_WriteData(0x28);
 8012930:	2028      	movs	r0, #40	@ 0x28
 8012932:	f000 f83b 	bl	80129ac <ili9341_WriteData>
  ili9341_WriteData(0x2F);
 8012936:	202f      	movs	r0, #47	@ 0x2f
 8012938:	f000 f838 	bl	80129ac <ili9341_WriteData>
  ili9341_WriteData(0x0F);
 801293c:	200f      	movs	r0, #15
 801293e:	f000 f835 	bl	80129ac <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_SLEEP_OUT);
 8012942:	2011      	movs	r0, #17
 8012944:	f000 f825 	bl	8012992 <ili9341_WriteReg>
  LCD_Delay(200);
 8012948:	20c8      	movs	r0, #200	@ 0xc8
 801294a:	f000 fdf9 	bl	8013540 <LCD_Delay>
  ili9341_WriteReg(LCD_DISPLAY_ON);
 801294e:	2029      	movs	r0, #41	@ 0x29
 8012950:	f000 f81f 	bl	8012992 <ili9341_WriteReg>
  /* GRAM start writing */
  ili9341_WriteReg(LCD_GRAM);
 8012954:	202c      	movs	r0, #44	@ 0x2c
 8012956:	f000 f81c 	bl	8012992 <ili9341_WriteReg>
}
 801295a:	bf00      	nop
 801295c:	bd80      	pop	{r7, pc}

0801295e <ili9341_ReadID>:
  * @brief  Disables the Display.
  * @param  None
  * @retval LCD Register Value.
  */
uint16_t ili9341_ReadID(void)
{
 801295e:	b580      	push	{r7, lr}
 8012960:	af00      	add	r7, sp, #0
  LCD_IO_Init();
 8012962:	f000 fcff 	bl	8013364 <LCD_IO_Init>
  return ((uint16_t)ili9341_ReadData(LCD_READ_ID4, LCD_READ_ID4_SIZE));
 8012966:	2103      	movs	r1, #3
 8012968:	20d3      	movs	r0, #211	@ 0xd3
 801296a:	f000 f82c 	bl	80129c6 <ili9341_ReadData>
 801296e:	4603      	mov	r3, r0
 8012970:	b29b      	uxth	r3, r3
}
 8012972:	4618      	mov	r0, r3
 8012974:	bd80      	pop	{r7, pc}

08012976 <ili9341_DisplayOn>:
  * @brief  Enables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOn(void)
{
 8012976:	b580      	push	{r7, lr}
 8012978:	af00      	add	r7, sp, #0
  /* Display On */
  ili9341_WriteReg(LCD_DISPLAY_ON);
 801297a:	2029      	movs	r0, #41	@ 0x29
 801297c:	f000 f809 	bl	8012992 <ili9341_WriteReg>
}
 8012980:	bf00      	nop
 8012982:	bd80      	pop	{r7, pc}

08012984 <ili9341_DisplayOff>:
  * @brief  Disables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOff(void)
{
 8012984:	b580      	push	{r7, lr}
 8012986:	af00      	add	r7, sp, #0
  /* Display Off */
  ili9341_WriteReg(LCD_DISPLAY_OFF);
 8012988:	2028      	movs	r0, #40	@ 0x28
 801298a:	f000 f802 	bl	8012992 <ili9341_WriteReg>
}
 801298e:	bf00      	nop
 8012990:	bd80      	pop	{r7, pc}

08012992 <ili9341_WriteReg>:
  * @brief  Writes  to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteReg(uint8_t LCD_Reg)
{
 8012992:	b580      	push	{r7, lr}
 8012994:	b082      	sub	sp, #8
 8012996:	af00      	add	r7, sp, #0
 8012998:	4603      	mov	r3, r0
 801299a:	71fb      	strb	r3, [r7, #7]
  LCD_IO_WriteReg(LCD_Reg);
 801299c:	79fb      	ldrb	r3, [r7, #7]
 801299e:	4618      	mov	r0, r3
 80129a0:	f000 fd7a 	bl	8013498 <LCD_IO_WriteReg>
}
 80129a4:	bf00      	nop
 80129a6:	3708      	adds	r7, #8
 80129a8:	46bd      	mov	sp, r7
 80129aa:	bd80      	pop	{r7, pc}

080129ac <ili9341_WriteData>:
  * @brief  Writes data to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteData(uint16_t RegValue)
{
 80129ac:	b580      	push	{r7, lr}
 80129ae:	b082      	sub	sp, #8
 80129b0:	af00      	add	r7, sp, #0
 80129b2:	4603      	mov	r3, r0
 80129b4:	80fb      	strh	r3, [r7, #6]
  LCD_IO_WriteData(RegValue);
 80129b6:	88fb      	ldrh	r3, [r7, #6]
 80129b8:	4618      	mov	r0, r3
 80129ba:	f000 fd4b 	bl	8013454 <LCD_IO_WriteData>
}
 80129be:	bf00      	nop
 80129c0:	3708      	adds	r7, #8
 80129c2:	46bd      	mov	sp, r7
 80129c4:	bd80      	pop	{r7, pc}

080129c6 <ili9341_ReadData>:
  * @param  RegValue: Address of the register to read
  * @param  ReadSize: Number of bytes to read
  * @retval LCD Register Value.
  */
uint32_t ili9341_ReadData(uint16_t RegValue, uint8_t ReadSize)
{
 80129c6:	b580      	push	{r7, lr}
 80129c8:	b082      	sub	sp, #8
 80129ca:	af00      	add	r7, sp, #0
 80129cc:	4603      	mov	r3, r0
 80129ce:	460a      	mov	r2, r1
 80129d0:	80fb      	strh	r3, [r7, #6]
 80129d2:	4613      	mov	r3, r2
 80129d4:	717b      	strb	r3, [r7, #5]
  /* Read a max of 4 bytes */
  return (LCD_IO_ReadData(RegValue, ReadSize));
 80129d6:	797a      	ldrb	r2, [r7, #5]
 80129d8:	88fb      	ldrh	r3, [r7, #6]
 80129da:	4611      	mov	r1, r2
 80129dc:	4618      	mov	r0, r3
 80129de:	f000 fd7d 	bl	80134dc <LCD_IO_ReadData>
 80129e2:	4603      	mov	r3, r0
}
 80129e4:	4618      	mov	r0, r3
 80129e6:	3708      	adds	r7, #8
 80129e8:	46bd      	mov	sp, r7
 80129ea:	bd80      	pop	{r7, pc}

080129ec <ili9341_GetLcdPixelWidth>:
  * @brief  Get LCD PIXEL WIDTH.
  * @param  None
  * @retval LCD PIXEL WIDTH.
  */
uint16_t ili9341_GetLcdPixelWidth(void)
{
 80129ec:	b480      	push	{r7}
 80129ee:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL WIDTH */
  return ILI9341_LCD_PIXEL_WIDTH;
 80129f0:	23f0      	movs	r3, #240	@ 0xf0
}
 80129f2:	4618      	mov	r0, r3
 80129f4:	46bd      	mov	sp, r7
 80129f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129fa:	4770      	bx	lr

080129fc <ili9341_GetLcdPixelHeight>:
  * @brief  Get LCD PIXEL HEIGHT.
  * @param  None
  * @retval LCD PIXEL HEIGHT.
  */
uint16_t ili9341_GetLcdPixelHeight(void)
{
 80129fc:	b480      	push	{r7}
 80129fe:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL HEIGHT */
  return ILI9341_LCD_PIXEL_HEIGHT;
 8012a00:	f44f 73a0 	mov.w	r3, #320	@ 0x140
}
 8012a04:	4618      	mov	r0, r3
 8012a06:	46bd      	mov	sp, r7
 8012a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a0c:	4770      	bx	lr
	...

08012a10 <stmpe811_Init>:
  * @brief  Initialize the stmpe811 and configure the needed hardware resources
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None
  */
void stmpe811_Init(uint16_t DeviceAddr)
{
 8012a10:	b580      	push	{r7, lr}
 8012a12:	b084      	sub	sp, #16
 8012a14:	af00      	add	r7, sp, #0
 8012a16:	4603      	mov	r3, r0
 8012a18:	80fb      	strh	r3, [r7, #6]
  uint8_t instance;
  uint8_t empty;
  
  /* Check if device instance already exists */
  instance = stmpe811_GetInstance(DeviceAddr);
 8012a1a:	88fb      	ldrh	r3, [r7, #6]
 8012a1c:	4618      	mov	r0, r3
 8012a1e:	f000 fa59 	bl	8012ed4 <stmpe811_GetInstance>
 8012a22:	4603      	mov	r3, r0
 8012a24:	73fb      	strb	r3, [r7, #15]
  
  /* To prevent double initialization */
  if(instance == 0xFF)
 8012a26:	7bfb      	ldrb	r3, [r7, #15]
 8012a28:	2bff      	cmp	r3, #255	@ 0xff
 8012a2a:	d112      	bne.n	8012a52 <stmpe811_Init+0x42>
  {
    /* Look for empty instance */
    empty = stmpe811_GetInstance(0);
 8012a2c:	2000      	movs	r0, #0
 8012a2e:	f000 fa51 	bl	8012ed4 <stmpe811_GetInstance>
 8012a32:	4603      	mov	r3, r0
 8012a34:	73bb      	strb	r3, [r7, #14]
    
    if(empty < STMPE811_MAX_INSTANCE)
 8012a36:	7bbb      	ldrb	r3, [r7, #14]
 8012a38:	2b01      	cmp	r3, #1
 8012a3a:	d80a      	bhi.n	8012a52 <stmpe811_Init+0x42>
    {
      /* Register the current device instance */
      stmpe811[empty] = DeviceAddr;
 8012a3c:	7bbb      	ldrb	r3, [r7, #14]
 8012a3e:	88fa      	ldrh	r2, [r7, #6]
 8012a40:	b2d1      	uxtb	r1, r2
 8012a42:	4a06      	ldr	r2, [pc, #24]	@ (8012a5c <stmpe811_Init+0x4c>)
 8012a44:	54d1      	strb	r1, [r2, r3]
      
      /* Initialize IO BUS layer */
      IOE_Init(); 
 8012a46:	f000 fd86 	bl	8013556 <IOE_Init>
      
      /* Generate stmpe811 Software reset */
      stmpe811_Reset(DeviceAddr);
 8012a4a:	88fb      	ldrh	r3, [r7, #6]
 8012a4c:	4618      	mov	r0, r3
 8012a4e:	f000 f807 	bl	8012a60 <stmpe811_Reset>
    }
  }
}
 8012a52:	bf00      	nop
 8012a54:	3710      	adds	r7, #16
 8012a56:	46bd      	mov	sp, r7
 8012a58:	bd80      	pop	{r7, pc}
 8012a5a:	bf00      	nop
 8012a5c:	20001a3c 	.word	0x20001a3c

08012a60 <stmpe811_Reset>:
  * @brief  Reset the stmpe811 by Software.
  * @param  DeviceAddr: Device address on communication Bus.  
  * @retval None
  */
void stmpe811_Reset(uint16_t DeviceAddr)
{
 8012a60:	b580      	push	{r7, lr}
 8012a62:	b082      	sub	sp, #8
 8012a64:	af00      	add	r7, sp, #0
 8012a66:	4603      	mov	r3, r0
 8012a68:	80fb      	strh	r3, [r7, #6]
  /* Power Down the stmpe811 */  
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL1, 2);
 8012a6a:	88fb      	ldrh	r3, [r7, #6]
 8012a6c:	b2db      	uxtb	r3, r3
 8012a6e:	2202      	movs	r2, #2
 8012a70:	2103      	movs	r1, #3
 8012a72:	4618      	mov	r0, r3
 8012a74:	f000 fd7b 	bl	801356e <IOE_Write>

  /* Wait for a delay to ensure registers erasing */
  IOE_Delay(10); 
 8012a78:	200a      	movs	r0, #10
 8012a7a:	f000 fdb4 	bl	80135e6 <IOE_Delay>
  
  /* Power On the Codec after the power off => all registers are reinitialized */
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL1, 0);
 8012a7e:	88fb      	ldrh	r3, [r7, #6]
 8012a80:	b2db      	uxtb	r3, r3
 8012a82:	2200      	movs	r2, #0
 8012a84:	2103      	movs	r1, #3
 8012a86:	4618      	mov	r0, r3
 8012a88:	f000 fd71 	bl	801356e <IOE_Write>
  
  /* Wait for a delay to ensure registers erasing */
  IOE_Delay(2); 
 8012a8c:	2002      	movs	r0, #2
 8012a8e:	f000 fdaa 	bl	80135e6 <IOE_Delay>
}
 8012a92:	bf00      	nop
 8012a94:	3708      	adds	r7, #8
 8012a96:	46bd      	mov	sp, r7
 8012a98:	bd80      	pop	{r7, pc}

08012a9a <stmpe811_ReadID>:
  * @brief  Read the stmpe811 IO Expander device ID.
  * @param  DeviceAddr: Device address on communication Bus.  
  * @retval The Device ID (two bytes).
  */
uint16_t stmpe811_ReadID(uint16_t DeviceAddr)
{
 8012a9a:	b590      	push	{r4, r7, lr}
 8012a9c:	b083      	sub	sp, #12
 8012a9e:	af00      	add	r7, sp, #0
 8012aa0:	4603      	mov	r3, r0
 8012aa2:	80fb      	strh	r3, [r7, #6]
  /* Initialize IO BUS layer */
  IOE_Init(); 
 8012aa4:	f000 fd57 	bl	8013556 <IOE_Init>
  
  /* Return the device ID value */
  return ((IOE_Read(DeviceAddr, STMPE811_REG_CHP_ID_LSB) << 8) |\
 8012aa8:	88fb      	ldrh	r3, [r7, #6]
 8012aaa:	b2db      	uxtb	r3, r3
 8012aac:	2100      	movs	r1, #0
 8012aae:	4618      	mov	r0, r3
 8012ab0:	f000 fd70 	bl	8013594 <IOE_Read>
 8012ab4:	4603      	mov	r3, r0
 8012ab6:	b21b      	sxth	r3, r3
 8012ab8:	021b      	lsls	r3, r3, #8
 8012aba:	b21c      	sxth	r4, r3
          (IOE_Read(DeviceAddr, STMPE811_REG_CHP_ID_MSB)));
 8012abc:	88fb      	ldrh	r3, [r7, #6]
 8012abe:	b2db      	uxtb	r3, r3
 8012ac0:	2101      	movs	r1, #1
 8012ac2:	4618      	mov	r0, r3
 8012ac4:	f000 fd66 	bl	8013594 <IOE_Read>
 8012ac8:	4603      	mov	r3, r0
 8012aca:	b21b      	sxth	r3, r3
  return ((IOE_Read(DeviceAddr, STMPE811_REG_CHP_ID_LSB) << 8) |\
 8012acc:	4323      	orrs	r3, r4
 8012ace:	b21b      	sxth	r3, r3
 8012ad0:	b29b      	uxth	r3, r3
}
 8012ad2:	4618      	mov	r0, r3
 8012ad4:	370c      	adds	r7, #12
 8012ad6:	46bd      	mov	sp, r7
 8012ad8:	bd90      	pop	{r4, r7, pc}

08012ada <stmpe811_EnableGlobalIT>:
  * @brief  Enable the Global interrupt.
  * @param  DeviceAddr: Device address on communication Bus.       
  * @retval None
  */
void stmpe811_EnableGlobalIT(uint16_t DeviceAddr)
{
 8012ada:	b580      	push	{r7, lr}
 8012adc:	b084      	sub	sp, #16
 8012ade:	af00      	add	r7, sp, #0
 8012ae0:	4603      	mov	r3, r0
 8012ae2:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp = 0;
 8012ae4:	2300      	movs	r3, #0
 8012ae6:	73fb      	strb	r3, [r7, #15]
  
  /* Read the Interrupt Control register  */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_CTRL);
 8012ae8:	88fb      	ldrh	r3, [r7, #6]
 8012aea:	b2db      	uxtb	r3, r3
 8012aec:	2109      	movs	r1, #9
 8012aee:	4618      	mov	r0, r3
 8012af0:	f000 fd50 	bl	8013594 <IOE_Read>
 8012af4:	4603      	mov	r3, r0
 8012af6:	73fb      	strb	r3, [r7, #15]
  
  /* Set the global interrupts to be Enabled */    
  tmp |= (uint8_t)STMPE811_GIT_EN;
 8012af8:	7bfb      	ldrb	r3, [r7, #15]
 8012afa:	f043 0301 	orr.w	r3, r3, #1
 8012afe:	73fb      	strb	r3, [r7, #15]
  
  /* Write Back the Interrupt Control register */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_CTRL, tmp); 
 8012b00:	88fb      	ldrh	r3, [r7, #6]
 8012b02:	b2db      	uxtb	r3, r3
 8012b04:	7bfa      	ldrb	r2, [r7, #15]
 8012b06:	2109      	movs	r1, #9
 8012b08:	4618      	mov	r0, r3
 8012b0a:	f000 fd30 	bl	801356e <IOE_Write>
}
 8012b0e:	bf00      	nop
 8012b10:	3710      	adds	r7, #16
 8012b12:	46bd      	mov	sp, r7
 8012b14:	bd80      	pop	{r7, pc}

08012b16 <stmpe811_DisableGlobalIT>:
  * @brief  Disable the Global interrupt.
  * @param  DeviceAddr: Device address on communication Bus.      
  * @retval None
  */
void stmpe811_DisableGlobalIT(uint16_t DeviceAddr)
{
 8012b16:	b580      	push	{r7, lr}
 8012b18:	b084      	sub	sp, #16
 8012b1a:	af00      	add	r7, sp, #0
 8012b1c:	4603      	mov	r3, r0
 8012b1e:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp = 0;
 8012b20:	2300      	movs	r3, #0
 8012b22:	73fb      	strb	r3, [r7, #15]
  
  /* Read the Interrupt Control register  */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_CTRL);
 8012b24:	88fb      	ldrh	r3, [r7, #6]
 8012b26:	b2db      	uxtb	r3, r3
 8012b28:	2109      	movs	r1, #9
 8012b2a:	4618      	mov	r0, r3
 8012b2c:	f000 fd32 	bl	8013594 <IOE_Read>
 8012b30:	4603      	mov	r3, r0
 8012b32:	73fb      	strb	r3, [r7, #15]

  /* Set the global interrupts to be Disabled */    
  tmp &= ~(uint8_t)STMPE811_GIT_EN;
 8012b34:	7bfb      	ldrb	r3, [r7, #15]
 8012b36:	f023 0301 	bic.w	r3, r3, #1
 8012b3a:	73fb      	strb	r3, [r7, #15]
 
  /* Write Back the Interrupt Control register */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_CTRL, tmp);
 8012b3c:	88fb      	ldrh	r3, [r7, #6]
 8012b3e:	b2db      	uxtb	r3, r3
 8012b40:	7bfa      	ldrb	r2, [r7, #15]
 8012b42:	2109      	movs	r1, #9
 8012b44:	4618      	mov	r0, r3
 8012b46:	f000 fd12 	bl	801356e <IOE_Write>
    
}
 8012b4a:	bf00      	nop
 8012b4c:	3710      	adds	r7, #16
 8012b4e:	46bd      	mov	sp, r7
 8012b50:	bd80      	pop	{r7, pc}

08012b52 <stmpe811_EnableITSource>:
  *   @arg  STMPE811_GIT_FTH : Touch Screen Controller FIFO Threshold interrupt   
  *   @arg  STMPE811_GIT_TOUCH : Touch Screen Controller Touch Detected interrupt  
  * @retval None
  */
void stmpe811_EnableITSource(uint16_t DeviceAddr, uint8_t Source)
{
 8012b52:	b580      	push	{r7, lr}
 8012b54:	b084      	sub	sp, #16
 8012b56:	af00      	add	r7, sp, #0
 8012b58:	4603      	mov	r3, r0
 8012b5a:	460a      	mov	r2, r1
 8012b5c:	80fb      	strh	r3, [r7, #6]
 8012b5e:	4613      	mov	r3, r2
 8012b60:	717b      	strb	r3, [r7, #5]
  uint8_t tmp = 0;
 8012b62:	2300      	movs	r3, #0
 8012b64:	73fb      	strb	r3, [r7, #15]
  
  /* Get the current value of the INT_EN register */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_EN);
 8012b66:	88fb      	ldrh	r3, [r7, #6]
 8012b68:	b2db      	uxtb	r3, r3
 8012b6a:	210a      	movs	r1, #10
 8012b6c:	4618      	mov	r0, r3
 8012b6e:	f000 fd11 	bl	8013594 <IOE_Read>
 8012b72:	4603      	mov	r3, r0
 8012b74:	73fb      	strb	r3, [r7, #15]

  /* Set the interrupts to be Enabled */    
  tmp |= Source; 
 8012b76:	7bfa      	ldrb	r2, [r7, #15]
 8012b78:	797b      	ldrb	r3, [r7, #5]
 8012b7a:	4313      	orrs	r3, r2
 8012b7c:	73fb      	strb	r3, [r7, #15]
  
  /* Set the register */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_EN, tmp);   
 8012b7e:	88fb      	ldrh	r3, [r7, #6]
 8012b80:	b2db      	uxtb	r3, r3
 8012b82:	7bfa      	ldrb	r2, [r7, #15]
 8012b84:	210a      	movs	r1, #10
 8012b86:	4618      	mov	r0, r3
 8012b88:	f000 fcf1 	bl	801356e <IOE_Write>
}
 8012b8c:	bf00      	nop
 8012b8e:	3710      	adds	r7, #16
 8012b90:	46bd      	mov	sp, r7
 8012b92:	bd80      	pop	{r7, pc}

08012b94 <stmpe811_DisableITSource>:
  *   @arg  STMPE811_GIT_FTH : Touch Screen Controller FIFO Threshold interrupt   
  *   @arg  STMPE811_GIT_TOUCH : Touch Screen Controller Touch Detected interrupt  
  * @retval None
  */
void stmpe811_DisableITSource(uint16_t DeviceAddr, uint8_t Source)
{
 8012b94:	b580      	push	{r7, lr}
 8012b96:	b084      	sub	sp, #16
 8012b98:	af00      	add	r7, sp, #0
 8012b9a:	4603      	mov	r3, r0
 8012b9c:	460a      	mov	r2, r1
 8012b9e:	80fb      	strh	r3, [r7, #6]
 8012ba0:	4613      	mov	r3, r2
 8012ba2:	717b      	strb	r3, [r7, #5]
  uint8_t tmp = 0;
 8012ba4:	2300      	movs	r3, #0
 8012ba6:	73fb      	strb	r3, [r7, #15]
  
  /* Get the current value of the INT_EN register */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_EN);
 8012ba8:	88fb      	ldrh	r3, [r7, #6]
 8012baa:	b2db      	uxtb	r3, r3
 8012bac:	210a      	movs	r1, #10
 8012bae:	4618      	mov	r0, r3
 8012bb0:	f000 fcf0 	bl	8013594 <IOE_Read>
 8012bb4:	4603      	mov	r3, r0
 8012bb6:	73fb      	strb	r3, [r7, #15]

  /* Set the interrupts to be Enabled */    
  tmp &= ~Source; 
 8012bb8:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8012bbc:	43db      	mvns	r3, r3
 8012bbe:	b25a      	sxtb	r2, r3
 8012bc0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012bc4:	4013      	ands	r3, r2
 8012bc6:	b25b      	sxtb	r3, r3
 8012bc8:	73fb      	strb	r3, [r7, #15]
  
  /* Set the register */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_EN, tmp);   
 8012bca:	88fb      	ldrh	r3, [r7, #6]
 8012bcc:	b2db      	uxtb	r3, r3
 8012bce:	7bfa      	ldrb	r2, [r7, #15]
 8012bd0:	210a      	movs	r1, #10
 8012bd2:	4618      	mov	r0, r3
 8012bd4:	f000 fccb 	bl	801356e <IOE_Write>
}
 8012bd8:	bf00      	nop
 8012bda:	3710      	adds	r7, #16
 8012bdc:	46bd      	mov	sp, r7
 8012bde:	bd80      	pop	{r7, pc}

08012be0 <stmpe811_ReadGITStatus>:
  *   @arg  STMPE811_GIT_FTH : Touch Screen Controller FIFO Threshold interrupt   
  *   @arg  STMPE811_GIT_TOUCH : Touch Screen Controller Touch Detected interrupt      
  * @retval The checked Global interrupt source status.
  */
uint8_t stmpe811_ReadGITStatus(uint16_t DeviceAddr, uint8_t Source)
{
 8012be0:	b580      	push	{r7, lr}
 8012be2:	b082      	sub	sp, #8
 8012be4:	af00      	add	r7, sp, #0
 8012be6:	4603      	mov	r3, r0
 8012be8:	460a      	mov	r2, r1
 8012bea:	80fb      	strh	r3, [r7, #6]
 8012bec:	4613      	mov	r3, r2
 8012bee:	717b      	strb	r3, [r7, #5]
  /* Return the global IT source status */
  return((IOE_Read(DeviceAddr, STMPE811_REG_INT_STA) & Source));
 8012bf0:	88fb      	ldrh	r3, [r7, #6]
 8012bf2:	b2db      	uxtb	r3, r3
 8012bf4:	210b      	movs	r1, #11
 8012bf6:	4618      	mov	r0, r3
 8012bf8:	f000 fccc 	bl	8013594 <IOE_Read>
 8012bfc:	4603      	mov	r3, r0
 8012bfe:	461a      	mov	r2, r3
 8012c00:	797b      	ldrb	r3, [r7, #5]
 8012c02:	4013      	ands	r3, r2
 8012c04:	b2db      	uxtb	r3, r3
}
 8012c06:	4618      	mov	r0, r3
 8012c08:	3708      	adds	r7, #8
 8012c0a:	46bd      	mov	sp, r7
 8012c0c:	bd80      	pop	{r7, pc}

08012c0e <stmpe811_ClearGlobalIT>:
  *   @arg  STMPE811_GIT_FTH : Touch Screen Controller FIFO Threshold interrupt   
  *   @arg  STMPE811_GIT_TOUCH : Touch Screen Controller Touch Detected interrupt 
  * @retval None
  */
void stmpe811_ClearGlobalIT(uint16_t DeviceAddr, uint8_t Source)
{
 8012c0e:	b580      	push	{r7, lr}
 8012c10:	b082      	sub	sp, #8
 8012c12:	af00      	add	r7, sp, #0
 8012c14:	4603      	mov	r3, r0
 8012c16:	460a      	mov	r2, r1
 8012c18:	80fb      	strh	r3, [r7, #6]
 8012c1a:	4613      	mov	r3, r2
 8012c1c:	717b      	strb	r3, [r7, #5]
  /* Write 1 to the bits that have to be cleared */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_STA, Source);
 8012c1e:	88fb      	ldrh	r3, [r7, #6]
 8012c20:	b2db      	uxtb	r3, r3
 8012c22:	797a      	ldrb	r2, [r7, #5]
 8012c24:	210b      	movs	r1, #11
 8012c26:	4618      	mov	r0, r3
 8012c28:	f000 fca1 	bl	801356e <IOE_Write>
}
 8012c2c:	bf00      	nop
 8012c2e:	3708      	adds	r7, #8
 8012c30:	46bd      	mov	sp, r7
 8012c32:	bd80      	pop	{r7, pc}

08012c34 <stmpe811_IO_EnableAF>:
  *         combination of the following values:
  *   @arg  STMPE811_PIN_x: Where x can be from 0 to 7.       
  * @retval None
  */
void stmpe811_IO_EnableAF(uint16_t DeviceAddr, uint32_t IO_Pin)
{
 8012c34:	b580      	push	{r7, lr}
 8012c36:	b084      	sub	sp, #16
 8012c38:	af00      	add	r7, sp, #0
 8012c3a:	4603      	mov	r3, r0
 8012c3c:	6039      	str	r1, [r7, #0]
 8012c3e:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp = 0;
 8012c40:	2300      	movs	r3, #0
 8012c42:	73fb      	strb	r3, [r7, #15]
  
  /* Get the current register value */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_IO_AF);
 8012c44:	88fb      	ldrh	r3, [r7, #6]
 8012c46:	b2db      	uxtb	r3, r3
 8012c48:	2117      	movs	r1, #23
 8012c4a:	4618      	mov	r0, r3
 8012c4c:	f000 fca2 	bl	8013594 <IOE_Read>
 8012c50:	4603      	mov	r3, r0
 8012c52:	73fb      	strb	r3, [r7, #15]

  /* Enable the selected pins alternate function */   
  tmp &= ~(uint8_t)IO_Pin;   
 8012c54:	683b      	ldr	r3, [r7, #0]
 8012c56:	b25b      	sxtb	r3, r3
 8012c58:	43db      	mvns	r3, r3
 8012c5a:	b25a      	sxtb	r2, r3
 8012c5c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012c60:	4013      	ands	r3, r2
 8012c62:	b25b      	sxtb	r3, r3
 8012c64:	73fb      	strb	r3, [r7, #15]
  
  /* Write back the new register value */
  IOE_Write(DeviceAddr, STMPE811_REG_IO_AF, tmp); 
 8012c66:	88fb      	ldrh	r3, [r7, #6]
 8012c68:	b2db      	uxtb	r3, r3
 8012c6a:	7bfa      	ldrb	r2, [r7, #15]
 8012c6c:	2117      	movs	r1, #23
 8012c6e:	4618      	mov	r0, r3
 8012c70:	f000 fc7d 	bl	801356e <IOE_Write>
}
 8012c74:	bf00      	nop
 8012c76:	3710      	adds	r7, #16
 8012c78:	46bd      	mov	sp, r7
 8012c7a:	bd80      	pop	{r7, pc}

08012c7c <stmpe811_TS_Start>:
  * @brief  Configures the touch Screen Controller (Single point detection)
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None.
  */
void stmpe811_TS_Start(uint16_t DeviceAddr)
{
 8012c7c:	b580      	push	{r7, lr}
 8012c7e:	b084      	sub	sp, #16
 8012c80:	af00      	add	r7, sp, #0
 8012c82:	4603      	mov	r3, r0
 8012c84:	80fb      	strh	r3, [r7, #6]
  uint8_t mode;
  
  /* Get the current register value */
  mode = IOE_Read(DeviceAddr, STMPE811_REG_SYS_CTRL2);
 8012c86:	88fb      	ldrh	r3, [r7, #6]
 8012c88:	b2db      	uxtb	r3, r3
 8012c8a:	2104      	movs	r1, #4
 8012c8c:	4618      	mov	r0, r3
 8012c8e:	f000 fc81 	bl	8013594 <IOE_Read>
 8012c92:	4603      	mov	r3, r0
 8012c94:	73fb      	strb	r3, [r7, #15]
  
  /* Set the Functionalities to be Enabled */    
  mode &= ~(STMPE811_IO_FCT);  
 8012c96:	7bfb      	ldrb	r3, [r7, #15]
 8012c98:	f023 0304 	bic.w	r3, r3, #4
 8012c9c:	73fb      	strb	r3, [r7, #15]
  
  /* Write the new register value */  
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL2, mode); 
 8012c9e:	88fb      	ldrh	r3, [r7, #6]
 8012ca0:	b2db      	uxtb	r3, r3
 8012ca2:	7bfa      	ldrb	r2, [r7, #15]
 8012ca4:	2104      	movs	r1, #4
 8012ca6:	4618      	mov	r0, r3
 8012ca8:	f000 fc61 	bl	801356e <IOE_Write>

  /* Select TSC pins in TSC alternate mode */  
  stmpe811_IO_EnableAF(DeviceAddr, STMPE811_TOUCH_IO_ALL);
 8012cac:	88fb      	ldrh	r3, [r7, #6]
 8012cae:	21f0      	movs	r1, #240	@ 0xf0
 8012cb0:	4618      	mov	r0, r3
 8012cb2:	f7ff ffbf 	bl	8012c34 <stmpe811_IO_EnableAF>
  
  /* Set the Functionalities to be Enabled */    
  mode &= ~(STMPE811_TS_FCT | STMPE811_ADC_FCT);  
 8012cb6:	7bfb      	ldrb	r3, [r7, #15]
 8012cb8:	f023 0303 	bic.w	r3, r3, #3
 8012cbc:	73fb      	strb	r3, [r7, #15]
  
  /* Set the new register value */  
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL2, mode); 
 8012cbe:	88fb      	ldrh	r3, [r7, #6]
 8012cc0:	b2db      	uxtb	r3, r3
 8012cc2:	7bfa      	ldrb	r2, [r7, #15]
 8012cc4:	2104      	movs	r1, #4
 8012cc6:	4618      	mov	r0, r3
 8012cc8:	f000 fc51 	bl	801356e <IOE_Write>
  
  /* Select Sample Time, bit number and ADC Reference */
  IOE_Write(DeviceAddr, STMPE811_REG_ADC_CTRL1, 0x49);
 8012ccc:	88fb      	ldrh	r3, [r7, #6]
 8012cce:	b2db      	uxtb	r3, r3
 8012cd0:	2249      	movs	r2, #73	@ 0x49
 8012cd2:	2120      	movs	r1, #32
 8012cd4:	4618      	mov	r0, r3
 8012cd6:	f000 fc4a 	bl	801356e <IOE_Write>
  
  /* Wait for 2 ms */
  IOE_Delay(2); 
 8012cda:	2002      	movs	r0, #2
 8012cdc:	f000 fc83 	bl	80135e6 <IOE_Delay>
  
  /* Select the ADC clock speed: 3.25 MHz */
  IOE_Write(DeviceAddr, STMPE811_REG_ADC_CTRL2, 0x01);
 8012ce0:	88fb      	ldrh	r3, [r7, #6]
 8012ce2:	b2db      	uxtb	r3, r3
 8012ce4:	2201      	movs	r2, #1
 8012ce6:	2121      	movs	r1, #33	@ 0x21
 8012ce8:	4618      	mov	r0, r3
 8012cea:	f000 fc40 	bl	801356e <IOE_Write>
  /* Configuration: 
     - Touch average control    : 4 samples
     - Touch delay time         : 500 uS
     - Panel driver setting time: 500 uS 
  */
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_CFG, 0x9A); 
 8012cee:	88fb      	ldrh	r3, [r7, #6]
 8012cf0:	b2db      	uxtb	r3, r3
 8012cf2:	229a      	movs	r2, #154	@ 0x9a
 8012cf4:	2141      	movs	r1, #65	@ 0x41
 8012cf6:	4618      	mov	r0, r3
 8012cf8:	f000 fc39 	bl	801356e <IOE_Write>
  
  /* Configure the Touch FIFO threshold: single point reading */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_TH, 0x01);
 8012cfc:	88fb      	ldrh	r3, [r7, #6]
 8012cfe:	b2db      	uxtb	r3, r3
 8012d00:	2201      	movs	r2, #1
 8012d02:	214a      	movs	r1, #74	@ 0x4a
 8012d04:	4618      	mov	r0, r3
 8012d06:	f000 fc32 	bl	801356e <IOE_Write>
  
  /* Clear the FIFO memory content. */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x01);
 8012d0a:	88fb      	ldrh	r3, [r7, #6]
 8012d0c:	b2db      	uxtb	r3, r3
 8012d0e:	2201      	movs	r2, #1
 8012d10:	214b      	movs	r1, #75	@ 0x4b
 8012d12:	4618      	mov	r0, r3
 8012d14:	f000 fc2b 	bl	801356e <IOE_Write>
  
  /* Put the FIFO back into operation mode  */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x00);
 8012d18:	88fb      	ldrh	r3, [r7, #6]
 8012d1a:	b2db      	uxtb	r3, r3
 8012d1c:	2200      	movs	r2, #0
 8012d1e:	214b      	movs	r1, #75	@ 0x4b
 8012d20:	4618      	mov	r0, r3
 8012d22:	f000 fc24 	bl	801356e <IOE_Write>
  
  /* Set the range and accuracy pf the pressure measurement (Z) : 
     - Fractional part :7 
     - Whole part      :1 
  */
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_FRACT_XYZ, 0x01);
 8012d26:	88fb      	ldrh	r3, [r7, #6]
 8012d28:	b2db      	uxtb	r3, r3
 8012d2a:	2201      	movs	r2, #1
 8012d2c:	2156      	movs	r1, #86	@ 0x56
 8012d2e:	4618      	mov	r0, r3
 8012d30:	f000 fc1d 	bl	801356e <IOE_Write>
  
  /* Set the driving capability (limit) of the device for TSC pins: 50mA */
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_I_DRIVE, 0x01);
 8012d34:	88fb      	ldrh	r3, [r7, #6]
 8012d36:	b2db      	uxtb	r3, r3
 8012d38:	2201      	movs	r2, #1
 8012d3a:	2158      	movs	r1, #88	@ 0x58
 8012d3c:	4618      	mov	r0, r3
 8012d3e:	f000 fc16 	bl	801356e <IOE_Write>
  
  /* Touch screen control configuration (enable TSC):
     - No window tracking index
     - XYZ acquisition mode
   */
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_CTRL, 0x01);
 8012d42:	88fb      	ldrh	r3, [r7, #6]
 8012d44:	b2db      	uxtb	r3, r3
 8012d46:	2201      	movs	r2, #1
 8012d48:	2140      	movs	r1, #64	@ 0x40
 8012d4a:	4618      	mov	r0, r3
 8012d4c:	f000 fc0f 	bl	801356e <IOE_Write>
  
  /*  Clear all the status pending bits if any */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_STA, 0xFF);
 8012d50:	88fb      	ldrh	r3, [r7, #6]
 8012d52:	b2db      	uxtb	r3, r3
 8012d54:	22ff      	movs	r2, #255	@ 0xff
 8012d56:	210b      	movs	r1, #11
 8012d58:	4618      	mov	r0, r3
 8012d5a:	f000 fc08 	bl	801356e <IOE_Write>

  /* Wait for 2 ms delay */
  IOE_Delay(2); 
 8012d5e:	2002      	movs	r0, #2
 8012d60:	f000 fc41 	bl	80135e6 <IOE_Delay>
}
 8012d64:	bf00      	nop
 8012d66:	3710      	adds	r7, #16
 8012d68:	46bd      	mov	sp, r7
 8012d6a:	bd80      	pop	{r7, pc}

08012d6c <stmpe811_TS_DetectTouch>:
  * @brief  Return if there is touch detected or not.
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval Touch detected state.
  */
uint8_t stmpe811_TS_DetectTouch(uint16_t DeviceAddr)
{
 8012d6c:	b580      	push	{r7, lr}
 8012d6e:	b084      	sub	sp, #16
 8012d70:	af00      	add	r7, sp, #0
 8012d72:	4603      	mov	r3, r0
 8012d74:	80fb      	strh	r3, [r7, #6]
  uint8_t state;
  uint8_t ret = 0;
 8012d76:	2300      	movs	r3, #0
 8012d78:	73fb      	strb	r3, [r7, #15]
  
  state = ((IOE_Read(DeviceAddr, STMPE811_REG_TSC_CTRL) & (uint8_t)STMPE811_TS_CTRL_STATUS) == (uint8_t)STMPE811_TS_CTRL_STATUS);
 8012d7a:	88fb      	ldrh	r3, [r7, #6]
 8012d7c:	b2db      	uxtb	r3, r3
 8012d7e:	2140      	movs	r1, #64	@ 0x40
 8012d80:	4618      	mov	r0, r3
 8012d82:	f000 fc07 	bl	8013594 <IOE_Read>
 8012d86:	4603      	mov	r3, r0
 8012d88:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8012d8c:	2b80      	cmp	r3, #128	@ 0x80
 8012d8e:	bf0c      	ite	eq
 8012d90:	2301      	moveq	r3, #1
 8012d92:	2300      	movne	r3, #0
 8012d94:	b2db      	uxtb	r3, r3
 8012d96:	73bb      	strb	r3, [r7, #14]
  
  if(state > 0)
 8012d98:	7bbb      	ldrb	r3, [r7, #14]
 8012d9a:	2b00      	cmp	r3, #0
 8012d9c:	d00b      	beq.n	8012db6 <stmpe811_TS_DetectTouch+0x4a>
  {
    if(IOE_Read(DeviceAddr, STMPE811_REG_FIFO_SIZE) > 0)
 8012d9e:	88fb      	ldrh	r3, [r7, #6]
 8012da0:	b2db      	uxtb	r3, r3
 8012da2:	214c      	movs	r1, #76	@ 0x4c
 8012da4:	4618      	mov	r0, r3
 8012da6:	f000 fbf5 	bl	8013594 <IOE_Read>
 8012daa:	4603      	mov	r3, r0
 8012dac:	2b00      	cmp	r3, #0
 8012dae:	d010      	beq.n	8012dd2 <stmpe811_TS_DetectTouch+0x66>
    {
      ret = 1;
 8012db0:	2301      	movs	r3, #1
 8012db2:	73fb      	strb	r3, [r7, #15]
 8012db4:	e00d      	b.n	8012dd2 <stmpe811_TS_DetectTouch+0x66>
    }
  }
  else
  {
    /* Reset FIFO */
    IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x01);
 8012db6:	88fb      	ldrh	r3, [r7, #6]
 8012db8:	b2db      	uxtb	r3, r3
 8012dba:	2201      	movs	r2, #1
 8012dbc:	214b      	movs	r1, #75	@ 0x4b
 8012dbe:	4618      	mov	r0, r3
 8012dc0:	f000 fbd5 	bl	801356e <IOE_Write>
    /* Enable the FIFO again */
    IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x00);
 8012dc4:	88fb      	ldrh	r3, [r7, #6]
 8012dc6:	b2db      	uxtb	r3, r3
 8012dc8:	2200      	movs	r2, #0
 8012dca:	214b      	movs	r1, #75	@ 0x4b
 8012dcc:	4618      	mov	r0, r3
 8012dce:	f000 fbce 	bl	801356e <IOE_Write>
  }
  
  return ret;
 8012dd2:	7bfb      	ldrb	r3, [r7, #15]
}
 8012dd4:	4618      	mov	r0, r3
 8012dd6:	3710      	adds	r7, #16
 8012dd8:	46bd      	mov	sp, r7
 8012dda:	bd80      	pop	{r7, pc}

08012ddc <stmpe811_TS_GetXY>:
  * @param  X: Pointer to X position value
  * @param  Y: Pointer to Y position value   
  * @retval None.
  */
void stmpe811_TS_GetXY(uint16_t DeviceAddr, uint16_t *X, uint16_t *Y)
{
 8012ddc:	b580      	push	{r7, lr}
 8012dde:	b086      	sub	sp, #24
 8012de0:	af00      	add	r7, sp, #0
 8012de2:	4603      	mov	r3, r0
 8012de4:	60b9      	str	r1, [r7, #8]
 8012de6:	607a      	str	r2, [r7, #4]
 8012de8:	81fb      	strh	r3, [r7, #14]
  uint8_t  dataXYZ[4];
  uint32_t uldataXYZ;
  
  IOE_ReadMultiple(DeviceAddr, STMPE811_REG_TSC_DATA_NON_INC, dataXYZ, sizeof(dataXYZ)) ;
 8012dea:	89fb      	ldrh	r3, [r7, #14]
 8012dec:	b2d8      	uxtb	r0, r3
 8012dee:	f107 0210 	add.w	r2, r7, #16
 8012df2:	2304      	movs	r3, #4
 8012df4:	21d7      	movs	r1, #215	@ 0xd7
 8012df6:	f000 fbe0 	bl	80135ba <IOE_ReadMultiple>
  
  /* Calculate positions values */
  uldataXYZ = (dataXYZ[0] << 24)|(dataXYZ[1] << 16)|(dataXYZ[2] << 8)|(dataXYZ[3] << 0);     
 8012dfa:	7c3b      	ldrb	r3, [r7, #16]
 8012dfc:	061a      	lsls	r2, r3, #24
 8012dfe:	7c7b      	ldrb	r3, [r7, #17]
 8012e00:	041b      	lsls	r3, r3, #16
 8012e02:	431a      	orrs	r2, r3
 8012e04:	7cbb      	ldrb	r3, [r7, #18]
 8012e06:	021b      	lsls	r3, r3, #8
 8012e08:	4313      	orrs	r3, r2
 8012e0a:	7cfa      	ldrb	r2, [r7, #19]
 8012e0c:	4313      	orrs	r3, r2
 8012e0e:	617b      	str	r3, [r7, #20]
  *X = (uldataXYZ >> 20) & 0x00000FFF;     
 8012e10:	697b      	ldr	r3, [r7, #20]
 8012e12:	0d1b      	lsrs	r3, r3, #20
 8012e14:	b29a      	uxth	r2, r3
 8012e16:	68bb      	ldr	r3, [r7, #8]
 8012e18:	801a      	strh	r2, [r3, #0]
  *Y = (uldataXYZ >>  8) & 0x00000FFF;     
 8012e1a:	697b      	ldr	r3, [r7, #20]
 8012e1c:	0a1b      	lsrs	r3, r3, #8
 8012e1e:	b29b      	uxth	r3, r3
 8012e20:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8012e24:	b29a      	uxth	r2, r3
 8012e26:	687b      	ldr	r3, [r7, #4]
 8012e28:	801a      	strh	r2, [r3, #0]
  
  /* Reset FIFO */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x01);
 8012e2a:	89fb      	ldrh	r3, [r7, #14]
 8012e2c:	b2db      	uxtb	r3, r3
 8012e2e:	2201      	movs	r2, #1
 8012e30:	214b      	movs	r1, #75	@ 0x4b
 8012e32:	4618      	mov	r0, r3
 8012e34:	f000 fb9b 	bl	801356e <IOE_Write>
  /* Enable the FIFO again */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x00);
 8012e38:	89fb      	ldrh	r3, [r7, #14]
 8012e3a:	b2db      	uxtb	r3, r3
 8012e3c:	2200      	movs	r2, #0
 8012e3e:	214b      	movs	r1, #75	@ 0x4b
 8012e40:	4618      	mov	r0, r3
 8012e42:	f000 fb94 	bl	801356e <IOE_Write>
}
 8012e46:	bf00      	nop
 8012e48:	3718      	adds	r7, #24
 8012e4a:	46bd      	mov	sp, r7
 8012e4c:	bd80      	pop	{r7, pc}

08012e4e <stmpe811_TS_EnableIT>:
  * @brief  Configure the selected source to generate a global interrupt or not
  * @param  DeviceAddr: Device address on communication Bus.  
  * @retval None
  */
void stmpe811_TS_EnableIT(uint16_t DeviceAddr)
{
 8012e4e:	b580      	push	{r7, lr}
 8012e50:	b082      	sub	sp, #8
 8012e52:	af00      	add	r7, sp, #0
 8012e54:	4603      	mov	r3, r0
 8012e56:	80fb      	strh	r3, [r7, #6]
  IOE_ITConfig();
 8012e58:	f000 fb83 	bl	8013562 <IOE_ITConfig>
  
  /* Enable global TS IT source */
  stmpe811_EnableITSource(DeviceAddr, STMPE811_TS_IT); 
 8012e5c:	88fb      	ldrh	r3, [r7, #6]
 8012e5e:	211f      	movs	r1, #31
 8012e60:	4618      	mov	r0, r3
 8012e62:	f7ff fe76 	bl	8012b52 <stmpe811_EnableITSource>
  
  /* Enable global interrupt */
  stmpe811_EnableGlobalIT(DeviceAddr);
 8012e66:	88fb      	ldrh	r3, [r7, #6]
 8012e68:	4618      	mov	r0, r3
 8012e6a:	f7ff fe36 	bl	8012ada <stmpe811_EnableGlobalIT>
}
 8012e6e:	bf00      	nop
 8012e70:	3708      	adds	r7, #8
 8012e72:	46bd      	mov	sp, r7
 8012e74:	bd80      	pop	{r7, pc}

08012e76 <stmpe811_TS_DisableIT>:
  * @brief  Configure the selected source to generate a global interrupt or not
  * @param  DeviceAddr: Device address on communication Bus.    
  * @retval None
  */
void stmpe811_TS_DisableIT(uint16_t DeviceAddr)
{
 8012e76:	b580      	push	{r7, lr}
 8012e78:	b082      	sub	sp, #8
 8012e7a:	af00      	add	r7, sp, #0
 8012e7c:	4603      	mov	r3, r0
 8012e7e:	80fb      	strh	r3, [r7, #6]
  /* Disable global interrupt */
  stmpe811_DisableGlobalIT(DeviceAddr);
 8012e80:	88fb      	ldrh	r3, [r7, #6]
 8012e82:	4618      	mov	r0, r3
 8012e84:	f7ff fe47 	bl	8012b16 <stmpe811_DisableGlobalIT>
  
  /* Disable global TS IT source */
  stmpe811_DisableITSource(DeviceAddr, STMPE811_TS_IT); 
 8012e88:	88fb      	ldrh	r3, [r7, #6]
 8012e8a:	211f      	movs	r1, #31
 8012e8c:	4618      	mov	r0, r3
 8012e8e:	f7ff fe81 	bl	8012b94 <stmpe811_DisableITSource>
}
 8012e92:	bf00      	nop
 8012e94:	3708      	adds	r7, #8
 8012e96:	46bd      	mov	sp, r7
 8012e98:	bd80      	pop	{r7, pc}

08012e9a <stmpe811_TS_ITStatus>:
  * @brief  Configure the selected source to generate a global interrupt or not
  * @param  DeviceAddr: Device address on communication Bus.    
  * @retval TS interrupts status
  */
uint8_t stmpe811_TS_ITStatus(uint16_t DeviceAddr)
{
 8012e9a:	b580      	push	{r7, lr}
 8012e9c:	b082      	sub	sp, #8
 8012e9e:	af00      	add	r7, sp, #0
 8012ea0:	4603      	mov	r3, r0
 8012ea2:	80fb      	strh	r3, [r7, #6]
  /* Return TS interrupts status */
  return(stmpe811_ReadGITStatus(DeviceAddr, STMPE811_TS_IT));
 8012ea4:	88fb      	ldrh	r3, [r7, #6]
 8012ea6:	211f      	movs	r1, #31
 8012ea8:	4618      	mov	r0, r3
 8012eaa:	f7ff fe99 	bl	8012be0 <stmpe811_ReadGITStatus>
 8012eae:	4603      	mov	r3, r0
}
 8012eb0:	4618      	mov	r0, r3
 8012eb2:	3708      	adds	r7, #8
 8012eb4:	46bd      	mov	sp, r7
 8012eb6:	bd80      	pop	{r7, pc}

08012eb8 <stmpe811_TS_ClearIT>:
  * @brief  Configure the selected source to generate a global interrupt or not
  * @param  DeviceAddr: Device address on communication Bus.  
  * @retval None
  */
void stmpe811_TS_ClearIT(uint16_t DeviceAddr)
{
 8012eb8:	b580      	push	{r7, lr}
 8012eba:	b082      	sub	sp, #8
 8012ebc:	af00      	add	r7, sp, #0
 8012ebe:	4603      	mov	r3, r0
 8012ec0:	80fb      	strh	r3, [r7, #6]
  /* Clear the global TS IT source */
  stmpe811_ClearGlobalIT(DeviceAddr, STMPE811_TS_IT);
 8012ec2:	88fb      	ldrh	r3, [r7, #6]
 8012ec4:	211f      	movs	r1, #31
 8012ec6:	4618      	mov	r0, r3
 8012ec8:	f7ff fea1 	bl	8012c0e <stmpe811_ClearGlobalIT>
}
 8012ecc:	bf00      	nop
 8012ece:	3708      	adds	r7, #8
 8012ed0:	46bd      	mov	sp, r7
 8012ed2:	bd80      	pop	{r7, pc}

08012ed4 <stmpe811_GetInstance>:
  *         and return its index  
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval Index of the device instance if registered, 0xFF if not.
  */
static uint8_t stmpe811_GetInstance(uint16_t DeviceAddr)
{
 8012ed4:	b480      	push	{r7}
 8012ed6:	b085      	sub	sp, #20
 8012ed8:	af00      	add	r7, sp, #0
 8012eda:	4603      	mov	r3, r0
 8012edc:	80fb      	strh	r3, [r7, #6]
  uint8_t idx = 0;
 8012ede:	2300      	movs	r3, #0
 8012ee0:	73fb      	strb	r3, [r7, #15]
  
  /* Check all the registered instances */
  for(idx = 0; idx < STMPE811_MAX_INSTANCE ; idx ++)
 8012ee2:	2300      	movs	r3, #0
 8012ee4:	73fb      	strb	r3, [r7, #15]
 8012ee6:	e00b      	b.n	8012f00 <stmpe811_GetInstance+0x2c>
  {
    if(stmpe811[idx] == DeviceAddr)
 8012ee8:	7bfb      	ldrb	r3, [r7, #15]
 8012eea:	4a0a      	ldr	r2, [pc, #40]	@ (8012f14 <stmpe811_GetInstance+0x40>)
 8012eec:	5cd3      	ldrb	r3, [r2, r3]
 8012eee:	461a      	mov	r2, r3
 8012ef0:	88fb      	ldrh	r3, [r7, #6]
 8012ef2:	4293      	cmp	r3, r2
 8012ef4:	d101      	bne.n	8012efa <stmpe811_GetInstance+0x26>
    {
      return idx; 
 8012ef6:	7bfb      	ldrb	r3, [r7, #15]
 8012ef8:	e006      	b.n	8012f08 <stmpe811_GetInstance+0x34>
  for(idx = 0; idx < STMPE811_MAX_INSTANCE ; idx ++)
 8012efa:	7bfb      	ldrb	r3, [r7, #15]
 8012efc:	3301      	adds	r3, #1
 8012efe:	73fb      	strb	r3, [r7, #15]
 8012f00:	7bfb      	ldrb	r3, [r7, #15]
 8012f02:	2b01      	cmp	r3, #1
 8012f04:	d9f0      	bls.n	8012ee8 <stmpe811_GetInstance+0x14>
    }
  }
  
  return 0xFF;
 8012f06:	23ff      	movs	r3, #255	@ 0xff
}
 8012f08:	4618      	mov	r0, r3
 8012f0a:	3714      	adds	r7, #20
 8012f0c:	46bd      	mov	sp, r7
 8012f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f12:	4770      	bx	lr
 8012f14:	20001a3c 	.word	0x20001a3c

08012f18 <I2Cx_MspInit>:
/**
  * @brief  I2Cx MSP Initialization
  * @param  hi2c: I2C handle
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *hi2c)
{
 8012f18:	b580      	push	{r7, lr}
 8012f1a:	b08a      	sub	sp, #40	@ 0x28
 8012f1c:	af00      	add	r7, sp, #0
 8012f1e:	6078      	str	r0, [r7, #4]

  I2C_HandleTypeDef *pI2cHandle;
  pI2cHandle = &I2cHandle;
#endif /* EE_M24LR64 */

  if (hi2c->Instance == DISCOVERY_I2Cx)
 8012f20:	687b      	ldr	r3, [r7, #4]
 8012f22:	681b      	ldr	r3, [r3, #0]
 8012f24:	4a33      	ldr	r2, [pc, #204]	@ (8012ff4 <I2Cx_MspInit+0xdc>)
 8012f26:	4293      	cmp	r3, r2
 8012f28:	d15f      	bne.n	8012fea <I2Cx_MspInit+0xd2>
  {
    /* Configure the GPIOs ---------------------------------------------------*/
    /* Enable GPIO clock */
    DISCOVERY_I2Cx_SDA_GPIO_CLK_ENABLE();
 8012f2a:	2300      	movs	r3, #0
 8012f2c:	613b      	str	r3, [r7, #16]
 8012f2e:	4b32      	ldr	r3, [pc, #200]	@ (8012ff8 <I2Cx_MspInit+0xe0>)
 8012f30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012f32:	4a31      	ldr	r2, [pc, #196]	@ (8012ff8 <I2Cx_MspInit+0xe0>)
 8012f34:	f043 0304 	orr.w	r3, r3, #4
 8012f38:	6313      	str	r3, [r2, #48]	@ 0x30
 8012f3a:	4b2f      	ldr	r3, [pc, #188]	@ (8012ff8 <I2Cx_MspInit+0xe0>)
 8012f3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012f3e:	f003 0304 	and.w	r3, r3, #4
 8012f42:	613b      	str	r3, [r7, #16]
 8012f44:	693b      	ldr	r3, [r7, #16]
    DISCOVERY_I2Cx_SCL_GPIO_CLK_ENABLE();
 8012f46:	2300      	movs	r3, #0
 8012f48:	60fb      	str	r3, [r7, #12]
 8012f4a:	4b2b      	ldr	r3, [pc, #172]	@ (8012ff8 <I2Cx_MspInit+0xe0>)
 8012f4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012f4e:	4a2a      	ldr	r2, [pc, #168]	@ (8012ff8 <I2Cx_MspInit+0xe0>)
 8012f50:	f043 0301 	orr.w	r3, r3, #1
 8012f54:	6313      	str	r3, [r2, #48]	@ 0x30
 8012f56:	4b28      	ldr	r3, [pc, #160]	@ (8012ff8 <I2Cx_MspInit+0xe0>)
 8012f58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012f5a:	f003 0301 	and.w	r3, r3, #1
 8012f5e:	60fb      	str	r3, [r7, #12]
 8012f60:	68fb      	ldr	r3, [r7, #12]

    /* Configure I2C Tx as alternate function  */
    GPIO_InitStruct.Pin       = DISCOVERY_I2Cx_SCL_PIN;
 8012f62:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8012f66:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode      = GPIO_MODE_AF_OD;
 8012f68:	2312      	movs	r3, #18
 8012f6a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull      = GPIO_NOPULL;
 8012f6c:	2300      	movs	r3, #0
 8012f6e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed     = GPIO_SPEED_FAST;
 8012f70:	2302      	movs	r3, #2
 8012f72:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 8012f74:	2304      	movs	r3, #4
 8012f76:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_GPIO_PORT, &GPIO_InitStruct);
 8012f78:	f107 0314 	add.w	r3, r7, #20
 8012f7c:	4619      	mov	r1, r3
 8012f7e:	481f      	ldr	r0, [pc, #124]	@ (8012ffc <I2Cx_MspInit+0xe4>)
 8012f80:	f002 fbb0 	bl	80156e4 <HAL_GPIO_Init>

    /* Configure I2C Rx as alternate function  */
    GPIO_InitStruct.Pin = DISCOVERY_I2Cx_SDA_PIN;
 8012f84:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8012f88:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(DISCOVERY_I2Cx_SDA_GPIO_PORT, &GPIO_InitStruct);
 8012f8a:	f107 0314 	add.w	r3, r7, #20
 8012f8e:	4619      	mov	r1, r3
 8012f90:	481b      	ldr	r0, [pc, #108]	@ (8013000 <I2Cx_MspInit+0xe8>)
 8012f92:	f002 fba7 	bl	80156e4 <HAL_GPIO_Init>


    /* Configure the Discovery I2Cx peripheral -------------------------------*/
    /* Enable I2C3 clock */
    DISCOVERY_I2Cx_CLOCK_ENABLE();
 8012f96:	2300      	movs	r3, #0
 8012f98:	60bb      	str	r3, [r7, #8]
 8012f9a:	4b17      	ldr	r3, [pc, #92]	@ (8012ff8 <I2Cx_MspInit+0xe0>)
 8012f9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8012f9e:	4a16      	ldr	r2, [pc, #88]	@ (8012ff8 <I2Cx_MspInit+0xe0>)
 8012fa0:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8012fa4:	6413      	str	r3, [r2, #64]	@ 0x40
 8012fa6:	4b14      	ldr	r3, [pc, #80]	@ (8012ff8 <I2Cx_MspInit+0xe0>)
 8012fa8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8012faa:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8012fae:	60bb      	str	r3, [r7, #8]
 8012fb0:	68bb      	ldr	r3, [r7, #8]

    /* Force the I2C Peripheral Clock Reset */
    DISCOVERY_I2Cx_FORCE_RESET();
 8012fb2:	4b11      	ldr	r3, [pc, #68]	@ (8012ff8 <I2Cx_MspInit+0xe0>)
 8012fb4:	6a1b      	ldr	r3, [r3, #32]
 8012fb6:	4a10      	ldr	r2, [pc, #64]	@ (8012ff8 <I2Cx_MspInit+0xe0>)
 8012fb8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8012fbc:	6213      	str	r3, [r2, #32]

    /* Release the I2C Peripheral Clock Reset */
    DISCOVERY_I2Cx_RELEASE_RESET();
 8012fbe:	4b0e      	ldr	r3, [pc, #56]	@ (8012ff8 <I2Cx_MspInit+0xe0>)
 8012fc0:	6a1b      	ldr	r3, [r3, #32]
 8012fc2:	4a0d      	ldr	r2, [pc, #52]	@ (8012ff8 <I2Cx_MspInit+0xe0>)
 8012fc4:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8012fc8:	6213      	str	r3, [r2, #32]

    /* Enable and set Discovery I2Cx Interrupt to the lowest priority */
    HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 8012fca:	2200      	movs	r2, #0
 8012fcc:	210f      	movs	r1, #15
 8012fce:	2048      	movs	r0, #72	@ 0x48
 8012fd0:	f001 fde8 	bl	8014ba4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 8012fd4:	2048      	movs	r0, #72	@ 0x48
 8012fd6:	f001 fe01 	bl	8014bdc <HAL_NVIC_EnableIRQ>

    /* Enable and set Discovery I2Cx Interrupt to the lowest priority */
    HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 8012fda:	2200      	movs	r2, #0
 8012fdc:	210f      	movs	r1, #15
 8012fde:	2049      	movs	r0, #73	@ 0x49
 8012fe0:	f001 fde0 	bl	8014ba4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);
 8012fe4:	2049      	movs	r0, #73	@ 0x49
 8012fe6:	f001 fdf9 	bl	8014bdc <HAL_NVIC_EnableIRQ>
    /* Configure and enable I2C DMA RX Channel interrupt */
    HAL_NVIC_SetPriority((IRQn_Type)(EEPROM_I2C_DMA_RX_IRQn), EEPROM_I2C_DMA_PREPRIO, 0);
    HAL_NVIC_EnableIRQ((IRQn_Type)(EEPROM_I2C_DMA_RX_IRQn));
#endif /* EE_M24LR64 */
  }
}
 8012fea:	bf00      	nop
 8012fec:	3728      	adds	r7, #40	@ 0x28
 8012fee:	46bd      	mov	sp, r7
 8012ff0:	bd80      	pop	{r7, pc}
 8012ff2:	bf00      	nop
 8012ff4:	40005c00 	.word	0x40005c00
 8012ff8:	40023800 	.word	0x40023800
 8012ffc:	40020000 	.word	0x40020000
 8013000:	40020800 	.word	0x40020800

08013004 <I2Cx_Init>:

/**
  * @brief  I2Cx Bus initialization.
  */
static void I2Cx_Init(void)
{
 8013004:	b580      	push	{r7, lr}
 8013006:	af00      	add	r7, sp, #0
  if (HAL_I2C_GetState(&I2cHandle) == HAL_I2C_STATE_RESET)
 8013008:	4814      	ldr	r0, [pc, #80]	@ (801305c <I2Cx_Init+0x58>)
 801300a:	f005 f90d 	bl	8018228 <HAL_I2C_GetState>
 801300e:	4603      	mov	r3, r0
 8013010:	2b00      	cmp	r3, #0
 8013012:	d121      	bne.n	8013058 <I2Cx_Init+0x54>
  {
    I2cHandle.Instance              = DISCOVERY_I2Cx;
 8013014:	4b11      	ldr	r3, [pc, #68]	@ (801305c <I2Cx_Init+0x58>)
 8013016:	4a12      	ldr	r2, [pc, #72]	@ (8013060 <I2Cx_Init+0x5c>)
 8013018:	601a      	str	r2, [r3, #0]
    I2cHandle.Init.ClockSpeed       = BSP_I2C_SPEED;
 801301a:	4b10      	ldr	r3, [pc, #64]	@ (801305c <I2Cx_Init+0x58>)
 801301c:	4a11      	ldr	r2, [pc, #68]	@ (8013064 <I2Cx_Init+0x60>)
 801301e:	605a      	str	r2, [r3, #4]
    I2cHandle.Init.DutyCycle        = I2C_DUTYCYCLE_2;
 8013020:	4b0e      	ldr	r3, [pc, #56]	@ (801305c <I2Cx_Init+0x58>)
 8013022:	2200      	movs	r2, #0
 8013024:	609a      	str	r2, [r3, #8]
    I2cHandle.Init.OwnAddress1      = 0;
 8013026:	4b0d      	ldr	r3, [pc, #52]	@ (801305c <I2Cx_Init+0x58>)
 8013028:	2200      	movs	r2, #0
 801302a:	60da      	str	r2, [r3, #12]
    I2cHandle.Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 801302c:	4b0b      	ldr	r3, [pc, #44]	@ (801305c <I2Cx_Init+0x58>)
 801302e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8013032:	611a      	str	r2, [r3, #16]
    I2cHandle.Init.DualAddressMode  = I2C_DUALADDRESS_DISABLED;
 8013034:	4b09      	ldr	r3, [pc, #36]	@ (801305c <I2Cx_Init+0x58>)
 8013036:	2200      	movs	r2, #0
 8013038:	615a      	str	r2, [r3, #20]
    I2cHandle.Init.OwnAddress2      = 0;
 801303a:	4b08      	ldr	r3, [pc, #32]	@ (801305c <I2Cx_Init+0x58>)
 801303c:	2200      	movs	r2, #0
 801303e:	619a      	str	r2, [r3, #24]
    I2cHandle.Init.GeneralCallMode  = I2C_GENERALCALL_DISABLED;
 8013040:	4b06      	ldr	r3, [pc, #24]	@ (801305c <I2Cx_Init+0x58>)
 8013042:	2200      	movs	r2, #0
 8013044:	61da      	str	r2, [r3, #28]
    I2cHandle.Init.NoStretchMode    = I2C_NOSTRETCH_DISABLED;
 8013046:	4b05      	ldr	r3, [pc, #20]	@ (801305c <I2Cx_Init+0x58>)
 8013048:	2200      	movs	r2, #0
 801304a:	621a      	str	r2, [r3, #32]

    /* Init the I2C */
    I2Cx_MspInit(&I2cHandle);
 801304c:	4803      	ldr	r0, [pc, #12]	@ (801305c <I2Cx_Init+0x58>)
 801304e:	f7ff ff63 	bl	8012f18 <I2Cx_MspInit>
    HAL_I2C_Init(&I2cHandle);
 8013052:	4802      	ldr	r0, [pc, #8]	@ (801305c <I2Cx_Init+0x58>)
 8013054:	f004 fc48 	bl	80178e8 <HAL_I2C_Init>
  }
}
 8013058:	bf00      	nop
 801305a:	bd80      	pop	{r7, pc}
 801305c:	20001a40 	.word	0x20001a40
 8013060:	40005c00 	.word	0x40005c00
 8013064:	000186a0 	.word	0x000186a0

08013068 <I2Cx_ITConfig>:

/**
  * @brief  Configures Interruption pin for I2C communication.
  */
static void I2Cx_ITConfig(void)
{
 8013068:	b580      	push	{r7, lr}
 801306a:	b086      	sub	sp, #24
 801306c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  GPIO_InitStruct;

  /* Enable the GPIO EXTI Clock */
  STMPE811_INT_CLK_ENABLE();
 801306e:	2300      	movs	r3, #0
 8013070:	603b      	str	r3, [r7, #0]
 8013072:	4b13      	ldr	r3, [pc, #76]	@ (80130c0 <I2Cx_ITConfig+0x58>)
 8013074:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8013076:	4a12      	ldr	r2, [pc, #72]	@ (80130c0 <I2Cx_ITConfig+0x58>)
 8013078:	f043 0301 	orr.w	r3, r3, #1
 801307c:	6313      	str	r3, [r2, #48]	@ 0x30
 801307e:	4b10      	ldr	r3, [pc, #64]	@ (80130c0 <I2Cx_ITConfig+0x58>)
 8013080:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8013082:	f003 0301 	and.w	r3, r3, #1
 8013086:	603b      	str	r3, [r7, #0]
 8013088:	683b      	ldr	r3, [r7, #0]

  GPIO_InitStruct.Pin   = STMPE811_INT_PIN;
 801308a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 801308e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull  = GPIO_PULLUP;
 8013090:	2301      	movs	r3, #1
 8013092:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
 8013094:	2300      	movs	r3, #0
 8013096:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode  = GPIO_MODE_IT_FALLING;
 8013098:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 801309c:	60bb      	str	r3, [r7, #8]
  HAL_GPIO_Init(STMPE811_INT_GPIO_PORT, &GPIO_InitStruct);
 801309e:	1d3b      	adds	r3, r7, #4
 80130a0:	4619      	mov	r1, r3
 80130a2:	4808      	ldr	r0, [pc, #32]	@ (80130c4 <I2Cx_ITConfig+0x5c>)
 80130a4:	f002 fb1e 	bl	80156e4 <HAL_GPIO_Init>

  /* Enable and set GPIO EXTI Interrupt to the highest priority */
  HAL_NVIC_SetPriority((IRQn_Type)(STMPE811_INT_EXTI), 0x0F, 0x00);
 80130a8:	2200      	movs	r2, #0
 80130aa:	210f      	movs	r1, #15
 80130ac:	2028      	movs	r0, #40	@ 0x28
 80130ae:	f001 fd79 	bl	8014ba4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ((IRQn_Type)(STMPE811_INT_EXTI));
 80130b2:	2028      	movs	r0, #40	@ 0x28
 80130b4:	f001 fd92 	bl	8014bdc <HAL_NVIC_EnableIRQ>
}
 80130b8:	bf00      	nop
 80130ba:	3718      	adds	r7, #24
 80130bc:	46bd      	mov	sp, r7
 80130be:	bd80      	pop	{r7, pc}
 80130c0:	40023800 	.word	0x40023800
 80130c4:	40020000 	.word	0x40020000

080130c8 <I2Cx_WriteData>:
  * @param  Addr: Device address on BUS Bus.
  * @param  Reg: The target register address to write
  * @param  Value: The target register value to be written
  */
static void I2Cx_WriteData(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 80130c8:	b580      	push	{r7, lr}
 80130ca:	b088      	sub	sp, #32
 80130cc:	af04      	add	r7, sp, #16
 80130ce:	4603      	mov	r3, r0
 80130d0:	71fb      	strb	r3, [r7, #7]
 80130d2:	460b      	mov	r3, r1
 80130d4:	71bb      	strb	r3, [r7, #6]
 80130d6:	4613      	mov	r3, r2
 80130d8:	717b      	strb	r3, [r7, #5]
  HAL_StatusTypeDef status = HAL_OK;
 80130da:	2300      	movs	r3, #0
 80130dc:	73fb      	strb	r3, [r7, #15]

  status = HAL_I2C_Mem_Write(&I2cHandle, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, &Value, 1, I2cxTimeout);
 80130de:	79fb      	ldrb	r3, [r7, #7]
 80130e0:	b299      	uxth	r1, r3
 80130e2:	79bb      	ldrb	r3, [r7, #6]
 80130e4:	b29a      	uxth	r2, r3
 80130e6:	4b0b      	ldr	r3, [pc, #44]	@ (8013114 <I2Cx_WriteData+0x4c>)
 80130e8:	681b      	ldr	r3, [r3, #0]
 80130ea:	9302      	str	r3, [sp, #8]
 80130ec:	2301      	movs	r3, #1
 80130ee:	9301      	str	r3, [sp, #4]
 80130f0:	1d7b      	adds	r3, r7, #5
 80130f2:	9300      	str	r3, [sp, #0]
 80130f4:	2301      	movs	r3, #1
 80130f6:	4808      	ldr	r0, [pc, #32]	@ (8013118 <I2Cx_WriteData+0x50>)
 80130f8:	f004 fd6a 	bl	8017bd0 <HAL_I2C_Mem_Write>
 80130fc:	4603      	mov	r3, r0
 80130fe:	73fb      	strb	r3, [r7, #15]

  /* Check the communication status */
  if (status != HAL_OK)
 8013100:	7bfb      	ldrb	r3, [r7, #15]
 8013102:	2b00      	cmp	r3, #0
 8013104:	d001      	beq.n	801310a <I2Cx_WriteData+0x42>
  {
    /* Re-Initialize the BUS */
    I2Cx_Error();
 8013106:	f000 f863 	bl	80131d0 <I2Cx_Error>
  }
}
 801310a:	bf00      	nop
 801310c:	3710      	adds	r7, #16
 801310e:	46bd      	mov	sp, r7
 8013110:	bd80      	pop	{r7, pc}
 8013112:	bf00      	nop
 8013114:	20000068 	.word	0x20000068
 8013118:	20001a40 	.word	0x20001a40

0801311c <I2Cx_ReadData>:
  * @param  Addr: Device address on BUS Bus.
  * @param  Reg: The target register address to write
  * @retval Data read at register address
  */
static uint8_t I2Cx_ReadData(uint8_t Addr, uint8_t Reg)
{
 801311c:	b580      	push	{r7, lr}
 801311e:	b088      	sub	sp, #32
 8013120:	af04      	add	r7, sp, #16
 8013122:	4603      	mov	r3, r0
 8013124:	460a      	mov	r2, r1
 8013126:	71fb      	strb	r3, [r7, #7]
 8013128:	4613      	mov	r3, r2
 801312a:	71bb      	strb	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 801312c:	2300      	movs	r3, #0
 801312e:	73fb      	strb	r3, [r7, #15]
  uint8_t value = 0;
 8013130:	2300      	movs	r3, #0
 8013132:	73bb      	strb	r3, [r7, #14]

  status = HAL_I2C_Mem_Read(&I2cHandle, Addr, Reg, I2C_MEMADD_SIZE_8BIT, &value, 1, I2cxTimeout);
 8013134:	79fb      	ldrb	r3, [r7, #7]
 8013136:	b299      	uxth	r1, r3
 8013138:	79bb      	ldrb	r3, [r7, #6]
 801313a:	b29a      	uxth	r2, r3
 801313c:	4b0b      	ldr	r3, [pc, #44]	@ (801316c <I2Cx_ReadData+0x50>)
 801313e:	681b      	ldr	r3, [r3, #0]
 8013140:	9302      	str	r3, [sp, #8]
 8013142:	2301      	movs	r3, #1
 8013144:	9301      	str	r3, [sp, #4]
 8013146:	f107 030e 	add.w	r3, r7, #14
 801314a:	9300      	str	r3, [sp, #0]
 801314c:	2301      	movs	r3, #1
 801314e:	4808      	ldr	r0, [pc, #32]	@ (8013170 <I2Cx_ReadData+0x54>)
 8013150:	f004 fe38 	bl	8017dc4 <HAL_I2C_Mem_Read>
 8013154:	4603      	mov	r3, r0
 8013156:	73fb      	strb	r3, [r7, #15]

  /* Check the communication status */
  if (status != HAL_OK)
 8013158:	7bfb      	ldrb	r3, [r7, #15]
 801315a:	2b00      	cmp	r3, #0
 801315c:	d001      	beq.n	8013162 <I2Cx_ReadData+0x46>
  {
    /* Re-Initialize the BUS */
    I2Cx_Error();
 801315e:	f000 f837 	bl	80131d0 <I2Cx_Error>

  }
  return value;
 8013162:	7bbb      	ldrb	r3, [r7, #14]
}
 8013164:	4618      	mov	r0, r3
 8013166:	3710      	adds	r7, #16
 8013168:	46bd      	mov	sp, r7
 801316a:	bd80      	pop	{r7, pc}
 801316c:	20000068 	.word	0x20000068
 8013170:	20001a40 	.word	0x20001a40

08013174 <I2Cx_ReadBuffer>:
  * @param  pBuffer: pointer to read data buffer
  * @param  Length: length of the data
  * @retval 0 if no problems to read multiple data
  */
static uint8_t I2Cx_ReadBuffer(uint8_t Addr, uint8_t Reg, uint8_t *pBuffer, uint16_t Length)
{
 8013174:	b580      	push	{r7, lr}
 8013176:	b088      	sub	sp, #32
 8013178:	af04      	add	r7, sp, #16
 801317a:	603a      	str	r2, [r7, #0]
 801317c:	461a      	mov	r2, r3
 801317e:	4603      	mov	r3, r0
 8013180:	71fb      	strb	r3, [r7, #7]
 8013182:	460b      	mov	r3, r1
 8013184:	71bb      	strb	r3, [r7, #6]
 8013186:	4613      	mov	r3, r2
 8013188:	80bb      	strh	r3, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 801318a:	2300      	movs	r3, #0
 801318c:	73fb      	strb	r3, [r7, #15]

  status = HAL_I2C_Mem_Read(&I2cHandle, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, pBuffer, Length, I2cxTimeout);
 801318e:	79fb      	ldrb	r3, [r7, #7]
 8013190:	b299      	uxth	r1, r3
 8013192:	79bb      	ldrb	r3, [r7, #6]
 8013194:	b29a      	uxth	r2, r3
 8013196:	4b0c      	ldr	r3, [pc, #48]	@ (80131c8 <I2Cx_ReadBuffer+0x54>)
 8013198:	681b      	ldr	r3, [r3, #0]
 801319a:	9302      	str	r3, [sp, #8]
 801319c:	88bb      	ldrh	r3, [r7, #4]
 801319e:	9301      	str	r3, [sp, #4]
 80131a0:	683b      	ldr	r3, [r7, #0]
 80131a2:	9300      	str	r3, [sp, #0]
 80131a4:	2301      	movs	r3, #1
 80131a6:	4809      	ldr	r0, [pc, #36]	@ (80131cc <I2Cx_ReadBuffer+0x58>)
 80131a8:	f004 fe0c 	bl	8017dc4 <HAL_I2C_Mem_Read>
 80131ac:	4603      	mov	r3, r0
 80131ae:	73fb      	strb	r3, [r7, #15]

  /* Check the communication status */
  if (status == HAL_OK)
 80131b0:	7bfb      	ldrb	r3, [r7, #15]
 80131b2:	2b00      	cmp	r3, #0
 80131b4:	d101      	bne.n	80131ba <I2Cx_ReadBuffer+0x46>
  {
    return 0;
 80131b6:	2300      	movs	r3, #0
 80131b8:	e002      	b.n	80131c0 <I2Cx_ReadBuffer+0x4c>
  }
  else
  {
    /* Re-Initialize the BUS */
    I2Cx_Error();
 80131ba:	f000 f809 	bl	80131d0 <I2Cx_Error>

    return 1;
 80131be:	2301      	movs	r3, #1
  }
}
 80131c0:	4618      	mov	r0, r3
 80131c2:	3710      	adds	r7, #16
 80131c4:	46bd      	mov	sp, r7
 80131c6:	bd80      	pop	{r7, pc}
 80131c8:	20000068 	.word	0x20000068
 80131cc:	20001a40 	.word	0x20001a40

080131d0 <I2Cx_Error>:

/**
  * @brief  I2Cx error treatment function
  */
static void I2Cx_Error(void)
{
 80131d0:	b580      	push	{r7, lr}
 80131d2:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_I2C_DeInit(&I2cHandle);
 80131d4:	4803      	ldr	r0, [pc, #12]	@ (80131e4 <I2Cx_Error+0x14>)
 80131d6:	f004 fccb 	bl	8017b70 <HAL_I2C_DeInit>

  /* Re-Initialize the SPI communication BUS */
  I2Cx_Init();
 80131da:	f7ff ff13 	bl	8013004 <I2Cx_Init>
}
 80131de:	bf00      	nop
 80131e0:	bd80      	pop	{r7, pc}
 80131e2:	bf00      	nop
 80131e4:	20001a40 	.word	0x20001a40

080131e8 <SPIx_Init>:

/**
  * @brief  SPIx Bus initialization
  */
static void SPIx_Init(void)
{
 80131e8:	b580      	push	{r7, lr}
 80131ea:	af00      	add	r7, sp, #0
  if (HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 80131ec:	4819      	ldr	r0, [pc, #100]	@ (8013254 <SPIx_Init+0x6c>)
 80131ee:	f007 fb65 	bl	801a8bc <HAL_SPI_GetState>
 80131f2:	4603      	mov	r3, r0
 80131f4:	2b00      	cmp	r3, #0
 80131f6:	d12b      	bne.n	8013250 <SPIx_Init+0x68>
  {
    /* SPI configuration -----------------------------------------------------*/
    SpiHandle.Instance = DISCOVERY_SPIx;
 80131f8:	4b16      	ldr	r3, [pc, #88]	@ (8013254 <SPIx_Init+0x6c>)
 80131fa:	4a17      	ldr	r2, [pc, #92]	@ (8013258 <SPIx_Init+0x70>)
 80131fc:	601a      	str	r2, [r3, #0]
       to verify these constraints:
       - ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
       - l3gd20 SPI interface max baudrate is 10MHz for write/read
       - PCLK2 frequency is set to 90 MHz
    */
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80131fe:	4b15      	ldr	r3, [pc, #84]	@ (8013254 <SPIx_Init+0x6c>)
 8013200:	2218      	movs	r2, #24
 8013202:	61da      	str	r2, [r3, #28]

    /* On STM32F429I-Discovery, LCD ID cannot be read then keep a common configuration */
    /* for LCD and GYRO (SPI_DIRECTION_2LINES) */
    /* Note: To read a register a LCD, SPI_DIRECTION_1LINE should be set */
    SpiHandle.Init.Direction      = SPI_DIRECTION_2LINES;
 8013204:	4b13      	ldr	r3, [pc, #76]	@ (8013254 <SPIx_Init+0x6c>)
 8013206:	2200      	movs	r2, #0
 8013208:	609a      	str	r2, [r3, #8]
    SpiHandle.Init.CLKPhase       = SPI_PHASE_1EDGE;
 801320a:	4b12      	ldr	r3, [pc, #72]	@ (8013254 <SPIx_Init+0x6c>)
 801320c:	2200      	movs	r2, #0
 801320e:	615a      	str	r2, [r3, #20]
    SpiHandle.Init.CLKPolarity    = SPI_POLARITY_LOW;
 8013210:	4b10      	ldr	r3, [pc, #64]	@ (8013254 <SPIx_Init+0x6c>)
 8013212:	2200      	movs	r2, #0
 8013214:	611a      	str	r2, [r3, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 8013216:	4b0f      	ldr	r3, [pc, #60]	@ (8013254 <SPIx_Init+0x6c>)
 8013218:	2200      	movs	r2, #0
 801321a:	629a      	str	r2, [r3, #40]	@ 0x28
    SpiHandle.Init.CRCPolynomial  = 7;
 801321c:	4b0d      	ldr	r3, [pc, #52]	@ (8013254 <SPIx_Init+0x6c>)
 801321e:	2207      	movs	r2, #7
 8013220:	62da      	str	r2, [r3, #44]	@ 0x2c
    SpiHandle.Init.DataSize       = SPI_DATASIZE_8BIT;
 8013222:	4b0c      	ldr	r3, [pc, #48]	@ (8013254 <SPIx_Init+0x6c>)
 8013224:	2200      	movs	r2, #0
 8013226:	60da      	str	r2, [r3, #12]
    SpiHandle.Init.FirstBit       = SPI_FIRSTBIT_MSB;
 8013228:	4b0a      	ldr	r3, [pc, #40]	@ (8013254 <SPIx_Init+0x6c>)
 801322a:	2200      	movs	r2, #0
 801322c:	621a      	str	r2, [r3, #32]
    SpiHandle.Init.NSS            = SPI_NSS_SOFT;
 801322e:	4b09      	ldr	r3, [pc, #36]	@ (8013254 <SPIx_Init+0x6c>)
 8013230:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8013234:	619a      	str	r2, [r3, #24]
    SpiHandle.Init.TIMode         = SPI_TIMODE_DISABLED;
 8013236:	4b07      	ldr	r3, [pc, #28]	@ (8013254 <SPIx_Init+0x6c>)
 8013238:	2200      	movs	r2, #0
 801323a:	625a      	str	r2, [r3, #36]	@ 0x24
    SpiHandle.Init.Mode           = SPI_MODE_MASTER;
 801323c:	4b05      	ldr	r3, [pc, #20]	@ (8013254 <SPIx_Init+0x6c>)
 801323e:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8013242:	605a      	str	r2, [r3, #4]

    SPIx_MspInit(&SpiHandle);
 8013244:	4803      	ldr	r0, [pc, #12]	@ (8013254 <SPIx_Init+0x6c>)
 8013246:	f000 f853 	bl	80132f0 <SPIx_MspInit>
    HAL_SPI_Init(&SpiHandle);
 801324a:	4802      	ldr	r0, [pc, #8]	@ (8013254 <SPIx_Init+0x6c>)
 801324c:	f006 fe7f 	bl	8019f4e <HAL_SPI_Init>
  }
}
 8013250:	bf00      	nop
 8013252:	bd80      	pop	{r7, pc}
 8013254:	20001a94 	.word	0x20001a94
 8013258:	40015000 	.word	0x40015000

0801325c <SPIx_Read>:
  * @brief  Reads 4 bytes from device.
  * @param  ReadSize: Number of bytes to read (max 4 bytes)
  * @retval Value read on the SPI
  */
static uint32_t SPIx_Read(uint8_t ReadSize)
{
 801325c:	b580      	push	{r7, lr}
 801325e:	b084      	sub	sp, #16
 8013260:	af00      	add	r7, sp, #0
 8013262:	4603      	mov	r3, r0
 8013264:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 8013266:	2300      	movs	r3, #0
 8013268:	73fb      	strb	r3, [r7, #15]
  uint32_t readvalue;

  status = HAL_SPI_Receive(&SpiHandle, (uint8_t *) &readvalue, ReadSize, SpixTimeout);
 801326a:	79fb      	ldrb	r3, [r7, #7]
 801326c:	b29a      	uxth	r2, r3
 801326e:	4b09      	ldr	r3, [pc, #36]	@ (8013294 <SPIx_Read+0x38>)
 8013270:	681b      	ldr	r3, [r3, #0]
 8013272:	f107 0108 	add.w	r1, r7, #8
 8013276:	4808      	ldr	r0, [pc, #32]	@ (8013298 <SPIx_Read+0x3c>)
 8013278:	f007 f85e 	bl	801a338 <HAL_SPI_Receive>
 801327c:	4603      	mov	r3, r0
 801327e:	73fb      	strb	r3, [r7, #15]

  /* Check the communication status */
  if (status != HAL_OK)
 8013280:	7bfb      	ldrb	r3, [r7, #15]
 8013282:	2b00      	cmp	r3, #0
 8013284:	d001      	beq.n	801328a <SPIx_Read+0x2e>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 8013286:	f000 f827 	bl	80132d8 <SPIx_Error>
  }

  return readvalue;
 801328a:	68bb      	ldr	r3, [r7, #8]
}
 801328c:	4618      	mov	r0, r3
 801328e:	3710      	adds	r7, #16
 8013290:	46bd      	mov	sp, r7
 8013292:	bd80      	pop	{r7, pc}
 8013294:	2000006c 	.word	0x2000006c
 8013298:	20001a94 	.word	0x20001a94

0801329c <SPIx_Write>:
/**
  * @brief  Writes a byte to device.
  * @param  Value: value to be written
  */
static void SPIx_Write(uint16_t Value)
{
 801329c:	b580      	push	{r7, lr}
 801329e:	b084      	sub	sp, #16
 80132a0:	af00      	add	r7, sp, #0
 80132a2:	4603      	mov	r3, r0
 80132a4:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 80132a6:	2300      	movs	r3, #0
 80132a8:	73fb      	strb	r3, [r7, #15]

  status = HAL_SPI_Transmit(&SpiHandle, (uint8_t *) &Value, 1, SpixTimeout);
 80132aa:	4b09      	ldr	r3, [pc, #36]	@ (80132d0 <SPIx_Write+0x34>)
 80132ac:	681b      	ldr	r3, [r3, #0]
 80132ae:	1db9      	adds	r1, r7, #6
 80132b0:	2201      	movs	r2, #1
 80132b2:	4808      	ldr	r0, [pc, #32]	@ (80132d4 <SPIx_Write+0x38>)
 80132b4:	f006 fefc 	bl	801a0b0 <HAL_SPI_Transmit>
 80132b8:	4603      	mov	r3, r0
 80132ba:	73fb      	strb	r3, [r7, #15]

  /* Check the communication status */
  if (status != HAL_OK)
 80132bc:	7bfb      	ldrb	r3, [r7, #15]
 80132be:	2b00      	cmp	r3, #0
 80132c0:	d001      	beq.n	80132c6 <SPIx_Write+0x2a>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 80132c2:	f000 f809 	bl	80132d8 <SPIx_Error>
  }
}
 80132c6:	bf00      	nop
 80132c8:	3710      	adds	r7, #16
 80132ca:	46bd      	mov	sp, r7
 80132cc:	bd80      	pop	{r7, pc}
 80132ce:	bf00      	nop
 80132d0:	2000006c 	.word	0x2000006c
 80132d4:	20001a94 	.word	0x20001a94

080132d8 <SPIx_Error>:

/**
  * @brief  SPIx error treatment function.
  */
static void SPIx_Error(void)
{
 80132d8:	b580      	push	{r7, lr}
 80132da:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_SPI_DeInit(&SpiHandle);
 80132dc:	4803      	ldr	r0, [pc, #12]	@ (80132ec <SPIx_Error+0x14>)
 80132de:	f006 febf 	bl	801a060 <HAL_SPI_DeInit>

  /* Re- Initialize the SPI communication BUS */
  SPIx_Init();
 80132e2:	f7ff ff81 	bl	80131e8 <SPIx_Init>
}
 80132e6:	bf00      	nop
 80132e8:	bd80      	pop	{r7, pc}
 80132ea:	bf00      	nop
 80132ec:	20001a94 	.word	0x20001a94

080132f0 <SPIx_MspInit>:
/**
  * @brief  SPI MSP Init.
  * @param  hspi: SPI handle
  */
static void SPIx_MspInit(SPI_HandleTypeDef *hspi)
{
 80132f0:	b580      	push	{r7, lr}
 80132f2:	b08a      	sub	sp, #40	@ 0x28
 80132f4:	af00      	add	r7, sp, #0
 80132f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPIx clock */
  DISCOVERY_SPIx_CLK_ENABLE();
 80132f8:	2300      	movs	r3, #0
 80132fa:	613b      	str	r3, [r7, #16]
 80132fc:	4b17      	ldr	r3, [pc, #92]	@ (801335c <SPIx_MspInit+0x6c>)
 80132fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8013300:	4a16      	ldr	r2, [pc, #88]	@ (801335c <SPIx_MspInit+0x6c>)
 8013302:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8013306:	6453      	str	r3, [r2, #68]	@ 0x44
 8013308:	4b14      	ldr	r3, [pc, #80]	@ (801335c <SPIx_MspInit+0x6c>)
 801330a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801330c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8013310:	613b      	str	r3, [r7, #16]
 8013312:	693b      	ldr	r3, [r7, #16]

  /* Enable DISCOVERY_SPI GPIO clock */
  DISCOVERY_SPIx_GPIO_CLK_ENABLE();
 8013314:	2300      	movs	r3, #0
 8013316:	60fb      	str	r3, [r7, #12]
 8013318:	4b10      	ldr	r3, [pc, #64]	@ (801335c <SPIx_MspInit+0x6c>)
 801331a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801331c:	4a0f      	ldr	r2, [pc, #60]	@ (801335c <SPIx_MspInit+0x6c>)
 801331e:	f043 0320 	orr.w	r3, r3, #32
 8013322:	6313      	str	r3, [r2, #48]	@ 0x30
 8013324:	4b0d      	ldr	r3, [pc, #52]	@ (801335c <SPIx_MspInit+0x6c>)
 8013326:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8013328:	f003 0320 	and.w	r3, r3, #32
 801332c:	60fb      	str	r3, [r7, #12]
 801332e:	68fb      	ldr	r3, [r7, #12]

  /* configure SPI SCK, MOSI and MISO */
  GPIO_InitStructure.Pin    = (DISCOVERY_SPIx_SCK_PIN | DISCOVERY_SPIx_MOSI_PIN | DISCOVERY_SPIx_MISO_PIN);
 8013330:	f44f 7360 	mov.w	r3, #896	@ 0x380
 8013334:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode   = GPIO_MODE_AF_PP;
 8013336:	2302      	movs	r3, #2
 8013338:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull   = GPIO_PULLDOWN;
 801333a:	2302      	movs	r3, #2
 801333c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed  = GPIO_SPEED_MEDIUM;
 801333e:	2301      	movs	r3, #1
 8013340:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_SPIx_AF;
 8013342:	2305      	movs	r3, #5
 8013344:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(DISCOVERY_SPIx_GPIO_PORT, &GPIO_InitStructure);
 8013346:	f107 0314 	add.w	r3, r7, #20
 801334a:	4619      	mov	r1, r3
 801334c:	4804      	ldr	r0, [pc, #16]	@ (8013360 <SPIx_MspInit+0x70>)
 801334e:	f002 f9c9 	bl	80156e4 <HAL_GPIO_Init>
}
 8013352:	bf00      	nop
 8013354:	3728      	adds	r7, #40	@ 0x28
 8013356:	46bd      	mov	sp, r7
 8013358:	bd80      	pop	{r7, pc}
 801335a:	bf00      	nop
 801335c:	40023800 	.word	0x40023800
 8013360:	40021400 	.word	0x40021400

08013364 <LCD_IO_Init>:

/**
  * @brief  Configures the LCD_SPI interface.
  */
void LCD_IO_Init(void)
{
 8013364:	b580      	push	{r7, lr}
 8013366:	b088      	sub	sp, #32
 8013368:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  if (Is_LCD_IO_Initialized == 0)
 801336a:	4b36      	ldr	r3, [pc, #216]	@ (8013444 <LCD_IO_Init+0xe0>)
 801336c:	781b      	ldrb	r3, [r3, #0]
 801336e:	2b00      	cmp	r3, #0
 8013370:	d164      	bne.n	801343c <LCD_IO_Init+0xd8>
  {
    Is_LCD_IO_Initialized = 1;
 8013372:	4b34      	ldr	r3, [pc, #208]	@ (8013444 <LCD_IO_Init+0xe0>)
 8013374:	2201      	movs	r2, #1
 8013376:	701a      	strb	r2, [r3, #0]

    /* Configure NCS in Output Push-Pull mode */
    LCD_WRX_GPIO_CLK_ENABLE();
 8013378:	2300      	movs	r3, #0
 801337a:	60bb      	str	r3, [r7, #8]
 801337c:	4b32      	ldr	r3, [pc, #200]	@ (8013448 <LCD_IO_Init+0xe4>)
 801337e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8013380:	4a31      	ldr	r2, [pc, #196]	@ (8013448 <LCD_IO_Init+0xe4>)
 8013382:	f043 0308 	orr.w	r3, r3, #8
 8013386:	6313      	str	r3, [r2, #48]	@ 0x30
 8013388:	4b2f      	ldr	r3, [pc, #188]	@ (8013448 <LCD_IO_Init+0xe4>)
 801338a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801338c:	f003 0308 	and.w	r3, r3, #8
 8013390:	60bb      	str	r3, [r7, #8]
 8013392:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStructure.Pin     = LCD_WRX_PIN;
 8013394:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8013398:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 801339a:	2301      	movs	r3, #1
 801339c:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 801339e:	2300      	movs	r3, #0
 80133a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 80133a2:	2302      	movs	r3, #2
 80133a4:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 80133a6:	f107 030c 	add.w	r3, r7, #12
 80133aa:	4619      	mov	r1, r3
 80133ac:	4827      	ldr	r0, [pc, #156]	@ (801344c <LCD_IO_Init+0xe8>)
 80133ae:	f002 f999 	bl	80156e4 <HAL_GPIO_Init>

    LCD_RDX_GPIO_CLK_ENABLE();
 80133b2:	2300      	movs	r3, #0
 80133b4:	607b      	str	r3, [r7, #4]
 80133b6:	4b24      	ldr	r3, [pc, #144]	@ (8013448 <LCD_IO_Init+0xe4>)
 80133b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80133ba:	4a23      	ldr	r2, [pc, #140]	@ (8013448 <LCD_IO_Init+0xe4>)
 80133bc:	f043 0308 	orr.w	r3, r3, #8
 80133c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80133c2:	4b21      	ldr	r3, [pc, #132]	@ (8013448 <LCD_IO_Init+0xe4>)
 80133c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80133c6:	f003 0308 	and.w	r3, r3, #8
 80133ca:	607b      	str	r3, [r7, #4]
 80133cc:	687b      	ldr	r3, [r7, #4]
    GPIO_InitStructure.Pin     = LCD_RDX_PIN;
 80133ce:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80133d2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 80133d4:	2301      	movs	r3, #1
 80133d6:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 80133d8:	2300      	movs	r3, #0
 80133da:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 80133dc:	2302      	movs	r3, #2
 80133de:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 80133e0:	f107 030c 	add.w	r3, r7, #12
 80133e4:	4619      	mov	r1, r3
 80133e6:	4819      	ldr	r0, [pc, #100]	@ (801344c <LCD_IO_Init+0xe8>)
 80133e8:	f002 f97c 	bl	80156e4 <HAL_GPIO_Init>

    /* Configure the LCD Control pins ----------------------------------------*/
    LCD_NCS_GPIO_CLK_ENABLE();
 80133ec:	2300      	movs	r3, #0
 80133ee:	603b      	str	r3, [r7, #0]
 80133f0:	4b15      	ldr	r3, [pc, #84]	@ (8013448 <LCD_IO_Init+0xe4>)
 80133f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80133f4:	4a14      	ldr	r2, [pc, #80]	@ (8013448 <LCD_IO_Init+0xe4>)
 80133f6:	f043 0304 	orr.w	r3, r3, #4
 80133fa:	6313      	str	r3, [r2, #48]	@ 0x30
 80133fc:	4b12      	ldr	r3, [pc, #72]	@ (8013448 <LCD_IO_Init+0xe4>)
 80133fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8013400:	f003 0304 	and.w	r3, r3, #4
 8013404:	603b      	str	r3, [r7, #0]
 8013406:	683b      	ldr	r3, [r7, #0]

    /* Configure NCS in Output Push-Pull mode */
    GPIO_InitStructure.Pin     = LCD_NCS_PIN;
 8013408:	2304      	movs	r3, #4
 801340a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 801340c:	2301      	movs	r3, #1
 801340e:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8013410:	2300      	movs	r3, #0
 8013412:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8013414:	2302      	movs	r3, #2
 8013416:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 8013418:	f107 030c 	add.w	r3, r7, #12
 801341c:	4619      	mov	r1, r3
 801341e:	480c      	ldr	r0, [pc, #48]	@ (8013450 <LCD_IO_Init+0xec>)
 8013420:	f002 f960 	bl	80156e4 <HAL_GPIO_Init>

    /* Set or Reset the control line */
    LCD_CS_LOW();
 8013424:	2200      	movs	r2, #0
 8013426:	2104      	movs	r1, #4
 8013428:	4809      	ldr	r0, [pc, #36]	@ (8013450 <LCD_IO_Init+0xec>)
 801342a:	f002 fc13 	bl	8015c54 <HAL_GPIO_WritePin>
    LCD_CS_HIGH();
 801342e:	2201      	movs	r2, #1
 8013430:	2104      	movs	r1, #4
 8013432:	4807      	ldr	r0, [pc, #28]	@ (8013450 <LCD_IO_Init+0xec>)
 8013434:	f002 fc0e 	bl	8015c54 <HAL_GPIO_WritePin>

    SPIx_Init();
 8013438:	f7ff fed6 	bl	80131e8 <SPIx_Init>
  }
}
 801343c:	bf00      	nop
 801343e:	3720      	adds	r7, #32
 8013440:	46bd      	mov	sp, r7
 8013442:	bd80      	pop	{r7, pc}
 8013444:	20001aec 	.word	0x20001aec
 8013448:	40023800 	.word	0x40023800
 801344c:	40020c00 	.word	0x40020c00
 8013450:	40020800 	.word	0x40020800

08013454 <LCD_IO_WriteData>:

/**
  * @brief  Writes register value.
  */
void LCD_IO_WriteData(uint16_t RegValue)
{
 8013454:	b580      	push	{r7, lr}
 8013456:	b082      	sub	sp, #8
 8013458:	af00      	add	r7, sp, #0
 801345a:	4603      	mov	r3, r0
 801345c:	80fb      	strh	r3, [r7, #6]
  /* Set WRX to send data */
  LCD_WRX_HIGH();
 801345e:	2201      	movs	r2, #1
 8013460:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8013464:	480a      	ldr	r0, [pc, #40]	@ (8013490 <LCD_IO_WriteData+0x3c>)
 8013466:	f002 fbf5 	bl	8015c54 <HAL_GPIO_WritePin>

  /* Reset LCD control line(/CS) and Send data */
  LCD_CS_LOW();
 801346a:	2200      	movs	r2, #0
 801346c:	2104      	movs	r1, #4
 801346e:	4809      	ldr	r0, [pc, #36]	@ (8013494 <LCD_IO_WriteData+0x40>)
 8013470:	f002 fbf0 	bl	8015c54 <HAL_GPIO_WritePin>
  SPIx_Write(RegValue);
 8013474:	88fb      	ldrh	r3, [r7, #6]
 8013476:	4618      	mov	r0, r3
 8013478:	f7ff ff10 	bl	801329c <SPIx_Write>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 801347c:	2201      	movs	r2, #1
 801347e:	2104      	movs	r1, #4
 8013480:	4804      	ldr	r0, [pc, #16]	@ (8013494 <LCD_IO_WriteData+0x40>)
 8013482:	f002 fbe7 	bl	8015c54 <HAL_GPIO_WritePin>
}
 8013486:	bf00      	nop
 8013488:	3708      	adds	r7, #8
 801348a:	46bd      	mov	sp, r7
 801348c:	bd80      	pop	{r7, pc}
 801348e:	bf00      	nop
 8013490:	40020c00 	.word	0x40020c00
 8013494:	40020800 	.word	0x40020800

08013498 <LCD_IO_WriteReg>:

/**
  * @brief  Writes register address.
  */
void LCD_IO_WriteReg(uint8_t Reg)
{
 8013498:	b580      	push	{r7, lr}
 801349a:	b082      	sub	sp, #8
 801349c:	af00      	add	r7, sp, #0
 801349e:	4603      	mov	r3, r0
 80134a0:	71fb      	strb	r3, [r7, #7]
  /* Reset WRX to send command */
  LCD_WRX_LOW();
 80134a2:	2200      	movs	r2, #0
 80134a4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80134a8:	480a      	ldr	r0, [pc, #40]	@ (80134d4 <LCD_IO_WriteReg+0x3c>)
 80134aa:	f002 fbd3 	bl	8015c54 <HAL_GPIO_WritePin>

  /* Reset LCD control line(/CS) and Send command */
  LCD_CS_LOW();
 80134ae:	2200      	movs	r2, #0
 80134b0:	2104      	movs	r1, #4
 80134b2:	4809      	ldr	r0, [pc, #36]	@ (80134d8 <LCD_IO_WriteReg+0x40>)
 80134b4:	f002 fbce 	bl	8015c54 <HAL_GPIO_WritePin>
  SPIx_Write(Reg);
 80134b8:	79fb      	ldrb	r3, [r7, #7]
 80134ba:	b29b      	uxth	r3, r3
 80134bc:	4618      	mov	r0, r3
 80134be:	f7ff feed 	bl	801329c <SPIx_Write>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 80134c2:	2201      	movs	r2, #1
 80134c4:	2104      	movs	r1, #4
 80134c6:	4804      	ldr	r0, [pc, #16]	@ (80134d8 <LCD_IO_WriteReg+0x40>)
 80134c8:	f002 fbc4 	bl	8015c54 <HAL_GPIO_WritePin>
}
 80134cc:	bf00      	nop
 80134ce:	3708      	adds	r7, #8
 80134d0:	46bd      	mov	sp, r7
 80134d2:	bd80      	pop	{r7, pc}
 80134d4:	40020c00 	.word	0x40020c00
 80134d8:	40020800 	.word	0x40020800

080134dc <LCD_IO_ReadData>:
  * @param  RegValue Address of the register to read
  * @param  ReadSize Number of bytes to read
  * @retval Content of the register value
  */
uint32_t LCD_IO_ReadData(uint16_t RegValue, uint8_t ReadSize)
{
 80134dc:	b580      	push	{r7, lr}
 80134de:	b084      	sub	sp, #16
 80134e0:	af00      	add	r7, sp, #0
 80134e2:	4603      	mov	r3, r0
 80134e4:	460a      	mov	r2, r1
 80134e6:	80fb      	strh	r3, [r7, #6]
 80134e8:	4613      	mov	r3, r2
 80134ea:	717b      	strb	r3, [r7, #5]
  uint32_t readvalue = 0;
 80134ec:	2300      	movs	r3, #0
 80134ee:	60fb      	str	r3, [r7, #12]

  /* Select: Chip Select low */
  LCD_CS_LOW();
 80134f0:	2200      	movs	r2, #0
 80134f2:	2104      	movs	r1, #4
 80134f4:	4810      	ldr	r0, [pc, #64]	@ (8013538 <LCD_IO_ReadData+0x5c>)
 80134f6:	f002 fbad 	bl	8015c54 <HAL_GPIO_WritePin>

  /* Reset WRX to send command */
  LCD_WRX_LOW();
 80134fa:	2200      	movs	r2, #0
 80134fc:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8013500:	480e      	ldr	r0, [pc, #56]	@ (801353c <LCD_IO_ReadData+0x60>)
 8013502:	f002 fba7 	bl	8015c54 <HAL_GPIO_WritePin>

  SPIx_Write(RegValue);
 8013506:	88fb      	ldrh	r3, [r7, #6]
 8013508:	4618      	mov	r0, r3
 801350a:	f7ff fec7 	bl	801329c <SPIx_Write>

  readvalue = SPIx_Read(ReadSize);
 801350e:	797b      	ldrb	r3, [r7, #5]
 8013510:	4618      	mov	r0, r3
 8013512:	f7ff fea3 	bl	801325c <SPIx_Read>
 8013516:	60f8      	str	r0, [r7, #12]

  /* Set WRX to send data */
  LCD_WRX_HIGH();
 8013518:	2201      	movs	r2, #1
 801351a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 801351e:	4807      	ldr	r0, [pc, #28]	@ (801353c <LCD_IO_ReadData+0x60>)
 8013520:	f002 fb98 	bl	8015c54 <HAL_GPIO_WritePin>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8013524:	2201      	movs	r2, #1
 8013526:	2104      	movs	r1, #4
 8013528:	4803      	ldr	r0, [pc, #12]	@ (8013538 <LCD_IO_ReadData+0x5c>)
 801352a:	f002 fb93 	bl	8015c54 <HAL_GPIO_WritePin>

  return readvalue;
 801352e:	68fb      	ldr	r3, [r7, #12]
}
 8013530:	4618      	mov	r0, r3
 8013532:	3710      	adds	r7, #16
 8013534:	46bd      	mov	sp, r7
 8013536:	bd80      	pop	{r7, pc}
 8013538:	40020800 	.word	0x40020800
 801353c:	40020c00 	.word	0x40020c00

08013540 <LCD_Delay>:
/**
  * @brief  Wait for loop in ms.
  * @param  Delay in ms.
  */
void LCD_Delay(uint32_t Delay)
{
 8013540:	b580      	push	{r7, lr}
 8013542:	b082      	sub	sp, #8
 8013544:	af00      	add	r7, sp, #0
 8013546:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8013548:	6878      	ldr	r0, [r7, #4]
 801354a:	f001 fa4f 	bl	80149ec <HAL_Delay>
}
 801354e:	bf00      	nop
 8013550:	3708      	adds	r7, #8
 8013552:	46bd      	mov	sp, r7
 8013554:	bd80      	pop	{r7, pc}

08013556 <IOE_Init>:

/**
  * @brief  IOE Low Level Initialization.
  */
void IOE_Init(void)
{
 8013556:	b580      	push	{r7, lr}
 8013558:	af00      	add	r7, sp, #0
  I2Cx_Init();
 801355a:	f7ff fd53 	bl	8013004 <I2Cx_Init>
}
 801355e:	bf00      	nop
 8013560:	bd80      	pop	{r7, pc}

08013562 <IOE_ITConfig>:

/**
  * @brief  IOE Low Level Interrupt configuration.
  */
void IOE_ITConfig(void)
{
 8013562:	b580      	push	{r7, lr}
 8013564:	af00      	add	r7, sp, #0
  I2Cx_ITConfig();
 8013566:	f7ff fd7f 	bl	8013068 <I2Cx_ITConfig>
}
 801356a:	bf00      	nop
 801356c:	bd80      	pop	{r7, pc}

0801356e <IOE_Write>:
  * @param  Addr: I2C Address
  * @param  Reg: Reg Address
  * @param  Value: Data to be written
  */
void IOE_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 801356e:	b580      	push	{r7, lr}
 8013570:	b082      	sub	sp, #8
 8013572:	af00      	add	r7, sp, #0
 8013574:	4603      	mov	r3, r0
 8013576:	71fb      	strb	r3, [r7, #7]
 8013578:	460b      	mov	r3, r1
 801357a:	71bb      	strb	r3, [r7, #6]
 801357c:	4613      	mov	r3, r2
 801357e:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteData(Addr, Reg, Value);
 8013580:	797a      	ldrb	r2, [r7, #5]
 8013582:	79b9      	ldrb	r1, [r7, #6]
 8013584:	79fb      	ldrb	r3, [r7, #7]
 8013586:	4618      	mov	r0, r3
 8013588:	f7ff fd9e 	bl	80130c8 <I2Cx_WriteData>
}
 801358c:	bf00      	nop
 801358e:	3708      	adds	r7, #8
 8013590:	46bd      	mov	sp, r7
 8013592:	bd80      	pop	{r7, pc}

08013594 <IOE_Read>:
  * @param  Addr: I2C Address
  * @param  Reg: Reg Address
  * @retval The read data
  */
uint8_t IOE_Read(uint8_t Addr, uint8_t Reg)
{
 8013594:	b580      	push	{r7, lr}
 8013596:	b082      	sub	sp, #8
 8013598:	af00      	add	r7, sp, #0
 801359a:	4603      	mov	r3, r0
 801359c:	460a      	mov	r2, r1
 801359e:	71fb      	strb	r3, [r7, #7]
 80135a0:	4613      	mov	r3, r2
 80135a2:	71bb      	strb	r3, [r7, #6]
  return I2Cx_ReadData(Addr, Reg);
 80135a4:	79ba      	ldrb	r2, [r7, #6]
 80135a6:	79fb      	ldrb	r3, [r7, #7]
 80135a8:	4611      	mov	r1, r2
 80135aa:	4618      	mov	r0, r3
 80135ac:	f7ff fdb6 	bl	801311c <I2Cx_ReadData>
 80135b0:	4603      	mov	r3, r0
}
 80135b2:	4618      	mov	r0, r3
 80135b4:	3708      	adds	r7, #8
 80135b6:	46bd      	mov	sp, r7
 80135b8:	bd80      	pop	{r7, pc}

080135ba <IOE_ReadMultiple>:
  * @param  pBuffer: pointer to data buffer
  * @param  Length: length of the data
  * @retval 0 if no problems to read multiple data
  */
uint16_t IOE_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *pBuffer, uint16_t Length)
{
 80135ba:	b580      	push	{r7, lr}
 80135bc:	b082      	sub	sp, #8
 80135be:	af00      	add	r7, sp, #0
 80135c0:	603a      	str	r2, [r7, #0]
 80135c2:	461a      	mov	r2, r3
 80135c4:	4603      	mov	r3, r0
 80135c6:	71fb      	strb	r3, [r7, #7]
 80135c8:	460b      	mov	r3, r1
 80135ca:	71bb      	strb	r3, [r7, #6]
 80135cc:	4613      	mov	r3, r2
 80135ce:	80bb      	strh	r3, [r7, #4]
  return I2Cx_ReadBuffer(Addr, Reg, pBuffer, Length);
 80135d0:	88bb      	ldrh	r3, [r7, #4]
 80135d2:	79b9      	ldrb	r1, [r7, #6]
 80135d4:	79f8      	ldrb	r0, [r7, #7]
 80135d6:	683a      	ldr	r2, [r7, #0]
 80135d8:	f7ff fdcc 	bl	8013174 <I2Cx_ReadBuffer>
 80135dc:	4603      	mov	r3, r0
}
 80135de:	4618      	mov	r0, r3
 80135e0:	3708      	adds	r7, #8
 80135e2:	46bd      	mov	sp, r7
 80135e4:	bd80      	pop	{r7, pc}

080135e6 <IOE_Delay>:
/**
  * @brief  IOE Delay.
  * @param  Delay in ms
  */
void IOE_Delay(uint32_t Delay)
{
 80135e6:	b580      	push	{r7, lr}
 80135e8:	b082      	sub	sp, #8
 80135ea:	af00      	add	r7, sp, #0
 80135ec:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 80135ee:	6878      	ldr	r0, [r7, #4]
 80135f0:	f001 f9fc 	bl	80149ec <HAL_Delay>
}
 80135f4:	bf00      	nop
 80135f6:	3708      	adds	r7, #8
 80135f8:	46bd      	mov	sp, r7
 80135fa:	bd80      	pop	{r7, pc}

080135fc <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{
 80135fc:	b580      	push	{r7, lr}
 80135fe:	af00      	add	r7, sp, #0
  /* PIN EXTC is not connected to VDD and then LCD_READ_ID4 is not accessible. */
  /* In this case, ReadID function is bypassed.*/
  /*if(ili9341_drv.ReadID() == ILI9341_ID)*/

  /* LTDC Configuration ----------------------------------------------------*/
  LtdcHandler.Instance = LTDC;
 8013600:	4b2d      	ldr	r3, [pc, #180]	@ (80136b8 <BSP_LCD_Init+0xbc>)
 8013602:	4a2e      	ldr	r2, [pc, #184]	@ (80136bc <BSP_LCD_Init+0xc0>)
 8013604:	601a      	str	r2, [r3, #0]
        ActiveH=320 (323-2-2+1)
        VFP=4 (327-320-2-2+1)
    */

  /* Configure horizontal synchronization width */
  LtdcHandler.Init.HorizontalSync = ILI9341_HSYNC;
 8013606:	4b2c      	ldr	r3, [pc, #176]	@ (80136b8 <BSP_LCD_Init+0xbc>)
 8013608:	2209      	movs	r2, #9
 801360a:	615a      	str	r2, [r3, #20]
  /* Configure vertical synchronization height */
  LtdcHandler.Init.VerticalSync = ILI9341_VSYNC;
 801360c:	4b2a      	ldr	r3, [pc, #168]	@ (80136b8 <BSP_LCD_Init+0xbc>)
 801360e:	2201      	movs	r2, #1
 8013610:	619a      	str	r2, [r3, #24]
  /* Configure accumulated horizontal back porch */
  LtdcHandler.Init.AccumulatedHBP = ILI9341_HBP;
 8013612:	4b29      	ldr	r3, [pc, #164]	@ (80136b8 <BSP_LCD_Init+0xbc>)
 8013614:	221d      	movs	r2, #29
 8013616:	61da      	str	r2, [r3, #28]
  /* Configure accumulated vertical back porch */
  LtdcHandler.Init.AccumulatedVBP = ILI9341_VBP;
 8013618:	4b27      	ldr	r3, [pc, #156]	@ (80136b8 <BSP_LCD_Init+0xbc>)
 801361a:	2203      	movs	r2, #3
 801361c:	621a      	str	r2, [r3, #32]
  /* Configure accumulated active width */
  LtdcHandler.Init.AccumulatedActiveW = 269;
 801361e:	4b26      	ldr	r3, [pc, #152]	@ (80136b8 <BSP_LCD_Init+0xbc>)
 8013620:	f240 120d 	movw	r2, #269	@ 0x10d
 8013624:	625a      	str	r2, [r3, #36]	@ 0x24
  /* Configure accumulated active height */
  LtdcHandler.Init.AccumulatedActiveH = 323;
 8013626:	4b24      	ldr	r3, [pc, #144]	@ (80136b8 <BSP_LCD_Init+0xbc>)
 8013628:	f240 1243 	movw	r2, #323	@ 0x143
 801362c:	629a      	str	r2, [r3, #40]	@ 0x28
  /* Configure total width */
  LtdcHandler.Init.TotalWidth = 279;
 801362e:	4b22      	ldr	r3, [pc, #136]	@ (80136b8 <BSP_LCD_Init+0xbc>)
 8013630:	f240 1217 	movw	r2, #279	@ 0x117
 8013634:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Configure total height */
  LtdcHandler.Init.TotalHeigh = 327;
 8013636:	4b20      	ldr	r3, [pc, #128]	@ (80136b8 <BSP_LCD_Init+0xbc>)
 8013638:	f240 1247 	movw	r2, #327	@ 0x147
 801363c:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Configure R,G,B component values for LCD background color */
  LtdcHandler.Init.Backcolor.Red = 0;
 801363e:	4b1e      	ldr	r3, [pc, #120]	@ (80136b8 <BSP_LCD_Init+0xbc>)
 8013640:	2200      	movs	r2, #0
 8013642:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
  LtdcHandler.Init.Backcolor.Blue = 0;
 8013646:	4b1c      	ldr	r3, [pc, #112]	@ (80136b8 <BSP_LCD_Init+0xbc>)
 8013648:	2200      	movs	r2, #0
 801364a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  LtdcHandler.Init.Backcolor.Green = 0;
 801364e:	4b1a      	ldr	r3, [pc, #104]	@ (80136b8 <BSP_LCD_Init+0xbc>)
 8013650:	2200      	movs	r2, #0
 8013652:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  /* LCD clock configuration */
  /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
  /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
  /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/4 = 48 Mhz */
  /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_8 = 48/4 = 6Mhz */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8013656:	4b1a      	ldr	r3, [pc, #104]	@ (80136c0 <BSP_LCD_Init+0xc4>)
 8013658:	2208      	movs	r2, #8
 801365a:	601a      	str	r2, [r3, #0]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 801365c:	4b18      	ldr	r3, [pc, #96]	@ (80136c0 <BSP_LCD_Init+0xc4>)
 801365e:	22c0      	movs	r2, #192	@ 0xc0
 8013660:	611a      	str	r2, [r3, #16]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 8013662:	4b17      	ldr	r3, [pc, #92]	@ (80136c0 <BSP_LCD_Init+0xc4>)
 8013664:	2204      	movs	r2, #4
 8013666:	619a      	str	r2, [r3, #24]
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8013668:	4b15      	ldr	r3, [pc, #84]	@ (80136c0 <BSP_LCD_Init+0xc4>)
 801366a:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 801366e:	625a      	str	r2, [r3, #36]	@ 0x24
  HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 8013670:	4813      	ldr	r0, [pc, #76]	@ (80136c0 <BSP_LCD_Init+0xc4>)
 8013672:	f006 fa1b 	bl	8019aac <HAL_RCCEx_PeriphCLKConfig>

  /* Polarity */
  LtdcHandler.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8013676:	4b10      	ldr	r3, [pc, #64]	@ (80136b8 <BSP_LCD_Init+0xbc>)
 8013678:	2200      	movs	r2, #0
 801367a:	605a      	str	r2, [r3, #4]
  LtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 801367c:	4b0e      	ldr	r3, [pc, #56]	@ (80136b8 <BSP_LCD_Init+0xbc>)
 801367e:	2200      	movs	r2, #0
 8013680:	609a      	str	r2, [r3, #8]
  LtdcHandler.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8013682:	4b0d      	ldr	r3, [pc, #52]	@ (80136b8 <BSP_LCD_Init+0xbc>)
 8013684:	2200      	movs	r2, #0
 8013686:	60da      	str	r2, [r3, #12]
  LtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8013688:	4b0b      	ldr	r3, [pc, #44]	@ (80136b8 <BSP_LCD_Init+0xbc>)
 801368a:	2200      	movs	r2, #0
 801368c:	611a      	str	r2, [r3, #16]

  BSP_LCD_MspInit();
 801368e:	f000 fcc7 	bl	8014020 <BSP_LCD_MspInit>
  HAL_LTDC_Init(&LtdcHandler);
 8013692:	4809      	ldr	r0, [pc, #36]	@ (80136b8 <BSP_LCD_Init+0xbc>)
 8013694:	f005 fa05 	bl	8018aa2 <HAL_LTDC_Init>

  /* Select the device */
  LcdDrv = &ili9341_drv;
 8013698:	4b0a      	ldr	r3, [pc, #40]	@ (80136c4 <BSP_LCD_Init+0xc8>)
 801369a:	4a0b      	ldr	r2, [pc, #44]	@ (80136c8 <BSP_LCD_Init+0xcc>)
 801369c:	601a      	str	r2, [r3, #0]

  /* LCD Init */
  LcdDrv->Init();
 801369e:	4b09      	ldr	r3, [pc, #36]	@ (80136c4 <BSP_LCD_Init+0xc8>)
 80136a0:	681b      	ldr	r3, [r3, #0]
 80136a2:	681b      	ldr	r3, [r3, #0]
 80136a4:	4798      	blx	r3

  /* Initialize the SDRAM */
  BSP_SDRAM_Init();
 80136a6:	f000 fea9 	bl	80143fc <BSP_SDRAM_Init>

  /* Initialize the font */
  BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 80136aa:	4808      	ldr	r0, [pc, #32]	@ (80136cc <BSP_LCD_Init+0xd0>)
 80136ac:	f000 f8ce 	bl	801384c <BSP_LCD_SetFont>

  return LCD_OK;
 80136b0:	2300      	movs	r3, #0
}
 80136b2:	4618      	mov	r0, r3
 80136b4:	bd80      	pop	{r7, pc}
 80136b6:	bf00      	nop
 80136b8:	20001af0 	.word	0x20001af0
 80136bc:	40016800 	.word	0x40016800
 80136c0:	20001bd8 	.word	0x20001bd8
 80136c4:	20001c24 	.word	0x20001c24
 80136c8:	20000008 	.word	0x20000008
 80136cc:	20000070 	.word	0x20000070

080136d0 <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.
  * @retval The used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 80136d0:	b580      	push	{r7, lr}
 80136d2:	af00      	add	r7, sp, #0
  return LcdDrv->GetLcdPixelWidth();
 80136d4:	4b03      	ldr	r3, [pc, #12]	@ (80136e4 <BSP_LCD_GetXSize+0x14>)
 80136d6:	681b      	ldr	r3, [r3, #0]
 80136d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80136da:	4798      	blx	r3
 80136dc:	4603      	mov	r3, r0
}
 80136de:	4618      	mov	r0, r3
 80136e0:	bd80      	pop	{r7, pc}
 80136e2:	bf00      	nop
 80136e4:	20001c24 	.word	0x20001c24

080136e8 <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.
  * @retval The used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 80136e8:	b580      	push	{r7, lr}
 80136ea:	af00      	add	r7, sp, #0
  return LcdDrv->GetLcdPixelHeight();
 80136ec:	4b03      	ldr	r3, [pc, #12]	@ (80136fc <BSP_LCD_GetYSize+0x14>)
 80136ee:	681b      	ldr	r3, [r3, #0]
 80136f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80136f2:	4798      	blx	r3
 80136f4:	4603      	mov	r3, r0
}
 80136f6:	4618      	mov	r0, r3
 80136f8:	bd80      	pop	{r7, pc}
 80136fa:	bf00      	nop
 80136fc:	20001c24 	.word	0x20001c24

08013700 <BSP_LCD_LayerDefaultInit>:
  * @brief  Initializes the LCD layers.
  * @param  LayerIndex: the layer foreground or background.
  * @param  FB_Address: the layer frame buffer.
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{
 8013700:	b580      	push	{r7, lr}
 8013702:	b090      	sub	sp, #64	@ 0x40
 8013704:	af00      	add	r7, sp, #0
 8013706:	4603      	mov	r3, r0
 8013708:	6039      	str	r1, [r7, #0]
 801370a:	80fb      	strh	r3, [r7, #6]
  LCD_LayerCfgTypeDef   Layercfg;

  /* Layer Init */
  Layercfg.WindowX0 = 0;
 801370c:	2300      	movs	r3, #0
 801370e:	60fb      	str	r3, [r7, #12]
  Layercfg.WindowX1 = BSP_LCD_GetXSize();
 8013710:	f7ff ffde 	bl	80136d0 <BSP_LCD_GetXSize>
 8013714:	4603      	mov	r3, r0
 8013716:	613b      	str	r3, [r7, #16]
  Layercfg.WindowY0 = 0;
 8013718:	2300      	movs	r3, #0
 801371a:	617b      	str	r3, [r7, #20]
  Layercfg.WindowY1 = BSP_LCD_GetYSize();
 801371c:	f7ff ffe4 	bl	80136e8 <BSP_LCD_GetYSize>
 8013720:	4603      	mov	r3, r0
 8013722:	61bb      	str	r3, [r7, #24]
  Layercfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8013724:	2300      	movs	r3, #0
 8013726:	61fb      	str	r3, [r7, #28]
  Layercfg.FBStartAdress = FB_Address;
 8013728:	683b      	ldr	r3, [r7, #0]
 801372a:	633b      	str	r3, [r7, #48]	@ 0x30
  Layercfg.Alpha = 255;
 801372c:	23ff      	movs	r3, #255	@ 0xff
 801372e:	623b      	str	r3, [r7, #32]
  Layercfg.Alpha0 = 0;
 8013730:	2300      	movs	r3, #0
 8013732:	627b      	str	r3, [r7, #36]	@ 0x24
  Layercfg.Backcolor.Blue = 0;
 8013734:	2300      	movs	r3, #0
 8013736:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
  Layercfg.Backcolor.Green = 0;
 801373a:	2300      	movs	r3, #0
 801373c:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
  Layercfg.Backcolor.Red = 0;
 8013740:	2300      	movs	r3, #0
 8013742:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  Layercfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8013746:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 801374a:	62bb      	str	r3, [r7, #40]	@ 0x28
  Layercfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 801374c:	2307      	movs	r3, #7
 801374e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  Layercfg.ImageWidth = BSP_LCD_GetXSize();
 8013750:	f7ff ffbe 	bl	80136d0 <BSP_LCD_GetXSize>
 8013754:	4603      	mov	r3, r0
 8013756:	637b      	str	r3, [r7, #52]	@ 0x34
  Layercfg.ImageHeight = BSP_LCD_GetYSize();
 8013758:	f7ff ffc6 	bl	80136e8 <BSP_LCD_GetYSize>
 801375c:	4603      	mov	r3, r0
 801375e:	63bb      	str	r3, [r7, #56]	@ 0x38

  HAL_LTDC_ConfigLayer(&LtdcHandler, &Layercfg, LayerIndex);
 8013760:	88fa      	ldrh	r2, [r7, #6]
 8013762:	f107 030c 	add.w	r3, r7, #12
 8013766:	4619      	mov	r1, r3
 8013768:	4814      	ldr	r0, [pc, #80]	@ (80137bc <BSP_LCD_LayerDefaultInit+0xbc>)
 801376a:	f005 faf9 	bl	8018d60 <HAL_LTDC_ConfigLayer>

  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 801376e:	88fa      	ldrh	r2, [r7, #6]
 8013770:	4913      	ldr	r1, [pc, #76]	@ (80137c0 <BSP_LCD_LayerDefaultInit+0xc0>)
 8013772:	4613      	mov	r3, r2
 8013774:	005b      	lsls	r3, r3, #1
 8013776:	4413      	add	r3, r2
 8013778:	009b      	lsls	r3, r3, #2
 801377a:	440b      	add	r3, r1
 801377c:	3304      	adds	r3, #4
 801377e:	f04f 32ff 	mov.w	r2, #4294967295
 8013782:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 8013784:	88fa      	ldrh	r2, [r7, #6]
 8013786:	490e      	ldr	r1, [pc, #56]	@ (80137c0 <BSP_LCD_LayerDefaultInit+0xc0>)
 8013788:	4613      	mov	r3, r2
 801378a:	005b      	lsls	r3, r3, #1
 801378c:	4413      	add	r3, r2
 801378e:	009b      	lsls	r3, r3, #2
 8013790:	440b      	add	r3, r1
 8013792:	3308      	adds	r3, #8
 8013794:	4a0b      	ldr	r2, [pc, #44]	@ (80137c4 <BSP_LCD_LayerDefaultInit+0xc4>)
 8013796:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK;
 8013798:	88fa      	ldrh	r2, [r7, #6]
 801379a:	4909      	ldr	r1, [pc, #36]	@ (80137c0 <BSP_LCD_LayerDefaultInit+0xc0>)
 801379c:	4613      	mov	r3, r2
 801379e:	005b      	lsls	r3, r3, #1
 80137a0:	4413      	add	r3, r2
 80137a2:	009b      	lsls	r3, r3, #2
 80137a4:	440b      	add	r3, r1
 80137a6:	f04f 427f 	mov.w	r2, #4278190080	@ 0xff000000
 80137aa:	601a      	str	r2, [r3, #0]

  /* Dithering activation */
  HAL_LTDC_EnableDither(&LtdcHandler);
 80137ac:	4803      	ldr	r0, [pc, #12]	@ (80137bc <BSP_LCD_LayerDefaultInit+0xbc>)
 80137ae:	f005 fb15 	bl	8018ddc <HAL_LTDC_EnableDither>
}
 80137b2:	bf00      	nop
 80137b4:	3740      	adds	r7, #64	@ 0x40
 80137b6:	46bd      	mov	sp, r7
 80137b8:	bd80      	pop	{r7, pc}
 80137ba:	bf00      	nop
 80137bc:	20001af0 	.word	0x20001af0
 80137c0:	20001c0c 	.word	0x20001c0c
 80137c4:	20000070 	.word	0x20000070

080137c8 <BSP_LCD_SelectLayer>:
/**
  * @brief  Selects the LCD Layer.
  * @param  LayerIndex: the Layer foreground or background.
  */
void BSP_LCD_SelectLayer(uint32_t LayerIndex)
{
 80137c8:	b480      	push	{r7}
 80137ca:	b083      	sub	sp, #12
 80137cc:	af00      	add	r7, sp, #0
 80137ce:	6078      	str	r0, [r7, #4]
  ActiveLayer = LayerIndex;
 80137d0:	4a04      	ldr	r2, [pc, #16]	@ (80137e4 <BSP_LCD_SelectLayer+0x1c>)
 80137d2:	687b      	ldr	r3, [r7, #4]
 80137d4:	6013      	str	r3, [r2, #0]
}
 80137d6:	bf00      	nop
 80137d8:	370c      	adds	r7, #12
 80137da:	46bd      	mov	sp, r7
 80137dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80137e0:	4770      	bx	lr
 80137e2:	bf00      	nop
 80137e4:	20001c08 	.word	0x20001c08

080137e8 <BSP_LCD_SetTextColor>:
/**
  * @brief  Sets the Text color.
  * @param  Color: the Text color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
 80137e8:	b480      	push	{r7}
 80137ea:	b083      	sub	sp, #12
 80137ec:	af00      	add	r7, sp, #0
 80137ee:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].TextColor = Color;
 80137f0:	4b07      	ldr	r3, [pc, #28]	@ (8013810 <BSP_LCD_SetTextColor+0x28>)
 80137f2:	681a      	ldr	r2, [r3, #0]
 80137f4:	4907      	ldr	r1, [pc, #28]	@ (8013814 <BSP_LCD_SetTextColor+0x2c>)
 80137f6:	4613      	mov	r3, r2
 80137f8:	005b      	lsls	r3, r3, #1
 80137fa:	4413      	add	r3, r2
 80137fc:	009b      	lsls	r3, r3, #2
 80137fe:	440b      	add	r3, r1
 8013800:	687a      	ldr	r2, [r7, #4]
 8013802:	601a      	str	r2, [r3, #0]
}
 8013804:	bf00      	nop
 8013806:	370c      	adds	r7, #12
 8013808:	46bd      	mov	sp, r7
 801380a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801380e:	4770      	bx	lr
 8013810:	20001c08 	.word	0x20001c08
 8013814:	20001c0c 	.word	0x20001c0c

08013818 <BSP_LCD_SetBackColor>:
/**
  * @brief  Sets the Background color.
  * @param  Color: the layer Background color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetBackColor(uint32_t Color)
{
 8013818:	b480      	push	{r7}
 801381a:	b083      	sub	sp, #12
 801381c:	af00      	add	r7, sp, #0
 801381e:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].BackColor = Color;
 8013820:	4b08      	ldr	r3, [pc, #32]	@ (8013844 <BSP_LCD_SetBackColor+0x2c>)
 8013822:	681a      	ldr	r2, [r3, #0]
 8013824:	4908      	ldr	r1, [pc, #32]	@ (8013848 <BSP_LCD_SetBackColor+0x30>)
 8013826:	4613      	mov	r3, r2
 8013828:	005b      	lsls	r3, r3, #1
 801382a:	4413      	add	r3, r2
 801382c:	009b      	lsls	r3, r3, #2
 801382e:	440b      	add	r3, r1
 8013830:	3304      	adds	r3, #4
 8013832:	687a      	ldr	r2, [r7, #4]
 8013834:	601a      	str	r2, [r3, #0]
}
 8013836:	bf00      	nop
 8013838:	370c      	adds	r7, #12
 801383a:	46bd      	mov	sp, r7
 801383c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013840:	4770      	bx	lr
 8013842:	bf00      	nop
 8013844:	20001c08 	.word	0x20001c08
 8013848:	20001c0c 	.word	0x20001c0c

0801384c <BSP_LCD_SetFont>:
/**
  * @brief  Sets the Text Font.
  * @param  pFonts: the layer font to be used
  */
void BSP_LCD_SetFont(sFONT *pFonts)
{
 801384c:	b480      	push	{r7}
 801384e:	b083      	sub	sp, #12
 8013850:	af00      	add	r7, sp, #0
 8013852:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = pFonts;
 8013854:	4b08      	ldr	r3, [pc, #32]	@ (8013878 <BSP_LCD_SetFont+0x2c>)
 8013856:	681a      	ldr	r2, [r3, #0]
 8013858:	4908      	ldr	r1, [pc, #32]	@ (801387c <BSP_LCD_SetFont+0x30>)
 801385a:	4613      	mov	r3, r2
 801385c:	005b      	lsls	r3, r3, #1
 801385e:	4413      	add	r3, r2
 8013860:	009b      	lsls	r3, r3, #2
 8013862:	440b      	add	r3, r1
 8013864:	3308      	adds	r3, #8
 8013866:	687a      	ldr	r2, [r7, #4]
 8013868:	601a      	str	r2, [r3, #0]
}
 801386a:	bf00      	nop
 801386c:	370c      	adds	r7, #12
 801386e:	46bd      	mov	sp, r7
 8013870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013874:	4770      	bx	lr
 8013876:	bf00      	nop
 8013878:	20001c08 	.word	0x20001c08
 801387c:	20001c0c 	.word	0x20001c0c

08013880 <BSP_LCD_Clear>:
/**
  * @brief  Clears the hole LCD.
  * @param  Color: the color of the background
  */
void BSP_LCD_Clear(uint32_t Color)
{
 8013880:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013882:	b085      	sub	sp, #20
 8013884:	af02      	add	r7, sp, #8
 8013886:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */
  FillBuffer(ActiveLayer, (uint32_t *)(LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(),
 8013888:	4b0f      	ldr	r3, [pc, #60]	@ (80138c8 <BSP_LCD_Clear+0x48>)
 801388a:	681c      	ldr	r4, [r3, #0]
 801388c:	4b0e      	ldr	r3, [pc, #56]	@ (80138c8 <BSP_LCD_Clear+0x48>)
 801388e:	681b      	ldr	r3, [r3, #0]
 8013890:	4a0e      	ldr	r2, [pc, #56]	@ (80138cc <BSP_LCD_Clear+0x4c>)
 8013892:	2134      	movs	r1, #52	@ 0x34
 8013894:	fb01 f303 	mul.w	r3, r1, r3
 8013898:	4413      	add	r3, r2
 801389a:	335c      	adds	r3, #92	@ 0x5c
 801389c:	681b      	ldr	r3, [r3, #0]
 801389e:	461e      	mov	r6, r3
 80138a0:	f7ff ff16 	bl	80136d0 <BSP_LCD_GetXSize>
 80138a4:	4605      	mov	r5, r0
 80138a6:	f7ff ff1f 	bl	80136e8 <BSP_LCD_GetYSize>
 80138aa:	4602      	mov	r2, r0
 80138ac:	687b      	ldr	r3, [r7, #4]
 80138ae:	9301      	str	r3, [sp, #4]
 80138b0:	2300      	movs	r3, #0
 80138b2:	9300      	str	r3, [sp, #0]
 80138b4:	4613      	mov	r3, r2
 80138b6:	462a      	mov	r2, r5
 80138b8:	4631      	mov	r1, r6
 80138ba:	4620      	mov	r0, r4
 80138bc:	f000 fd66 	bl	801438c <FillBuffer>
             BSP_LCD_GetYSize(), 0, Color);
}
 80138c0:	bf00      	nop
 80138c2:	370c      	adds	r7, #12
 80138c4:	46bd      	mov	sp, r7
 80138c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80138c8:	20001c08 	.word	0x20001c08
 80138cc:	20001af0 	.word	0x20001af0

080138d0 <BSP_LCD_DisplayChar>:
  * @param  Xpos: start column address
  * @param  Ypos: the Line where to display the character shape
  * @param  Ascii: character ascii code, must be between 0x20 and 0x7E
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 80138d0:	b590      	push	{r4, r7, lr}
 80138d2:	b083      	sub	sp, #12
 80138d4:	af00      	add	r7, sp, #0
 80138d6:	4603      	mov	r3, r0
 80138d8:	80fb      	strh	r3, [r7, #6]
 80138da:	460b      	mov	r3, r1
 80138dc:	80bb      	strh	r3, [r7, #4]
 80138de:	4613      	mov	r3, r2
 80138e0:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii - ' ') *\
 80138e2:	4b1b      	ldr	r3, [pc, #108]	@ (8013950 <BSP_LCD_DisplayChar+0x80>)
 80138e4:	681a      	ldr	r2, [r3, #0]
 80138e6:	491b      	ldr	r1, [pc, #108]	@ (8013954 <BSP_LCD_DisplayChar+0x84>)
 80138e8:	4613      	mov	r3, r2
 80138ea:	005b      	lsls	r3, r3, #1
 80138ec:	4413      	add	r3, r2
 80138ee:	009b      	lsls	r3, r3, #2
 80138f0:	440b      	add	r3, r1
 80138f2:	3308      	adds	r3, #8
 80138f4:	681b      	ldr	r3, [r3, #0]
 80138f6:	6819      	ldr	r1, [r3, #0]
 80138f8:	78fb      	ldrb	r3, [r7, #3]
 80138fa:	f1a3 0020 	sub.w	r0, r3, #32
                                                           DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 80138fe:	4b14      	ldr	r3, [pc, #80]	@ (8013950 <BSP_LCD_DisplayChar+0x80>)
 8013900:	681a      	ldr	r2, [r3, #0]
 8013902:	4c14      	ldr	r4, [pc, #80]	@ (8013954 <BSP_LCD_DisplayChar+0x84>)
 8013904:	4613      	mov	r3, r2
 8013906:	005b      	lsls	r3, r3, #1
 8013908:	4413      	add	r3, r2
 801390a:	009b      	lsls	r3, r3, #2
 801390c:	4423      	add	r3, r4
 801390e:	3308      	adds	r3, #8
 8013910:	681b      	ldr	r3, [r3, #0]
 8013912:	88db      	ldrh	r3, [r3, #6]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii - ' ') *\
 8013914:	fb03 f000 	mul.w	r0, r3, r0
                                                           DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8013918:	4b0d      	ldr	r3, [pc, #52]	@ (8013950 <BSP_LCD_DisplayChar+0x80>)
 801391a:	681a      	ldr	r2, [r3, #0]
 801391c:	4c0d      	ldr	r4, [pc, #52]	@ (8013954 <BSP_LCD_DisplayChar+0x84>)
 801391e:	4613      	mov	r3, r2
 8013920:	005b      	lsls	r3, r3, #1
 8013922:	4413      	add	r3, r2
 8013924:	009b      	lsls	r3, r3, #2
 8013926:	4423      	add	r3, r4
 8013928:	3308      	adds	r3, #8
 801392a:	681b      	ldr	r3, [r3, #0]
 801392c:	889b      	ldrh	r3, [r3, #4]
 801392e:	3307      	adds	r3, #7
 8013930:	2b00      	cmp	r3, #0
 8013932:	da00      	bge.n	8013936 <BSP_LCD_DisplayChar+0x66>
 8013934:	3307      	adds	r3, #7
 8013936:	10db      	asrs	r3, r3, #3
 8013938:	fb00 f303 	mul.w	r3, r0, r3
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii - ' ') *\
 801393c:	18ca      	adds	r2, r1, r3
 801393e:	88b9      	ldrh	r1, [r7, #4]
 8013940:	88fb      	ldrh	r3, [r7, #6]
 8013942:	4618      	mov	r0, r3
 8013944:	f000 fc68 	bl	8014218 <DrawChar>
}
 8013948:	bf00      	nop
 801394a:	370c      	adds	r7, #12
 801394c:	46bd      	mov	sp, r7
 801394e:	bd90      	pop	{r4, r7, pc}
 8013950:	20001c08 	.word	0x20001c08
 8013954:	20001c0c 	.word	0x20001c0c

08013958 <BSP_LCD_DisplayStringAt>:
  *                @arg CENTER_MODE
  *                @arg RIGHT_MODE
  *                @arg LEFT_MODE
  */
void BSP_LCD_DisplayStringAt(uint16_t X, uint16_t Y, uint8_t *pText, Text_AlignModeTypdef mode)
{
 8013958:	b5b0      	push	{r4, r5, r7, lr}
 801395a:	b088      	sub	sp, #32
 801395c:	af00      	add	r7, sp, #0
 801395e:	60ba      	str	r2, [r7, #8]
 8013960:	461a      	mov	r2, r3
 8013962:	4603      	mov	r3, r0
 8013964:	81fb      	strh	r3, [r7, #14]
 8013966:	460b      	mov	r3, r1
 8013968:	81bb      	strh	r3, [r7, #12]
 801396a:	4613      	mov	r3, r2
 801396c:	71fb      	strb	r3, [r7, #7]
  uint16_t refcolumn = 1, i = 0;
 801396e:	2301      	movs	r3, #1
 8013970:	83fb      	strh	r3, [r7, #30]
 8013972:	2300      	movs	r3, #0
 8013974:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0;
 8013976:	2300      	movs	r3, #0
 8013978:	61bb      	str	r3, [r7, #24]
 801397a:	2300      	movs	r3, #0
 801397c:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = pText;
 801397e:	68bb      	ldr	r3, [r7, #8]
 8013980:	617b      	str	r3, [r7, #20]

  /* Get the text size */
  while (*ptr++) { size ++ ; }
 8013982:	e002      	b.n	801398a <BSP_LCD_DisplayStringAt+0x32>
 8013984:	69bb      	ldr	r3, [r7, #24]
 8013986:	3301      	adds	r3, #1
 8013988:	61bb      	str	r3, [r7, #24]
 801398a:	697b      	ldr	r3, [r7, #20]
 801398c:	1c5a      	adds	r2, r3, #1
 801398e:	617a      	str	r2, [r7, #20]
 8013990:	781b      	ldrb	r3, [r3, #0]
 8013992:	2b00      	cmp	r3, #0
 8013994:	d1f6      	bne.n	8013984 <BSP_LCD_DisplayStringAt+0x2c>

  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize() / DrawProp[ActiveLayer].pFont->Width);
 8013996:	f7ff fe9b 	bl	80136d0 <BSP_LCD_GetXSize>
 801399a:	4601      	mov	r1, r0
 801399c:	4b4b      	ldr	r3, [pc, #300]	@ (8013acc <BSP_LCD_DisplayStringAt+0x174>)
 801399e:	681a      	ldr	r2, [r3, #0]
 80139a0:	484b      	ldr	r0, [pc, #300]	@ (8013ad0 <BSP_LCD_DisplayStringAt+0x178>)
 80139a2:	4613      	mov	r3, r2
 80139a4:	005b      	lsls	r3, r3, #1
 80139a6:	4413      	add	r3, r2
 80139a8:	009b      	lsls	r3, r3, #2
 80139aa:	4403      	add	r3, r0
 80139ac:	3308      	adds	r3, #8
 80139ae:	681b      	ldr	r3, [r3, #0]
 80139b0:	889b      	ldrh	r3, [r3, #4]
 80139b2:	fbb1 f3f3 	udiv	r3, r1, r3
 80139b6:	613b      	str	r3, [r7, #16]

  switch (mode)
 80139b8:	79fb      	ldrb	r3, [r7, #7]
 80139ba:	2b03      	cmp	r3, #3
 80139bc:	d01c      	beq.n	80139f8 <BSP_LCD_DisplayStringAt+0xa0>
 80139be:	2b03      	cmp	r3, #3
 80139c0:	dc33      	bgt.n	8013a2a <BSP_LCD_DisplayStringAt+0xd2>
 80139c2:	2b01      	cmp	r3, #1
 80139c4:	d002      	beq.n	80139cc <BSP_LCD_DisplayStringAt+0x74>
 80139c6:	2b02      	cmp	r3, #2
 80139c8:	d019      	beq.n	80139fe <BSP_LCD_DisplayStringAt+0xa6>
 80139ca:	e02e      	b.n	8013a2a <BSP_LCD_DisplayStringAt+0xd2>
  {
    case CENTER_MODE:
    {
      refcolumn = X + ((xsize - size) * DrawProp[ActiveLayer].pFont->Width) / 2;
 80139cc:	693a      	ldr	r2, [r7, #16]
 80139ce:	69bb      	ldr	r3, [r7, #24]
 80139d0:	1ad1      	subs	r1, r2, r3
 80139d2:	4b3e      	ldr	r3, [pc, #248]	@ (8013acc <BSP_LCD_DisplayStringAt+0x174>)
 80139d4:	681a      	ldr	r2, [r3, #0]
 80139d6:	483e      	ldr	r0, [pc, #248]	@ (8013ad0 <BSP_LCD_DisplayStringAt+0x178>)
 80139d8:	4613      	mov	r3, r2
 80139da:	005b      	lsls	r3, r3, #1
 80139dc:	4413      	add	r3, r2
 80139de:	009b      	lsls	r3, r3, #2
 80139e0:	4403      	add	r3, r0
 80139e2:	3308      	adds	r3, #8
 80139e4:	681b      	ldr	r3, [r3, #0]
 80139e6:	889b      	ldrh	r3, [r3, #4]
 80139e8:	fb01 f303 	mul.w	r3, r1, r3
 80139ec:	085b      	lsrs	r3, r3, #1
 80139ee:	b29a      	uxth	r2, r3
 80139f0:	89fb      	ldrh	r3, [r7, #14]
 80139f2:	4413      	add	r3, r2
 80139f4:	83fb      	strh	r3, [r7, #30]
      break;
 80139f6:	e01b      	b.n	8013a30 <BSP_LCD_DisplayStringAt+0xd8>
    }
    case LEFT_MODE:
    {
      refcolumn = X;
 80139f8:	89fb      	ldrh	r3, [r7, #14]
 80139fa:	83fb      	strh	r3, [r7, #30]
      break;
 80139fc:	e018      	b.n	8013a30 <BSP_LCD_DisplayStringAt+0xd8>
    }
    case RIGHT_MODE:
    {
      refcolumn = X + ((xsize - size) * DrawProp[ActiveLayer].pFont->Width);
 80139fe:	693a      	ldr	r2, [r7, #16]
 8013a00:	69bb      	ldr	r3, [r7, #24]
 8013a02:	1ad3      	subs	r3, r2, r3
 8013a04:	b299      	uxth	r1, r3
 8013a06:	4b31      	ldr	r3, [pc, #196]	@ (8013acc <BSP_LCD_DisplayStringAt+0x174>)
 8013a08:	681a      	ldr	r2, [r3, #0]
 8013a0a:	4831      	ldr	r0, [pc, #196]	@ (8013ad0 <BSP_LCD_DisplayStringAt+0x178>)
 8013a0c:	4613      	mov	r3, r2
 8013a0e:	005b      	lsls	r3, r3, #1
 8013a10:	4413      	add	r3, r2
 8013a12:	009b      	lsls	r3, r3, #2
 8013a14:	4403      	add	r3, r0
 8013a16:	3308      	adds	r3, #8
 8013a18:	681b      	ldr	r3, [r3, #0]
 8013a1a:	889b      	ldrh	r3, [r3, #4]
 8013a1c:	fb11 f303 	smulbb	r3, r1, r3
 8013a20:	b29a      	uxth	r2, r3
 8013a22:	89fb      	ldrh	r3, [r7, #14]
 8013a24:	4413      	add	r3, r2
 8013a26:	83fb      	strh	r3, [r7, #30]
      break;
 8013a28:	e002      	b.n	8013a30 <BSP_LCD_DisplayStringAt+0xd8>
    }
    default:
    {
      refcolumn = X;
 8013a2a:	89fb      	ldrh	r3, [r7, #14]
 8013a2c:	83fb      	strh	r3, [r7, #30]
      break;
 8013a2e:	bf00      	nop
    }
  }

  /* Send the string character by character on LCD */
  while ((*pText != 0) & (((BSP_LCD_GetXSize() - (i * DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >=
 8013a30:	e01a      	b.n	8013a68 <BSP_LCD_DisplayStringAt+0x110>
                          DrawProp[ActiveLayer].pFont->Width))
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(refcolumn, Y, *pText);
 8013a32:	68bb      	ldr	r3, [r7, #8]
 8013a34:	781a      	ldrb	r2, [r3, #0]
 8013a36:	89b9      	ldrh	r1, [r7, #12]
 8013a38:	8bfb      	ldrh	r3, [r7, #30]
 8013a3a:	4618      	mov	r0, r3
 8013a3c:	f7ff ff48 	bl	80138d0 <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    refcolumn += DrawProp[ActiveLayer].pFont->Width;
 8013a40:	4b22      	ldr	r3, [pc, #136]	@ (8013acc <BSP_LCD_DisplayStringAt+0x174>)
 8013a42:	681a      	ldr	r2, [r3, #0]
 8013a44:	4922      	ldr	r1, [pc, #136]	@ (8013ad0 <BSP_LCD_DisplayStringAt+0x178>)
 8013a46:	4613      	mov	r3, r2
 8013a48:	005b      	lsls	r3, r3, #1
 8013a4a:	4413      	add	r3, r2
 8013a4c:	009b      	lsls	r3, r3, #2
 8013a4e:	440b      	add	r3, r1
 8013a50:	3308      	adds	r3, #8
 8013a52:	681b      	ldr	r3, [r3, #0]
 8013a54:	889a      	ldrh	r2, [r3, #4]
 8013a56:	8bfb      	ldrh	r3, [r7, #30]
 8013a58:	4413      	add	r3, r2
 8013a5a:	83fb      	strh	r3, [r7, #30]
    /* Point on the next character */
    pText++;
 8013a5c:	68bb      	ldr	r3, [r7, #8]
 8013a5e:	3301      	adds	r3, #1
 8013a60:	60bb      	str	r3, [r7, #8]
    i++;
 8013a62:	8bbb      	ldrh	r3, [r7, #28]
 8013a64:	3301      	adds	r3, #1
 8013a66:	83bb      	strh	r3, [r7, #28]
  while ((*pText != 0) & (((BSP_LCD_GetXSize() - (i * DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >=
 8013a68:	68bb      	ldr	r3, [r7, #8]
 8013a6a:	781b      	ldrb	r3, [r3, #0]
 8013a6c:	2b00      	cmp	r3, #0
 8013a6e:	bf14      	ite	ne
 8013a70:	2301      	movne	r3, #1
 8013a72:	2300      	moveq	r3, #0
 8013a74:	b2dc      	uxtb	r4, r3
 8013a76:	f7ff fe2b 	bl	80136d0 <BSP_LCD_GetXSize>
 8013a7a:	8bb9      	ldrh	r1, [r7, #28]
 8013a7c:	4b13      	ldr	r3, [pc, #76]	@ (8013acc <BSP_LCD_DisplayStringAt+0x174>)
 8013a7e:	681a      	ldr	r2, [r3, #0]
 8013a80:	4d13      	ldr	r5, [pc, #76]	@ (8013ad0 <BSP_LCD_DisplayStringAt+0x178>)
 8013a82:	4613      	mov	r3, r2
 8013a84:	005b      	lsls	r3, r3, #1
 8013a86:	4413      	add	r3, r2
 8013a88:	009b      	lsls	r3, r3, #2
 8013a8a:	442b      	add	r3, r5
 8013a8c:	3308      	adds	r3, #8
 8013a8e:	681b      	ldr	r3, [r3, #0]
 8013a90:	889b      	ldrh	r3, [r3, #4]
 8013a92:	fb01 f303 	mul.w	r3, r1, r3
 8013a96:	1ac3      	subs	r3, r0, r3
 8013a98:	b299      	uxth	r1, r3
                          DrawProp[ActiveLayer].pFont->Width))
 8013a9a:	4b0c      	ldr	r3, [pc, #48]	@ (8013acc <BSP_LCD_DisplayStringAt+0x174>)
 8013a9c:	681a      	ldr	r2, [r3, #0]
 8013a9e:	480c      	ldr	r0, [pc, #48]	@ (8013ad0 <BSP_LCD_DisplayStringAt+0x178>)
 8013aa0:	4613      	mov	r3, r2
 8013aa2:	005b      	lsls	r3, r3, #1
 8013aa4:	4413      	add	r3, r2
 8013aa6:	009b      	lsls	r3, r3, #2
 8013aa8:	4403      	add	r3, r0
 8013aaa:	3308      	adds	r3, #8
 8013aac:	681b      	ldr	r3, [r3, #0]
 8013aae:	889b      	ldrh	r3, [r3, #4]
  while ((*pText != 0) & (((BSP_LCD_GetXSize() - (i * DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >=
 8013ab0:	4299      	cmp	r1, r3
 8013ab2:	bf2c      	ite	cs
 8013ab4:	2301      	movcs	r3, #1
 8013ab6:	2300      	movcc	r3, #0
 8013ab8:	b2db      	uxtb	r3, r3
 8013aba:	4023      	ands	r3, r4
 8013abc:	b2db      	uxtb	r3, r3
 8013abe:	2b00      	cmp	r3, #0
 8013ac0:	d1b7      	bne.n	8013a32 <BSP_LCD_DisplayStringAt+0xda>
  }
}
 8013ac2:	bf00      	nop
 8013ac4:	bf00      	nop
 8013ac6:	3720      	adds	r7, #32
 8013ac8:	46bd      	mov	sp, r7
 8013aca:	bdb0      	pop	{r4, r5, r7, pc}
 8013acc:	20001c08 	.word	0x20001c08
 8013ad0:	20001c0c 	.word	0x20001c0c

08013ad4 <BSP_LCD_DrawHLine>:
  * @param  Xpos: the X position
  * @param  Ypos: the Y position
  * @param  Length: line length
  */
void BSP_LCD_DrawHLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 8013ad4:	b5b0      	push	{r4, r5, r7, lr}
 8013ad6:	b086      	sub	sp, #24
 8013ad8:	af02      	add	r7, sp, #8
 8013ada:	4603      	mov	r3, r0
 8013adc:	80fb      	strh	r3, [r7, #6]
 8013ade:	460b      	mov	r3, r1
 8013ae0:	80bb      	strh	r3, [r7, #4]
 8013ae2:	4613      	mov	r3, r2
 8013ae4:	807b      	strh	r3, [r7, #2]
  uint32_t xaddress = 0;
 8013ae6:	2300      	movs	r3, #0
 8013ae8:	60fb      	str	r3, [r7, #12]

  /* Get the line address */
  xaddress = (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4 * (BSP_LCD_GetXSize() * Ypos + Xpos);
 8013aea:	4b16      	ldr	r3, [pc, #88]	@ (8013b44 <BSP_LCD_DrawHLine+0x70>)
 8013aec:	681b      	ldr	r3, [r3, #0]
 8013aee:	4a16      	ldr	r2, [pc, #88]	@ (8013b48 <BSP_LCD_DrawHLine+0x74>)
 8013af0:	2134      	movs	r1, #52	@ 0x34
 8013af2:	fb01 f303 	mul.w	r3, r1, r3
 8013af6:	4413      	add	r3, r2
 8013af8:	335c      	adds	r3, #92	@ 0x5c
 8013afa:	681c      	ldr	r4, [r3, #0]
 8013afc:	f7ff fde8 	bl	80136d0 <BSP_LCD_GetXSize>
 8013b00:	4602      	mov	r2, r0
 8013b02:	88bb      	ldrh	r3, [r7, #4]
 8013b04:	fb03 f202 	mul.w	r2, r3, r2
 8013b08:	88fb      	ldrh	r3, [r7, #6]
 8013b0a:	4413      	add	r3, r2
 8013b0c:	009b      	lsls	r3, r3, #2
 8013b0e:	4423      	add	r3, r4
 8013b10:	60fb      	str	r3, [r7, #12]

  /* Write line */
  FillBuffer(ActiveLayer, (uint32_t *)xaddress, Length, 1, 0, DrawProp[ActiveLayer].TextColor);
 8013b12:	4b0c      	ldr	r3, [pc, #48]	@ (8013b44 <BSP_LCD_DrawHLine+0x70>)
 8013b14:	6818      	ldr	r0, [r3, #0]
 8013b16:	68f9      	ldr	r1, [r7, #12]
 8013b18:	887c      	ldrh	r4, [r7, #2]
 8013b1a:	4b0a      	ldr	r3, [pc, #40]	@ (8013b44 <BSP_LCD_DrawHLine+0x70>)
 8013b1c:	681a      	ldr	r2, [r3, #0]
 8013b1e:	4d0b      	ldr	r5, [pc, #44]	@ (8013b4c <BSP_LCD_DrawHLine+0x78>)
 8013b20:	4613      	mov	r3, r2
 8013b22:	005b      	lsls	r3, r3, #1
 8013b24:	4413      	add	r3, r2
 8013b26:	009b      	lsls	r3, r3, #2
 8013b28:	442b      	add	r3, r5
 8013b2a:	681b      	ldr	r3, [r3, #0]
 8013b2c:	9301      	str	r3, [sp, #4]
 8013b2e:	2300      	movs	r3, #0
 8013b30:	9300      	str	r3, [sp, #0]
 8013b32:	2301      	movs	r3, #1
 8013b34:	4622      	mov	r2, r4
 8013b36:	f000 fc29 	bl	801438c <FillBuffer>
}
 8013b3a:	bf00      	nop
 8013b3c:	3710      	adds	r7, #16
 8013b3e:	46bd      	mov	sp, r7
 8013b40:	bdb0      	pop	{r4, r5, r7, pc}
 8013b42:	bf00      	nop
 8013b44:	20001c08 	.word	0x20001c08
 8013b48:	20001af0 	.word	0x20001af0
 8013b4c:	20001c0c 	.word	0x20001c0c

08013b50 <BSP_LCD_DrawVLine>:
  * @param  Xpos: the X position
  * @param  Ypos: the Y position
  * @param  Length: line length
  */
void BSP_LCD_DrawVLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 8013b50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013b52:	b087      	sub	sp, #28
 8013b54:	af02      	add	r7, sp, #8
 8013b56:	4603      	mov	r3, r0
 8013b58:	80fb      	strh	r3, [r7, #6]
 8013b5a:	460b      	mov	r3, r1
 8013b5c:	80bb      	strh	r3, [r7, #4]
 8013b5e:	4613      	mov	r3, r2
 8013b60:	807b      	strh	r3, [r7, #2]
  uint32_t xaddress = 0;
 8013b62:	2300      	movs	r3, #0
 8013b64:	60fb      	str	r3, [r7, #12]

  /* Get the line address */
  xaddress = (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4 * (BSP_LCD_GetXSize() * Ypos + Xpos);
 8013b66:	4b18      	ldr	r3, [pc, #96]	@ (8013bc8 <BSP_LCD_DrawVLine+0x78>)
 8013b68:	681b      	ldr	r3, [r3, #0]
 8013b6a:	4a18      	ldr	r2, [pc, #96]	@ (8013bcc <BSP_LCD_DrawVLine+0x7c>)
 8013b6c:	2134      	movs	r1, #52	@ 0x34
 8013b6e:	fb01 f303 	mul.w	r3, r1, r3
 8013b72:	4413      	add	r3, r2
 8013b74:	335c      	adds	r3, #92	@ 0x5c
 8013b76:	681c      	ldr	r4, [r3, #0]
 8013b78:	f7ff fdaa 	bl	80136d0 <BSP_LCD_GetXSize>
 8013b7c:	4602      	mov	r2, r0
 8013b7e:	88bb      	ldrh	r3, [r7, #4]
 8013b80:	fb03 f202 	mul.w	r2, r3, r2
 8013b84:	88fb      	ldrh	r3, [r7, #6]
 8013b86:	4413      	add	r3, r2
 8013b88:	009b      	lsls	r3, r3, #2
 8013b8a:	4423      	add	r3, r4
 8013b8c:	60fb      	str	r3, [r7, #12]

  /* Write line */
  FillBuffer(ActiveLayer, (uint32_t *)xaddress, 1, Length, (BSP_LCD_GetXSize() - 1), DrawProp[ActiveLayer].TextColor);
 8013b8e:	4b0e      	ldr	r3, [pc, #56]	@ (8013bc8 <BSP_LCD_DrawVLine+0x78>)
 8013b90:	681c      	ldr	r4, [r3, #0]
 8013b92:	68fd      	ldr	r5, [r7, #12]
 8013b94:	887e      	ldrh	r6, [r7, #2]
 8013b96:	f7ff fd9b 	bl	80136d0 <BSP_LCD_GetXSize>
 8013b9a:	4603      	mov	r3, r0
 8013b9c:	1e59      	subs	r1, r3, #1
 8013b9e:	4b0a      	ldr	r3, [pc, #40]	@ (8013bc8 <BSP_LCD_DrawVLine+0x78>)
 8013ba0:	681a      	ldr	r2, [r3, #0]
 8013ba2:	480b      	ldr	r0, [pc, #44]	@ (8013bd0 <BSP_LCD_DrawVLine+0x80>)
 8013ba4:	4613      	mov	r3, r2
 8013ba6:	005b      	lsls	r3, r3, #1
 8013ba8:	4413      	add	r3, r2
 8013baa:	009b      	lsls	r3, r3, #2
 8013bac:	4403      	add	r3, r0
 8013bae:	681b      	ldr	r3, [r3, #0]
 8013bb0:	9301      	str	r3, [sp, #4]
 8013bb2:	9100      	str	r1, [sp, #0]
 8013bb4:	4633      	mov	r3, r6
 8013bb6:	2201      	movs	r2, #1
 8013bb8:	4629      	mov	r1, r5
 8013bba:	4620      	mov	r0, r4
 8013bbc:	f000 fbe6 	bl	801438c <FillBuffer>
}
 8013bc0:	bf00      	nop
 8013bc2:	3714      	adds	r7, #20
 8013bc4:	46bd      	mov	sp, r7
 8013bc6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013bc8:	20001c08 	.word	0x20001c08
 8013bcc:	20001af0 	.word	0x20001af0
 8013bd0:	20001c0c 	.word	0x20001c0c

08013bd4 <BSP_LCD_DrawRect>:
  * @param  Ypos: the Y position
  * @param  Height: display rectangle height
  * @param  Width: display rectangle width
  */
void BSP_LCD_DrawRect(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 8013bd4:	b590      	push	{r4, r7, lr}
 8013bd6:	b083      	sub	sp, #12
 8013bd8:	af00      	add	r7, sp, #0
 8013bda:	4604      	mov	r4, r0
 8013bdc:	4608      	mov	r0, r1
 8013bde:	4611      	mov	r1, r2
 8013be0:	461a      	mov	r2, r3
 8013be2:	4623      	mov	r3, r4
 8013be4:	80fb      	strh	r3, [r7, #6]
 8013be6:	4603      	mov	r3, r0
 8013be8:	80bb      	strh	r3, [r7, #4]
 8013bea:	460b      	mov	r3, r1
 8013bec:	807b      	strh	r3, [r7, #2]
 8013bee:	4613      	mov	r3, r2
 8013bf0:	803b      	strh	r3, [r7, #0]
  /* Draw horizontal lines */
  BSP_LCD_DrawHLine(Xpos, Ypos, Width);
 8013bf2:	887a      	ldrh	r2, [r7, #2]
 8013bf4:	88b9      	ldrh	r1, [r7, #4]
 8013bf6:	88fb      	ldrh	r3, [r7, #6]
 8013bf8:	4618      	mov	r0, r3
 8013bfa:	f7ff ff6b 	bl	8013ad4 <BSP_LCD_DrawHLine>
  BSP_LCD_DrawHLine(Xpos, (Ypos + Height), Width);
 8013bfe:	88ba      	ldrh	r2, [r7, #4]
 8013c00:	883b      	ldrh	r3, [r7, #0]
 8013c02:	4413      	add	r3, r2
 8013c04:	b299      	uxth	r1, r3
 8013c06:	887a      	ldrh	r2, [r7, #2]
 8013c08:	88fb      	ldrh	r3, [r7, #6]
 8013c0a:	4618      	mov	r0, r3
 8013c0c:	f7ff ff62 	bl	8013ad4 <BSP_LCD_DrawHLine>

  /* Draw vertical lines */
  BSP_LCD_DrawVLine(Xpos, Ypos, Height);
 8013c10:	883a      	ldrh	r2, [r7, #0]
 8013c12:	88b9      	ldrh	r1, [r7, #4]
 8013c14:	88fb      	ldrh	r3, [r7, #6]
 8013c16:	4618      	mov	r0, r3
 8013c18:	f7ff ff9a 	bl	8013b50 <BSP_LCD_DrawVLine>
  BSP_LCD_DrawVLine((Xpos + Width), Ypos, Height);
 8013c1c:	88fa      	ldrh	r2, [r7, #6]
 8013c1e:	887b      	ldrh	r3, [r7, #2]
 8013c20:	4413      	add	r3, r2
 8013c22:	b29b      	uxth	r3, r3
 8013c24:	883a      	ldrh	r2, [r7, #0]
 8013c26:	88b9      	ldrh	r1, [r7, #4]
 8013c28:	4618      	mov	r0, r3
 8013c2a:	f7ff ff91 	bl	8013b50 <BSP_LCD_DrawVLine>
}
 8013c2e:	bf00      	nop
 8013c30:	370c      	adds	r7, #12
 8013c32:	46bd      	mov	sp, r7
 8013c34:	bd90      	pop	{r4, r7, pc}
	...

08013c38 <BSP_LCD_DrawCircle>:
  * @param  Xpos: the X position
  * @param  Ypos: the Y position
  * @param  Radius: the circle radius
  */
void BSP_LCD_DrawCircle(uint16_t Xpos, uint16_t Ypos, uint16_t Radius)
{
 8013c38:	b590      	push	{r4, r7, lr}
 8013c3a:	b087      	sub	sp, #28
 8013c3c:	af00      	add	r7, sp, #0
 8013c3e:	4603      	mov	r3, r0
 8013c40:	80fb      	strh	r3, [r7, #6]
 8013c42:	460b      	mov	r3, r1
 8013c44:	80bb      	strh	r3, [r7, #4]
 8013c46:	4613      	mov	r3, r2
 8013c48:	807b      	strh	r3, [r7, #2]
  int32_t  d;/* Decision Variable */
  uint32_t  curx;/* Current X Value */
  uint32_t  cury;/* Current Y Value */

  d = 3 - (Radius << 1);
 8013c4a:	887b      	ldrh	r3, [r7, #2]
 8013c4c:	005b      	lsls	r3, r3, #1
 8013c4e:	f1c3 0303 	rsb	r3, r3, #3
 8013c52:	617b      	str	r3, [r7, #20]
  curx = 0;
 8013c54:	2300      	movs	r3, #0
 8013c56:	613b      	str	r3, [r7, #16]
  cury = Radius;
 8013c58:	887b      	ldrh	r3, [r7, #2]
 8013c5a:	60fb      	str	r3, [r7, #12]

  while (curx <= cury)
 8013c5c:	e0c7      	b.n	8013dee <BSP_LCD_DrawCircle+0x1b6>
  {
    BSP_LCD_DrawPixel((Xpos + curx), (Ypos - cury), DrawProp[ActiveLayer].TextColor);
 8013c5e:	693b      	ldr	r3, [r7, #16]
 8013c60:	b29a      	uxth	r2, r3
 8013c62:	88fb      	ldrh	r3, [r7, #6]
 8013c64:	4413      	add	r3, r2
 8013c66:	b298      	uxth	r0, r3
 8013c68:	68fb      	ldr	r3, [r7, #12]
 8013c6a:	b29b      	uxth	r3, r3
 8013c6c:	88ba      	ldrh	r2, [r7, #4]
 8013c6e:	1ad3      	subs	r3, r2, r3
 8013c70:	b299      	uxth	r1, r3
 8013c72:	4b64      	ldr	r3, [pc, #400]	@ (8013e04 <BSP_LCD_DrawCircle+0x1cc>)
 8013c74:	681a      	ldr	r2, [r3, #0]
 8013c76:	4c64      	ldr	r4, [pc, #400]	@ (8013e08 <BSP_LCD_DrawCircle+0x1d0>)
 8013c78:	4613      	mov	r3, r2
 8013c7a:	005b      	lsls	r3, r3, #1
 8013c7c:	4413      	add	r3, r2
 8013c7e:	009b      	lsls	r3, r3, #2
 8013c80:	4423      	add	r3, r4
 8013c82:	681b      	ldr	r3, [r3, #0]
 8013c84:	461a      	mov	r2, r3
 8013c86:	f000 faa1 	bl	80141cc <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos - curx), (Ypos - cury), DrawProp[ActiveLayer].TextColor);
 8013c8a:	693b      	ldr	r3, [r7, #16]
 8013c8c:	b29b      	uxth	r3, r3
 8013c8e:	88fa      	ldrh	r2, [r7, #6]
 8013c90:	1ad3      	subs	r3, r2, r3
 8013c92:	b298      	uxth	r0, r3
 8013c94:	68fb      	ldr	r3, [r7, #12]
 8013c96:	b29b      	uxth	r3, r3
 8013c98:	88ba      	ldrh	r2, [r7, #4]
 8013c9a:	1ad3      	subs	r3, r2, r3
 8013c9c:	b299      	uxth	r1, r3
 8013c9e:	4b59      	ldr	r3, [pc, #356]	@ (8013e04 <BSP_LCD_DrawCircle+0x1cc>)
 8013ca0:	681a      	ldr	r2, [r3, #0]
 8013ca2:	4c59      	ldr	r4, [pc, #356]	@ (8013e08 <BSP_LCD_DrawCircle+0x1d0>)
 8013ca4:	4613      	mov	r3, r2
 8013ca6:	005b      	lsls	r3, r3, #1
 8013ca8:	4413      	add	r3, r2
 8013caa:	009b      	lsls	r3, r3, #2
 8013cac:	4423      	add	r3, r4
 8013cae:	681b      	ldr	r3, [r3, #0]
 8013cb0:	461a      	mov	r2, r3
 8013cb2:	f000 fa8b 	bl	80141cc <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos + cury), (Ypos - curx), DrawProp[ActiveLayer].TextColor);
 8013cb6:	68fb      	ldr	r3, [r7, #12]
 8013cb8:	b29a      	uxth	r2, r3
 8013cba:	88fb      	ldrh	r3, [r7, #6]
 8013cbc:	4413      	add	r3, r2
 8013cbe:	b298      	uxth	r0, r3
 8013cc0:	693b      	ldr	r3, [r7, #16]
 8013cc2:	b29b      	uxth	r3, r3
 8013cc4:	88ba      	ldrh	r2, [r7, #4]
 8013cc6:	1ad3      	subs	r3, r2, r3
 8013cc8:	b299      	uxth	r1, r3
 8013cca:	4b4e      	ldr	r3, [pc, #312]	@ (8013e04 <BSP_LCD_DrawCircle+0x1cc>)
 8013ccc:	681a      	ldr	r2, [r3, #0]
 8013cce:	4c4e      	ldr	r4, [pc, #312]	@ (8013e08 <BSP_LCD_DrawCircle+0x1d0>)
 8013cd0:	4613      	mov	r3, r2
 8013cd2:	005b      	lsls	r3, r3, #1
 8013cd4:	4413      	add	r3, r2
 8013cd6:	009b      	lsls	r3, r3, #2
 8013cd8:	4423      	add	r3, r4
 8013cda:	681b      	ldr	r3, [r3, #0]
 8013cdc:	461a      	mov	r2, r3
 8013cde:	f000 fa75 	bl	80141cc <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos - cury), (Ypos - curx), DrawProp[ActiveLayer].TextColor);
 8013ce2:	68fb      	ldr	r3, [r7, #12]
 8013ce4:	b29b      	uxth	r3, r3
 8013ce6:	88fa      	ldrh	r2, [r7, #6]
 8013ce8:	1ad3      	subs	r3, r2, r3
 8013cea:	b298      	uxth	r0, r3
 8013cec:	693b      	ldr	r3, [r7, #16]
 8013cee:	b29b      	uxth	r3, r3
 8013cf0:	88ba      	ldrh	r2, [r7, #4]
 8013cf2:	1ad3      	subs	r3, r2, r3
 8013cf4:	b299      	uxth	r1, r3
 8013cf6:	4b43      	ldr	r3, [pc, #268]	@ (8013e04 <BSP_LCD_DrawCircle+0x1cc>)
 8013cf8:	681a      	ldr	r2, [r3, #0]
 8013cfa:	4c43      	ldr	r4, [pc, #268]	@ (8013e08 <BSP_LCD_DrawCircle+0x1d0>)
 8013cfc:	4613      	mov	r3, r2
 8013cfe:	005b      	lsls	r3, r3, #1
 8013d00:	4413      	add	r3, r2
 8013d02:	009b      	lsls	r3, r3, #2
 8013d04:	4423      	add	r3, r4
 8013d06:	681b      	ldr	r3, [r3, #0]
 8013d08:	461a      	mov	r2, r3
 8013d0a:	f000 fa5f 	bl	80141cc <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos + curx), (Ypos + cury), DrawProp[ActiveLayer].TextColor);
 8013d0e:	693b      	ldr	r3, [r7, #16]
 8013d10:	b29a      	uxth	r2, r3
 8013d12:	88fb      	ldrh	r3, [r7, #6]
 8013d14:	4413      	add	r3, r2
 8013d16:	b298      	uxth	r0, r3
 8013d18:	68fb      	ldr	r3, [r7, #12]
 8013d1a:	b29a      	uxth	r2, r3
 8013d1c:	88bb      	ldrh	r3, [r7, #4]
 8013d1e:	4413      	add	r3, r2
 8013d20:	b299      	uxth	r1, r3
 8013d22:	4b38      	ldr	r3, [pc, #224]	@ (8013e04 <BSP_LCD_DrawCircle+0x1cc>)
 8013d24:	681a      	ldr	r2, [r3, #0]
 8013d26:	4c38      	ldr	r4, [pc, #224]	@ (8013e08 <BSP_LCD_DrawCircle+0x1d0>)
 8013d28:	4613      	mov	r3, r2
 8013d2a:	005b      	lsls	r3, r3, #1
 8013d2c:	4413      	add	r3, r2
 8013d2e:	009b      	lsls	r3, r3, #2
 8013d30:	4423      	add	r3, r4
 8013d32:	681b      	ldr	r3, [r3, #0]
 8013d34:	461a      	mov	r2, r3
 8013d36:	f000 fa49 	bl	80141cc <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos - curx), (Ypos + cury), DrawProp[ActiveLayer].TextColor);
 8013d3a:	693b      	ldr	r3, [r7, #16]
 8013d3c:	b29b      	uxth	r3, r3
 8013d3e:	88fa      	ldrh	r2, [r7, #6]
 8013d40:	1ad3      	subs	r3, r2, r3
 8013d42:	b298      	uxth	r0, r3
 8013d44:	68fb      	ldr	r3, [r7, #12]
 8013d46:	b29a      	uxth	r2, r3
 8013d48:	88bb      	ldrh	r3, [r7, #4]
 8013d4a:	4413      	add	r3, r2
 8013d4c:	b299      	uxth	r1, r3
 8013d4e:	4b2d      	ldr	r3, [pc, #180]	@ (8013e04 <BSP_LCD_DrawCircle+0x1cc>)
 8013d50:	681a      	ldr	r2, [r3, #0]
 8013d52:	4c2d      	ldr	r4, [pc, #180]	@ (8013e08 <BSP_LCD_DrawCircle+0x1d0>)
 8013d54:	4613      	mov	r3, r2
 8013d56:	005b      	lsls	r3, r3, #1
 8013d58:	4413      	add	r3, r2
 8013d5a:	009b      	lsls	r3, r3, #2
 8013d5c:	4423      	add	r3, r4
 8013d5e:	681b      	ldr	r3, [r3, #0]
 8013d60:	461a      	mov	r2, r3
 8013d62:	f000 fa33 	bl	80141cc <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos + cury), (Ypos + curx), DrawProp[ActiveLayer].TextColor);
 8013d66:	68fb      	ldr	r3, [r7, #12]
 8013d68:	b29a      	uxth	r2, r3
 8013d6a:	88fb      	ldrh	r3, [r7, #6]
 8013d6c:	4413      	add	r3, r2
 8013d6e:	b298      	uxth	r0, r3
 8013d70:	693b      	ldr	r3, [r7, #16]
 8013d72:	b29a      	uxth	r2, r3
 8013d74:	88bb      	ldrh	r3, [r7, #4]
 8013d76:	4413      	add	r3, r2
 8013d78:	b299      	uxth	r1, r3
 8013d7a:	4b22      	ldr	r3, [pc, #136]	@ (8013e04 <BSP_LCD_DrawCircle+0x1cc>)
 8013d7c:	681a      	ldr	r2, [r3, #0]
 8013d7e:	4c22      	ldr	r4, [pc, #136]	@ (8013e08 <BSP_LCD_DrawCircle+0x1d0>)
 8013d80:	4613      	mov	r3, r2
 8013d82:	005b      	lsls	r3, r3, #1
 8013d84:	4413      	add	r3, r2
 8013d86:	009b      	lsls	r3, r3, #2
 8013d88:	4423      	add	r3, r4
 8013d8a:	681b      	ldr	r3, [r3, #0]
 8013d8c:	461a      	mov	r2, r3
 8013d8e:	f000 fa1d 	bl	80141cc <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos - cury), (Ypos + curx), DrawProp[ActiveLayer].TextColor);
 8013d92:	68fb      	ldr	r3, [r7, #12]
 8013d94:	b29b      	uxth	r3, r3
 8013d96:	88fa      	ldrh	r2, [r7, #6]
 8013d98:	1ad3      	subs	r3, r2, r3
 8013d9a:	b298      	uxth	r0, r3
 8013d9c:	693b      	ldr	r3, [r7, #16]
 8013d9e:	b29a      	uxth	r2, r3
 8013da0:	88bb      	ldrh	r3, [r7, #4]
 8013da2:	4413      	add	r3, r2
 8013da4:	b299      	uxth	r1, r3
 8013da6:	4b17      	ldr	r3, [pc, #92]	@ (8013e04 <BSP_LCD_DrawCircle+0x1cc>)
 8013da8:	681a      	ldr	r2, [r3, #0]
 8013daa:	4c17      	ldr	r4, [pc, #92]	@ (8013e08 <BSP_LCD_DrawCircle+0x1d0>)
 8013dac:	4613      	mov	r3, r2
 8013dae:	005b      	lsls	r3, r3, #1
 8013db0:	4413      	add	r3, r2
 8013db2:	009b      	lsls	r3, r3, #2
 8013db4:	4423      	add	r3, r4
 8013db6:	681b      	ldr	r3, [r3, #0]
 8013db8:	461a      	mov	r2, r3
 8013dba:	f000 fa07 	bl	80141cc <BSP_LCD_DrawPixel>

    if (d < 0)
 8013dbe:	697b      	ldr	r3, [r7, #20]
 8013dc0:	2b00      	cmp	r3, #0
 8013dc2:	da06      	bge.n	8013dd2 <BSP_LCD_DrawCircle+0x19a>
    {
      d += (curx << 2) + 6;
 8013dc4:	693b      	ldr	r3, [r7, #16]
 8013dc6:	009a      	lsls	r2, r3, #2
 8013dc8:	697b      	ldr	r3, [r7, #20]
 8013dca:	4413      	add	r3, r2
 8013dcc:	3306      	adds	r3, #6
 8013dce:	617b      	str	r3, [r7, #20]
 8013dd0:	e00a      	b.n	8013de8 <BSP_LCD_DrawCircle+0x1b0>
    }
    else
    {
      d += ((curx - cury) << 2) + 10;
 8013dd2:	693a      	ldr	r2, [r7, #16]
 8013dd4:	68fb      	ldr	r3, [r7, #12]
 8013dd6:	1ad3      	subs	r3, r2, r3
 8013dd8:	009a      	lsls	r2, r3, #2
 8013dda:	697b      	ldr	r3, [r7, #20]
 8013ddc:	4413      	add	r3, r2
 8013dde:	330a      	adds	r3, #10
 8013de0:	617b      	str	r3, [r7, #20]
      cury--;
 8013de2:	68fb      	ldr	r3, [r7, #12]
 8013de4:	3b01      	subs	r3, #1
 8013de6:	60fb      	str	r3, [r7, #12]
    }
    curx++;
 8013de8:	693b      	ldr	r3, [r7, #16]
 8013dea:	3301      	adds	r3, #1
 8013dec:	613b      	str	r3, [r7, #16]
  while (curx <= cury)
 8013dee:	693a      	ldr	r2, [r7, #16]
 8013df0:	68fb      	ldr	r3, [r7, #12]
 8013df2:	429a      	cmp	r2, r3
 8013df4:	f67f af33 	bls.w	8013c5e <BSP_LCD_DrawCircle+0x26>
  }
}
 8013df8:	bf00      	nop
 8013dfa:	bf00      	nop
 8013dfc:	371c      	adds	r7, #28
 8013dfe:	46bd      	mov	sp, r7
 8013e00:	bd90      	pop	{r4, r7, pc}
 8013e02:	bf00      	nop
 8013e04:	20001c08 	.word	0x20001c08
 8013e08:	20001c0c 	.word	0x20001c0c

08013e0c <BSP_LCD_FillRect>:
  * @param  Ypos: the Y position
  * @param  Height: rectangle height
  * @param  Width: rectangle width
  */
void BSP_LCD_FillRect(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 8013e0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013e10:	b086      	sub	sp, #24
 8013e12:	af02      	add	r7, sp, #8
 8013e14:	4604      	mov	r4, r0
 8013e16:	4608      	mov	r0, r1
 8013e18:	4611      	mov	r1, r2
 8013e1a:	461a      	mov	r2, r3
 8013e1c:	4623      	mov	r3, r4
 8013e1e:	80fb      	strh	r3, [r7, #6]
 8013e20:	4603      	mov	r3, r0
 8013e22:	80bb      	strh	r3, [r7, #4]
 8013e24:	460b      	mov	r3, r1
 8013e26:	807b      	strh	r3, [r7, #2]
 8013e28:	4613      	mov	r3, r2
 8013e2a:	803b      	strh	r3, [r7, #0]
  uint32_t xaddress = 0;
 8013e2c:	2300      	movs	r3, #0
 8013e2e:	60fb      	str	r3, [r7, #12]

  /* Set the text color */
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8013e30:	4b20      	ldr	r3, [pc, #128]	@ (8013eb4 <BSP_LCD_FillRect+0xa8>)
 8013e32:	681a      	ldr	r2, [r3, #0]
 8013e34:	4920      	ldr	r1, [pc, #128]	@ (8013eb8 <BSP_LCD_FillRect+0xac>)
 8013e36:	4613      	mov	r3, r2
 8013e38:	005b      	lsls	r3, r3, #1
 8013e3a:	4413      	add	r3, r2
 8013e3c:	009b      	lsls	r3, r3, #2
 8013e3e:	440b      	add	r3, r1
 8013e40:	681b      	ldr	r3, [r3, #0]
 8013e42:	4618      	mov	r0, r3
 8013e44:	f7ff fcd0 	bl	80137e8 <BSP_LCD_SetTextColor>

  /* Get the rectangle start address */
  xaddress = (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4 * (BSP_LCD_GetXSize() * Ypos + Xpos);
 8013e48:	4b1a      	ldr	r3, [pc, #104]	@ (8013eb4 <BSP_LCD_FillRect+0xa8>)
 8013e4a:	681b      	ldr	r3, [r3, #0]
 8013e4c:	4a1b      	ldr	r2, [pc, #108]	@ (8013ebc <BSP_LCD_FillRect+0xb0>)
 8013e4e:	2134      	movs	r1, #52	@ 0x34
 8013e50:	fb01 f303 	mul.w	r3, r1, r3
 8013e54:	4413      	add	r3, r2
 8013e56:	335c      	adds	r3, #92	@ 0x5c
 8013e58:	681c      	ldr	r4, [r3, #0]
 8013e5a:	f7ff fc39 	bl	80136d0 <BSP_LCD_GetXSize>
 8013e5e:	4602      	mov	r2, r0
 8013e60:	88bb      	ldrh	r3, [r7, #4]
 8013e62:	fb03 f202 	mul.w	r2, r3, r2
 8013e66:	88fb      	ldrh	r3, [r7, #6]
 8013e68:	4413      	add	r3, r2
 8013e6a:	009b      	lsls	r3, r3, #2
 8013e6c:	4423      	add	r3, r4
 8013e6e:	60fb      	str	r3, [r7, #12]

  /* Fill the rectangle */
  FillBuffer(ActiveLayer, (uint32_t *)xaddress, Width, Height, (BSP_LCD_GetXSize() - Width),
 8013e70:	4b10      	ldr	r3, [pc, #64]	@ (8013eb4 <BSP_LCD_FillRect+0xa8>)
 8013e72:	681c      	ldr	r4, [r3, #0]
 8013e74:	68fd      	ldr	r5, [r7, #12]
 8013e76:	887e      	ldrh	r6, [r7, #2]
 8013e78:	f8b7 8000 	ldrh.w	r8, [r7]
 8013e7c:	f7ff fc28 	bl	80136d0 <BSP_LCD_GetXSize>
 8013e80:	4602      	mov	r2, r0
 8013e82:	887b      	ldrh	r3, [r7, #2]
 8013e84:	1ad1      	subs	r1, r2, r3
 8013e86:	4b0b      	ldr	r3, [pc, #44]	@ (8013eb4 <BSP_LCD_FillRect+0xa8>)
 8013e88:	681a      	ldr	r2, [r3, #0]
 8013e8a:	480b      	ldr	r0, [pc, #44]	@ (8013eb8 <BSP_LCD_FillRect+0xac>)
 8013e8c:	4613      	mov	r3, r2
 8013e8e:	005b      	lsls	r3, r3, #1
 8013e90:	4413      	add	r3, r2
 8013e92:	009b      	lsls	r3, r3, #2
 8013e94:	4403      	add	r3, r0
 8013e96:	681b      	ldr	r3, [r3, #0]
 8013e98:	9301      	str	r3, [sp, #4]
 8013e9a:	9100      	str	r1, [sp, #0]
 8013e9c:	4643      	mov	r3, r8
 8013e9e:	4632      	mov	r2, r6
 8013ea0:	4629      	mov	r1, r5
 8013ea2:	4620      	mov	r0, r4
 8013ea4:	f000 fa72 	bl	801438c <FillBuffer>
             DrawProp[ActiveLayer].TextColor);
}
 8013ea8:	bf00      	nop
 8013eaa:	3710      	adds	r7, #16
 8013eac:	46bd      	mov	sp, r7
 8013eae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013eb2:	bf00      	nop
 8013eb4:	20001c08 	.word	0x20001c08
 8013eb8:	20001c0c 	.word	0x20001c0c
 8013ebc:	20001af0 	.word	0x20001af0

08013ec0 <BSP_LCD_FillCircle>:
  * @param  Xpos: the X position
  * @param  Ypos: the Y position
  * @param  Radius: the circle radius
  */
void BSP_LCD_FillCircle(uint16_t Xpos, uint16_t Ypos, uint16_t Radius)
{
 8013ec0:	b580      	push	{r7, lr}
 8013ec2:	b086      	sub	sp, #24
 8013ec4:	af00      	add	r7, sp, #0
 8013ec6:	4603      	mov	r3, r0
 8013ec8:	80fb      	strh	r3, [r7, #6]
 8013eca:	460b      	mov	r3, r1
 8013ecc:	80bb      	strh	r3, [r7, #4]
 8013ece:	4613      	mov	r3, r2
 8013ed0:	807b      	strh	r3, [r7, #2]
  int32_t  d;    /* Decision Variable */
  uint32_t  curx;/* Current X Value */
  uint32_t  cury;/* Current Y Value */

  d = 3 - (Radius << 1);
 8013ed2:	887b      	ldrh	r3, [r7, #2]
 8013ed4:	005b      	lsls	r3, r3, #1
 8013ed6:	f1c3 0303 	rsb	r3, r3, #3
 8013eda:	617b      	str	r3, [r7, #20]

  curx = 0;
 8013edc:	2300      	movs	r3, #0
 8013ede:	613b      	str	r3, [r7, #16]
  cury = Radius;
 8013ee0:	887b      	ldrh	r3, [r7, #2]
 8013ee2:	60fb      	str	r3, [r7, #12]

  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8013ee4:	4b44      	ldr	r3, [pc, #272]	@ (8013ff8 <BSP_LCD_FillCircle+0x138>)
 8013ee6:	681a      	ldr	r2, [r3, #0]
 8013ee8:	4944      	ldr	r1, [pc, #272]	@ (8013ffc <BSP_LCD_FillCircle+0x13c>)
 8013eea:	4613      	mov	r3, r2
 8013eec:	005b      	lsls	r3, r3, #1
 8013eee:	4413      	add	r3, r2
 8013ef0:	009b      	lsls	r3, r3, #2
 8013ef2:	440b      	add	r3, r1
 8013ef4:	681b      	ldr	r3, [r3, #0]
 8013ef6:	4618      	mov	r0, r3
 8013ef8:	f7ff fc76 	bl	80137e8 <BSP_LCD_SetTextColor>

  while (curx <= cury)
 8013efc:	e061      	b.n	8013fc2 <BSP_LCD_FillCircle+0x102>
  {
    if (cury > 0)
 8013efe:	68fb      	ldr	r3, [r7, #12]
 8013f00:	2b00      	cmp	r3, #0
 8013f02:	d021      	beq.n	8013f48 <BSP_LCD_FillCircle+0x88>
    {
      BSP_LCD_DrawHLine(Xpos - cury, Ypos + curx, 2 * cury);
 8013f04:	68fb      	ldr	r3, [r7, #12]
 8013f06:	b29b      	uxth	r3, r3
 8013f08:	88fa      	ldrh	r2, [r7, #6]
 8013f0a:	1ad3      	subs	r3, r2, r3
 8013f0c:	b298      	uxth	r0, r3
 8013f0e:	693b      	ldr	r3, [r7, #16]
 8013f10:	b29a      	uxth	r2, r3
 8013f12:	88bb      	ldrh	r3, [r7, #4]
 8013f14:	4413      	add	r3, r2
 8013f16:	b299      	uxth	r1, r3
 8013f18:	68fb      	ldr	r3, [r7, #12]
 8013f1a:	b29b      	uxth	r3, r3
 8013f1c:	005b      	lsls	r3, r3, #1
 8013f1e:	b29b      	uxth	r3, r3
 8013f20:	461a      	mov	r2, r3
 8013f22:	f7ff fdd7 	bl	8013ad4 <BSP_LCD_DrawHLine>
      BSP_LCD_DrawHLine(Xpos - cury, Ypos - curx, 2 * cury);
 8013f26:	68fb      	ldr	r3, [r7, #12]
 8013f28:	b29b      	uxth	r3, r3
 8013f2a:	88fa      	ldrh	r2, [r7, #6]
 8013f2c:	1ad3      	subs	r3, r2, r3
 8013f2e:	b298      	uxth	r0, r3
 8013f30:	693b      	ldr	r3, [r7, #16]
 8013f32:	b29b      	uxth	r3, r3
 8013f34:	88ba      	ldrh	r2, [r7, #4]
 8013f36:	1ad3      	subs	r3, r2, r3
 8013f38:	b299      	uxth	r1, r3
 8013f3a:	68fb      	ldr	r3, [r7, #12]
 8013f3c:	b29b      	uxth	r3, r3
 8013f3e:	005b      	lsls	r3, r3, #1
 8013f40:	b29b      	uxth	r3, r3
 8013f42:	461a      	mov	r2, r3
 8013f44:	f7ff fdc6 	bl	8013ad4 <BSP_LCD_DrawHLine>
    }

    if (curx > 0)
 8013f48:	693b      	ldr	r3, [r7, #16]
 8013f4a:	2b00      	cmp	r3, #0
 8013f4c:	d021      	beq.n	8013f92 <BSP_LCD_FillCircle+0xd2>
    {
      BSP_LCD_DrawHLine(Xpos - curx, Ypos - cury, 2 * curx);
 8013f4e:	693b      	ldr	r3, [r7, #16]
 8013f50:	b29b      	uxth	r3, r3
 8013f52:	88fa      	ldrh	r2, [r7, #6]
 8013f54:	1ad3      	subs	r3, r2, r3
 8013f56:	b298      	uxth	r0, r3
 8013f58:	68fb      	ldr	r3, [r7, #12]
 8013f5a:	b29b      	uxth	r3, r3
 8013f5c:	88ba      	ldrh	r2, [r7, #4]
 8013f5e:	1ad3      	subs	r3, r2, r3
 8013f60:	b299      	uxth	r1, r3
 8013f62:	693b      	ldr	r3, [r7, #16]
 8013f64:	b29b      	uxth	r3, r3
 8013f66:	005b      	lsls	r3, r3, #1
 8013f68:	b29b      	uxth	r3, r3
 8013f6a:	461a      	mov	r2, r3
 8013f6c:	f7ff fdb2 	bl	8013ad4 <BSP_LCD_DrawHLine>
      BSP_LCD_DrawHLine(Xpos - curx, Ypos + cury, 2 * curx);
 8013f70:	693b      	ldr	r3, [r7, #16]
 8013f72:	b29b      	uxth	r3, r3
 8013f74:	88fa      	ldrh	r2, [r7, #6]
 8013f76:	1ad3      	subs	r3, r2, r3
 8013f78:	b298      	uxth	r0, r3
 8013f7a:	68fb      	ldr	r3, [r7, #12]
 8013f7c:	b29a      	uxth	r2, r3
 8013f7e:	88bb      	ldrh	r3, [r7, #4]
 8013f80:	4413      	add	r3, r2
 8013f82:	b299      	uxth	r1, r3
 8013f84:	693b      	ldr	r3, [r7, #16]
 8013f86:	b29b      	uxth	r3, r3
 8013f88:	005b      	lsls	r3, r3, #1
 8013f8a:	b29b      	uxth	r3, r3
 8013f8c:	461a      	mov	r2, r3
 8013f8e:	f7ff fda1 	bl	8013ad4 <BSP_LCD_DrawHLine>
    }
    if (d < 0)
 8013f92:	697b      	ldr	r3, [r7, #20]
 8013f94:	2b00      	cmp	r3, #0
 8013f96:	da06      	bge.n	8013fa6 <BSP_LCD_FillCircle+0xe6>
    {
      d += (curx << 2) + 6;
 8013f98:	693b      	ldr	r3, [r7, #16]
 8013f9a:	009a      	lsls	r2, r3, #2
 8013f9c:	697b      	ldr	r3, [r7, #20]
 8013f9e:	4413      	add	r3, r2
 8013fa0:	3306      	adds	r3, #6
 8013fa2:	617b      	str	r3, [r7, #20]
 8013fa4:	e00a      	b.n	8013fbc <BSP_LCD_FillCircle+0xfc>
    }
    else
    {
      d += ((curx - cury) << 2) + 10;
 8013fa6:	693a      	ldr	r2, [r7, #16]
 8013fa8:	68fb      	ldr	r3, [r7, #12]
 8013faa:	1ad3      	subs	r3, r2, r3
 8013fac:	009a      	lsls	r2, r3, #2
 8013fae:	697b      	ldr	r3, [r7, #20]
 8013fb0:	4413      	add	r3, r2
 8013fb2:	330a      	adds	r3, #10
 8013fb4:	617b      	str	r3, [r7, #20]
      cury--;
 8013fb6:	68fb      	ldr	r3, [r7, #12]
 8013fb8:	3b01      	subs	r3, #1
 8013fba:	60fb      	str	r3, [r7, #12]
    }
    curx++;
 8013fbc:	693b      	ldr	r3, [r7, #16]
 8013fbe:	3301      	adds	r3, #1
 8013fc0:	613b      	str	r3, [r7, #16]
  while (curx <= cury)
 8013fc2:	693a      	ldr	r2, [r7, #16]
 8013fc4:	68fb      	ldr	r3, [r7, #12]
 8013fc6:	429a      	cmp	r2, r3
 8013fc8:	d999      	bls.n	8013efe <BSP_LCD_FillCircle+0x3e>
  }

  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8013fca:	4b0b      	ldr	r3, [pc, #44]	@ (8013ff8 <BSP_LCD_FillCircle+0x138>)
 8013fcc:	681a      	ldr	r2, [r3, #0]
 8013fce:	490b      	ldr	r1, [pc, #44]	@ (8013ffc <BSP_LCD_FillCircle+0x13c>)
 8013fd0:	4613      	mov	r3, r2
 8013fd2:	005b      	lsls	r3, r3, #1
 8013fd4:	4413      	add	r3, r2
 8013fd6:	009b      	lsls	r3, r3, #2
 8013fd8:	440b      	add	r3, r1
 8013fda:	681b      	ldr	r3, [r3, #0]
 8013fdc:	4618      	mov	r0, r3
 8013fde:	f7ff fc03 	bl	80137e8 <BSP_LCD_SetTextColor>
  BSP_LCD_DrawCircle(Xpos, Ypos, Radius);
 8013fe2:	887a      	ldrh	r2, [r7, #2]
 8013fe4:	88b9      	ldrh	r1, [r7, #4]
 8013fe6:	88fb      	ldrh	r3, [r7, #6]
 8013fe8:	4618      	mov	r0, r3
 8013fea:	f7ff fe25 	bl	8013c38 <BSP_LCD_DrawCircle>
}
 8013fee:	bf00      	nop
 8013ff0:	3718      	adds	r7, #24
 8013ff2:	46bd      	mov	sp, r7
 8013ff4:	bd80      	pop	{r7, pc}
 8013ff6:	bf00      	nop
 8013ff8:	20001c08 	.word	0x20001c08
 8013ffc:	20001c0c 	.word	0x20001c0c

08014000 <BSP_LCD_DisplayOn>:

/**
  * @brief  Enables the Display.
  */
void BSP_LCD_DisplayOn(void)
{
 8014000:	b580      	push	{r7, lr}
 8014002:	af00      	add	r7, sp, #0
  if (LcdDrv->DisplayOn != NULL)
 8014004:	4b05      	ldr	r3, [pc, #20]	@ (801401c <BSP_LCD_DisplayOn+0x1c>)
 8014006:	681b      	ldr	r3, [r3, #0]
 8014008:	689b      	ldr	r3, [r3, #8]
 801400a:	2b00      	cmp	r3, #0
 801400c:	d003      	beq.n	8014016 <BSP_LCD_DisplayOn+0x16>
  {
    LcdDrv->DisplayOn();
 801400e:	4b03      	ldr	r3, [pc, #12]	@ (801401c <BSP_LCD_DisplayOn+0x1c>)
 8014010:	681b      	ldr	r3, [r3, #0]
 8014012:	689b      	ldr	r3, [r3, #8]
 8014014:	4798      	blx	r3
  }
}
 8014016:	bf00      	nop
 8014018:	bd80      	pop	{r7, pc}
 801401a:	bf00      	nop
 801401c:	20001c24 	.word	0x20001c24

08014020 <BSP_LCD_MspInit>:

/**
  * @brief  Initializes the LTDC MSP.
  */
__weak void BSP_LCD_MspInit(void)
{
 8014020:	b580      	push	{r7, lr}
 8014022:	b08e      	sub	sp, #56	@ 0x38
 8014024:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  /* Enable the LTDC and DMA2D Clock */
  __HAL_RCC_LTDC_CLK_ENABLE();
 8014026:	2300      	movs	r3, #0
 8014028:	623b      	str	r3, [r7, #32]
 801402a:	4b61      	ldr	r3, [pc, #388]	@ (80141b0 <BSP_LCD_MspInit+0x190>)
 801402c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801402e:	4a60      	ldr	r2, [pc, #384]	@ (80141b0 <BSP_LCD_MspInit+0x190>)
 8014030:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8014034:	6453      	str	r3, [r2, #68]	@ 0x44
 8014036:	4b5e      	ldr	r3, [pc, #376]	@ (80141b0 <BSP_LCD_MspInit+0x190>)
 8014038:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801403a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 801403e:	623b      	str	r3, [r7, #32]
 8014040:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_DMA2D_CLK_ENABLE();
 8014042:	2300      	movs	r3, #0
 8014044:	61fb      	str	r3, [r7, #28]
 8014046:	4b5a      	ldr	r3, [pc, #360]	@ (80141b0 <BSP_LCD_MspInit+0x190>)
 8014048:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801404a:	4a59      	ldr	r2, [pc, #356]	@ (80141b0 <BSP_LCD_MspInit+0x190>)
 801404c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8014050:	6313      	str	r3, [r2, #48]	@ 0x30
 8014052:	4b57      	ldr	r3, [pc, #348]	@ (80141b0 <BSP_LCD_MspInit+0x190>)
 8014054:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8014056:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 801405a:	61fb      	str	r3, [r7, #28]
 801405c:	69fb      	ldr	r3, [r7, #28]

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 801405e:	2300      	movs	r3, #0
 8014060:	61bb      	str	r3, [r7, #24]
 8014062:	4b53      	ldr	r3, [pc, #332]	@ (80141b0 <BSP_LCD_MspInit+0x190>)
 8014064:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8014066:	4a52      	ldr	r2, [pc, #328]	@ (80141b0 <BSP_LCD_MspInit+0x190>)
 8014068:	f043 0301 	orr.w	r3, r3, #1
 801406c:	6313      	str	r3, [r2, #48]	@ 0x30
 801406e:	4b50      	ldr	r3, [pc, #320]	@ (80141b0 <BSP_LCD_MspInit+0x190>)
 8014070:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8014072:	f003 0301 	and.w	r3, r3, #1
 8014076:	61bb      	str	r3, [r7, #24]
 8014078:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 801407a:	2300      	movs	r3, #0
 801407c:	617b      	str	r3, [r7, #20]
 801407e:	4b4c      	ldr	r3, [pc, #304]	@ (80141b0 <BSP_LCD_MspInit+0x190>)
 8014080:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8014082:	4a4b      	ldr	r2, [pc, #300]	@ (80141b0 <BSP_LCD_MspInit+0x190>)
 8014084:	f043 0302 	orr.w	r3, r3, #2
 8014088:	6313      	str	r3, [r2, #48]	@ 0x30
 801408a:	4b49      	ldr	r3, [pc, #292]	@ (80141b0 <BSP_LCD_MspInit+0x190>)
 801408c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801408e:	f003 0302 	and.w	r3, r3, #2
 8014092:	617b      	str	r3, [r7, #20]
 8014094:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8014096:	2300      	movs	r3, #0
 8014098:	613b      	str	r3, [r7, #16]
 801409a:	4b45      	ldr	r3, [pc, #276]	@ (80141b0 <BSP_LCD_MspInit+0x190>)
 801409c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801409e:	4a44      	ldr	r2, [pc, #272]	@ (80141b0 <BSP_LCD_MspInit+0x190>)
 80140a0:	f043 0304 	orr.w	r3, r3, #4
 80140a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80140a6:	4b42      	ldr	r3, [pc, #264]	@ (80141b0 <BSP_LCD_MspInit+0x190>)
 80140a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80140aa:	f003 0304 	and.w	r3, r3, #4
 80140ae:	613b      	str	r3, [r7, #16]
 80140b0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80140b2:	2300      	movs	r3, #0
 80140b4:	60fb      	str	r3, [r7, #12]
 80140b6:	4b3e      	ldr	r3, [pc, #248]	@ (80141b0 <BSP_LCD_MspInit+0x190>)
 80140b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80140ba:	4a3d      	ldr	r2, [pc, #244]	@ (80141b0 <BSP_LCD_MspInit+0x190>)
 80140bc:	f043 0308 	orr.w	r3, r3, #8
 80140c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80140c2:	4b3b      	ldr	r3, [pc, #236]	@ (80141b0 <BSP_LCD_MspInit+0x190>)
 80140c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80140c6:	f003 0308 	and.w	r3, r3, #8
 80140ca:	60fb      	str	r3, [r7, #12]
 80140cc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80140ce:	2300      	movs	r3, #0
 80140d0:	60bb      	str	r3, [r7, #8]
 80140d2:	4b37      	ldr	r3, [pc, #220]	@ (80141b0 <BSP_LCD_MspInit+0x190>)
 80140d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80140d6:	4a36      	ldr	r2, [pc, #216]	@ (80141b0 <BSP_LCD_MspInit+0x190>)
 80140d8:	f043 0320 	orr.w	r3, r3, #32
 80140dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80140de:	4b34      	ldr	r3, [pc, #208]	@ (80141b0 <BSP_LCD_MspInit+0x190>)
 80140e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80140e2:	f003 0320 	and.w	r3, r3, #32
 80140e6:	60bb      	str	r3, [r7, #8]
 80140e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80140ea:	2300      	movs	r3, #0
 80140ec:	607b      	str	r3, [r7, #4]
 80140ee:	4b30      	ldr	r3, [pc, #192]	@ (80141b0 <BSP_LCD_MspInit+0x190>)
 80140f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80140f2:	4a2f      	ldr	r2, [pc, #188]	@ (80141b0 <BSP_LCD_MspInit+0x190>)
 80140f4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80140f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80140fa:	4b2d      	ldr	r3, [pc, #180]	@ (80141b0 <BSP_LCD_MspInit+0x190>)
 80140fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80140fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8014102:	607b      	str	r3, [r7, #4]
 8014104:	687b      	ldr	r3, [r7, #4]
            |  LCD_TFT CLK   <-> PG.07  | LCD_TFT DE   <->  PF.10 |
             -----------------------------------------------------
  */

  /* GPIOA configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_6 |
 8014106:	f641 0358 	movw	r3, #6232	@ 0x1858
 801410a:	627b      	str	r3, [r7, #36]	@ 0x24
                           GPIO_PIN_11 | GPIO_PIN_12;
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 801410c:	2302      	movs	r3, #2
 801410e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 8014110:	2300      	movs	r3, #0
 8014112:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8014114:	2302      	movs	r3, #2
 8014116:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStructure.Alternate = GPIO_AF14_LTDC;
 8014118:	230e      	movs	r3, #14
 801411a:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 801411c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8014120:	4619      	mov	r1, r3
 8014122:	4824      	ldr	r0, [pc, #144]	@ (80141b4 <BSP_LCD_MspInit+0x194>)
 8014124:	f001 fade 	bl	80156e4 <HAL_GPIO_Init>

  /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_8 | \
 8014128:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 801412c:	627b      	str	r3, [r7, #36]	@ 0x24
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 801412e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8014132:	4619      	mov	r1, r3
 8014134:	4820      	ldr	r0, [pc, #128]	@ (80141b8 <BSP_LCD_MspInit+0x198>)
 8014136:	f001 fad5 	bl	80156e4 <HAL_GPIO_Init>

  /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_10;
 801413a:	f44f 6398 	mov.w	r3, #1216	@ 0x4c0
 801413e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 8014140:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8014144:	4619      	mov	r1, r3
 8014146:	481d      	ldr	r0, [pc, #116]	@ (80141bc <BSP_LCD_MspInit+0x19c>)
 8014148:	f001 facc 	bl	80156e4 <HAL_GPIO_Init>

  /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_6;
 801414c:	2348      	movs	r3, #72	@ 0x48
 801414e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 8014150:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8014154:	4619      	mov	r1, r3
 8014156:	481a      	ldr	r0, [pc, #104]	@ (80141c0 <BSP_LCD_MspInit+0x1a0>)
 8014158:	f001 fac4 	bl	80156e4 <HAL_GPIO_Init>

  /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10;
 801415c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8014160:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 8014162:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8014166:	4619      	mov	r1, r3
 8014168:	4816      	ldr	r0, [pc, #88]	@ (80141c4 <BSP_LCD_MspInit+0x1a4>)
 801416a:	f001 fabb 	bl	80156e4 <HAL_GPIO_Init>

  /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | \
 801416e:	f44f 630c 	mov.w	r3, #2240	@ 0x8c0
 8014172:	627b      	str	r3, [r7, #36]	@ 0x24
                           GPIO_PIN_11;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8014174:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8014178:	4619      	mov	r1, r3
 801417a:	4813      	ldr	r0, [pc, #76]	@ (80141c8 <BSP_LCD_MspInit+0x1a8>)
 801417c:	f001 fab2 	bl	80156e4 <HAL_GPIO_Init>

  /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 8014180:	2303      	movs	r3, #3
 8014182:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStructure.Alternate = GPIO_AF9_LTDC;
 8014184:	2309      	movs	r3, #9
 8014186:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8014188:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 801418c:	4619      	mov	r1, r3
 801418e:	480a      	ldr	r0, [pc, #40]	@ (80141b8 <BSP_LCD_MspInit+0x198>)
 8014190:	f001 faa8 	bl	80156e4 <HAL_GPIO_Init>

  /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10 | GPIO_PIN_12;
 8014194:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8014198:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 801419a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 801419e:	4619      	mov	r1, r3
 80141a0:	4809      	ldr	r0, [pc, #36]	@ (80141c8 <BSP_LCD_MspInit+0x1a8>)
 80141a2:	f001 fa9f 	bl	80156e4 <HAL_GPIO_Init>
}
 80141a6:	bf00      	nop
 80141a8:	3738      	adds	r7, #56	@ 0x38
 80141aa:	46bd      	mov	sp, r7
 80141ac:	bd80      	pop	{r7, pc}
 80141ae:	bf00      	nop
 80141b0:	40023800 	.word	0x40023800
 80141b4:	40020000 	.word	0x40020000
 80141b8:	40020400 	.word	0x40020400
 80141bc:	40020800 	.word	0x40020800
 80141c0:	40020c00 	.word	0x40020c00
 80141c4:	40021400 	.word	0x40021400
 80141c8:	40021800 	.word	0x40021800

080141cc <BSP_LCD_DrawPixel>:
  * @param  Xpos: the X position
  * @param  Ypos: the Y position
  * @param  RGB_Code: the pixel color in ARGB mode (8-8-8-8)
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
 80141cc:	b5b0      	push	{r4, r5, r7, lr}
 80141ce:	b082      	sub	sp, #8
 80141d0:	af00      	add	r7, sp, #0
 80141d2:	4603      	mov	r3, r0
 80141d4:	603a      	str	r2, [r7, #0]
 80141d6:	80fb      	strh	r3, [r7, #6]
 80141d8:	460b      	mov	r3, r1
 80141da:	80bb      	strh	r3, [r7, #4]
  /* Write data value to all SDRAM memory */
  *(__IO uint32_t *)(LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4 * (Ypos * BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 80141dc:	4b0c      	ldr	r3, [pc, #48]	@ (8014210 <BSP_LCD_DrawPixel+0x44>)
 80141de:	681b      	ldr	r3, [r3, #0]
 80141e0:	4a0c      	ldr	r2, [pc, #48]	@ (8014214 <BSP_LCD_DrawPixel+0x48>)
 80141e2:	2134      	movs	r1, #52	@ 0x34
 80141e4:	fb01 f303 	mul.w	r3, r1, r3
 80141e8:	4413      	add	r3, r2
 80141ea:	335c      	adds	r3, #92	@ 0x5c
 80141ec:	681c      	ldr	r4, [r3, #0]
 80141ee:	88bd      	ldrh	r5, [r7, #4]
 80141f0:	f7ff fa6e 	bl	80136d0 <BSP_LCD_GetXSize>
 80141f4:	4603      	mov	r3, r0
 80141f6:	fb03 f205 	mul.w	r2, r3, r5
 80141fa:	88fb      	ldrh	r3, [r7, #6]
 80141fc:	4413      	add	r3, r2
 80141fe:	009b      	lsls	r3, r3, #2
 8014200:	4423      	add	r3, r4
 8014202:	461a      	mov	r2, r3
 8014204:	683b      	ldr	r3, [r7, #0]
 8014206:	6013      	str	r3, [r2, #0]
}
 8014208:	bf00      	nop
 801420a:	3708      	adds	r7, #8
 801420c:	46bd      	mov	sp, r7
 801420e:	bdb0      	pop	{r4, r5, r7, pc}
 8014210:	20001c08 	.word	0x20001c08
 8014214:	20001af0 	.word	0x20001af0

08014218 <DrawChar>:
  * @param  Xpos: the Line where to display the character shape
  * @param  Ypos: start column address
  * @param  c: pointer to the character data
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c)
{
 8014218:	b580      	push	{r7, lr}
 801421a:	b088      	sub	sp, #32
 801421c:	af00      	add	r7, sp, #0
 801421e:	4603      	mov	r3, r0
 8014220:	603a      	str	r2, [r7, #0]
 8014222:	80fb      	strh	r3, [r7, #6]
 8014224:	460b      	mov	r3, r1
 8014226:	80bb      	strh	r3, [r7, #4]
  uint32_t i = 0, j = 0;
 8014228:	2300      	movs	r3, #0
 801422a:	61fb      	str	r3, [r7, #28]
 801422c:	2300      	movs	r3, #0
 801422e:	61bb      	str	r3, [r7, #24]
  uint16_t height, width;
  uint8_t offset;
  uint8_t *pchar;
  uint32_t line = 0;
 8014230:	2300      	movs	r3, #0
 8014232:	617b      	str	r3, [r7, #20]

  height = DrawProp[ActiveLayer].pFont->Height;
 8014234:	4b53      	ldr	r3, [pc, #332]	@ (8014384 <DrawChar+0x16c>)
 8014236:	681a      	ldr	r2, [r3, #0]
 8014238:	4953      	ldr	r1, [pc, #332]	@ (8014388 <DrawChar+0x170>)
 801423a:	4613      	mov	r3, r2
 801423c:	005b      	lsls	r3, r3, #1
 801423e:	4413      	add	r3, r2
 8014240:	009b      	lsls	r3, r3, #2
 8014242:	440b      	add	r3, r1
 8014244:	3308      	adds	r3, #8
 8014246:	681b      	ldr	r3, [r3, #0]
 8014248:	88db      	ldrh	r3, [r3, #6]
 801424a:	827b      	strh	r3, [r7, #18]
  width  = DrawProp[ActiveLayer].pFont->Width;
 801424c:	4b4d      	ldr	r3, [pc, #308]	@ (8014384 <DrawChar+0x16c>)
 801424e:	681a      	ldr	r2, [r3, #0]
 8014250:	494d      	ldr	r1, [pc, #308]	@ (8014388 <DrawChar+0x170>)
 8014252:	4613      	mov	r3, r2
 8014254:	005b      	lsls	r3, r3, #1
 8014256:	4413      	add	r3, r2
 8014258:	009b      	lsls	r3, r3, #2
 801425a:	440b      	add	r3, r1
 801425c:	3308      	adds	r3, #8
 801425e:	681b      	ldr	r3, [r3, #0]
 8014260:	889b      	ldrh	r3, [r3, #4]
 8014262:	823b      	strh	r3, [r7, #16]

  offset = 8 * ((width + 7) / 8) -  width ;
 8014264:	8a3b      	ldrh	r3, [r7, #16]
 8014266:	3307      	adds	r3, #7
 8014268:	2b00      	cmp	r3, #0
 801426a:	da00      	bge.n	801426e <DrawChar+0x56>
 801426c:	3307      	adds	r3, #7
 801426e:	10db      	asrs	r3, r3, #3
 8014270:	b2db      	uxtb	r3, r3
 8014272:	00db      	lsls	r3, r3, #3
 8014274:	b2da      	uxtb	r2, r3
 8014276:	8a3b      	ldrh	r3, [r7, #16]
 8014278:	b2db      	uxtb	r3, r3
 801427a:	1ad3      	subs	r3, r2, r3
 801427c:	73fb      	strb	r3, [r7, #15]

  for (i = 0; i < height; i++)
 801427e:	2300      	movs	r3, #0
 8014280:	61fb      	str	r3, [r7, #28]
 8014282:	e076      	b.n	8014372 <DrawChar+0x15a>
  {
    pchar = ((uint8_t *)c + (width + 7) / 8 * i);
 8014284:	8a3b      	ldrh	r3, [r7, #16]
 8014286:	3307      	adds	r3, #7
 8014288:	2b00      	cmp	r3, #0
 801428a:	da00      	bge.n	801428e <DrawChar+0x76>
 801428c:	3307      	adds	r3, #7
 801428e:	10db      	asrs	r3, r3, #3
 8014290:	461a      	mov	r2, r3
 8014292:	69fb      	ldr	r3, [r7, #28]
 8014294:	fb02 f303 	mul.w	r3, r2, r3
 8014298:	683a      	ldr	r2, [r7, #0]
 801429a:	4413      	add	r3, r2
 801429c:	60bb      	str	r3, [r7, #8]

    switch (((width + 7) / 8))
 801429e:	8a3b      	ldrh	r3, [r7, #16]
 80142a0:	3307      	adds	r3, #7
 80142a2:	2b00      	cmp	r3, #0
 80142a4:	da00      	bge.n	80142a8 <DrawChar+0x90>
 80142a6:	3307      	adds	r3, #7
 80142a8:	10db      	asrs	r3, r3, #3
 80142aa:	2b01      	cmp	r3, #1
 80142ac:	d002      	beq.n	80142b4 <DrawChar+0x9c>
 80142ae:	2b02      	cmp	r3, #2
 80142b0:	d004      	beq.n	80142bc <DrawChar+0xa4>
 80142b2:	e00c      	b.n	80142ce <DrawChar+0xb6>
    {
      case 1:
        line =  pchar[0];
 80142b4:	68bb      	ldr	r3, [r7, #8]
 80142b6:	781b      	ldrb	r3, [r3, #0]
 80142b8:	617b      	str	r3, [r7, #20]
        break;
 80142ba:	e016      	b.n	80142ea <DrawChar+0xd2>

      case 2:
        line = (pchar[0] << 8) | pchar[1];
 80142bc:	68bb      	ldr	r3, [r7, #8]
 80142be:	781b      	ldrb	r3, [r3, #0]
 80142c0:	021b      	lsls	r3, r3, #8
 80142c2:	68ba      	ldr	r2, [r7, #8]
 80142c4:	3201      	adds	r2, #1
 80142c6:	7812      	ldrb	r2, [r2, #0]
 80142c8:	4313      	orrs	r3, r2
 80142ca:	617b      	str	r3, [r7, #20]
        break;
 80142cc:	e00d      	b.n	80142ea <DrawChar+0xd2>

      case 3:
      default:
        line = (pchar[0] << 16) | (pchar[1] << 8) | pchar[2];
 80142ce:	68bb      	ldr	r3, [r7, #8]
 80142d0:	781b      	ldrb	r3, [r3, #0]
 80142d2:	041a      	lsls	r2, r3, #16
 80142d4:	68bb      	ldr	r3, [r7, #8]
 80142d6:	3301      	adds	r3, #1
 80142d8:	781b      	ldrb	r3, [r3, #0]
 80142da:	021b      	lsls	r3, r3, #8
 80142dc:	4313      	orrs	r3, r2
 80142de:	68ba      	ldr	r2, [r7, #8]
 80142e0:	3202      	adds	r2, #2
 80142e2:	7812      	ldrb	r2, [r2, #0]
 80142e4:	4313      	orrs	r3, r2
 80142e6:	617b      	str	r3, [r7, #20]
        break;
 80142e8:	bf00      	nop
    }

    for (j = 0; j < width; j++)
 80142ea:	2300      	movs	r3, #0
 80142ec:	61bb      	str	r3, [r7, #24]
 80142ee:	e036      	b.n	801435e <DrawChar+0x146>
    {
      if (line & (1 << (width - j + offset - 1)))
 80142f0:	8a3a      	ldrh	r2, [r7, #16]
 80142f2:	69bb      	ldr	r3, [r7, #24]
 80142f4:	1ad2      	subs	r2, r2, r3
 80142f6:	7bfb      	ldrb	r3, [r7, #15]
 80142f8:	4413      	add	r3, r2
 80142fa:	3b01      	subs	r3, #1
 80142fc:	2201      	movs	r2, #1
 80142fe:	fa02 f303 	lsl.w	r3, r2, r3
 8014302:	461a      	mov	r2, r3
 8014304:	697b      	ldr	r3, [r7, #20]
 8014306:	4013      	ands	r3, r2
 8014308:	2b00      	cmp	r3, #0
 801430a:	d012      	beq.n	8014332 <DrawChar+0x11a>
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 801430c:	69bb      	ldr	r3, [r7, #24]
 801430e:	b29a      	uxth	r2, r3
 8014310:	88fb      	ldrh	r3, [r7, #6]
 8014312:	4413      	add	r3, r2
 8014314:	b298      	uxth	r0, r3
 8014316:	4b1b      	ldr	r3, [pc, #108]	@ (8014384 <DrawChar+0x16c>)
 8014318:	681a      	ldr	r2, [r3, #0]
 801431a:	491b      	ldr	r1, [pc, #108]	@ (8014388 <DrawChar+0x170>)
 801431c:	4613      	mov	r3, r2
 801431e:	005b      	lsls	r3, r3, #1
 8014320:	4413      	add	r3, r2
 8014322:	009b      	lsls	r3, r3, #2
 8014324:	440b      	add	r3, r1
 8014326:	681a      	ldr	r2, [r3, #0]
 8014328:	88bb      	ldrh	r3, [r7, #4]
 801432a:	4619      	mov	r1, r3
 801432c:	f7ff ff4e 	bl	80141cc <BSP_LCD_DrawPixel>
 8014330:	e012      	b.n	8014358 <DrawChar+0x140>
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 8014332:	69bb      	ldr	r3, [r7, #24]
 8014334:	b29a      	uxth	r2, r3
 8014336:	88fb      	ldrh	r3, [r7, #6]
 8014338:	4413      	add	r3, r2
 801433a:	b298      	uxth	r0, r3
 801433c:	4b11      	ldr	r3, [pc, #68]	@ (8014384 <DrawChar+0x16c>)
 801433e:	681a      	ldr	r2, [r3, #0]
 8014340:	4911      	ldr	r1, [pc, #68]	@ (8014388 <DrawChar+0x170>)
 8014342:	4613      	mov	r3, r2
 8014344:	005b      	lsls	r3, r3, #1
 8014346:	4413      	add	r3, r2
 8014348:	009b      	lsls	r3, r3, #2
 801434a:	440b      	add	r3, r1
 801434c:	3304      	adds	r3, #4
 801434e:	681a      	ldr	r2, [r3, #0]
 8014350:	88bb      	ldrh	r3, [r7, #4]
 8014352:	4619      	mov	r1, r3
 8014354:	f7ff ff3a 	bl	80141cc <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 8014358:	69bb      	ldr	r3, [r7, #24]
 801435a:	3301      	adds	r3, #1
 801435c:	61bb      	str	r3, [r7, #24]
 801435e:	8a3b      	ldrh	r3, [r7, #16]
 8014360:	69ba      	ldr	r2, [r7, #24]
 8014362:	429a      	cmp	r2, r3
 8014364:	d3c4      	bcc.n	80142f0 <DrawChar+0xd8>
      }
    }
    Ypos++;
 8014366:	88bb      	ldrh	r3, [r7, #4]
 8014368:	3301      	adds	r3, #1
 801436a:	80bb      	strh	r3, [r7, #4]
  for (i = 0; i < height; i++)
 801436c:	69fb      	ldr	r3, [r7, #28]
 801436e:	3301      	adds	r3, #1
 8014370:	61fb      	str	r3, [r7, #28]
 8014372:	8a7b      	ldrh	r3, [r7, #18]
 8014374:	69fa      	ldr	r2, [r7, #28]
 8014376:	429a      	cmp	r2, r3
 8014378:	d384      	bcc.n	8014284 <DrawChar+0x6c>
  }
}
 801437a:	bf00      	nop
 801437c:	bf00      	nop
 801437e:	3720      	adds	r7, #32
 8014380:	46bd      	mov	sp, r7
 8014382:	bd80      	pop	{r7, pc}
 8014384:	20001c08 	.word	0x20001c08
 8014388:	20001c0c 	.word	0x20001c0c

0801438c <FillBuffer>:
  * @param  OffLine: offset
  * @param  ColorIndex: color Index
  */
static void FillBuffer(uint32_t LayerIndex, void *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine,
                       uint32_t ColorIndex)
{
 801438c:	b580      	push	{r7, lr}
 801438e:	b086      	sub	sp, #24
 8014390:	af02      	add	r7, sp, #8
 8014392:	60f8      	str	r0, [r7, #12]
 8014394:	60b9      	str	r1, [r7, #8]
 8014396:	607a      	str	r2, [r7, #4]
 8014398:	603b      	str	r3, [r7, #0]

  /* Register to memory mode with ARGB8888 as color Mode */
  Dma2dHandler.Init.Mode         = DMA2D_R2M;
 801439a:	4b16      	ldr	r3, [pc, #88]	@ (80143f4 <FillBuffer+0x68>)
 801439c:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80143a0:	605a      	str	r2, [r3, #4]
  Dma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 80143a2:	4b14      	ldr	r3, [pc, #80]	@ (80143f4 <FillBuffer+0x68>)
 80143a4:	2200      	movs	r2, #0
 80143a6:	609a      	str	r2, [r3, #8]
  Dma2dHandler.Init.OutputOffset = OffLine;
 80143a8:	4a12      	ldr	r2, [pc, #72]	@ (80143f4 <FillBuffer+0x68>)
 80143aa:	69bb      	ldr	r3, [r7, #24]
 80143ac:	60d3      	str	r3, [r2, #12]

  Dma2dHandler.Instance = DMA2D;
 80143ae:	4b11      	ldr	r3, [pc, #68]	@ (80143f4 <FillBuffer+0x68>)
 80143b0:	4a11      	ldr	r2, [pc, #68]	@ (80143f8 <FillBuffer+0x6c>)
 80143b2:	601a      	str	r2, [r3, #0]

  /* DMA2D Initialization */
  if (HAL_DMA2D_Init(&Dma2dHandler) == HAL_OK)
 80143b4:	480f      	ldr	r0, [pc, #60]	@ (80143f4 <FillBuffer+0x68>)
 80143b6:	f000 fdf9 	bl	8014fac <HAL_DMA2D_Init>
 80143ba:	4603      	mov	r3, r0
 80143bc:	2b00      	cmp	r3, #0
 80143be:	d115      	bne.n	80143ec <FillBuffer+0x60>
  {
    if (HAL_DMA2D_ConfigLayer(&Dma2dHandler, LayerIndex) == HAL_OK)
 80143c0:	68f9      	ldr	r1, [r7, #12]
 80143c2:	480c      	ldr	r0, [pc, #48]	@ (80143f4 <FillBuffer+0x68>)
 80143c4:	f001 f860 	bl	8015488 <HAL_DMA2D_ConfigLayer>
 80143c8:	4603      	mov	r3, r0
 80143ca:	2b00      	cmp	r3, #0
 80143cc:	d10e      	bne.n	80143ec <FillBuffer+0x60>
    {
      if (HAL_DMA2D_Start(&Dma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 80143ce:	68ba      	ldr	r2, [r7, #8]
 80143d0:	683b      	ldr	r3, [r7, #0]
 80143d2:	9300      	str	r3, [sp, #0]
 80143d4:	687b      	ldr	r3, [r7, #4]
 80143d6:	69f9      	ldr	r1, [r7, #28]
 80143d8:	4806      	ldr	r0, [pc, #24]	@ (80143f4 <FillBuffer+0x68>)
 80143da:	f000 fe30 	bl	801503e <HAL_DMA2D_Start>
 80143de:	4603      	mov	r3, r0
 80143e0:	2b00      	cmp	r3, #0
 80143e2:	d103      	bne.n	80143ec <FillBuffer+0x60>
      {
        /* Polling For DMA transfer */
        HAL_DMA2D_PollForTransfer(&Dma2dHandler, 10);
 80143e4:	210a      	movs	r1, #10
 80143e6:	4803      	ldr	r0, [pc, #12]	@ (80143f4 <FillBuffer+0x68>)
 80143e8:	f000 fe54 	bl	8015094 <HAL_DMA2D_PollForTransfer>
      }
    }
  }
}
 80143ec:	bf00      	nop
 80143ee:	3710      	adds	r7, #16
 80143f0:	46bd      	mov	sp, r7
 80143f2:	bd80      	pop	{r7, pc}
 80143f4:	20001b98 	.word	0x20001b98
 80143f8:	4002b000 	.word	0x4002b000

080143fc <BSP_SDRAM_Init>:

/**
  * @brief  Initializes the SDRAM device.
  */
uint8_t BSP_SDRAM_Init(void)
{
 80143fc:	b580      	push	{r7, lr}
 80143fe:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;

  /* SDRAM device configuration */
  SdramHandle.Instance = FMC_SDRAM_DEVICE;
 8014400:	4b29      	ldr	r3, [pc, #164]	@ (80144a8 <BSP_SDRAM_Init+0xac>)
 8014402:	4a2a      	ldr	r2, [pc, #168]	@ (80144ac <BSP_SDRAM_Init+0xb0>)
 8014404:	601a      	str	r2, [r3, #0]

  /* FMC Configuration -------------------------------------------------------*/
  /* FMC SDRAM Bank configuration */
  /* Timing configuration for 90 Mhz of SD clock frequency (180Mhz/2) */
  /* TMRD: 2 Clock cycles */
  Timing.LoadToActiveDelay    = 2;
 8014406:	4b2a      	ldr	r3, [pc, #168]	@ (80144b0 <BSP_SDRAM_Init+0xb4>)
 8014408:	2202      	movs	r2, #2
 801440a:	601a      	str	r2, [r3, #0]
  /* TXSR: min=70ns (7x11.11ns) */
  Timing.ExitSelfRefreshDelay = 7;
 801440c:	4b28      	ldr	r3, [pc, #160]	@ (80144b0 <BSP_SDRAM_Init+0xb4>)
 801440e:	2207      	movs	r2, #7
 8014410:	605a      	str	r2, [r3, #4]
  /* TRAS: min=42ns (4x11.11ns) max=120k (ns) */
  Timing.SelfRefreshTime      = 4;
 8014412:	4b27      	ldr	r3, [pc, #156]	@ (80144b0 <BSP_SDRAM_Init+0xb4>)
 8014414:	2204      	movs	r2, #4
 8014416:	609a      	str	r2, [r3, #8]
  /* TRC:  min=70 (7x11.11ns) */
  Timing.RowCycleDelay        = 7;
 8014418:	4b25      	ldr	r3, [pc, #148]	@ (80144b0 <BSP_SDRAM_Init+0xb4>)
 801441a:	2207      	movs	r2, #7
 801441c:	60da      	str	r2, [r3, #12]
  /* TWR:  min=1+ 7ns (1+1x11.11ns) */
  Timing.WriteRecoveryTime    = 2;
 801441e:	4b24      	ldr	r3, [pc, #144]	@ (80144b0 <BSP_SDRAM_Init+0xb4>)
 8014420:	2202      	movs	r2, #2
 8014422:	611a      	str	r2, [r3, #16]
  /* TRP:  20ns => 2x11.11ns*/
  Timing.RPDelay              = 2;
 8014424:	4b22      	ldr	r3, [pc, #136]	@ (80144b0 <BSP_SDRAM_Init+0xb4>)
 8014426:	2202      	movs	r2, #2
 8014428:	615a      	str	r2, [r3, #20]
  /* TRCD: 20ns => 2x11.11ns */
  Timing.RCDDelay             = 2;
 801442a:	4b21      	ldr	r3, [pc, #132]	@ (80144b0 <BSP_SDRAM_Init+0xb4>)
 801442c:	2202      	movs	r2, #2
 801442e:	619a      	str	r2, [r3, #24]

  /* FMC SDRAM control configuration */
  SdramHandle.Init.SDBank             = FMC_SDRAM_BANK2;
 8014430:	4b1d      	ldr	r3, [pc, #116]	@ (80144a8 <BSP_SDRAM_Init+0xac>)
 8014432:	2201      	movs	r2, #1
 8014434:	605a      	str	r2, [r3, #4]
  /* Row addressing: [7:0] */
  SdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8014436:	4b1c      	ldr	r3, [pc, #112]	@ (80144a8 <BSP_SDRAM_Init+0xac>)
 8014438:	2200      	movs	r2, #0
 801443a:	609a      	str	r2, [r3, #8]
  /* Column addressing: [11:0] */
  SdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 801443c:	4b1a      	ldr	r3, [pc, #104]	@ (80144a8 <BSP_SDRAM_Init+0xac>)
 801443e:	2204      	movs	r2, #4
 8014440:	60da      	str	r2, [r3, #12]
  SdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 8014442:	4b19      	ldr	r3, [pc, #100]	@ (80144a8 <BSP_SDRAM_Init+0xac>)
 8014444:	2210      	movs	r2, #16
 8014446:	611a      	str	r2, [r3, #16]
  SdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8014448:	4b17      	ldr	r3, [pc, #92]	@ (80144a8 <BSP_SDRAM_Init+0xac>)
 801444a:	2240      	movs	r2, #64	@ 0x40
 801444c:	615a      	str	r2, [r3, #20]
  SdramHandle.Init.CASLatency         = SDRAM_CAS_LATENCY;
 801444e:	4b16      	ldr	r3, [pc, #88]	@ (80144a8 <BSP_SDRAM_Init+0xac>)
 8014450:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8014454:	619a      	str	r2, [r3, #24]
  SdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8014456:	4b14      	ldr	r3, [pc, #80]	@ (80144a8 <BSP_SDRAM_Init+0xac>)
 8014458:	2200      	movs	r2, #0
 801445a:	61da      	str	r2, [r3, #28]
  SdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 801445c:	4b12      	ldr	r3, [pc, #72]	@ (80144a8 <BSP_SDRAM_Init+0xac>)
 801445e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8014462:	621a      	str	r2, [r3, #32]
  SdramHandle.Init.ReadBurst          = SDRAM_READBURST;
 8014464:	4b10      	ldr	r3, [pc, #64]	@ (80144a8 <BSP_SDRAM_Init+0xac>)
 8014466:	2200      	movs	r2, #0
 8014468:	625a      	str	r2, [r3, #36]	@ 0x24
  SdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_1;
 801446a:	4b0f      	ldr	r3, [pc, #60]	@ (80144a8 <BSP_SDRAM_Init+0xac>)
 801446c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8014470:	629a      	str	r2, [r3, #40]	@ 0x28

  /* SDRAM controller initialization */
  /* __weak function can be surcharged by the application code */
  BSP_SDRAM_MspInit(&SdramHandle, (void *)NULL);
 8014472:	2100      	movs	r1, #0
 8014474:	480c      	ldr	r0, [pc, #48]	@ (80144a8 <BSP_SDRAM_Init+0xac>)
 8014476:	f000 f87f 	bl	8014578 <BSP_SDRAM_MspInit>
  if (HAL_SDRAM_Init(&SdramHandle, &Timing) != HAL_OK)
 801447a:	490d      	ldr	r1, [pc, #52]	@ (80144b0 <BSP_SDRAM_Init+0xb4>)
 801447c:	480a      	ldr	r0, [pc, #40]	@ (80144a8 <BSP_SDRAM_Init+0xac>)
 801447e:	f005 fcd5 	bl	8019e2c <HAL_SDRAM_Init>
 8014482:	4603      	mov	r3, r0
 8014484:	2b00      	cmp	r3, #0
 8014486:	d003      	beq.n	8014490 <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 8014488:	4b0a      	ldr	r3, [pc, #40]	@ (80144b4 <BSP_SDRAM_Init+0xb8>)
 801448a:	2201      	movs	r2, #1
 801448c:	701a      	strb	r2, [r3, #0]
 801448e:	e002      	b.n	8014496 <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 8014490:	4b08      	ldr	r3, [pc, #32]	@ (80144b4 <BSP_SDRAM_Init+0xb8>)
 8014492:	2200      	movs	r2, #0
 8014494:	701a      	strb	r2, [r3, #0]
  }

  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 8014496:	f240 506a 	movw	r0, #1386	@ 0x56a
 801449a:	f000 f80d 	bl	80144b8 <BSP_SDRAM_Initialization_sequence>

  return sdramstatus;
 801449e:	4b05      	ldr	r3, [pc, #20]	@ (80144b4 <BSP_SDRAM_Init+0xb8>)
 80144a0:	781b      	ldrb	r3, [r3, #0]
}
 80144a2:	4618      	mov	r0, r3
 80144a4:	bd80      	pop	{r7, pc}
 80144a6:	bf00      	nop
 80144a8:	20001c28 	.word	0x20001c28
 80144ac:	a0000140 	.word	0xa0000140
 80144b0:	20001c5c 	.word	0x20001c5c
 80144b4:	20000080 	.word	0x20000080

080144b8 <BSP_SDRAM_Initialization_sequence>:
/**
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 80144b8:	b580      	push	{r7, lr}
 80144ba:	b084      	sub	sp, #16
 80144bc:	af00      	add	r7, sp, #0
 80144be:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd = 0;
 80144c0:	2300      	movs	r3, #0
 80144c2:	60fb      	str	r3, [r7, #12]

  /* Step 1:  Configure a clock configuration enable command */
  Command.CommandMode             = FMC_SDRAM_CMD_CLK_ENABLE;
 80144c4:	4b2a      	ldr	r3, [pc, #168]	@ (8014570 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80144c6:	2201      	movs	r2, #1
 80144c8:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 80144ca:	4b29      	ldr	r3, [pc, #164]	@ (8014570 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80144cc:	2208      	movs	r2, #8
 80144ce:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 80144d0:	4b27      	ldr	r3, [pc, #156]	@ (8014570 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80144d2:	2201      	movs	r2, #1
 80144d4:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 80144d6:	4b26      	ldr	r3, [pc, #152]	@ (8014570 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80144d8:	2200      	movs	r2, #0
 80144da:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 80144dc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80144e0:	4923      	ldr	r1, [pc, #140]	@ (8014570 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80144e2:	4824      	ldr	r0, [pc, #144]	@ (8014574 <BSP_SDRAM_Initialization_sequence+0xbc>)
 80144e4:	f005 fcd6 	bl	8019e94 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 80144e8:	2001      	movs	r0, #1
 80144ea:	f000 fa7f 	bl	80149ec <HAL_Delay>

  /* Step 3: Configure a PALL (precharge all) command */
  Command.CommandMode             = FMC_SDRAM_CMD_PALL;
 80144ee:	4b20      	ldr	r3, [pc, #128]	@ (8014570 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80144f0:	2202      	movs	r2, #2
 80144f2:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 80144f4:	4b1e      	ldr	r3, [pc, #120]	@ (8014570 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80144f6:	2208      	movs	r2, #8
 80144f8:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 80144fa:	4b1d      	ldr	r3, [pc, #116]	@ (8014570 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80144fc:	2201      	movs	r2, #1
 80144fe:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 8014500:	4b1b      	ldr	r3, [pc, #108]	@ (8014570 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8014502:	2200      	movs	r2, #0
 8014504:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8014506:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801450a:	4919      	ldr	r1, [pc, #100]	@ (8014570 <BSP_SDRAM_Initialization_sequence+0xb8>)
 801450c:	4819      	ldr	r0, [pc, #100]	@ (8014574 <BSP_SDRAM_Initialization_sequence+0xbc>)
 801450e:	f005 fcc1 	bl	8019e94 <HAL_SDRAM_SendCommand>

  /* Step 4: Configure an Auto Refresh command */
  Command.CommandMode             = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8014512:	4b17      	ldr	r3, [pc, #92]	@ (8014570 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8014514:	2203      	movs	r2, #3
 8014516:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8014518:	4b15      	ldr	r3, [pc, #84]	@ (8014570 <BSP_SDRAM_Initialization_sequence+0xb8>)
 801451a:	2208      	movs	r2, #8
 801451c:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 4;
 801451e:	4b14      	ldr	r3, [pc, #80]	@ (8014570 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8014520:	2204      	movs	r2, #4
 8014522:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 8014524:	4b12      	ldr	r3, [pc, #72]	@ (8014570 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8014526:	2200      	movs	r2, #0
 8014528:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 801452a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801452e:	4910      	ldr	r1, [pc, #64]	@ (8014570 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8014530:	4810      	ldr	r0, [pc, #64]	@ (8014574 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8014532:	f005 fcaf 	bl	8019e94 <HAL_SDRAM_SendCommand>

  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |
 8014536:	f44f 730c 	mov.w	r3, #560	@ 0x230
 801453a:	60fb      	str	r3, [r7, #12]
           SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |
           SDRAM_MODEREG_CAS_LATENCY_3           |
           SDRAM_MODEREG_OPERATING_MODE_STANDARD |
           SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;

  Command.CommandMode             = FMC_SDRAM_CMD_LOAD_MODE;
 801453c:	4b0c      	ldr	r3, [pc, #48]	@ (8014570 <BSP_SDRAM_Initialization_sequence+0xb8>)
 801453e:	2204      	movs	r2, #4
 8014540:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8014542:	4b0b      	ldr	r3, [pc, #44]	@ (8014570 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8014544:	2208      	movs	r2, #8
 8014546:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 8014548:	4b09      	ldr	r3, [pc, #36]	@ (8014570 <BSP_SDRAM_Initialization_sequence+0xb8>)
 801454a:	2201      	movs	r2, #1
 801454c:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = tmpmrd;
 801454e:	68fb      	ldr	r3, [r7, #12]
 8014550:	4a07      	ldr	r2, [pc, #28]	@ (8014570 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8014552:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8014554:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8014558:	4905      	ldr	r1, [pc, #20]	@ (8014570 <BSP_SDRAM_Initialization_sequence+0xb8>)
 801455a:	4806      	ldr	r0, [pc, #24]	@ (8014574 <BSP_SDRAM_Initialization_sequence+0xbc>)
 801455c:	f005 fc9a 	bl	8019e94 <HAL_SDRAM_SendCommand>

  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&SdramHandle, RefreshCount);
 8014560:	6879      	ldr	r1, [r7, #4]
 8014562:	4804      	ldr	r0, [pc, #16]	@ (8014574 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8014564:	f005 fccb 	bl	8019efe <HAL_SDRAM_ProgramRefreshRate>
}
 8014568:	bf00      	nop
 801456a:	3710      	adds	r7, #16
 801456c:	46bd      	mov	sp, r7
 801456e:	bd80      	pop	{r7, pc}
 8014570:	20001c78 	.word	0x20001c78
 8014574:	20001c28 	.word	0x20001c28

08014578 <BSP_SDRAM_MspInit>:
  * @note   This function can be surcharged by application code.
  * @param  hsdram: pointer on SDRAM handle
  * @param  Params: pointer on additional configuration parameters, can be NULL.
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{
 8014578:	b580      	push	{r7, lr}
 801457a:	b090      	sub	sp, #64	@ 0x40
 801457c:	af00      	add	r7, sp, #0
 801457e:	6078      	str	r0, [r7, #4]
 8014580:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dmaHandle;
  GPIO_InitTypeDef GPIO_InitStructure;

  if (hsdram != (SDRAM_HandleTypeDef *)NULL)
 8014582:	687b      	ldr	r3, [r7, #4]
 8014584:	2b00      	cmp	r3, #0
 8014586:	f000 80ec 	beq.w	8014762 <BSP_SDRAM_MspInit+0x1ea>
  {
    /* Enable FMC clock */
    __HAL_RCC_FMC_CLK_ENABLE();
 801458a:	2300      	movs	r3, #0
 801458c:	62bb      	str	r3, [r7, #40]	@ 0x28
 801458e:	4b77      	ldr	r3, [pc, #476]	@ (801476c <BSP_SDRAM_MspInit+0x1f4>)
 8014590:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8014592:	4a76      	ldr	r2, [pc, #472]	@ (801476c <BSP_SDRAM_MspInit+0x1f4>)
 8014594:	f043 0301 	orr.w	r3, r3, #1
 8014598:	6393      	str	r3, [r2, #56]	@ 0x38
 801459a:	4b74      	ldr	r3, [pc, #464]	@ (801476c <BSP_SDRAM_MspInit+0x1f4>)
 801459c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801459e:	f003 0301 	and.w	r3, r3, #1
 80145a2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80145a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28

    /* Enable chosen DMAx clock */
    __DMAx_CLK_ENABLE();
 80145a6:	2300      	movs	r3, #0
 80145a8:	627b      	str	r3, [r7, #36]	@ 0x24
 80145aa:	4b70      	ldr	r3, [pc, #448]	@ (801476c <BSP_SDRAM_MspInit+0x1f4>)
 80145ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80145ae:	4a6f      	ldr	r2, [pc, #444]	@ (801476c <BSP_SDRAM_MspInit+0x1f4>)
 80145b0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80145b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80145b6:	4b6d      	ldr	r3, [pc, #436]	@ (801476c <BSP_SDRAM_MspInit+0x1f4>)
 80145b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80145ba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80145be:	627b      	str	r3, [r7, #36]	@ 0x24
 80145c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

    /* Enable GPIOs clock */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80145c2:	2300      	movs	r3, #0
 80145c4:	623b      	str	r3, [r7, #32]
 80145c6:	4b69      	ldr	r3, [pc, #420]	@ (801476c <BSP_SDRAM_MspInit+0x1f4>)
 80145c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80145ca:	4a68      	ldr	r2, [pc, #416]	@ (801476c <BSP_SDRAM_MspInit+0x1f4>)
 80145cc:	f043 0302 	orr.w	r3, r3, #2
 80145d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80145d2:	4b66      	ldr	r3, [pc, #408]	@ (801476c <BSP_SDRAM_MspInit+0x1f4>)
 80145d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80145d6:	f003 0302 	and.w	r3, r3, #2
 80145da:	623b      	str	r3, [r7, #32]
 80145dc:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80145de:	2300      	movs	r3, #0
 80145e0:	61fb      	str	r3, [r7, #28]
 80145e2:	4b62      	ldr	r3, [pc, #392]	@ (801476c <BSP_SDRAM_MspInit+0x1f4>)
 80145e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80145e6:	4a61      	ldr	r2, [pc, #388]	@ (801476c <BSP_SDRAM_MspInit+0x1f4>)
 80145e8:	f043 0304 	orr.w	r3, r3, #4
 80145ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80145ee:	4b5f      	ldr	r3, [pc, #380]	@ (801476c <BSP_SDRAM_MspInit+0x1f4>)
 80145f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80145f2:	f003 0304 	and.w	r3, r3, #4
 80145f6:	61fb      	str	r3, [r7, #28]
 80145f8:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80145fa:	2300      	movs	r3, #0
 80145fc:	61bb      	str	r3, [r7, #24]
 80145fe:	4b5b      	ldr	r3, [pc, #364]	@ (801476c <BSP_SDRAM_MspInit+0x1f4>)
 8014600:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8014602:	4a5a      	ldr	r2, [pc, #360]	@ (801476c <BSP_SDRAM_MspInit+0x1f4>)
 8014604:	f043 0308 	orr.w	r3, r3, #8
 8014608:	6313      	str	r3, [r2, #48]	@ 0x30
 801460a:	4b58      	ldr	r3, [pc, #352]	@ (801476c <BSP_SDRAM_MspInit+0x1f4>)
 801460c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801460e:	f003 0308 	and.w	r3, r3, #8
 8014612:	61bb      	str	r3, [r7, #24]
 8014614:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8014616:	2300      	movs	r3, #0
 8014618:	617b      	str	r3, [r7, #20]
 801461a:	4b54      	ldr	r3, [pc, #336]	@ (801476c <BSP_SDRAM_MspInit+0x1f4>)
 801461c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801461e:	4a53      	ldr	r2, [pc, #332]	@ (801476c <BSP_SDRAM_MspInit+0x1f4>)
 8014620:	f043 0310 	orr.w	r3, r3, #16
 8014624:	6313      	str	r3, [r2, #48]	@ 0x30
 8014626:	4b51      	ldr	r3, [pc, #324]	@ (801476c <BSP_SDRAM_MspInit+0x1f4>)
 8014628:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801462a:	f003 0310 	and.w	r3, r3, #16
 801462e:	617b      	str	r3, [r7, #20]
 8014630:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8014632:	2300      	movs	r3, #0
 8014634:	613b      	str	r3, [r7, #16]
 8014636:	4b4d      	ldr	r3, [pc, #308]	@ (801476c <BSP_SDRAM_MspInit+0x1f4>)
 8014638:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801463a:	4a4c      	ldr	r2, [pc, #304]	@ (801476c <BSP_SDRAM_MspInit+0x1f4>)
 801463c:	f043 0320 	orr.w	r3, r3, #32
 8014640:	6313      	str	r3, [r2, #48]	@ 0x30
 8014642:	4b4a      	ldr	r3, [pc, #296]	@ (801476c <BSP_SDRAM_MspInit+0x1f4>)
 8014644:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8014646:	f003 0320 	and.w	r3, r3, #32
 801464a:	613b      	str	r3, [r7, #16]
 801464c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 801464e:	2300      	movs	r3, #0
 8014650:	60fb      	str	r3, [r7, #12]
 8014652:	4b46      	ldr	r3, [pc, #280]	@ (801476c <BSP_SDRAM_MspInit+0x1f4>)
 8014654:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8014656:	4a45      	ldr	r2, [pc, #276]	@ (801476c <BSP_SDRAM_MspInit+0x1f4>)
 8014658:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801465c:	6313      	str	r3, [r2, #48]	@ 0x30
 801465e:	4b43      	ldr	r3, [pc, #268]	@ (801476c <BSP_SDRAM_MspInit+0x1f4>)
 8014660:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8014662:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8014666:	60fb      	str	r3, [r7, #12]
 8014668:	68fb      	ldr	r3, [r7, #12]
     +-------------------+

    */

    /* Common GPIO configuration */
    GPIO_InitStructure.Mode  = GPIO_MODE_AF_PP;
 801466a:	2302      	movs	r3, #2
 801466c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 801466e:	2302      	movs	r3, #2
 8014670:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStructure.Pull  = GPIO_NOPULL;
 8014672:	2300      	movs	r3, #0
 8014674:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStructure.Alternate = GPIO_AF12_FMC;
 8014676:	230c      	movs	r3, #12
 8014678:	63fb      	str	r3, [r7, #60]	@ 0x3c

    /* GPIOB configuration */
    GPIO_InitStructure.Pin = GPIO_PIN_5 | GPIO_PIN_6;
 801467a:	2360      	movs	r3, #96	@ 0x60
 801467c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 801467e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8014682:	4619      	mov	r1, r3
 8014684:	483a      	ldr	r0, [pc, #232]	@ (8014770 <BSP_SDRAM_MspInit+0x1f8>)
 8014686:	f001 f82d 	bl	80156e4 <HAL_GPIO_Init>

    /* GPIOC configuration */
    GPIO_InitStructure.Pin = GPIO_PIN_0;
 801468a:	2301      	movs	r3, #1
 801468c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 801468e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8014692:	4619      	mov	r1, r3
 8014694:	4837      	ldr	r0, [pc, #220]	@ (8014774 <BSP_SDRAM_MspInit+0x1fc>)
 8014696:	f001 f825 	bl	80156e4 <HAL_GPIO_Init>

    /* GPIOD configuration */
    GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1  | GPIO_PIN_8 |
 801469a:	f24c 7303 	movw	r3, #50947	@ 0xc703
 801469e:	62fb      	str	r3, [r7, #44]	@ 0x2c
                             GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_14 |
                             GPIO_PIN_15;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 80146a0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80146a4:	4619      	mov	r1, r3
 80146a6:	4834      	ldr	r0, [pc, #208]	@ (8014778 <BSP_SDRAM_MspInit+0x200>)
 80146a8:	f001 f81c 	bl	80156e4 <HAL_GPIO_Init>

    /* GPIOE configuration */
    GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1  | GPIO_PIN_7 |
 80146ac:	f64f 7383 	movw	r3, #65411	@ 0xff83
 80146b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
                             GPIO_PIN_8  | GPIO_PIN_9  | GPIO_PIN_10 |
                             GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                             GPIO_PIN_14 | GPIO_PIN_15;
    HAL_GPIO_Init(GPIOE, &GPIO_InitStructure);
 80146b2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80146b6:	4619      	mov	r1, r3
 80146b8:	4830      	ldr	r0, [pc, #192]	@ (801477c <BSP_SDRAM_MspInit+0x204>)
 80146ba:	f001 f813 	bl	80156e4 <HAL_GPIO_Init>

    /* GPIOF configuration */
    GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1 | GPIO_PIN_2 |
 80146be:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 80146c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
                             GPIO_PIN_3  | GPIO_PIN_4 | GPIO_PIN_5 |
                             GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                             GPIO_PIN_14 | GPIO_PIN_15;
    HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 80146c4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80146c8:	4619      	mov	r1, r3
 80146ca:	482d      	ldr	r0, [pc, #180]	@ (8014780 <BSP_SDRAM_MspInit+0x208>)
 80146cc:	f001 f80a 	bl	80156e4 <HAL_GPIO_Init>

    /* GPIOG configuration */
    GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 |
 80146d0:	f248 1333 	movw	r3, #33075	@ 0x8133
 80146d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
                             GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_15;
    HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 80146d6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80146da:	4619      	mov	r1, r3
 80146dc:	4829      	ldr	r0, [pc, #164]	@ (8014784 <BSP_SDRAM_MspInit+0x20c>)
 80146de:	f001 f801 	bl	80156e4 <HAL_GPIO_Init>

    /* Configure common DMA parameters */
    dmaHandle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 80146e2:	4b29      	ldr	r3, [pc, #164]	@ (8014788 <BSP_SDRAM_MspInit+0x210>)
 80146e4:	2200      	movs	r2, #0
 80146e6:	605a      	str	r2, [r3, #4]
    dmaHandle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 80146e8:	4b27      	ldr	r3, [pc, #156]	@ (8014788 <BSP_SDRAM_MspInit+0x210>)
 80146ea:	2280      	movs	r2, #128	@ 0x80
 80146ec:	609a      	str	r2, [r3, #8]
    dmaHandle.Init.PeriphInc           = DMA_PINC_ENABLE;
 80146ee:	4b26      	ldr	r3, [pc, #152]	@ (8014788 <BSP_SDRAM_MspInit+0x210>)
 80146f0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80146f4:	60da      	str	r2, [r3, #12]
    dmaHandle.Init.MemInc              = DMA_MINC_ENABLE;
 80146f6:	4b24      	ldr	r3, [pc, #144]	@ (8014788 <BSP_SDRAM_MspInit+0x210>)
 80146f8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80146fc:	611a      	str	r2, [r3, #16]
    dmaHandle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80146fe:	4b22      	ldr	r3, [pc, #136]	@ (8014788 <BSP_SDRAM_MspInit+0x210>)
 8014700:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8014704:	615a      	str	r2, [r3, #20]
    dmaHandle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 8014706:	4b20      	ldr	r3, [pc, #128]	@ (8014788 <BSP_SDRAM_MspInit+0x210>)
 8014708:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 801470c:	619a      	str	r2, [r3, #24]
    dmaHandle.Init.Mode                = DMA_NORMAL;
 801470e:	4b1e      	ldr	r3, [pc, #120]	@ (8014788 <BSP_SDRAM_MspInit+0x210>)
 8014710:	2200      	movs	r2, #0
 8014712:	61da      	str	r2, [r3, #28]
    dmaHandle.Init.Priority            = DMA_PRIORITY_HIGH;
 8014714:	4b1c      	ldr	r3, [pc, #112]	@ (8014788 <BSP_SDRAM_MspInit+0x210>)
 8014716:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 801471a:	621a      	str	r2, [r3, #32]
    dmaHandle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
 801471c:	4b1a      	ldr	r3, [pc, #104]	@ (8014788 <BSP_SDRAM_MspInit+0x210>)
 801471e:	2200      	movs	r2, #0
 8014720:	625a      	str	r2, [r3, #36]	@ 0x24
    dmaHandle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8014722:	4b19      	ldr	r3, [pc, #100]	@ (8014788 <BSP_SDRAM_MspInit+0x210>)
 8014724:	2203      	movs	r2, #3
 8014726:	629a      	str	r2, [r3, #40]	@ 0x28
    dmaHandle.Init.MemBurst            = DMA_MBURST_SINGLE;
 8014728:	4b17      	ldr	r3, [pc, #92]	@ (8014788 <BSP_SDRAM_MspInit+0x210>)
 801472a:	2200      	movs	r2, #0
 801472c:	62da      	str	r2, [r3, #44]	@ 0x2c
    dmaHandle.Init.PeriphBurst         = DMA_PBURST_SINGLE;
 801472e:	4b16      	ldr	r3, [pc, #88]	@ (8014788 <BSP_SDRAM_MspInit+0x210>)
 8014730:	2200      	movs	r2, #0
 8014732:	631a      	str	r2, [r3, #48]	@ 0x30

    dmaHandle.Instance = SDRAM_DMAx_STREAM;
 8014734:	4b14      	ldr	r3, [pc, #80]	@ (8014788 <BSP_SDRAM_MspInit+0x210>)
 8014736:	4a15      	ldr	r2, [pc, #84]	@ (801478c <BSP_SDRAM_MspInit+0x214>)
 8014738:	601a      	str	r2, [r3, #0]

    /* Associate the DMA handle */
    __HAL_LINKDMA(hsdram, hdma, dmaHandle);
 801473a:	687b      	ldr	r3, [r7, #4]
 801473c:	4a12      	ldr	r2, [pc, #72]	@ (8014788 <BSP_SDRAM_MspInit+0x210>)
 801473e:	631a      	str	r2, [r3, #48]	@ 0x30
 8014740:	4a11      	ldr	r2, [pc, #68]	@ (8014788 <BSP_SDRAM_MspInit+0x210>)
 8014742:	687b      	ldr	r3, [r7, #4]
 8014744:	6393      	str	r3, [r2, #56]	@ 0x38

    /* Deinitialize the stream for new transfer */
    HAL_DMA_DeInit(&dmaHandle);
 8014746:	4810      	ldr	r0, [pc, #64]	@ (8014788 <BSP_SDRAM_MspInit+0x210>)
 8014748:	f000 fb20 	bl	8014d8c <HAL_DMA_DeInit>

    /* Configure the DMA stream */
    HAL_DMA_Init(&dmaHandle);
 801474c:	480e      	ldr	r0, [pc, #56]	@ (8014788 <BSP_SDRAM_MspInit+0x210>)
 801474e:	f000 fa6f 	bl	8014c30 <HAL_DMA_Init>

    /* NVIC configuration for DMA transfer complete interrupt */
    HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 8014752:	2200      	movs	r2, #0
 8014754:	210f      	movs	r1, #15
 8014756:	2038      	movs	r0, #56	@ 0x38
 8014758:	f000 fa24 	bl	8014ba4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 801475c:	2038      	movs	r0, #56	@ 0x38
 801475e:	f000 fa3d 	bl	8014bdc <HAL_NVIC_EnableIRQ>
  } /* of if(hsdram != (SDRAM_HandleTypeDef  *)NULL) */
}
 8014762:	bf00      	nop
 8014764:	3740      	adds	r7, #64	@ 0x40
 8014766:	46bd      	mov	sp, r7
 8014768:	bd80      	pop	{r7, pc}
 801476a:	bf00      	nop
 801476c:	40023800 	.word	0x40023800
 8014770:	40020400 	.word	0x40020400
 8014774:	40020800 	.word	0x40020800
 8014778:	40020c00 	.word	0x40020c00
 801477c:	40021000 	.word	0x40021000
 8014780:	40021400 	.word	0x40021400
 8014784:	40021800 	.word	0x40021800
 8014788:	20001c88 	.word	0x20001c88
 801478c:	40026410 	.word	0x40026410

08014790 <BSP_TS_Init>:
  * @param  XSize: The maximum X size of the TS area on LCD
  * @param  YSize: The maximum Y size of the TS area on LCD
  * @retval TS_OK: if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Init(uint16_t XSize, uint16_t YSize)
{
 8014790:	b580      	push	{r7, lr}
 8014792:	b084      	sub	sp, #16
 8014794:	af00      	add	r7, sp, #0
 8014796:	4603      	mov	r3, r0
 8014798:	460a      	mov	r2, r1
 801479a:	80fb      	strh	r3, [r7, #6]
 801479c:	4613      	mov	r3, r2
 801479e:	80bb      	strh	r3, [r7, #4]
  uint8_t ret = TS_ERROR;
 80147a0:	2301      	movs	r3, #1
 80147a2:	73fb      	strb	r3, [r7, #15]

  /* Initialize x and y positions boundaries */
  TsXBoundary = XSize;
 80147a4:	4a13      	ldr	r2, [pc, #76]	@ (80147f4 <BSP_TS_Init+0x64>)
 80147a6:	88fb      	ldrh	r3, [r7, #6]
 80147a8:	8013      	strh	r3, [r2, #0]
  TsYBoundary = YSize;
 80147aa:	4a13      	ldr	r2, [pc, #76]	@ (80147f8 <BSP_TS_Init+0x68>)
 80147ac:	88bb      	ldrh	r3, [r7, #4]
 80147ae:	8013      	strh	r3, [r2, #0]

  /* Read ID and verify if the IO expander is ready */
  if (stmpe811_ts_drv.ReadID(TS_I2C_ADDRESS) == STMPE811_ID)
 80147b0:	4b12      	ldr	r3, [pc, #72]	@ (80147fc <BSP_TS_Init+0x6c>)
 80147b2:	685b      	ldr	r3, [r3, #4]
 80147b4:	2082      	movs	r0, #130	@ 0x82
 80147b6:	4798      	blx	r3
 80147b8:	4603      	mov	r3, r0
 80147ba:	461a      	mov	r2, r3
 80147bc:	f640 0311 	movw	r3, #2065	@ 0x811
 80147c0:	429a      	cmp	r2, r3
 80147c2:	d104      	bne.n	80147ce <BSP_TS_Init+0x3e>
  {
    /* Initialize the TS driver structure */
    TsDrv = &stmpe811_ts_drv;
 80147c4:	4b0e      	ldr	r3, [pc, #56]	@ (8014800 <BSP_TS_Init+0x70>)
 80147c6:	4a0d      	ldr	r2, [pc, #52]	@ (80147fc <BSP_TS_Init+0x6c>)
 80147c8:	601a      	str	r2, [r3, #0]

    ret = TS_OK;
 80147ca:	2300      	movs	r3, #0
 80147cc:	73fb      	strb	r3, [r7, #15]
  }

  if (ret == TS_OK)
 80147ce:	7bfb      	ldrb	r3, [r7, #15]
 80147d0:	2b00      	cmp	r3, #0
 80147d2:	d109      	bne.n	80147e8 <BSP_TS_Init+0x58>
  {
    /* Initialize the LL TS Driver */
    TsDrv->Init(TS_I2C_ADDRESS);
 80147d4:	4b0a      	ldr	r3, [pc, #40]	@ (8014800 <BSP_TS_Init+0x70>)
 80147d6:	681b      	ldr	r3, [r3, #0]
 80147d8:	681b      	ldr	r3, [r3, #0]
 80147da:	2082      	movs	r0, #130	@ 0x82
 80147dc:	4798      	blx	r3
    TsDrv->Start(TS_I2C_ADDRESS);
 80147de:	4b08      	ldr	r3, [pc, #32]	@ (8014800 <BSP_TS_Init+0x70>)
 80147e0:	681b      	ldr	r3, [r3, #0]
 80147e2:	68db      	ldr	r3, [r3, #12]
 80147e4:	2082      	movs	r0, #130	@ 0x82
 80147e6:	4798      	blx	r3
  }

  return ret;
 80147e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80147ea:	4618      	mov	r0, r3
 80147ec:	3710      	adds	r7, #16
 80147ee:	46bd      	mov	sp, r7
 80147f0:	bd80      	pop	{r7, pc}
 80147f2:	bf00      	nop
 80147f4:	20001cec 	.word	0x20001cec
 80147f8:	20001cee 	.word	0x20001cee
 80147fc:	20000040 	.word	0x20000040
 8014800:	20001ce8 	.word	0x20001ce8

08014804 <BSP_TS_GetState>:
/**
  * @brief  Returns status and positions of the touch screen.
  * @param  TsState: Pointer to touch screen current state structure
  */
void BSP_TS_GetState(TS_StateTypeDef *TsState)
{
 8014804:	b580      	push	{r7, lr}
 8014806:	b086      	sub	sp, #24
 8014808:	af00      	add	r7, sp, #0
 801480a:	6078      	str	r0, [r7, #4]
  static uint32_t _x = 0, _y = 0;
  uint16_t xDiff, yDiff, x, y, xr, yr;

  TsState->TouchDetected = TsDrv->DetectTouch(TS_I2C_ADDRESS);
 801480c:	4b4f      	ldr	r3, [pc, #316]	@ (801494c <BSP_TS_GetState+0x148>)
 801480e:	681b      	ldr	r3, [r3, #0]
 8014810:	691b      	ldr	r3, [r3, #16]
 8014812:	2082      	movs	r0, #130	@ 0x82
 8014814:	4798      	blx	r3
 8014816:	4603      	mov	r3, r0
 8014818:	461a      	mov	r2, r3
 801481a:	687b      	ldr	r3, [r7, #4]
 801481c:	801a      	strh	r2, [r3, #0]

  if (TsState->TouchDetected)
 801481e:	687b      	ldr	r3, [r7, #4]
 8014820:	881b      	ldrh	r3, [r3, #0]
 8014822:	2b00      	cmp	r3, #0
 8014824:	f000 808d 	beq.w	8014942 <BSP_TS_GetState+0x13e>
  {
    TsDrv->GetXY(TS_I2C_ADDRESS, &x, &y);
 8014828:	4b48      	ldr	r3, [pc, #288]	@ (801494c <BSP_TS_GetState+0x148>)
 801482a:	681b      	ldr	r3, [r3, #0]
 801482c:	695b      	ldr	r3, [r3, #20]
 801482e:	f107 020c 	add.w	r2, r7, #12
 8014832:	f107 010e 	add.w	r1, r7, #14
 8014836:	2082      	movs	r0, #130	@ 0x82
 8014838:	4798      	blx	r3
    /* Y value first correction */
    y = 3700 - y;
#else

    /* Y value first correction */
    y -= 360;
 801483a:	89bb      	ldrh	r3, [r7, #12]
 801483c:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8014840:	b29b      	uxth	r3, r3
 8014842:	81bb      	strh	r3, [r7, #12]

#endif

    /* Y value second correction */
    yr = y / 11;
 8014844:	89bb      	ldrh	r3, [r7, #12]
 8014846:	4a42      	ldr	r2, [pc, #264]	@ (8014950 <BSP_TS_GetState+0x14c>)
 8014848:	fba2 2303 	umull	r2, r3, r2, r3
 801484c:	08db      	lsrs	r3, r3, #3
 801484e:	82bb      	strh	r3, [r7, #20]

    /* Return y position value */
    if (yr <= 0)
 8014850:	8abb      	ldrh	r3, [r7, #20]
 8014852:	2b00      	cmp	r3, #0
 8014854:	d102      	bne.n	801485c <BSP_TS_GetState+0x58>
    {
      yr = 0;
 8014856:	2300      	movs	r3, #0
 8014858:	82bb      	strh	r3, [r7, #20]
 801485a:	e008      	b.n	801486e <BSP_TS_GetState+0x6a>
    }
    else if (yr > TsYBoundary)
 801485c:	4b3d      	ldr	r3, [pc, #244]	@ (8014954 <BSP_TS_GetState+0x150>)
 801485e:	881b      	ldrh	r3, [r3, #0]
 8014860:	8aba      	ldrh	r2, [r7, #20]
 8014862:	429a      	cmp	r2, r3
 8014864:	d903      	bls.n	801486e <BSP_TS_GetState+0x6a>
    {
      yr = TsYBoundary - 1;
 8014866:	4b3b      	ldr	r3, [pc, #236]	@ (8014954 <BSP_TS_GetState+0x150>)
 8014868:	881b      	ldrh	r3, [r3, #0]
 801486a:	3b01      	subs	r3, #1
 801486c:	82bb      	strh	r3, [r7, #20]
    }
    else
    {}
    y = yr;
 801486e:	8abb      	ldrh	r3, [r7, #20]
 8014870:	81bb      	strh	r3, [r7, #12]

    /* X value first correction */
    if (x <= 3000)
 8014872:	89fb      	ldrh	r3, [r7, #14]
 8014874:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8014878:	4293      	cmp	r3, r2
 801487a:	d806      	bhi.n	801488a <BSP_TS_GetState+0x86>
    {
      x = 3870 - x;
 801487c:	89fb      	ldrh	r3, [r7, #14]
 801487e:	f5c3 6371 	rsb	r3, r3, #3856	@ 0xf10
 8014882:	330e      	adds	r3, #14
 8014884:	b29b      	uxth	r3, r3
 8014886:	81fb      	strh	r3, [r7, #14]
 8014888:	e005      	b.n	8014896 <BSP_TS_GetState+0x92>
    }
    else
    {
      x = 3800 - x;
 801488a:	89fb      	ldrh	r3, [r7, #14]
 801488c:	f5c3 636d 	rsb	r3, r3, #3792	@ 0xed0
 8014890:	3308      	adds	r3, #8
 8014892:	b29b      	uxth	r3, r3
 8014894:	81fb      	strh	r3, [r7, #14]
    }

    /* X value second correction */
    xr = x / 15;
 8014896:	89fb      	ldrh	r3, [r7, #14]
 8014898:	4a2f      	ldr	r2, [pc, #188]	@ (8014958 <BSP_TS_GetState+0x154>)
 801489a:	fba2 2303 	umull	r2, r3, r2, r3
 801489e:	08db      	lsrs	r3, r3, #3
 80148a0:	82fb      	strh	r3, [r7, #22]

    /* Return X position value */
    if (xr <= 0)
 80148a2:	8afb      	ldrh	r3, [r7, #22]
 80148a4:	2b00      	cmp	r3, #0
 80148a6:	d102      	bne.n	80148ae <BSP_TS_GetState+0xaa>
    {
      xr = 0;
 80148a8:	2300      	movs	r3, #0
 80148aa:	82fb      	strh	r3, [r7, #22]
 80148ac:	e008      	b.n	80148c0 <BSP_TS_GetState+0xbc>
    }
    else if (xr > TsXBoundary)
 80148ae:	4b2b      	ldr	r3, [pc, #172]	@ (801495c <BSP_TS_GetState+0x158>)
 80148b0:	881b      	ldrh	r3, [r3, #0]
 80148b2:	8afa      	ldrh	r2, [r7, #22]
 80148b4:	429a      	cmp	r2, r3
 80148b6:	d903      	bls.n	80148c0 <BSP_TS_GetState+0xbc>
    {
      xr = TsXBoundary - 1;
 80148b8:	4b28      	ldr	r3, [pc, #160]	@ (801495c <BSP_TS_GetState+0x158>)
 80148ba:	881b      	ldrh	r3, [r3, #0]
 80148bc:	3b01      	subs	r3, #1
 80148be:	82fb      	strh	r3, [r7, #22]
    }
    else
    {}

    x = xr;
 80148c0:	8afb      	ldrh	r3, [r7, #22]
 80148c2:	81fb      	strh	r3, [r7, #14]
    xDiff = x > _x ? (x - _x): (_x - x);
 80148c4:	89fb      	ldrh	r3, [r7, #14]
 80148c6:	461a      	mov	r2, r3
 80148c8:	4b25      	ldr	r3, [pc, #148]	@ (8014960 <BSP_TS_GetState+0x15c>)
 80148ca:	681b      	ldr	r3, [r3, #0]
 80148cc:	429a      	cmp	r2, r3
 80148ce:	d906      	bls.n	80148de <BSP_TS_GetState+0xda>
 80148d0:	89fa      	ldrh	r2, [r7, #14]
 80148d2:	4b23      	ldr	r3, [pc, #140]	@ (8014960 <BSP_TS_GetState+0x15c>)
 80148d4:	681b      	ldr	r3, [r3, #0]
 80148d6:	b29b      	uxth	r3, r3
 80148d8:	1ad3      	subs	r3, r2, r3
 80148da:	b29b      	uxth	r3, r3
 80148dc:	e005      	b.n	80148ea <BSP_TS_GetState+0xe6>
 80148de:	4b20      	ldr	r3, [pc, #128]	@ (8014960 <BSP_TS_GetState+0x15c>)
 80148e0:	681b      	ldr	r3, [r3, #0]
 80148e2:	b29a      	uxth	r2, r3
 80148e4:	89fb      	ldrh	r3, [r7, #14]
 80148e6:	1ad3      	subs	r3, r2, r3
 80148e8:	b29b      	uxth	r3, r3
 80148ea:	827b      	strh	r3, [r7, #18]
    yDiff = y > _y ? (y - _y) : (_y - y);
 80148ec:	89bb      	ldrh	r3, [r7, #12]
 80148ee:	461a      	mov	r2, r3
 80148f0:	4b1c      	ldr	r3, [pc, #112]	@ (8014964 <BSP_TS_GetState+0x160>)
 80148f2:	681b      	ldr	r3, [r3, #0]
 80148f4:	429a      	cmp	r2, r3
 80148f6:	d906      	bls.n	8014906 <BSP_TS_GetState+0x102>
 80148f8:	89ba      	ldrh	r2, [r7, #12]
 80148fa:	4b1a      	ldr	r3, [pc, #104]	@ (8014964 <BSP_TS_GetState+0x160>)
 80148fc:	681b      	ldr	r3, [r3, #0]
 80148fe:	b29b      	uxth	r3, r3
 8014900:	1ad3      	subs	r3, r2, r3
 8014902:	b29b      	uxth	r3, r3
 8014904:	e005      	b.n	8014912 <BSP_TS_GetState+0x10e>
 8014906:	4b17      	ldr	r3, [pc, #92]	@ (8014964 <BSP_TS_GetState+0x160>)
 8014908:	681b      	ldr	r3, [r3, #0]
 801490a:	b29a      	uxth	r2, r3
 801490c:	89bb      	ldrh	r3, [r7, #12]
 801490e:	1ad3      	subs	r3, r2, r3
 8014910:	b29b      	uxth	r3, r3
 8014912:	823b      	strh	r3, [r7, #16]

    if (xDiff + yDiff > 5)
 8014914:	8a7a      	ldrh	r2, [r7, #18]
 8014916:	8a3b      	ldrh	r3, [r7, #16]
 8014918:	4413      	add	r3, r2
 801491a:	2b05      	cmp	r3, #5
 801491c:	dd07      	ble.n	801492e <BSP_TS_GetState+0x12a>
    {
      _x = x;
 801491e:	89fb      	ldrh	r3, [r7, #14]
 8014920:	461a      	mov	r2, r3
 8014922:	4b0f      	ldr	r3, [pc, #60]	@ (8014960 <BSP_TS_GetState+0x15c>)
 8014924:	601a      	str	r2, [r3, #0]
      _y = y;
 8014926:	89bb      	ldrh	r3, [r7, #12]
 8014928:	461a      	mov	r2, r3
 801492a:	4b0e      	ldr	r3, [pc, #56]	@ (8014964 <BSP_TS_GetState+0x160>)
 801492c:	601a      	str	r2, [r3, #0]
    }

    /* Update the X position */
    TsState->X = _x;
 801492e:	4b0c      	ldr	r3, [pc, #48]	@ (8014960 <BSP_TS_GetState+0x15c>)
 8014930:	681b      	ldr	r3, [r3, #0]
 8014932:	b29a      	uxth	r2, r3
 8014934:	687b      	ldr	r3, [r7, #4]
 8014936:	805a      	strh	r2, [r3, #2]

    /* Update the Y position */
    TsState->Y = _y;
 8014938:	4b0a      	ldr	r3, [pc, #40]	@ (8014964 <BSP_TS_GetState+0x160>)
 801493a:	681b      	ldr	r3, [r3, #0]
 801493c:	b29a      	uxth	r2, r3
 801493e:	687b      	ldr	r3, [r7, #4]
 8014940:	809a      	strh	r2, [r3, #4]
  }
}
 8014942:	bf00      	nop
 8014944:	3718      	adds	r7, #24
 8014946:	46bd      	mov	sp, r7
 8014948:	bd80      	pop	{r7, pc}
 801494a:	bf00      	nop
 801494c:	20001ce8 	.word	0x20001ce8
 8014950:	ba2e8ba3 	.word	0xba2e8ba3
 8014954:	20001cee 	.word	0x20001cee
 8014958:	88888889 	.word	0x88888889
 801495c:	20001cec 	.word	0x20001cec
 8014960:	20001cf0 	.word	0x20001cf0
 8014964:	20001cf4 	.word	0x20001cf4

08014968 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8014968:	b580      	push	{r7, lr}
 801496a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 801496c:	4b0e      	ldr	r3, [pc, #56]	@ (80149a8 <HAL_Init+0x40>)
 801496e:	681b      	ldr	r3, [r3, #0]
 8014970:	4a0d      	ldr	r2, [pc, #52]	@ (80149a8 <HAL_Init+0x40>)
 8014972:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8014976:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8014978:	4b0b      	ldr	r3, [pc, #44]	@ (80149a8 <HAL_Init+0x40>)
 801497a:	681b      	ldr	r3, [r3, #0]
 801497c:	4a0a      	ldr	r2, [pc, #40]	@ (80149a8 <HAL_Init+0x40>)
 801497e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8014982:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8014984:	4b08      	ldr	r3, [pc, #32]	@ (80149a8 <HAL_Init+0x40>)
 8014986:	681b      	ldr	r3, [r3, #0]
 8014988:	4a07      	ldr	r2, [pc, #28]	@ (80149a8 <HAL_Init+0x40>)
 801498a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 801498e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8014990:	2003      	movs	r0, #3
 8014992:	f000 f8fc 	bl	8014b8e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8014996:	200f      	movs	r0, #15
 8014998:	f7fd fce4 	bl	8012364 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 801499c:	f7fd f8e6 	bl	8011b6c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80149a0:	2300      	movs	r3, #0
}
 80149a2:	4618      	mov	r0, r3
 80149a4:	bd80      	pop	{r7, pc}
 80149a6:	bf00      	nop
 80149a8:	40023c00 	.word	0x40023c00

080149ac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80149ac:	b480      	push	{r7}
 80149ae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80149b0:	4b06      	ldr	r3, [pc, #24]	@ (80149cc <HAL_IncTick+0x20>)
 80149b2:	781b      	ldrb	r3, [r3, #0]
 80149b4:	461a      	mov	r2, r3
 80149b6:	4b06      	ldr	r3, [pc, #24]	@ (80149d0 <HAL_IncTick+0x24>)
 80149b8:	681b      	ldr	r3, [r3, #0]
 80149ba:	4413      	add	r3, r2
 80149bc:	4a04      	ldr	r2, [pc, #16]	@ (80149d0 <HAL_IncTick+0x24>)
 80149be:	6013      	str	r3, [r2, #0]
}
 80149c0:	bf00      	nop
 80149c2:	46bd      	mov	sp, r7
 80149c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80149c8:	4770      	bx	lr
 80149ca:	bf00      	nop
 80149cc:	20000088 	.word	0x20000088
 80149d0:	20001cf8 	.word	0x20001cf8

080149d4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80149d4:	b480      	push	{r7}
 80149d6:	af00      	add	r7, sp, #0
  return uwTick;
 80149d8:	4b03      	ldr	r3, [pc, #12]	@ (80149e8 <HAL_GetTick+0x14>)
 80149da:	681b      	ldr	r3, [r3, #0]
}
 80149dc:	4618      	mov	r0, r3
 80149de:	46bd      	mov	sp, r7
 80149e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80149e4:	4770      	bx	lr
 80149e6:	bf00      	nop
 80149e8:	20001cf8 	.word	0x20001cf8

080149ec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80149ec:	b580      	push	{r7, lr}
 80149ee:	b084      	sub	sp, #16
 80149f0:	af00      	add	r7, sp, #0
 80149f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80149f4:	f7ff ffee 	bl	80149d4 <HAL_GetTick>
 80149f8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80149fa:	687b      	ldr	r3, [r7, #4]
 80149fc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80149fe:	68fb      	ldr	r3, [r7, #12]
 8014a00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014a04:	d005      	beq.n	8014a12 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8014a06:	4b0a      	ldr	r3, [pc, #40]	@ (8014a30 <HAL_Delay+0x44>)
 8014a08:	781b      	ldrb	r3, [r3, #0]
 8014a0a:	461a      	mov	r2, r3
 8014a0c:	68fb      	ldr	r3, [r7, #12]
 8014a0e:	4413      	add	r3, r2
 8014a10:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8014a12:	bf00      	nop
 8014a14:	f7ff ffde 	bl	80149d4 <HAL_GetTick>
 8014a18:	4602      	mov	r2, r0
 8014a1a:	68bb      	ldr	r3, [r7, #8]
 8014a1c:	1ad3      	subs	r3, r2, r3
 8014a1e:	68fa      	ldr	r2, [r7, #12]
 8014a20:	429a      	cmp	r2, r3
 8014a22:	d8f7      	bhi.n	8014a14 <HAL_Delay+0x28>
  {
  }
}
 8014a24:	bf00      	nop
 8014a26:	bf00      	nop
 8014a28:	3710      	adds	r7, #16
 8014a2a:	46bd      	mov	sp, r7
 8014a2c:	bd80      	pop	{r7, pc}
 8014a2e:	bf00      	nop
 8014a30:	20000088 	.word	0x20000088

08014a34 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8014a34:	b480      	push	{r7}
 8014a36:	b085      	sub	sp, #20
 8014a38:	af00      	add	r7, sp, #0
 8014a3a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8014a3c:	687b      	ldr	r3, [r7, #4]
 8014a3e:	f003 0307 	and.w	r3, r3, #7
 8014a42:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8014a44:	4b0c      	ldr	r3, [pc, #48]	@ (8014a78 <__NVIC_SetPriorityGrouping+0x44>)
 8014a46:	68db      	ldr	r3, [r3, #12]
 8014a48:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8014a4a:	68ba      	ldr	r2, [r7, #8]
 8014a4c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8014a50:	4013      	ands	r3, r2
 8014a52:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8014a54:	68fb      	ldr	r3, [r7, #12]
 8014a56:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8014a58:	68bb      	ldr	r3, [r7, #8]
 8014a5a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8014a5c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8014a60:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8014a64:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8014a66:	4a04      	ldr	r2, [pc, #16]	@ (8014a78 <__NVIC_SetPriorityGrouping+0x44>)
 8014a68:	68bb      	ldr	r3, [r7, #8]
 8014a6a:	60d3      	str	r3, [r2, #12]
}
 8014a6c:	bf00      	nop
 8014a6e:	3714      	adds	r7, #20
 8014a70:	46bd      	mov	sp, r7
 8014a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a76:	4770      	bx	lr
 8014a78:	e000ed00 	.word	0xe000ed00

08014a7c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8014a7c:	b480      	push	{r7}
 8014a7e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8014a80:	4b04      	ldr	r3, [pc, #16]	@ (8014a94 <__NVIC_GetPriorityGrouping+0x18>)
 8014a82:	68db      	ldr	r3, [r3, #12]
 8014a84:	0a1b      	lsrs	r3, r3, #8
 8014a86:	f003 0307 	and.w	r3, r3, #7
}
 8014a8a:	4618      	mov	r0, r3
 8014a8c:	46bd      	mov	sp, r7
 8014a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a92:	4770      	bx	lr
 8014a94:	e000ed00 	.word	0xe000ed00

08014a98 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8014a98:	b480      	push	{r7}
 8014a9a:	b083      	sub	sp, #12
 8014a9c:	af00      	add	r7, sp, #0
 8014a9e:	4603      	mov	r3, r0
 8014aa0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8014aa2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8014aa6:	2b00      	cmp	r3, #0
 8014aa8:	db0b      	blt.n	8014ac2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8014aaa:	79fb      	ldrb	r3, [r7, #7]
 8014aac:	f003 021f 	and.w	r2, r3, #31
 8014ab0:	4907      	ldr	r1, [pc, #28]	@ (8014ad0 <__NVIC_EnableIRQ+0x38>)
 8014ab2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8014ab6:	095b      	lsrs	r3, r3, #5
 8014ab8:	2001      	movs	r0, #1
 8014aba:	fa00 f202 	lsl.w	r2, r0, r2
 8014abe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8014ac2:	bf00      	nop
 8014ac4:	370c      	adds	r7, #12
 8014ac6:	46bd      	mov	sp, r7
 8014ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014acc:	4770      	bx	lr
 8014ace:	bf00      	nop
 8014ad0:	e000e100 	.word	0xe000e100

08014ad4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8014ad4:	b480      	push	{r7}
 8014ad6:	b083      	sub	sp, #12
 8014ad8:	af00      	add	r7, sp, #0
 8014ada:	4603      	mov	r3, r0
 8014adc:	6039      	str	r1, [r7, #0]
 8014ade:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8014ae0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8014ae4:	2b00      	cmp	r3, #0
 8014ae6:	db0a      	blt.n	8014afe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8014ae8:	683b      	ldr	r3, [r7, #0]
 8014aea:	b2da      	uxtb	r2, r3
 8014aec:	490c      	ldr	r1, [pc, #48]	@ (8014b20 <__NVIC_SetPriority+0x4c>)
 8014aee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8014af2:	0112      	lsls	r2, r2, #4
 8014af4:	b2d2      	uxtb	r2, r2
 8014af6:	440b      	add	r3, r1
 8014af8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8014afc:	e00a      	b.n	8014b14 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8014afe:	683b      	ldr	r3, [r7, #0]
 8014b00:	b2da      	uxtb	r2, r3
 8014b02:	4908      	ldr	r1, [pc, #32]	@ (8014b24 <__NVIC_SetPriority+0x50>)
 8014b04:	79fb      	ldrb	r3, [r7, #7]
 8014b06:	f003 030f 	and.w	r3, r3, #15
 8014b0a:	3b04      	subs	r3, #4
 8014b0c:	0112      	lsls	r2, r2, #4
 8014b0e:	b2d2      	uxtb	r2, r2
 8014b10:	440b      	add	r3, r1
 8014b12:	761a      	strb	r2, [r3, #24]
}
 8014b14:	bf00      	nop
 8014b16:	370c      	adds	r7, #12
 8014b18:	46bd      	mov	sp, r7
 8014b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b1e:	4770      	bx	lr
 8014b20:	e000e100 	.word	0xe000e100
 8014b24:	e000ed00 	.word	0xe000ed00

08014b28 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8014b28:	b480      	push	{r7}
 8014b2a:	b089      	sub	sp, #36	@ 0x24
 8014b2c:	af00      	add	r7, sp, #0
 8014b2e:	60f8      	str	r0, [r7, #12]
 8014b30:	60b9      	str	r1, [r7, #8]
 8014b32:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8014b34:	68fb      	ldr	r3, [r7, #12]
 8014b36:	f003 0307 	and.w	r3, r3, #7
 8014b3a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8014b3c:	69fb      	ldr	r3, [r7, #28]
 8014b3e:	f1c3 0307 	rsb	r3, r3, #7
 8014b42:	2b04      	cmp	r3, #4
 8014b44:	bf28      	it	cs
 8014b46:	2304      	movcs	r3, #4
 8014b48:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8014b4a:	69fb      	ldr	r3, [r7, #28]
 8014b4c:	3304      	adds	r3, #4
 8014b4e:	2b06      	cmp	r3, #6
 8014b50:	d902      	bls.n	8014b58 <NVIC_EncodePriority+0x30>
 8014b52:	69fb      	ldr	r3, [r7, #28]
 8014b54:	3b03      	subs	r3, #3
 8014b56:	e000      	b.n	8014b5a <NVIC_EncodePriority+0x32>
 8014b58:	2300      	movs	r3, #0
 8014b5a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8014b5c:	f04f 32ff 	mov.w	r2, #4294967295
 8014b60:	69bb      	ldr	r3, [r7, #24]
 8014b62:	fa02 f303 	lsl.w	r3, r2, r3
 8014b66:	43da      	mvns	r2, r3
 8014b68:	68bb      	ldr	r3, [r7, #8]
 8014b6a:	401a      	ands	r2, r3
 8014b6c:	697b      	ldr	r3, [r7, #20]
 8014b6e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8014b70:	f04f 31ff 	mov.w	r1, #4294967295
 8014b74:	697b      	ldr	r3, [r7, #20]
 8014b76:	fa01 f303 	lsl.w	r3, r1, r3
 8014b7a:	43d9      	mvns	r1, r3
 8014b7c:	687b      	ldr	r3, [r7, #4]
 8014b7e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8014b80:	4313      	orrs	r3, r2
         );
}
 8014b82:	4618      	mov	r0, r3
 8014b84:	3724      	adds	r7, #36	@ 0x24
 8014b86:	46bd      	mov	sp, r7
 8014b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b8c:	4770      	bx	lr

08014b8e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8014b8e:	b580      	push	{r7, lr}
 8014b90:	b082      	sub	sp, #8
 8014b92:	af00      	add	r7, sp, #0
 8014b94:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8014b96:	6878      	ldr	r0, [r7, #4]
 8014b98:	f7ff ff4c 	bl	8014a34 <__NVIC_SetPriorityGrouping>
}
 8014b9c:	bf00      	nop
 8014b9e:	3708      	adds	r7, #8
 8014ba0:	46bd      	mov	sp, r7
 8014ba2:	bd80      	pop	{r7, pc}

08014ba4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8014ba4:	b580      	push	{r7, lr}
 8014ba6:	b086      	sub	sp, #24
 8014ba8:	af00      	add	r7, sp, #0
 8014baa:	4603      	mov	r3, r0
 8014bac:	60b9      	str	r1, [r7, #8]
 8014bae:	607a      	str	r2, [r7, #4]
 8014bb0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8014bb2:	2300      	movs	r3, #0
 8014bb4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8014bb6:	f7ff ff61 	bl	8014a7c <__NVIC_GetPriorityGrouping>
 8014bba:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8014bbc:	687a      	ldr	r2, [r7, #4]
 8014bbe:	68b9      	ldr	r1, [r7, #8]
 8014bc0:	6978      	ldr	r0, [r7, #20]
 8014bc2:	f7ff ffb1 	bl	8014b28 <NVIC_EncodePriority>
 8014bc6:	4602      	mov	r2, r0
 8014bc8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014bcc:	4611      	mov	r1, r2
 8014bce:	4618      	mov	r0, r3
 8014bd0:	f7ff ff80 	bl	8014ad4 <__NVIC_SetPriority>
}
 8014bd4:	bf00      	nop
 8014bd6:	3718      	adds	r7, #24
 8014bd8:	46bd      	mov	sp, r7
 8014bda:	bd80      	pop	{r7, pc}

08014bdc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8014bdc:	b580      	push	{r7, lr}
 8014bde:	b082      	sub	sp, #8
 8014be0:	af00      	add	r7, sp, #0
 8014be2:	4603      	mov	r3, r0
 8014be4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8014be6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8014bea:	4618      	mov	r0, r3
 8014bec:	f7ff ff54 	bl	8014a98 <__NVIC_EnableIRQ>
}
 8014bf0:	bf00      	nop
 8014bf2:	3708      	adds	r7, #8
 8014bf4:	46bd      	mov	sp, r7
 8014bf6:	bd80      	pop	{r7, pc}

08014bf8 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8014bf8:	b580      	push	{r7, lr}
 8014bfa:	b082      	sub	sp, #8
 8014bfc:	af00      	add	r7, sp, #0
 8014bfe:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8014c00:	687b      	ldr	r3, [r7, #4]
 8014c02:	2b00      	cmp	r3, #0
 8014c04:	d101      	bne.n	8014c0a <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8014c06:	2301      	movs	r3, #1
 8014c08:	e00e      	b.n	8014c28 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8014c0a:	687b      	ldr	r3, [r7, #4]
 8014c0c:	795b      	ldrb	r3, [r3, #5]
 8014c0e:	b2db      	uxtb	r3, r3
 8014c10:	2b00      	cmp	r3, #0
 8014c12:	d105      	bne.n	8014c20 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8014c14:	687b      	ldr	r3, [r7, #4]
 8014c16:	2200      	movs	r2, #0
 8014c18:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8014c1a:	6878      	ldr	r0, [r7, #4]
 8014c1c:	f7fc ffce 	bl	8011bbc <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8014c20:	687b      	ldr	r3, [r7, #4]
 8014c22:	2201      	movs	r2, #1
 8014c24:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8014c26:	2300      	movs	r3, #0
}
 8014c28:	4618      	mov	r0, r3
 8014c2a:	3708      	adds	r7, #8
 8014c2c:	46bd      	mov	sp, r7
 8014c2e:	bd80      	pop	{r7, pc}

08014c30 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8014c30:	b580      	push	{r7, lr}
 8014c32:	b086      	sub	sp, #24
 8014c34:	af00      	add	r7, sp, #0
 8014c36:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8014c38:	2300      	movs	r3, #0
 8014c3a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8014c3c:	f7ff feca 	bl	80149d4 <HAL_GetTick>
 8014c40:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8014c42:	687b      	ldr	r3, [r7, #4]
 8014c44:	2b00      	cmp	r3, #0
 8014c46:	d101      	bne.n	8014c4c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8014c48:	2301      	movs	r3, #1
 8014c4a:	e099      	b.n	8014d80 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8014c4c:	687b      	ldr	r3, [r7, #4]
 8014c4e:	2202      	movs	r2, #2
 8014c50:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8014c54:	687b      	ldr	r3, [r7, #4]
 8014c56:	2200      	movs	r2, #0
 8014c58:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8014c5c:	687b      	ldr	r3, [r7, #4]
 8014c5e:	681b      	ldr	r3, [r3, #0]
 8014c60:	681a      	ldr	r2, [r3, #0]
 8014c62:	687b      	ldr	r3, [r7, #4]
 8014c64:	681b      	ldr	r3, [r3, #0]
 8014c66:	f022 0201 	bic.w	r2, r2, #1
 8014c6a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8014c6c:	e00f      	b.n	8014c8e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8014c6e:	f7ff feb1 	bl	80149d4 <HAL_GetTick>
 8014c72:	4602      	mov	r2, r0
 8014c74:	693b      	ldr	r3, [r7, #16]
 8014c76:	1ad3      	subs	r3, r2, r3
 8014c78:	2b05      	cmp	r3, #5
 8014c7a:	d908      	bls.n	8014c8e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8014c7c:	687b      	ldr	r3, [r7, #4]
 8014c7e:	2220      	movs	r2, #32
 8014c80:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8014c82:	687b      	ldr	r3, [r7, #4]
 8014c84:	2203      	movs	r2, #3
 8014c86:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8014c8a:	2303      	movs	r3, #3
 8014c8c:	e078      	b.n	8014d80 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8014c8e:	687b      	ldr	r3, [r7, #4]
 8014c90:	681b      	ldr	r3, [r3, #0]
 8014c92:	681b      	ldr	r3, [r3, #0]
 8014c94:	f003 0301 	and.w	r3, r3, #1
 8014c98:	2b00      	cmp	r3, #0
 8014c9a:	d1e8      	bne.n	8014c6e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8014c9c:	687b      	ldr	r3, [r7, #4]
 8014c9e:	681b      	ldr	r3, [r3, #0]
 8014ca0:	681b      	ldr	r3, [r3, #0]
 8014ca2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8014ca4:	697a      	ldr	r2, [r7, #20]
 8014ca6:	4b38      	ldr	r3, [pc, #224]	@ (8014d88 <HAL_DMA_Init+0x158>)
 8014ca8:	4013      	ands	r3, r2
 8014caa:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8014cac:	687b      	ldr	r3, [r7, #4]
 8014cae:	685a      	ldr	r2, [r3, #4]
 8014cb0:	687b      	ldr	r3, [r7, #4]
 8014cb2:	689b      	ldr	r3, [r3, #8]
 8014cb4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8014cb6:	687b      	ldr	r3, [r7, #4]
 8014cb8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8014cba:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8014cbc:	687b      	ldr	r3, [r7, #4]
 8014cbe:	691b      	ldr	r3, [r3, #16]
 8014cc0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8014cc2:	687b      	ldr	r3, [r7, #4]
 8014cc4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8014cc6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8014cc8:	687b      	ldr	r3, [r7, #4]
 8014cca:	699b      	ldr	r3, [r3, #24]
 8014ccc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8014cce:	687b      	ldr	r3, [r7, #4]
 8014cd0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8014cd2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8014cd4:	687b      	ldr	r3, [r7, #4]
 8014cd6:	6a1b      	ldr	r3, [r3, #32]
 8014cd8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8014cda:	697a      	ldr	r2, [r7, #20]
 8014cdc:	4313      	orrs	r3, r2
 8014cde:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8014ce0:	687b      	ldr	r3, [r7, #4]
 8014ce2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014ce4:	2b04      	cmp	r3, #4
 8014ce6:	d107      	bne.n	8014cf8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8014ce8:	687b      	ldr	r3, [r7, #4]
 8014cea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014cec:	687b      	ldr	r3, [r7, #4]
 8014cee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8014cf0:	4313      	orrs	r3, r2
 8014cf2:	697a      	ldr	r2, [r7, #20]
 8014cf4:	4313      	orrs	r3, r2
 8014cf6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8014cf8:	687b      	ldr	r3, [r7, #4]
 8014cfa:	681b      	ldr	r3, [r3, #0]
 8014cfc:	697a      	ldr	r2, [r7, #20]
 8014cfe:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8014d00:	687b      	ldr	r3, [r7, #4]
 8014d02:	681b      	ldr	r3, [r3, #0]
 8014d04:	695b      	ldr	r3, [r3, #20]
 8014d06:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8014d08:	697b      	ldr	r3, [r7, #20]
 8014d0a:	f023 0307 	bic.w	r3, r3, #7
 8014d0e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8014d10:	687b      	ldr	r3, [r7, #4]
 8014d12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014d14:	697a      	ldr	r2, [r7, #20]
 8014d16:	4313      	orrs	r3, r2
 8014d18:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8014d1a:	687b      	ldr	r3, [r7, #4]
 8014d1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014d1e:	2b04      	cmp	r3, #4
 8014d20:	d117      	bne.n	8014d52 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8014d22:	687b      	ldr	r3, [r7, #4]
 8014d24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014d26:	697a      	ldr	r2, [r7, #20]
 8014d28:	4313      	orrs	r3, r2
 8014d2a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8014d2c:	687b      	ldr	r3, [r7, #4]
 8014d2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014d30:	2b00      	cmp	r3, #0
 8014d32:	d00e      	beq.n	8014d52 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8014d34:	6878      	ldr	r0, [r7, #4]
 8014d36:	f000 f8bd 	bl	8014eb4 <DMA_CheckFifoParam>
 8014d3a:	4603      	mov	r3, r0
 8014d3c:	2b00      	cmp	r3, #0
 8014d3e:	d008      	beq.n	8014d52 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8014d40:	687b      	ldr	r3, [r7, #4]
 8014d42:	2240      	movs	r2, #64	@ 0x40
 8014d44:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8014d46:	687b      	ldr	r3, [r7, #4]
 8014d48:	2201      	movs	r2, #1
 8014d4a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8014d4e:	2301      	movs	r3, #1
 8014d50:	e016      	b.n	8014d80 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8014d52:	687b      	ldr	r3, [r7, #4]
 8014d54:	681b      	ldr	r3, [r3, #0]
 8014d56:	697a      	ldr	r2, [r7, #20]
 8014d58:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8014d5a:	6878      	ldr	r0, [r7, #4]
 8014d5c:	f000 f874 	bl	8014e48 <DMA_CalcBaseAndBitshift>
 8014d60:	4603      	mov	r3, r0
 8014d62:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8014d64:	687b      	ldr	r3, [r7, #4]
 8014d66:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8014d68:	223f      	movs	r2, #63	@ 0x3f
 8014d6a:	409a      	lsls	r2, r3
 8014d6c:	68fb      	ldr	r3, [r7, #12]
 8014d6e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8014d70:	687b      	ldr	r3, [r7, #4]
 8014d72:	2200      	movs	r2, #0
 8014d74:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8014d76:	687b      	ldr	r3, [r7, #4]
 8014d78:	2201      	movs	r2, #1
 8014d7a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8014d7e:	2300      	movs	r3, #0
}
 8014d80:	4618      	mov	r0, r3
 8014d82:	3718      	adds	r7, #24
 8014d84:	46bd      	mov	sp, r7
 8014d86:	bd80      	pop	{r7, pc}
 8014d88:	f010803f 	.word	0xf010803f

08014d8c <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8014d8c:	b580      	push	{r7, lr}
 8014d8e:	b084      	sub	sp, #16
 8014d90:	af00      	add	r7, sp, #0
 8014d92:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8014d94:	687b      	ldr	r3, [r7, #4]
 8014d96:	2b00      	cmp	r3, #0
 8014d98:	d101      	bne.n	8014d9e <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8014d9a:	2301      	movs	r3, #1
 8014d9c:	e050      	b.n	8014e40 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8014d9e:	687b      	ldr	r3, [r7, #4]
 8014da0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8014da4:	b2db      	uxtb	r3, r3
 8014da6:	2b02      	cmp	r3, #2
 8014da8:	d101      	bne.n	8014dae <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 8014daa:	2302      	movs	r3, #2
 8014dac:	e048      	b.n	8014e40 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8014dae:	687b      	ldr	r3, [r7, #4]
 8014db0:	681b      	ldr	r3, [r3, #0]
 8014db2:	681a      	ldr	r2, [r3, #0]
 8014db4:	687b      	ldr	r3, [r7, #4]
 8014db6:	681b      	ldr	r3, [r3, #0]
 8014db8:	f022 0201 	bic.w	r2, r2, #1
 8014dbc:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8014dbe:	687b      	ldr	r3, [r7, #4]
 8014dc0:	681b      	ldr	r3, [r3, #0]
 8014dc2:	2200      	movs	r2, #0
 8014dc4:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8014dc6:	687b      	ldr	r3, [r7, #4]
 8014dc8:	681b      	ldr	r3, [r3, #0]
 8014dca:	2200      	movs	r2, #0
 8014dcc:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8014dce:	687b      	ldr	r3, [r7, #4]
 8014dd0:	681b      	ldr	r3, [r3, #0]
 8014dd2:	2200      	movs	r2, #0
 8014dd4:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8014dd6:	687b      	ldr	r3, [r7, #4]
 8014dd8:	681b      	ldr	r3, [r3, #0]
 8014dda:	2200      	movs	r2, #0
 8014ddc:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8014dde:	687b      	ldr	r3, [r7, #4]
 8014de0:	681b      	ldr	r3, [r3, #0]
 8014de2:	2200      	movs	r2, #0
 8014de4:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 8014de6:	687b      	ldr	r3, [r7, #4]
 8014de8:	681b      	ldr	r3, [r3, #0]
 8014dea:	2221      	movs	r2, #33	@ 0x21
 8014dec:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8014dee:	6878      	ldr	r0, [r7, #4]
 8014df0:	f000 f82a 	bl	8014e48 <DMA_CalcBaseAndBitshift>
 8014df4:	4603      	mov	r3, r0
 8014df6:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8014df8:	687b      	ldr	r3, [r7, #4]
 8014dfa:	2200      	movs	r2, #0
 8014dfc:	63da      	str	r2, [r3, #60]	@ 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8014dfe:	687b      	ldr	r3, [r7, #4]
 8014e00:	2200      	movs	r2, #0
 8014e02:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->XferM1CpltCallback = NULL;
 8014e04:	687b      	ldr	r3, [r7, #4]
 8014e06:	2200      	movs	r2, #0
 8014e08:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8014e0a:	687b      	ldr	r3, [r7, #4]
 8014e0c:	2200      	movs	r2, #0
 8014e0e:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->XferErrorCallback = NULL;
 8014e10:	687b      	ldr	r3, [r7, #4]
 8014e12:	2200      	movs	r2, #0
 8014e14:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->XferAbortCallback = NULL;
 8014e16:	687b      	ldr	r3, [r7, #4]
 8014e18:	2200      	movs	r2, #0
 8014e1a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8014e1c:	687b      	ldr	r3, [r7, #4]
 8014e1e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8014e20:	223f      	movs	r2, #63	@ 0x3f
 8014e22:	409a      	lsls	r2, r3
 8014e24:	68fb      	ldr	r3, [r7, #12]
 8014e26:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8014e28:	687b      	ldr	r3, [r7, #4]
 8014e2a:	2200      	movs	r2, #0
 8014e2c:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8014e2e:	687b      	ldr	r3, [r7, #4]
 8014e30:	2200      	movs	r2, #0
 8014e32:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8014e36:	687b      	ldr	r3, [r7, #4]
 8014e38:	2200      	movs	r2, #0
 8014e3a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8014e3e:	2300      	movs	r3, #0
}
 8014e40:	4618      	mov	r0, r3
 8014e42:	3710      	adds	r7, #16
 8014e44:	46bd      	mov	sp, r7
 8014e46:	bd80      	pop	{r7, pc}

08014e48 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8014e48:	b480      	push	{r7}
 8014e4a:	b085      	sub	sp, #20
 8014e4c:	af00      	add	r7, sp, #0
 8014e4e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8014e50:	687b      	ldr	r3, [r7, #4]
 8014e52:	681b      	ldr	r3, [r3, #0]
 8014e54:	b2db      	uxtb	r3, r3
 8014e56:	3b10      	subs	r3, #16
 8014e58:	4a14      	ldr	r2, [pc, #80]	@ (8014eac <DMA_CalcBaseAndBitshift+0x64>)
 8014e5a:	fba2 2303 	umull	r2, r3, r2, r3
 8014e5e:	091b      	lsrs	r3, r3, #4
 8014e60:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8014e62:	4a13      	ldr	r2, [pc, #76]	@ (8014eb0 <DMA_CalcBaseAndBitshift+0x68>)
 8014e64:	68fb      	ldr	r3, [r7, #12]
 8014e66:	4413      	add	r3, r2
 8014e68:	781b      	ldrb	r3, [r3, #0]
 8014e6a:	461a      	mov	r2, r3
 8014e6c:	687b      	ldr	r3, [r7, #4]
 8014e6e:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8014e70:	68fb      	ldr	r3, [r7, #12]
 8014e72:	2b03      	cmp	r3, #3
 8014e74:	d909      	bls.n	8014e8a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8014e76:	687b      	ldr	r3, [r7, #4]
 8014e78:	681b      	ldr	r3, [r3, #0]
 8014e7a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8014e7e:	f023 0303 	bic.w	r3, r3, #3
 8014e82:	1d1a      	adds	r2, r3, #4
 8014e84:	687b      	ldr	r3, [r7, #4]
 8014e86:	659a      	str	r2, [r3, #88]	@ 0x58
 8014e88:	e007      	b.n	8014e9a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8014e8a:	687b      	ldr	r3, [r7, #4]
 8014e8c:	681b      	ldr	r3, [r3, #0]
 8014e8e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8014e92:	f023 0303 	bic.w	r3, r3, #3
 8014e96:	687a      	ldr	r2, [r7, #4]
 8014e98:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8014e9a:	687b      	ldr	r3, [r7, #4]
 8014e9c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8014e9e:	4618      	mov	r0, r3
 8014ea0:	3714      	adds	r7, #20
 8014ea2:	46bd      	mov	sp, r7
 8014ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ea8:	4770      	bx	lr
 8014eaa:	bf00      	nop
 8014eac:	aaaaaaab 	.word	0xaaaaaaab
 8014eb0:	08038b88 	.word	0x08038b88

08014eb4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8014eb4:	b480      	push	{r7}
 8014eb6:	b085      	sub	sp, #20
 8014eb8:	af00      	add	r7, sp, #0
 8014eba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8014ebc:	2300      	movs	r3, #0
 8014ebe:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8014ec0:	687b      	ldr	r3, [r7, #4]
 8014ec2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014ec4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8014ec6:	687b      	ldr	r3, [r7, #4]
 8014ec8:	699b      	ldr	r3, [r3, #24]
 8014eca:	2b00      	cmp	r3, #0
 8014ecc:	d11f      	bne.n	8014f0e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8014ece:	68bb      	ldr	r3, [r7, #8]
 8014ed0:	2b03      	cmp	r3, #3
 8014ed2:	d856      	bhi.n	8014f82 <DMA_CheckFifoParam+0xce>
 8014ed4:	a201      	add	r2, pc, #4	@ (adr r2, 8014edc <DMA_CheckFifoParam+0x28>)
 8014ed6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014eda:	bf00      	nop
 8014edc:	08014eed 	.word	0x08014eed
 8014ee0:	08014eff 	.word	0x08014eff
 8014ee4:	08014eed 	.word	0x08014eed
 8014ee8:	08014f83 	.word	0x08014f83
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8014eec:	687b      	ldr	r3, [r7, #4]
 8014eee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014ef0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8014ef4:	2b00      	cmp	r3, #0
 8014ef6:	d046      	beq.n	8014f86 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8014ef8:	2301      	movs	r3, #1
 8014efa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8014efc:	e043      	b.n	8014f86 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8014efe:	687b      	ldr	r3, [r7, #4]
 8014f00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014f02:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8014f06:	d140      	bne.n	8014f8a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8014f08:	2301      	movs	r3, #1
 8014f0a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8014f0c:	e03d      	b.n	8014f8a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8014f0e:	687b      	ldr	r3, [r7, #4]
 8014f10:	699b      	ldr	r3, [r3, #24]
 8014f12:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8014f16:	d121      	bne.n	8014f5c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8014f18:	68bb      	ldr	r3, [r7, #8]
 8014f1a:	2b03      	cmp	r3, #3
 8014f1c:	d837      	bhi.n	8014f8e <DMA_CheckFifoParam+0xda>
 8014f1e:	a201      	add	r2, pc, #4	@ (adr r2, 8014f24 <DMA_CheckFifoParam+0x70>)
 8014f20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014f24:	08014f35 	.word	0x08014f35
 8014f28:	08014f3b 	.word	0x08014f3b
 8014f2c:	08014f35 	.word	0x08014f35
 8014f30:	08014f4d 	.word	0x08014f4d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8014f34:	2301      	movs	r3, #1
 8014f36:	73fb      	strb	r3, [r7, #15]
      break;
 8014f38:	e030      	b.n	8014f9c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8014f3a:	687b      	ldr	r3, [r7, #4]
 8014f3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014f3e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8014f42:	2b00      	cmp	r3, #0
 8014f44:	d025      	beq.n	8014f92 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8014f46:	2301      	movs	r3, #1
 8014f48:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8014f4a:	e022      	b.n	8014f92 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8014f4c:	687b      	ldr	r3, [r7, #4]
 8014f4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014f50:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8014f54:	d11f      	bne.n	8014f96 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8014f56:	2301      	movs	r3, #1
 8014f58:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8014f5a:	e01c      	b.n	8014f96 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8014f5c:	68bb      	ldr	r3, [r7, #8]
 8014f5e:	2b02      	cmp	r3, #2
 8014f60:	d903      	bls.n	8014f6a <DMA_CheckFifoParam+0xb6>
 8014f62:	68bb      	ldr	r3, [r7, #8]
 8014f64:	2b03      	cmp	r3, #3
 8014f66:	d003      	beq.n	8014f70 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8014f68:	e018      	b.n	8014f9c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8014f6a:	2301      	movs	r3, #1
 8014f6c:	73fb      	strb	r3, [r7, #15]
      break;
 8014f6e:	e015      	b.n	8014f9c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8014f70:	687b      	ldr	r3, [r7, #4]
 8014f72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014f74:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8014f78:	2b00      	cmp	r3, #0
 8014f7a:	d00e      	beq.n	8014f9a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8014f7c:	2301      	movs	r3, #1
 8014f7e:	73fb      	strb	r3, [r7, #15]
      break;
 8014f80:	e00b      	b.n	8014f9a <DMA_CheckFifoParam+0xe6>
      break;
 8014f82:	bf00      	nop
 8014f84:	e00a      	b.n	8014f9c <DMA_CheckFifoParam+0xe8>
      break;
 8014f86:	bf00      	nop
 8014f88:	e008      	b.n	8014f9c <DMA_CheckFifoParam+0xe8>
      break;
 8014f8a:	bf00      	nop
 8014f8c:	e006      	b.n	8014f9c <DMA_CheckFifoParam+0xe8>
      break;
 8014f8e:	bf00      	nop
 8014f90:	e004      	b.n	8014f9c <DMA_CheckFifoParam+0xe8>
      break;
 8014f92:	bf00      	nop
 8014f94:	e002      	b.n	8014f9c <DMA_CheckFifoParam+0xe8>
      break;   
 8014f96:	bf00      	nop
 8014f98:	e000      	b.n	8014f9c <DMA_CheckFifoParam+0xe8>
      break;
 8014f9a:	bf00      	nop
    }
  } 
  
  return status; 
 8014f9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8014f9e:	4618      	mov	r0, r3
 8014fa0:	3714      	adds	r7, #20
 8014fa2:	46bd      	mov	sp, r7
 8014fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014fa8:	4770      	bx	lr
 8014faa:	bf00      	nop

08014fac <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8014fac:	b580      	push	{r7, lr}
 8014fae:	b082      	sub	sp, #8
 8014fb0:	af00      	add	r7, sp, #0
 8014fb2:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8014fb4:	687b      	ldr	r3, [r7, #4]
 8014fb6:	2b00      	cmp	r3, #0
 8014fb8:	d101      	bne.n	8014fbe <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 8014fba:	2301      	movs	r3, #1
 8014fbc:	e03b      	b.n	8015036 <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8014fbe:	687b      	ldr	r3, [r7, #4]
 8014fc0:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8014fc4:	b2db      	uxtb	r3, r3
 8014fc6:	2b00      	cmp	r3, #0
 8014fc8:	d106      	bne.n	8014fd8 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8014fca:	687b      	ldr	r3, [r7, #4]
 8014fcc:	2200      	movs	r2, #0
 8014fce:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8014fd2:	6878      	ldr	r0, [r7, #4]
 8014fd4:	f7fc fe14 	bl	8011c00 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8014fd8:	687b      	ldr	r3, [r7, #4]
 8014fda:	2202      	movs	r2, #2
 8014fdc:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8014fe0:	687b      	ldr	r3, [r7, #4]
 8014fe2:	681b      	ldr	r3, [r3, #0]
 8014fe4:	681b      	ldr	r3, [r3, #0]
 8014fe6:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8014fea:	687b      	ldr	r3, [r7, #4]
 8014fec:	685a      	ldr	r2, [r3, #4]
 8014fee:	687b      	ldr	r3, [r7, #4]
 8014ff0:	681b      	ldr	r3, [r3, #0]
 8014ff2:	430a      	orrs	r2, r1
 8014ff4:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8014ff6:	687b      	ldr	r3, [r7, #4]
 8014ff8:	681b      	ldr	r3, [r3, #0]
 8014ffa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8014ffc:	f023 0107 	bic.w	r1, r3, #7
 8015000:	687b      	ldr	r3, [r7, #4]
 8015002:	689a      	ldr	r2, [r3, #8]
 8015004:	687b      	ldr	r3, [r7, #4]
 8015006:	681b      	ldr	r3, [r3, #0]
 8015008:	430a      	orrs	r2, r1
 801500a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 801500c:	687b      	ldr	r3, [r7, #4]
 801500e:	681b      	ldr	r3, [r3, #0]
 8015010:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8015012:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8015016:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 801501a:	687a      	ldr	r2, [r7, #4]
 801501c:	68d1      	ldr	r1, [r2, #12]
 801501e:	687a      	ldr	r2, [r7, #4]
 8015020:	6812      	ldr	r2, [r2, #0]
 8015022:	430b      	orrs	r3, r1
 8015024:	6413      	str	r3, [r2, #64]	@ 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8015026:	687b      	ldr	r3, [r7, #4]
 8015028:	2200      	movs	r2, #0
 801502a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 801502c:	687b      	ldr	r3, [r7, #4]
 801502e:	2201      	movs	r2, #1
 8015030:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  return HAL_OK;
 8015034:	2300      	movs	r3, #0
}
 8015036:	4618      	mov	r0, r3
 8015038:	3708      	adds	r7, #8
 801503a:	46bd      	mov	sp, r7
 801503c:	bd80      	pop	{r7, pc}

0801503e <HAL_DMA2D_Start>:
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                                  uint32_t Height)
{
 801503e:	b580      	push	{r7, lr}
 8015040:	b086      	sub	sp, #24
 8015042:	af02      	add	r7, sp, #8
 8015044:	60f8      	str	r0, [r7, #12]
 8015046:	60b9      	str	r1, [r7, #8]
 8015048:	607a      	str	r2, [r7, #4]
 801504a:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 801504c:	68fb      	ldr	r3, [r7, #12]
 801504e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8015052:	2b01      	cmp	r3, #1
 8015054:	d101      	bne.n	801505a <HAL_DMA2D_Start+0x1c>
 8015056:	2302      	movs	r3, #2
 8015058:	e018      	b.n	801508c <HAL_DMA2D_Start+0x4e>
 801505a:	68fb      	ldr	r3, [r7, #12]
 801505c:	2201      	movs	r2, #1
 801505e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8015062:	68fb      	ldr	r3, [r7, #12]
 8015064:	2202      	movs	r2, #2
 8015066:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 801506a:	69bb      	ldr	r3, [r7, #24]
 801506c:	9300      	str	r3, [sp, #0]
 801506e:	683b      	ldr	r3, [r7, #0]
 8015070:	687a      	ldr	r2, [r7, #4]
 8015072:	68b9      	ldr	r1, [r7, #8]
 8015074:	68f8      	ldr	r0, [r7, #12]
 8015076:	f000 fa99 	bl	80155ac <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 801507a:	68fb      	ldr	r3, [r7, #12]
 801507c:	681b      	ldr	r3, [r3, #0]
 801507e:	681a      	ldr	r2, [r3, #0]
 8015080:	68fb      	ldr	r3, [r7, #12]
 8015082:	681b      	ldr	r3, [r3, #0]
 8015084:	f042 0201 	orr.w	r2, r2, #1
 8015088:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 801508a:	2300      	movs	r3, #0
}
 801508c:	4618      	mov	r0, r3
 801508e:	3710      	adds	r7, #16
 8015090:	46bd      	mov	sp, r7
 8015092:	bd80      	pop	{r7, pc}

08015094 <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 8015094:	b580      	push	{r7, lr}
 8015096:	b086      	sub	sp, #24
 8015098:	af00      	add	r7, sp, #0
 801509a:	6078      	str	r0, [r7, #4]
 801509c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 801509e:	2300      	movs	r3, #0
 80150a0:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 80150a2:	687b      	ldr	r3, [r7, #4]
 80150a4:	681b      	ldr	r3, [r3, #0]
 80150a6:	681b      	ldr	r3, [r3, #0]
 80150a8:	f003 0301 	and.w	r3, r3, #1
 80150ac:	2b00      	cmp	r3, #0
 80150ae:	d056      	beq.n	801515e <HAL_DMA2D_PollForTransfer+0xca>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 80150b0:	f7ff fc90 	bl	80149d4 <HAL_GetTick>
 80150b4:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 80150b6:	e04b      	b.n	8015150 <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 80150b8:	687b      	ldr	r3, [r7, #4]
 80150ba:	681b      	ldr	r3, [r3, #0]
 80150bc:	685b      	ldr	r3, [r3, #4]
 80150be:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 80150c0:	68fb      	ldr	r3, [r7, #12]
 80150c2:	f003 0321 	and.w	r3, r3, #33	@ 0x21
 80150c6:	2b00      	cmp	r3, #0
 80150c8:	d023      	beq.n	8015112 <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 80150ca:	68fb      	ldr	r3, [r7, #12]
 80150cc:	f003 0320 	and.w	r3, r3, #32
 80150d0:	2b00      	cmp	r3, #0
 80150d2:	d005      	beq.n	80150e0 <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 80150d4:	687b      	ldr	r3, [r7, #4]
 80150d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80150d8:	f043 0202 	orr.w	r2, r3, #2
 80150dc:	687b      	ldr	r3, [r7, #4]
 80150de:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80150e0:	68fb      	ldr	r3, [r7, #12]
 80150e2:	f003 0301 	and.w	r3, r3, #1
 80150e6:	2b00      	cmp	r3, #0
 80150e8:	d005      	beq.n	80150f6 <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80150ea:	687b      	ldr	r3, [r7, #4]
 80150ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80150ee:	f043 0201 	orr.w	r2, r3, #1
 80150f2:	687b      	ldr	r3, [r7, #4]
 80150f4:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 80150f6:	687b      	ldr	r3, [r7, #4]
 80150f8:	681b      	ldr	r3, [r3, #0]
 80150fa:	2221      	movs	r2, #33	@ 0x21
 80150fc:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80150fe:	687b      	ldr	r3, [r7, #4]
 8015100:	2204      	movs	r2, #4
 8015102:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8015106:	687b      	ldr	r3, [r7, #4]
 8015108:	2200      	movs	r2, #0
 801510a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

        return HAL_ERROR;
 801510e:	2301      	movs	r3, #1
 8015110:	e0a5      	b.n	801525e <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8015112:	683b      	ldr	r3, [r7, #0]
 8015114:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015118:	d01a      	beq.n	8015150 <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 801511a:	f7ff fc5b 	bl	80149d4 <HAL_GetTick>
 801511e:	4602      	mov	r2, r0
 8015120:	697b      	ldr	r3, [r7, #20]
 8015122:	1ad3      	subs	r3, r2, r3
 8015124:	683a      	ldr	r2, [r7, #0]
 8015126:	429a      	cmp	r2, r3
 8015128:	d302      	bcc.n	8015130 <HAL_DMA2D_PollForTransfer+0x9c>
 801512a:	683b      	ldr	r3, [r7, #0]
 801512c:	2b00      	cmp	r3, #0
 801512e:	d10f      	bne.n	8015150 <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8015130:	687b      	ldr	r3, [r7, #4]
 8015132:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8015134:	f043 0220 	orr.w	r2, r3, #32
 8015138:	687b      	ldr	r3, [r7, #4]
 801513a:	63da      	str	r2, [r3, #60]	@ 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 801513c:	687b      	ldr	r3, [r7, #4]
 801513e:	2203      	movs	r2, #3
 8015140:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8015144:	687b      	ldr	r3, [r7, #4]
 8015146:	2200      	movs	r2, #0
 8015148:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

          return HAL_TIMEOUT;
 801514c:	2303      	movs	r3, #3
 801514e:	e086      	b.n	801525e <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8015150:	687b      	ldr	r3, [r7, #4]
 8015152:	681b      	ldr	r3, [r3, #0]
 8015154:	685b      	ldr	r3, [r3, #4]
 8015156:	f003 0302 	and.w	r3, r3, #2
 801515a:	2b00      	cmp	r3, #0
 801515c:	d0ac      	beq.n	80150b8 <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 801515e:	687b      	ldr	r3, [r7, #4]
 8015160:	681b      	ldr	r3, [r3, #0]
 8015162:	69db      	ldr	r3, [r3, #28]
 8015164:	f003 0320 	and.w	r3, r3, #32
 8015168:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 801516a:	687b      	ldr	r3, [r7, #4]
 801516c:	681b      	ldr	r3, [r3, #0]
 801516e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015170:	f003 0320 	and.w	r3, r3, #32
 8015174:	693a      	ldr	r2, [r7, #16]
 8015176:	4313      	orrs	r3, r2
 8015178:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 801517a:	693b      	ldr	r3, [r7, #16]
 801517c:	2b00      	cmp	r3, #0
 801517e:	d061      	beq.n	8015244 <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8015180:	f7ff fc28 	bl	80149d4 <HAL_GetTick>
 8015184:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8015186:	e056      	b.n	8015236 <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8015188:	687b      	ldr	r3, [r7, #4]
 801518a:	681b      	ldr	r3, [r3, #0]
 801518c:	685b      	ldr	r3, [r3, #4]
 801518e:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8015190:	68fb      	ldr	r3, [r7, #12]
 8015192:	f003 0329 	and.w	r3, r3, #41	@ 0x29
 8015196:	2b00      	cmp	r3, #0
 8015198:	d02e      	beq.n	80151f8 <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 801519a:	68fb      	ldr	r3, [r7, #12]
 801519c:	f003 0308 	and.w	r3, r3, #8
 80151a0:	2b00      	cmp	r3, #0
 80151a2:	d005      	beq.n	80151b0 <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 80151a4:	687b      	ldr	r3, [r7, #4]
 80151a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80151a8:	f043 0204 	orr.w	r2, r3, #4
 80151ac:	687b      	ldr	r3, [r7, #4]
 80151ae:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 80151b0:	68fb      	ldr	r3, [r7, #12]
 80151b2:	f003 0320 	and.w	r3, r3, #32
 80151b6:	2b00      	cmp	r3, #0
 80151b8:	d005      	beq.n	80151c6 <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 80151ba:	687b      	ldr	r3, [r7, #4]
 80151bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80151be:	f043 0202 	orr.w	r2, r3, #2
 80151c2:	687b      	ldr	r3, [r7, #4]
 80151c4:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80151c6:	68fb      	ldr	r3, [r7, #12]
 80151c8:	f003 0301 	and.w	r3, r3, #1
 80151cc:	2b00      	cmp	r3, #0
 80151ce:	d005      	beq.n	80151dc <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80151d0:	687b      	ldr	r3, [r7, #4]
 80151d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80151d4:	f043 0201 	orr.w	r2, r3, #1
 80151d8:	687b      	ldr	r3, [r7, #4]
 80151da:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 80151dc:	687b      	ldr	r3, [r7, #4]
 80151de:	681b      	ldr	r3, [r3, #0]
 80151e0:	2229      	movs	r2, #41	@ 0x29
 80151e2:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80151e4:	687b      	ldr	r3, [r7, #4]
 80151e6:	2204      	movs	r2, #4
 80151e8:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 80151ec:	687b      	ldr	r3, [r7, #4]
 80151ee:	2200      	movs	r2, #0
 80151f0:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

        return HAL_ERROR;
 80151f4:	2301      	movs	r3, #1
 80151f6:	e032      	b.n	801525e <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80151f8:	683b      	ldr	r3, [r7, #0]
 80151fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80151fe:	d01a      	beq.n	8015236 <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8015200:	f7ff fbe8 	bl	80149d4 <HAL_GetTick>
 8015204:	4602      	mov	r2, r0
 8015206:	697b      	ldr	r3, [r7, #20]
 8015208:	1ad3      	subs	r3, r2, r3
 801520a:	683a      	ldr	r2, [r7, #0]
 801520c:	429a      	cmp	r2, r3
 801520e:	d302      	bcc.n	8015216 <HAL_DMA2D_PollForTransfer+0x182>
 8015210:	683b      	ldr	r3, [r7, #0]
 8015212:	2b00      	cmp	r3, #0
 8015214:	d10f      	bne.n	8015236 <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8015216:	687b      	ldr	r3, [r7, #4]
 8015218:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801521a:	f043 0220 	orr.w	r2, r3, #32
 801521e:	687b      	ldr	r3, [r7, #4]
 8015220:	63da      	str	r2, [r3, #60]	@ 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8015222:	687b      	ldr	r3, [r7, #4]
 8015224:	2203      	movs	r2, #3
 8015226:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 801522a:	687b      	ldr	r3, [r7, #4]
 801522c:	2200      	movs	r2, #0
 801522e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

          return HAL_TIMEOUT;
 8015232:	2303      	movs	r3, #3
 8015234:	e013      	b.n	801525e <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8015236:	687b      	ldr	r3, [r7, #4]
 8015238:	681b      	ldr	r3, [r3, #0]
 801523a:	685b      	ldr	r3, [r3, #4]
 801523c:	f003 0310 	and.w	r3, r3, #16
 8015240:	2b00      	cmp	r3, #0
 8015242:	d0a1      	beq.n	8015188 <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 8015244:	687b      	ldr	r3, [r7, #4]
 8015246:	681b      	ldr	r3, [r3, #0]
 8015248:	2212      	movs	r2, #18
 801524a:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 801524c:	687b      	ldr	r3, [r7, #4]
 801524e:	2201      	movs	r2, #1
 8015250:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8015254:	687b      	ldr	r3, [r7, #4]
 8015256:	2200      	movs	r2, #0
 8015258:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return HAL_OK;
 801525c:	2300      	movs	r3, #0
}
 801525e:	4618      	mov	r0, r3
 8015260:	3718      	adds	r7, #24
 8015262:	46bd      	mov	sp, r7
 8015264:	bd80      	pop	{r7, pc}

08015266 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 8015266:	b580      	push	{r7, lr}
 8015268:	b084      	sub	sp, #16
 801526a:	af00      	add	r7, sp, #0
 801526c:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 801526e:	687b      	ldr	r3, [r7, #4]
 8015270:	681b      	ldr	r3, [r3, #0]
 8015272:	685b      	ldr	r3, [r3, #4]
 8015274:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8015276:	687b      	ldr	r3, [r7, #4]
 8015278:	681b      	ldr	r3, [r3, #0]
 801527a:	681b      	ldr	r3, [r3, #0]
 801527c:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 801527e:	68fb      	ldr	r3, [r7, #12]
 8015280:	f003 0301 	and.w	r3, r3, #1
 8015284:	2b00      	cmp	r3, #0
 8015286:	d026      	beq.n	80152d6 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8015288:	68bb      	ldr	r3, [r7, #8]
 801528a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801528e:	2b00      	cmp	r3, #0
 8015290:	d021      	beq.n	80152d6 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8015292:	687b      	ldr	r3, [r7, #4]
 8015294:	681b      	ldr	r3, [r3, #0]
 8015296:	681a      	ldr	r2, [r3, #0]
 8015298:	687b      	ldr	r3, [r7, #4]
 801529a:	681b      	ldr	r3, [r3, #0]
 801529c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80152a0:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80152a2:	687b      	ldr	r3, [r7, #4]
 80152a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80152a6:	f043 0201 	orr.w	r2, r3, #1
 80152aa:	687b      	ldr	r3, [r7, #4]
 80152ac:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 80152ae:	687b      	ldr	r3, [r7, #4]
 80152b0:	681b      	ldr	r3, [r3, #0]
 80152b2:	2201      	movs	r2, #1
 80152b4:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80152b6:	687b      	ldr	r3, [r7, #4]
 80152b8:	2204      	movs	r2, #4
 80152ba:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80152be:	687b      	ldr	r3, [r7, #4]
 80152c0:	2200      	movs	r2, #0
 80152c2:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferErrorCallback != NULL)
 80152c6:	687b      	ldr	r3, [r7, #4]
 80152c8:	695b      	ldr	r3, [r3, #20]
 80152ca:	2b00      	cmp	r3, #0
 80152cc:	d003      	beq.n	80152d6 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80152ce:	687b      	ldr	r3, [r7, #4]
 80152d0:	695b      	ldr	r3, [r3, #20]
 80152d2:	6878      	ldr	r0, [r7, #4]
 80152d4:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 80152d6:	68fb      	ldr	r3, [r7, #12]
 80152d8:	f003 0320 	and.w	r3, r3, #32
 80152dc:	2b00      	cmp	r3, #0
 80152de:	d026      	beq.n	801532e <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 80152e0:	68bb      	ldr	r3, [r7, #8]
 80152e2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80152e6:	2b00      	cmp	r3, #0
 80152e8:	d021      	beq.n	801532e <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 80152ea:	687b      	ldr	r3, [r7, #4]
 80152ec:	681b      	ldr	r3, [r3, #0]
 80152ee:	681a      	ldr	r2, [r3, #0]
 80152f0:	687b      	ldr	r3, [r7, #4]
 80152f2:	681b      	ldr	r3, [r3, #0]
 80152f4:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80152f8:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 80152fa:	687b      	ldr	r3, [r7, #4]
 80152fc:	681b      	ldr	r3, [r3, #0]
 80152fe:	2220      	movs	r2, #32
 8015300:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8015302:	687b      	ldr	r3, [r7, #4]
 8015304:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8015306:	f043 0202 	orr.w	r2, r3, #2
 801530a:	687b      	ldr	r3, [r7, #4]
 801530c:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 801530e:	687b      	ldr	r3, [r7, #4]
 8015310:	2204      	movs	r2, #4
 8015312:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8015316:	687b      	ldr	r3, [r7, #4]
 8015318:	2200      	movs	r2, #0
 801531a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferErrorCallback != NULL)
 801531e:	687b      	ldr	r3, [r7, #4]
 8015320:	695b      	ldr	r3, [r3, #20]
 8015322:	2b00      	cmp	r3, #0
 8015324:	d003      	beq.n	801532e <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8015326:	687b      	ldr	r3, [r7, #4]
 8015328:	695b      	ldr	r3, [r3, #20]
 801532a:	6878      	ldr	r0, [r7, #4]
 801532c:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 801532e:	68fb      	ldr	r3, [r7, #12]
 8015330:	f003 0308 	and.w	r3, r3, #8
 8015334:	2b00      	cmp	r3, #0
 8015336:	d026      	beq.n	8015386 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8015338:	68bb      	ldr	r3, [r7, #8]
 801533a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 801533e:	2b00      	cmp	r3, #0
 8015340:	d021      	beq.n	8015386 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8015342:	687b      	ldr	r3, [r7, #4]
 8015344:	681b      	ldr	r3, [r3, #0]
 8015346:	681a      	ldr	r2, [r3, #0]
 8015348:	687b      	ldr	r3, [r7, #4]
 801534a:	681b      	ldr	r3, [r3, #0]
 801534c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8015350:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8015352:	687b      	ldr	r3, [r7, #4]
 8015354:	681b      	ldr	r3, [r3, #0]
 8015356:	2208      	movs	r2, #8
 8015358:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 801535a:	687b      	ldr	r3, [r7, #4]
 801535c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801535e:	f043 0204 	orr.w	r2, r3, #4
 8015362:	687b      	ldr	r3, [r7, #4]
 8015364:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8015366:	687b      	ldr	r3, [r7, #4]
 8015368:	2204      	movs	r2, #4
 801536a:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 801536e:	687b      	ldr	r3, [r7, #4]
 8015370:	2200      	movs	r2, #0
 8015372:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8015376:	687b      	ldr	r3, [r7, #4]
 8015378:	695b      	ldr	r3, [r3, #20]
 801537a:	2b00      	cmp	r3, #0
 801537c:	d003      	beq.n	8015386 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 801537e:	687b      	ldr	r3, [r7, #4]
 8015380:	695b      	ldr	r3, [r3, #20]
 8015382:	6878      	ldr	r0, [r7, #4]
 8015384:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8015386:	68fb      	ldr	r3, [r7, #12]
 8015388:	f003 0304 	and.w	r3, r3, #4
 801538c:	2b00      	cmp	r3, #0
 801538e:	d013      	beq.n	80153b8 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8015390:	68bb      	ldr	r3, [r7, #8]
 8015392:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8015396:	2b00      	cmp	r3, #0
 8015398:	d00e      	beq.n	80153b8 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 801539a:	687b      	ldr	r3, [r7, #4]
 801539c:	681b      	ldr	r3, [r3, #0]
 801539e:	681a      	ldr	r2, [r3, #0]
 80153a0:	687b      	ldr	r3, [r7, #4]
 80153a2:	681b      	ldr	r3, [r3, #0]
 80153a4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80153a8:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 80153aa:	687b      	ldr	r3, [r7, #4]
 80153ac:	681b      	ldr	r3, [r3, #0]
 80153ae:	2204      	movs	r2, #4
 80153b0:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 80153b2:	6878      	ldr	r0, [r7, #4]
 80153b4:	f000 f853 	bl	801545e <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 80153b8:	68fb      	ldr	r3, [r7, #12]
 80153ba:	f003 0302 	and.w	r3, r3, #2
 80153be:	2b00      	cmp	r3, #0
 80153c0:	d024      	beq.n	801540c <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 80153c2:	68bb      	ldr	r3, [r7, #8]
 80153c4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80153c8:	2b00      	cmp	r3, #0
 80153ca:	d01f      	beq.n	801540c <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 80153cc:	687b      	ldr	r3, [r7, #4]
 80153ce:	681b      	ldr	r3, [r3, #0]
 80153d0:	681a      	ldr	r2, [r3, #0]
 80153d2:	687b      	ldr	r3, [r7, #4]
 80153d4:	681b      	ldr	r3, [r3, #0]
 80153d6:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80153da:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 80153dc:	687b      	ldr	r3, [r7, #4]
 80153de:	681b      	ldr	r3, [r3, #0]
 80153e0:	2202      	movs	r2, #2
 80153e2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 80153e4:	687b      	ldr	r3, [r7, #4]
 80153e6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80153e8:	687b      	ldr	r3, [r7, #4]
 80153ea:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 80153ec:	687b      	ldr	r3, [r7, #4]
 80153ee:	2201      	movs	r2, #1
 80153f0:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80153f4:	687b      	ldr	r3, [r7, #4]
 80153f6:	2200      	movs	r2, #0
 80153f8:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferCpltCallback != NULL)
 80153fc:	687b      	ldr	r3, [r7, #4]
 80153fe:	691b      	ldr	r3, [r3, #16]
 8015400:	2b00      	cmp	r3, #0
 8015402:	d003      	beq.n	801540c <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8015404:	687b      	ldr	r3, [r7, #4]
 8015406:	691b      	ldr	r3, [r3, #16]
 8015408:	6878      	ldr	r0, [r7, #4]
 801540a:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 801540c:	68fb      	ldr	r3, [r7, #12]
 801540e:	f003 0310 	and.w	r3, r3, #16
 8015412:	2b00      	cmp	r3, #0
 8015414:	d01f      	beq.n	8015456 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8015416:	68bb      	ldr	r3, [r7, #8]
 8015418:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 801541c:	2b00      	cmp	r3, #0
 801541e:	d01a      	beq.n	8015456 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8015420:	687b      	ldr	r3, [r7, #4]
 8015422:	681b      	ldr	r3, [r3, #0]
 8015424:	681a      	ldr	r2, [r3, #0]
 8015426:	687b      	ldr	r3, [r7, #4]
 8015428:	681b      	ldr	r3, [r3, #0]
 801542a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 801542e:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8015430:	687b      	ldr	r3, [r7, #4]
 8015432:	681b      	ldr	r3, [r3, #0]
 8015434:	2210      	movs	r2, #16
 8015436:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8015438:	687b      	ldr	r3, [r7, #4]
 801543a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 801543c:	687b      	ldr	r3, [r7, #4]
 801543e:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8015440:	687b      	ldr	r3, [r7, #4]
 8015442:	2201      	movs	r2, #1
 8015444:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8015448:	687b      	ldr	r3, [r7, #4]
 801544a:	2200      	movs	r2, #0
 801544c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8015450:	6878      	ldr	r0, [r7, #4]
 8015452:	f000 f80e 	bl	8015472 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8015456:	bf00      	nop
 8015458:	3710      	adds	r7, #16
 801545a:	46bd      	mov	sp, r7
 801545c:	bd80      	pop	{r7, pc}

0801545e <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 801545e:	b480      	push	{r7}
 8015460:	b083      	sub	sp, #12
 8015462:	af00      	add	r7, sp, #0
 8015464:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8015466:	bf00      	nop
 8015468:	370c      	adds	r7, #12
 801546a:	46bd      	mov	sp, r7
 801546c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015470:	4770      	bx	lr

08015472 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8015472:	b480      	push	{r7}
 8015474:	b083      	sub	sp, #12
 8015476:	af00      	add	r7, sp, #0
 8015478:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 801547a:	bf00      	nop
 801547c:	370c      	adds	r7, #12
 801547e:	46bd      	mov	sp, r7
 8015480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015484:	4770      	bx	lr
	...

08015488 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8015488:	b480      	push	{r7}
 801548a:	b087      	sub	sp, #28
 801548c:	af00      	add	r7, sp, #0
 801548e:	6078      	str	r0, [r7, #4]
 8015490:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 8015492:	687b      	ldr	r3, [r7, #4]
 8015494:	685b      	ldr	r3, [r3, #4]
 8015496:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 801549a:	687b      	ldr	r3, [r7, #4]
 801549c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80154a0:	2b01      	cmp	r3, #1
 80154a2:	d101      	bne.n	80154a8 <HAL_DMA2D_ConfigLayer+0x20>
 80154a4:	2302      	movs	r3, #2
 80154a6:	e079      	b.n	801559c <HAL_DMA2D_ConfigLayer+0x114>
 80154a8:	687b      	ldr	r3, [r7, #4]
 80154aa:	2201      	movs	r2, #1
 80154ac:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80154b0:	687b      	ldr	r3, [r7, #4]
 80154b2:	2202      	movs	r2, #2
 80154b4:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 80154b8:	683b      	ldr	r3, [r7, #0]
 80154ba:	011b      	lsls	r3, r3, #4
 80154bc:	3318      	adds	r3, #24
 80154be:	687a      	ldr	r2, [r7, #4]
 80154c0:	4413      	add	r3, r2
 80154c2:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 80154c4:	693b      	ldr	r3, [r7, #16]
 80154c6:	685a      	ldr	r2, [r3, #4]
 80154c8:	693b      	ldr	r3, [r7, #16]
 80154ca:	689b      	ldr	r3, [r3, #8]
 80154cc:	041b      	lsls	r3, r3, #16
 80154ce:	4313      	orrs	r3, r2
 80154d0:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 80154d2:	4b35      	ldr	r3, [pc, #212]	@ (80155a8 <HAL_DMA2D_ConfigLayer+0x120>)
 80154d4:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80154d6:	693b      	ldr	r3, [r7, #16]
 80154d8:	685b      	ldr	r3, [r3, #4]
 80154da:	2b0a      	cmp	r3, #10
 80154dc:	d003      	beq.n	80154e6 <HAL_DMA2D_ConfigLayer+0x5e>
 80154de:	693b      	ldr	r3, [r7, #16]
 80154e0:	685b      	ldr	r3, [r3, #4]
 80154e2:	2b09      	cmp	r3, #9
 80154e4:	d107      	bne.n	80154f6 <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 80154e6:	693b      	ldr	r3, [r7, #16]
 80154e8:	68db      	ldr	r3, [r3, #12]
 80154ea:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 80154ee:	697a      	ldr	r2, [r7, #20]
 80154f0:	4313      	orrs	r3, r2
 80154f2:	617b      	str	r3, [r7, #20]
 80154f4:	e005      	b.n	8015502 <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 80154f6:	693b      	ldr	r3, [r7, #16]
 80154f8:	68db      	ldr	r3, [r3, #12]
 80154fa:	061b      	lsls	r3, r3, #24
 80154fc:	697a      	ldr	r2, [r7, #20]
 80154fe:	4313      	orrs	r3, r2
 8015500:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8015502:	683b      	ldr	r3, [r7, #0]
 8015504:	2b00      	cmp	r3, #0
 8015506:	d120      	bne.n	801554a <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8015508:	687b      	ldr	r3, [r7, #4]
 801550a:	681b      	ldr	r3, [r3, #0]
 801550c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801550e:	68fb      	ldr	r3, [r7, #12]
 8015510:	43db      	mvns	r3, r3
 8015512:	ea02 0103 	and.w	r1, r2, r3
 8015516:	687b      	ldr	r3, [r7, #4]
 8015518:	681b      	ldr	r3, [r3, #0]
 801551a:	697a      	ldr	r2, [r7, #20]
 801551c:	430a      	orrs	r2, r1
 801551e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8015520:	687b      	ldr	r3, [r7, #4]
 8015522:	681b      	ldr	r3, [r3, #0]
 8015524:	693a      	ldr	r2, [r7, #16]
 8015526:	6812      	ldr	r2, [r2, #0]
 8015528:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 801552a:	693b      	ldr	r3, [r7, #16]
 801552c:	685b      	ldr	r3, [r3, #4]
 801552e:	2b0a      	cmp	r3, #10
 8015530:	d003      	beq.n	801553a <HAL_DMA2D_ConfigLayer+0xb2>
 8015532:	693b      	ldr	r3, [r7, #16]
 8015534:	685b      	ldr	r3, [r3, #4]
 8015536:	2b09      	cmp	r3, #9
 8015538:	d127      	bne.n	801558a <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 801553a:	693b      	ldr	r3, [r7, #16]
 801553c:	68da      	ldr	r2, [r3, #12]
 801553e:	687b      	ldr	r3, [r7, #4]
 8015540:	681b      	ldr	r3, [r3, #0]
 8015542:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 8015546:	629a      	str	r2, [r3, #40]	@ 0x28
 8015548:	e01f      	b.n	801558a <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 801554a:	687b      	ldr	r3, [r7, #4]
 801554c:	681b      	ldr	r3, [r3, #0]
 801554e:	69da      	ldr	r2, [r3, #28]
 8015550:	68fb      	ldr	r3, [r7, #12]
 8015552:	43db      	mvns	r3, r3
 8015554:	ea02 0103 	and.w	r1, r2, r3
 8015558:	687b      	ldr	r3, [r7, #4]
 801555a:	681b      	ldr	r3, [r3, #0]
 801555c:	697a      	ldr	r2, [r7, #20]
 801555e:	430a      	orrs	r2, r1
 8015560:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8015562:	687b      	ldr	r3, [r7, #4]
 8015564:	681b      	ldr	r3, [r3, #0]
 8015566:	693a      	ldr	r2, [r7, #16]
 8015568:	6812      	ldr	r2, [r2, #0]
 801556a:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 801556c:	693b      	ldr	r3, [r7, #16]
 801556e:	685b      	ldr	r3, [r3, #4]
 8015570:	2b0a      	cmp	r3, #10
 8015572:	d003      	beq.n	801557c <HAL_DMA2D_ConfigLayer+0xf4>
 8015574:	693b      	ldr	r3, [r7, #16]
 8015576:	685b      	ldr	r3, [r3, #4]
 8015578:	2b09      	cmp	r3, #9
 801557a:	d106      	bne.n	801558a <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 801557c:	693b      	ldr	r3, [r7, #16]
 801557e:	68da      	ldr	r2, [r3, #12]
 8015580:	687b      	ldr	r3, [r7, #4]
 8015582:	681b      	ldr	r3, [r3, #0]
 8015584:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 8015588:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 801558a:	687b      	ldr	r3, [r7, #4]
 801558c:	2201      	movs	r2, #1
 801558e:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8015592:	687b      	ldr	r3, [r7, #4]
 8015594:	2200      	movs	r2, #0
 8015596:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return HAL_OK;
 801559a:	2300      	movs	r3, #0
}
 801559c:	4618      	mov	r0, r3
 801559e:	371c      	adds	r7, #28
 80155a0:	46bd      	mov	sp, r7
 80155a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80155a6:	4770      	bx	lr
 80155a8:	ff03000f 	.word	0xff03000f

080155ac <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
 80155ac:	b480      	push	{r7}
 80155ae:	b08b      	sub	sp, #44	@ 0x2c
 80155b0:	af00      	add	r7, sp, #0
 80155b2:	60f8      	str	r0, [r7, #12]
 80155b4:	60b9      	str	r1, [r7, #8]
 80155b6:	607a      	str	r2, [r7, #4]
 80155b8:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 80155ba:	68fb      	ldr	r3, [r7, #12]
 80155bc:	681b      	ldr	r3, [r3, #0]
 80155be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80155c0:	f003 4140 	and.w	r1, r3, #3221225472	@ 0xc0000000
 80155c4:	683b      	ldr	r3, [r7, #0]
 80155c6:	041a      	lsls	r2, r3, #16
 80155c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80155ca:	431a      	orrs	r2, r3
 80155cc:	68fb      	ldr	r3, [r7, #12]
 80155ce:	681b      	ldr	r3, [r3, #0]
 80155d0:	430a      	orrs	r2, r1
 80155d2:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 80155d4:	68fb      	ldr	r3, [r7, #12]
 80155d6:	681b      	ldr	r3, [r3, #0]
 80155d8:	687a      	ldr	r2, [r7, #4]
 80155da:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 80155dc:	68fb      	ldr	r3, [r7, #12]
 80155de:	685b      	ldr	r3, [r3, #4]
 80155e0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80155e4:	d174      	bne.n	80156d0 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 80155e6:	68bb      	ldr	r3, [r7, #8]
 80155e8:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 80155ec:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 80155ee:	68bb      	ldr	r3, [r7, #8]
 80155f0:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80155f4:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 80155f6:	68bb      	ldr	r3, [r7, #8]
 80155f8:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80155fc:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 80155fe:	68bb      	ldr	r3, [r7, #8]
 8015600:	b2db      	uxtb	r3, r3
 8015602:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8015604:	68fb      	ldr	r3, [r7, #12]
 8015606:	689b      	ldr	r3, [r3, #8]
 8015608:	2b00      	cmp	r3, #0
 801560a:	d108      	bne.n	801561e <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1 | tmp4);
 801560c:	69ba      	ldr	r2, [r7, #24]
 801560e:	69fb      	ldr	r3, [r7, #28]
 8015610:	431a      	orrs	r2, r3
 8015612:	6a3b      	ldr	r3, [r7, #32]
 8015614:	4313      	orrs	r3, r2
 8015616:	697a      	ldr	r2, [r7, #20]
 8015618:	4313      	orrs	r3, r2
 801561a:	627b      	str	r3, [r7, #36]	@ 0x24
 801561c:	e053      	b.n	80156c6 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 801561e:	68fb      	ldr	r3, [r7, #12]
 8015620:	689b      	ldr	r3, [r3, #8]
 8015622:	2b01      	cmp	r3, #1
 8015624:	d106      	bne.n	8015634 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 8015626:	69ba      	ldr	r2, [r7, #24]
 8015628:	69fb      	ldr	r3, [r7, #28]
 801562a:	4313      	orrs	r3, r2
 801562c:	697a      	ldr	r2, [r7, #20]
 801562e:	4313      	orrs	r3, r2
 8015630:	627b      	str	r3, [r7, #36]	@ 0x24
 8015632:	e048      	b.n	80156c6 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8015634:	68fb      	ldr	r3, [r7, #12]
 8015636:	689b      	ldr	r3, [r3, #8]
 8015638:	2b02      	cmp	r3, #2
 801563a:	d111      	bne.n	8015660 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 801563c:	69fb      	ldr	r3, [r7, #28]
 801563e:	0cdb      	lsrs	r3, r3, #19
 8015640:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 8015642:	69bb      	ldr	r3, [r7, #24]
 8015644:	0a9b      	lsrs	r3, r3, #10
 8015646:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 8015648:	697b      	ldr	r3, [r7, #20]
 801564a:	08db      	lsrs	r3, r3, #3
 801564c:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 801564e:	69bb      	ldr	r3, [r7, #24]
 8015650:	015a      	lsls	r2, r3, #5
 8015652:	69fb      	ldr	r3, [r7, #28]
 8015654:	02db      	lsls	r3, r3, #11
 8015656:	4313      	orrs	r3, r2
 8015658:	697a      	ldr	r2, [r7, #20]
 801565a:	4313      	orrs	r3, r2
 801565c:	627b      	str	r3, [r7, #36]	@ 0x24
 801565e:	e032      	b.n	80156c6 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8015660:	68fb      	ldr	r3, [r7, #12]
 8015662:	689b      	ldr	r3, [r3, #8]
 8015664:	2b03      	cmp	r3, #3
 8015666:	d117      	bne.n	8015698 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 8015668:	6a3b      	ldr	r3, [r7, #32]
 801566a:	0fdb      	lsrs	r3, r3, #31
 801566c:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 801566e:	69fb      	ldr	r3, [r7, #28]
 8015670:	0cdb      	lsrs	r3, r3, #19
 8015672:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 8015674:	69bb      	ldr	r3, [r7, #24]
 8015676:	0adb      	lsrs	r3, r3, #11
 8015678:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 801567a:	697b      	ldr	r3, [r7, #20]
 801567c:	08db      	lsrs	r3, r3, #3
 801567e:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8015680:	69bb      	ldr	r3, [r7, #24]
 8015682:	015a      	lsls	r2, r3, #5
 8015684:	69fb      	ldr	r3, [r7, #28]
 8015686:	029b      	lsls	r3, r3, #10
 8015688:	431a      	orrs	r2, r3
 801568a:	6a3b      	ldr	r3, [r7, #32]
 801568c:	03db      	lsls	r3, r3, #15
 801568e:	4313      	orrs	r3, r2
 8015690:	697a      	ldr	r2, [r7, #20]
 8015692:	4313      	orrs	r3, r2
 8015694:	627b      	str	r3, [r7, #36]	@ 0x24
 8015696:	e016      	b.n	80156c6 <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 8015698:	6a3b      	ldr	r3, [r7, #32]
 801569a:	0f1b      	lsrs	r3, r3, #28
 801569c:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 801569e:	69fb      	ldr	r3, [r7, #28]
 80156a0:	0d1b      	lsrs	r3, r3, #20
 80156a2:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 80156a4:	69bb      	ldr	r3, [r7, #24]
 80156a6:	0b1b      	lsrs	r3, r3, #12
 80156a8:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U);
 80156aa:	697b      	ldr	r3, [r7, #20]
 80156ac:	091b      	lsrs	r3, r3, #4
 80156ae:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 80156b0:	69bb      	ldr	r3, [r7, #24]
 80156b2:	011a      	lsls	r2, r3, #4
 80156b4:	69fb      	ldr	r3, [r7, #28]
 80156b6:	021b      	lsls	r3, r3, #8
 80156b8:	431a      	orrs	r2, r3
 80156ba:	6a3b      	ldr	r3, [r7, #32]
 80156bc:	031b      	lsls	r3, r3, #12
 80156be:	4313      	orrs	r3, r2
 80156c0:	697a      	ldr	r2, [r7, #20]
 80156c2:	4313      	orrs	r3, r2
 80156c4:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 80156c6:	68fb      	ldr	r3, [r7, #12]
 80156c8:	681b      	ldr	r3, [r3, #0]
 80156ca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80156cc:	639a      	str	r2, [r3, #56]	@ 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 80156ce:	e003      	b.n	80156d8 <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 80156d0:	68fb      	ldr	r3, [r7, #12]
 80156d2:	681b      	ldr	r3, [r3, #0]
 80156d4:	68ba      	ldr	r2, [r7, #8]
 80156d6:	60da      	str	r2, [r3, #12]
}
 80156d8:	bf00      	nop
 80156da:	372c      	adds	r7, #44	@ 0x2c
 80156dc:	46bd      	mov	sp, r7
 80156de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80156e2:	4770      	bx	lr

080156e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80156e4:	b480      	push	{r7}
 80156e6:	b089      	sub	sp, #36	@ 0x24
 80156e8:	af00      	add	r7, sp, #0
 80156ea:	6078      	str	r0, [r7, #4]
 80156ec:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80156ee:	2300      	movs	r3, #0
 80156f0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80156f2:	2300      	movs	r3, #0
 80156f4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80156f6:	2300      	movs	r3, #0
 80156f8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80156fa:	2300      	movs	r3, #0
 80156fc:	61fb      	str	r3, [r7, #28]
 80156fe:	e177      	b.n	80159f0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8015700:	2201      	movs	r2, #1
 8015702:	69fb      	ldr	r3, [r7, #28]
 8015704:	fa02 f303 	lsl.w	r3, r2, r3
 8015708:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 801570a:	683b      	ldr	r3, [r7, #0]
 801570c:	681b      	ldr	r3, [r3, #0]
 801570e:	697a      	ldr	r2, [r7, #20]
 8015710:	4013      	ands	r3, r2
 8015712:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8015714:	693a      	ldr	r2, [r7, #16]
 8015716:	697b      	ldr	r3, [r7, #20]
 8015718:	429a      	cmp	r2, r3
 801571a:	f040 8166 	bne.w	80159ea <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 801571e:	683b      	ldr	r3, [r7, #0]
 8015720:	685b      	ldr	r3, [r3, #4]
 8015722:	f003 0303 	and.w	r3, r3, #3
 8015726:	2b01      	cmp	r3, #1
 8015728:	d005      	beq.n	8015736 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 801572a:	683b      	ldr	r3, [r7, #0]
 801572c:	685b      	ldr	r3, [r3, #4]
 801572e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8015732:	2b02      	cmp	r3, #2
 8015734:	d130      	bne.n	8015798 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8015736:	687b      	ldr	r3, [r7, #4]
 8015738:	689b      	ldr	r3, [r3, #8]
 801573a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 801573c:	69fb      	ldr	r3, [r7, #28]
 801573e:	005b      	lsls	r3, r3, #1
 8015740:	2203      	movs	r2, #3
 8015742:	fa02 f303 	lsl.w	r3, r2, r3
 8015746:	43db      	mvns	r3, r3
 8015748:	69ba      	ldr	r2, [r7, #24]
 801574a:	4013      	ands	r3, r2
 801574c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 801574e:	683b      	ldr	r3, [r7, #0]
 8015750:	68da      	ldr	r2, [r3, #12]
 8015752:	69fb      	ldr	r3, [r7, #28]
 8015754:	005b      	lsls	r3, r3, #1
 8015756:	fa02 f303 	lsl.w	r3, r2, r3
 801575a:	69ba      	ldr	r2, [r7, #24]
 801575c:	4313      	orrs	r3, r2
 801575e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8015760:	687b      	ldr	r3, [r7, #4]
 8015762:	69ba      	ldr	r2, [r7, #24]
 8015764:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8015766:	687b      	ldr	r3, [r7, #4]
 8015768:	685b      	ldr	r3, [r3, #4]
 801576a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 801576c:	2201      	movs	r2, #1
 801576e:	69fb      	ldr	r3, [r7, #28]
 8015770:	fa02 f303 	lsl.w	r3, r2, r3
 8015774:	43db      	mvns	r3, r3
 8015776:	69ba      	ldr	r2, [r7, #24]
 8015778:	4013      	ands	r3, r2
 801577a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 801577c:	683b      	ldr	r3, [r7, #0]
 801577e:	685b      	ldr	r3, [r3, #4]
 8015780:	091b      	lsrs	r3, r3, #4
 8015782:	f003 0201 	and.w	r2, r3, #1
 8015786:	69fb      	ldr	r3, [r7, #28]
 8015788:	fa02 f303 	lsl.w	r3, r2, r3
 801578c:	69ba      	ldr	r2, [r7, #24]
 801578e:	4313      	orrs	r3, r2
 8015790:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8015792:	687b      	ldr	r3, [r7, #4]
 8015794:	69ba      	ldr	r2, [r7, #24]
 8015796:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8015798:	683b      	ldr	r3, [r7, #0]
 801579a:	685b      	ldr	r3, [r3, #4]
 801579c:	f003 0303 	and.w	r3, r3, #3
 80157a0:	2b03      	cmp	r3, #3
 80157a2:	d017      	beq.n	80157d4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80157a4:	687b      	ldr	r3, [r7, #4]
 80157a6:	68db      	ldr	r3, [r3, #12]
 80157a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80157aa:	69fb      	ldr	r3, [r7, #28]
 80157ac:	005b      	lsls	r3, r3, #1
 80157ae:	2203      	movs	r2, #3
 80157b0:	fa02 f303 	lsl.w	r3, r2, r3
 80157b4:	43db      	mvns	r3, r3
 80157b6:	69ba      	ldr	r2, [r7, #24]
 80157b8:	4013      	ands	r3, r2
 80157ba:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80157bc:	683b      	ldr	r3, [r7, #0]
 80157be:	689a      	ldr	r2, [r3, #8]
 80157c0:	69fb      	ldr	r3, [r7, #28]
 80157c2:	005b      	lsls	r3, r3, #1
 80157c4:	fa02 f303 	lsl.w	r3, r2, r3
 80157c8:	69ba      	ldr	r2, [r7, #24]
 80157ca:	4313      	orrs	r3, r2
 80157cc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80157ce:	687b      	ldr	r3, [r7, #4]
 80157d0:	69ba      	ldr	r2, [r7, #24]
 80157d2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80157d4:	683b      	ldr	r3, [r7, #0]
 80157d6:	685b      	ldr	r3, [r3, #4]
 80157d8:	f003 0303 	and.w	r3, r3, #3
 80157dc:	2b02      	cmp	r3, #2
 80157de:	d123      	bne.n	8015828 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80157e0:	69fb      	ldr	r3, [r7, #28]
 80157e2:	08da      	lsrs	r2, r3, #3
 80157e4:	687b      	ldr	r3, [r7, #4]
 80157e6:	3208      	adds	r2, #8
 80157e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80157ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80157ee:	69fb      	ldr	r3, [r7, #28]
 80157f0:	f003 0307 	and.w	r3, r3, #7
 80157f4:	009b      	lsls	r3, r3, #2
 80157f6:	220f      	movs	r2, #15
 80157f8:	fa02 f303 	lsl.w	r3, r2, r3
 80157fc:	43db      	mvns	r3, r3
 80157fe:	69ba      	ldr	r2, [r7, #24]
 8015800:	4013      	ands	r3, r2
 8015802:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8015804:	683b      	ldr	r3, [r7, #0]
 8015806:	691a      	ldr	r2, [r3, #16]
 8015808:	69fb      	ldr	r3, [r7, #28]
 801580a:	f003 0307 	and.w	r3, r3, #7
 801580e:	009b      	lsls	r3, r3, #2
 8015810:	fa02 f303 	lsl.w	r3, r2, r3
 8015814:	69ba      	ldr	r2, [r7, #24]
 8015816:	4313      	orrs	r3, r2
 8015818:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 801581a:	69fb      	ldr	r3, [r7, #28]
 801581c:	08da      	lsrs	r2, r3, #3
 801581e:	687b      	ldr	r3, [r7, #4]
 8015820:	3208      	adds	r2, #8
 8015822:	69b9      	ldr	r1, [r7, #24]
 8015824:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8015828:	687b      	ldr	r3, [r7, #4]
 801582a:	681b      	ldr	r3, [r3, #0]
 801582c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 801582e:	69fb      	ldr	r3, [r7, #28]
 8015830:	005b      	lsls	r3, r3, #1
 8015832:	2203      	movs	r2, #3
 8015834:	fa02 f303 	lsl.w	r3, r2, r3
 8015838:	43db      	mvns	r3, r3
 801583a:	69ba      	ldr	r2, [r7, #24]
 801583c:	4013      	ands	r3, r2
 801583e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8015840:	683b      	ldr	r3, [r7, #0]
 8015842:	685b      	ldr	r3, [r3, #4]
 8015844:	f003 0203 	and.w	r2, r3, #3
 8015848:	69fb      	ldr	r3, [r7, #28]
 801584a:	005b      	lsls	r3, r3, #1
 801584c:	fa02 f303 	lsl.w	r3, r2, r3
 8015850:	69ba      	ldr	r2, [r7, #24]
 8015852:	4313      	orrs	r3, r2
 8015854:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8015856:	687b      	ldr	r3, [r7, #4]
 8015858:	69ba      	ldr	r2, [r7, #24]
 801585a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 801585c:	683b      	ldr	r3, [r7, #0]
 801585e:	685b      	ldr	r3, [r3, #4]
 8015860:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8015864:	2b00      	cmp	r3, #0
 8015866:	f000 80c0 	beq.w	80159ea <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 801586a:	2300      	movs	r3, #0
 801586c:	60fb      	str	r3, [r7, #12]
 801586e:	4b66      	ldr	r3, [pc, #408]	@ (8015a08 <HAL_GPIO_Init+0x324>)
 8015870:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8015872:	4a65      	ldr	r2, [pc, #404]	@ (8015a08 <HAL_GPIO_Init+0x324>)
 8015874:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8015878:	6453      	str	r3, [r2, #68]	@ 0x44
 801587a:	4b63      	ldr	r3, [pc, #396]	@ (8015a08 <HAL_GPIO_Init+0x324>)
 801587c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801587e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8015882:	60fb      	str	r3, [r7, #12]
 8015884:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8015886:	4a61      	ldr	r2, [pc, #388]	@ (8015a0c <HAL_GPIO_Init+0x328>)
 8015888:	69fb      	ldr	r3, [r7, #28]
 801588a:	089b      	lsrs	r3, r3, #2
 801588c:	3302      	adds	r3, #2
 801588e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8015892:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8015894:	69fb      	ldr	r3, [r7, #28]
 8015896:	f003 0303 	and.w	r3, r3, #3
 801589a:	009b      	lsls	r3, r3, #2
 801589c:	220f      	movs	r2, #15
 801589e:	fa02 f303 	lsl.w	r3, r2, r3
 80158a2:	43db      	mvns	r3, r3
 80158a4:	69ba      	ldr	r2, [r7, #24]
 80158a6:	4013      	ands	r3, r2
 80158a8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80158aa:	687b      	ldr	r3, [r7, #4]
 80158ac:	4a58      	ldr	r2, [pc, #352]	@ (8015a10 <HAL_GPIO_Init+0x32c>)
 80158ae:	4293      	cmp	r3, r2
 80158b0:	d037      	beq.n	8015922 <HAL_GPIO_Init+0x23e>
 80158b2:	687b      	ldr	r3, [r7, #4]
 80158b4:	4a57      	ldr	r2, [pc, #348]	@ (8015a14 <HAL_GPIO_Init+0x330>)
 80158b6:	4293      	cmp	r3, r2
 80158b8:	d031      	beq.n	801591e <HAL_GPIO_Init+0x23a>
 80158ba:	687b      	ldr	r3, [r7, #4]
 80158bc:	4a56      	ldr	r2, [pc, #344]	@ (8015a18 <HAL_GPIO_Init+0x334>)
 80158be:	4293      	cmp	r3, r2
 80158c0:	d02b      	beq.n	801591a <HAL_GPIO_Init+0x236>
 80158c2:	687b      	ldr	r3, [r7, #4]
 80158c4:	4a55      	ldr	r2, [pc, #340]	@ (8015a1c <HAL_GPIO_Init+0x338>)
 80158c6:	4293      	cmp	r3, r2
 80158c8:	d025      	beq.n	8015916 <HAL_GPIO_Init+0x232>
 80158ca:	687b      	ldr	r3, [r7, #4]
 80158cc:	4a54      	ldr	r2, [pc, #336]	@ (8015a20 <HAL_GPIO_Init+0x33c>)
 80158ce:	4293      	cmp	r3, r2
 80158d0:	d01f      	beq.n	8015912 <HAL_GPIO_Init+0x22e>
 80158d2:	687b      	ldr	r3, [r7, #4]
 80158d4:	4a53      	ldr	r2, [pc, #332]	@ (8015a24 <HAL_GPIO_Init+0x340>)
 80158d6:	4293      	cmp	r3, r2
 80158d8:	d019      	beq.n	801590e <HAL_GPIO_Init+0x22a>
 80158da:	687b      	ldr	r3, [r7, #4]
 80158dc:	4a52      	ldr	r2, [pc, #328]	@ (8015a28 <HAL_GPIO_Init+0x344>)
 80158de:	4293      	cmp	r3, r2
 80158e0:	d013      	beq.n	801590a <HAL_GPIO_Init+0x226>
 80158e2:	687b      	ldr	r3, [r7, #4]
 80158e4:	4a51      	ldr	r2, [pc, #324]	@ (8015a2c <HAL_GPIO_Init+0x348>)
 80158e6:	4293      	cmp	r3, r2
 80158e8:	d00d      	beq.n	8015906 <HAL_GPIO_Init+0x222>
 80158ea:	687b      	ldr	r3, [r7, #4]
 80158ec:	4a50      	ldr	r2, [pc, #320]	@ (8015a30 <HAL_GPIO_Init+0x34c>)
 80158ee:	4293      	cmp	r3, r2
 80158f0:	d007      	beq.n	8015902 <HAL_GPIO_Init+0x21e>
 80158f2:	687b      	ldr	r3, [r7, #4]
 80158f4:	4a4f      	ldr	r2, [pc, #316]	@ (8015a34 <HAL_GPIO_Init+0x350>)
 80158f6:	4293      	cmp	r3, r2
 80158f8:	d101      	bne.n	80158fe <HAL_GPIO_Init+0x21a>
 80158fa:	2309      	movs	r3, #9
 80158fc:	e012      	b.n	8015924 <HAL_GPIO_Init+0x240>
 80158fe:	230a      	movs	r3, #10
 8015900:	e010      	b.n	8015924 <HAL_GPIO_Init+0x240>
 8015902:	2308      	movs	r3, #8
 8015904:	e00e      	b.n	8015924 <HAL_GPIO_Init+0x240>
 8015906:	2307      	movs	r3, #7
 8015908:	e00c      	b.n	8015924 <HAL_GPIO_Init+0x240>
 801590a:	2306      	movs	r3, #6
 801590c:	e00a      	b.n	8015924 <HAL_GPIO_Init+0x240>
 801590e:	2305      	movs	r3, #5
 8015910:	e008      	b.n	8015924 <HAL_GPIO_Init+0x240>
 8015912:	2304      	movs	r3, #4
 8015914:	e006      	b.n	8015924 <HAL_GPIO_Init+0x240>
 8015916:	2303      	movs	r3, #3
 8015918:	e004      	b.n	8015924 <HAL_GPIO_Init+0x240>
 801591a:	2302      	movs	r3, #2
 801591c:	e002      	b.n	8015924 <HAL_GPIO_Init+0x240>
 801591e:	2301      	movs	r3, #1
 8015920:	e000      	b.n	8015924 <HAL_GPIO_Init+0x240>
 8015922:	2300      	movs	r3, #0
 8015924:	69fa      	ldr	r2, [r7, #28]
 8015926:	f002 0203 	and.w	r2, r2, #3
 801592a:	0092      	lsls	r2, r2, #2
 801592c:	4093      	lsls	r3, r2
 801592e:	69ba      	ldr	r2, [r7, #24]
 8015930:	4313      	orrs	r3, r2
 8015932:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8015934:	4935      	ldr	r1, [pc, #212]	@ (8015a0c <HAL_GPIO_Init+0x328>)
 8015936:	69fb      	ldr	r3, [r7, #28]
 8015938:	089b      	lsrs	r3, r3, #2
 801593a:	3302      	adds	r3, #2
 801593c:	69ba      	ldr	r2, [r7, #24]
 801593e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8015942:	4b3d      	ldr	r3, [pc, #244]	@ (8015a38 <HAL_GPIO_Init+0x354>)
 8015944:	689b      	ldr	r3, [r3, #8]
 8015946:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8015948:	693b      	ldr	r3, [r7, #16]
 801594a:	43db      	mvns	r3, r3
 801594c:	69ba      	ldr	r2, [r7, #24]
 801594e:	4013      	ands	r3, r2
 8015950:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8015952:	683b      	ldr	r3, [r7, #0]
 8015954:	685b      	ldr	r3, [r3, #4]
 8015956:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 801595a:	2b00      	cmp	r3, #0
 801595c:	d003      	beq.n	8015966 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 801595e:	69ba      	ldr	r2, [r7, #24]
 8015960:	693b      	ldr	r3, [r7, #16]
 8015962:	4313      	orrs	r3, r2
 8015964:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8015966:	4a34      	ldr	r2, [pc, #208]	@ (8015a38 <HAL_GPIO_Init+0x354>)
 8015968:	69bb      	ldr	r3, [r7, #24]
 801596a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 801596c:	4b32      	ldr	r3, [pc, #200]	@ (8015a38 <HAL_GPIO_Init+0x354>)
 801596e:	68db      	ldr	r3, [r3, #12]
 8015970:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8015972:	693b      	ldr	r3, [r7, #16]
 8015974:	43db      	mvns	r3, r3
 8015976:	69ba      	ldr	r2, [r7, #24]
 8015978:	4013      	ands	r3, r2
 801597a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 801597c:	683b      	ldr	r3, [r7, #0]
 801597e:	685b      	ldr	r3, [r3, #4]
 8015980:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8015984:	2b00      	cmp	r3, #0
 8015986:	d003      	beq.n	8015990 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8015988:	69ba      	ldr	r2, [r7, #24]
 801598a:	693b      	ldr	r3, [r7, #16]
 801598c:	4313      	orrs	r3, r2
 801598e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8015990:	4a29      	ldr	r2, [pc, #164]	@ (8015a38 <HAL_GPIO_Init+0x354>)
 8015992:	69bb      	ldr	r3, [r7, #24]
 8015994:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8015996:	4b28      	ldr	r3, [pc, #160]	@ (8015a38 <HAL_GPIO_Init+0x354>)
 8015998:	685b      	ldr	r3, [r3, #4]
 801599a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 801599c:	693b      	ldr	r3, [r7, #16]
 801599e:	43db      	mvns	r3, r3
 80159a0:	69ba      	ldr	r2, [r7, #24]
 80159a2:	4013      	ands	r3, r2
 80159a4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80159a6:	683b      	ldr	r3, [r7, #0]
 80159a8:	685b      	ldr	r3, [r3, #4]
 80159aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80159ae:	2b00      	cmp	r3, #0
 80159b0:	d003      	beq.n	80159ba <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80159b2:	69ba      	ldr	r2, [r7, #24]
 80159b4:	693b      	ldr	r3, [r7, #16]
 80159b6:	4313      	orrs	r3, r2
 80159b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80159ba:	4a1f      	ldr	r2, [pc, #124]	@ (8015a38 <HAL_GPIO_Init+0x354>)
 80159bc:	69bb      	ldr	r3, [r7, #24]
 80159be:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80159c0:	4b1d      	ldr	r3, [pc, #116]	@ (8015a38 <HAL_GPIO_Init+0x354>)
 80159c2:	681b      	ldr	r3, [r3, #0]
 80159c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80159c6:	693b      	ldr	r3, [r7, #16]
 80159c8:	43db      	mvns	r3, r3
 80159ca:	69ba      	ldr	r2, [r7, #24]
 80159cc:	4013      	ands	r3, r2
 80159ce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80159d0:	683b      	ldr	r3, [r7, #0]
 80159d2:	685b      	ldr	r3, [r3, #4]
 80159d4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80159d8:	2b00      	cmp	r3, #0
 80159da:	d003      	beq.n	80159e4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80159dc:	69ba      	ldr	r2, [r7, #24]
 80159de:	693b      	ldr	r3, [r7, #16]
 80159e0:	4313      	orrs	r3, r2
 80159e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80159e4:	4a14      	ldr	r2, [pc, #80]	@ (8015a38 <HAL_GPIO_Init+0x354>)
 80159e6:	69bb      	ldr	r3, [r7, #24]
 80159e8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80159ea:	69fb      	ldr	r3, [r7, #28]
 80159ec:	3301      	adds	r3, #1
 80159ee:	61fb      	str	r3, [r7, #28]
 80159f0:	69fb      	ldr	r3, [r7, #28]
 80159f2:	2b0f      	cmp	r3, #15
 80159f4:	f67f ae84 	bls.w	8015700 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80159f8:	bf00      	nop
 80159fa:	bf00      	nop
 80159fc:	3724      	adds	r7, #36	@ 0x24
 80159fe:	46bd      	mov	sp, r7
 8015a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a04:	4770      	bx	lr
 8015a06:	bf00      	nop
 8015a08:	40023800 	.word	0x40023800
 8015a0c:	40013800 	.word	0x40013800
 8015a10:	40020000 	.word	0x40020000
 8015a14:	40020400 	.word	0x40020400
 8015a18:	40020800 	.word	0x40020800
 8015a1c:	40020c00 	.word	0x40020c00
 8015a20:	40021000 	.word	0x40021000
 8015a24:	40021400 	.word	0x40021400
 8015a28:	40021800 	.word	0x40021800
 8015a2c:	40021c00 	.word	0x40021c00
 8015a30:	40022000 	.word	0x40022000
 8015a34:	40022400 	.word	0x40022400
 8015a38:	40013c00 	.word	0x40013c00

08015a3c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8015a3c:	b480      	push	{r7}
 8015a3e:	b087      	sub	sp, #28
 8015a40:	af00      	add	r7, sp, #0
 8015a42:	6078      	str	r0, [r7, #4]
 8015a44:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8015a46:	2300      	movs	r3, #0
 8015a48:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8015a4a:	2300      	movs	r3, #0
 8015a4c:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8015a4e:	2300      	movs	r3, #0
 8015a50:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8015a52:	2300      	movs	r3, #0
 8015a54:	617b      	str	r3, [r7, #20]
 8015a56:	e0d9      	b.n	8015c0c <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8015a58:	2201      	movs	r2, #1
 8015a5a:	697b      	ldr	r3, [r7, #20]
 8015a5c:	fa02 f303 	lsl.w	r3, r2, r3
 8015a60:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8015a62:	683a      	ldr	r2, [r7, #0]
 8015a64:	693b      	ldr	r3, [r7, #16]
 8015a66:	4013      	ands	r3, r2
 8015a68:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8015a6a:	68fa      	ldr	r2, [r7, #12]
 8015a6c:	693b      	ldr	r3, [r7, #16]
 8015a6e:	429a      	cmp	r2, r3
 8015a70:	f040 80c9 	bne.w	8015c06 <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8015a74:	4a6b      	ldr	r2, [pc, #428]	@ (8015c24 <HAL_GPIO_DeInit+0x1e8>)
 8015a76:	697b      	ldr	r3, [r7, #20]
 8015a78:	089b      	lsrs	r3, r3, #2
 8015a7a:	3302      	adds	r3, #2
 8015a7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8015a80:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8015a82:	697b      	ldr	r3, [r7, #20]
 8015a84:	f003 0303 	and.w	r3, r3, #3
 8015a88:	009b      	lsls	r3, r3, #2
 8015a8a:	220f      	movs	r2, #15
 8015a8c:	fa02 f303 	lsl.w	r3, r2, r3
 8015a90:	68ba      	ldr	r2, [r7, #8]
 8015a92:	4013      	ands	r3, r2
 8015a94:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8015a96:	687b      	ldr	r3, [r7, #4]
 8015a98:	4a63      	ldr	r2, [pc, #396]	@ (8015c28 <HAL_GPIO_DeInit+0x1ec>)
 8015a9a:	4293      	cmp	r3, r2
 8015a9c:	d037      	beq.n	8015b0e <HAL_GPIO_DeInit+0xd2>
 8015a9e:	687b      	ldr	r3, [r7, #4]
 8015aa0:	4a62      	ldr	r2, [pc, #392]	@ (8015c2c <HAL_GPIO_DeInit+0x1f0>)
 8015aa2:	4293      	cmp	r3, r2
 8015aa4:	d031      	beq.n	8015b0a <HAL_GPIO_DeInit+0xce>
 8015aa6:	687b      	ldr	r3, [r7, #4]
 8015aa8:	4a61      	ldr	r2, [pc, #388]	@ (8015c30 <HAL_GPIO_DeInit+0x1f4>)
 8015aaa:	4293      	cmp	r3, r2
 8015aac:	d02b      	beq.n	8015b06 <HAL_GPIO_DeInit+0xca>
 8015aae:	687b      	ldr	r3, [r7, #4]
 8015ab0:	4a60      	ldr	r2, [pc, #384]	@ (8015c34 <HAL_GPIO_DeInit+0x1f8>)
 8015ab2:	4293      	cmp	r3, r2
 8015ab4:	d025      	beq.n	8015b02 <HAL_GPIO_DeInit+0xc6>
 8015ab6:	687b      	ldr	r3, [r7, #4]
 8015ab8:	4a5f      	ldr	r2, [pc, #380]	@ (8015c38 <HAL_GPIO_DeInit+0x1fc>)
 8015aba:	4293      	cmp	r3, r2
 8015abc:	d01f      	beq.n	8015afe <HAL_GPIO_DeInit+0xc2>
 8015abe:	687b      	ldr	r3, [r7, #4]
 8015ac0:	4a5e      	ldr	r2, [pc, #376]	@ (8015c3c <HAL_GPIO_DeInit+0x200>)
 8015ac2:	4293      	cmp	r3, r2
 8015ac4:	d019      	beq.n	8015afa <HAL_GPIO_DeInit+0xbe>
 8015ac6:	687b      	ldr	r3, [r7, #4]
 8015ac8:	4a5d      	ldr	r2, [pc, #372]	@ (8015c40 <HAL_GPIO_DeInit+0x204>)
 8015aca:	4293      	cmp	r3, r2
 8015acc:	d013      	beq.n	8015af6 <HAL_GPIO_DeInit+0xba>
 8015ace:	687b      	ldr	r3, [r7, #4]
 8015ad0:	4a5c      	ldr	r2, [pc, #368]	@ (8015c44 <HAL_GPIO_DeInit+0x208>)
 8015ad2:	4293      	cmp	r3, r2
 8015ad4:	d00d      	beq.n	8015af2 <HAL_GPIO_DeInit+0xb6>
 8015ad6:	687b      	ldr	r3, [r7, #4]
 8015ad8:	4a5b      	ldr	r2, [pc, #364]	@ (8015c48 <HAL_GPIO_DeInit+0x20c>)
 8015ada:	4293      	cmp	r3, r2
 8015adc:	d007      	beq.n	8015aee <HAL_GPIO_DeInit+0xb2>
 8015ade:	687b      	ldr	r3, [r7, #4]
 8015ae0:	4a5a      	ldr	r2, [pc, #360]	@ (8015c4c <HAL_GPIO_DeInit+0x210>)
 8015ae2:	4293      	cmp	r3, r2
 8015ae4:	d101      	bne.n	8015aea <HAL_GPIO_DeInit+0xae>
 8015ae6:	2309      	movs	r3, #9
 8015ae8:	e012      	b.n	8015b10 <HAL_GPIO_DeInit+0xd4>
 8015aea:	230a      	movs	r3, #10
 8015aec:	e010      	b.n	8015b10 <HAL_GPIO_DeInit+0xd4>
 8015aee:	2308      	movs	r3, #8
 8015af0:	e00e      	b.n	8015b10 <HAL_GPIO_DeInit+0xd4>
 8015af2:	2307      	movs	r3, #7
 8015af4:	e00c      	b.n	8015b10 <HAL_GPIO_DeInit+0xd4>
 8015af6:	2306      	movs	r3, #6
 8015af8:	e00a      	b.n	8015b10 <HAL_GPIO_DeInit+0xd4>
 8015afa:	2305      	movs	r3, #5
 8015afc:	e008      	b.n	8015b10 <HAL_GPIO_DeInit+0xd4>
 8015afe:	2304      	movs	r3, #4
 8015b00:	e006      	b.n	8015b10 <HAL_GPIO_DeInit+0xd4>
 8015b02:	2303      	movs	r3, #3
 8015b04:	e004      	b.n	8015b10 <HAL_GPIO_DeInit+0xd4>
 8015b06:	2302      	movs	r3, #2
 8015b08:	e002      	b.n	8015b10 <HAL_GPIO_DeInit+0xd4>
 8015b0a:	2301      	movs	r3, #1
 8015b0c:	e000      	b.n	8015b10 <HAL_GPIO_DeInit+0xd4>
 8015b0e:	2300      	movs	r3, #0
 8015b10:	697a      	ldr	r2, [r7, #20]
 8015b12:	f002 0203 	and.w	r2, r2, #3
 8015b16:	0092      	lsls	r2, r2, #2
 8015b18:	4093      	lsls	r3, r2
 8015b1a:	68ba      	ldr	r2, [r7, #8]
 8015b1c:	429a      	cmp	r2, r3
 8015b1e:	d132      	bne.n	8015b86 <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8015b20:	4b4b      	ldr	r3, [pc, #300]	@ (8015c50 <HAL_GPIO_DeInit+0x214>)
 8015b22:	681a      	ldr	r2, [r3, #0]
 8015b24:	68fb      	ldr	r3, [r7, #12]
 8015b26:	43db      	mvns	r3, r3
 8015b28:	4949      	ldr	r1, [pc, #292]	@ (8015c50 <HAL_GPIO_DeInit+0x214>)
 8015b2a:	4013      	ands	r3, r2
 8015b2c:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8015b2e:	4b48      	ldr	r3, [pc, #288]	@ (8015c50 <HAL_GPIO_DeInit+0x214>)
 8015b30:	685a      	ldr	r2, [r3, #4]
 8015b32:	68fb      	ldr	r3, [r7, #12]
 8015b34:	43db      	mvns	r3, r3
 8015b36:	4946      	ldr	r1, [pc, #280]	@ (8015c50 <HAL_GPIO_DeInit+0x214>)
 8015b38:	4013      	ands	r3, r2
 8015b3a:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8015b3c:	4b44      	ldr	r3, [pc, #272]	@ (8015c50 <HAL_GPIO_DeInit+0x214>)
 8015b3e:	68da      	ldr	r2, [r3, #12]
 8015b40:	68fb      	ldr	r3, [r7, #12]
 8015b42:	43db      	mvns	r3, r3
 8015b44:	4942      	ldr	r1, [pc, #264]	@ (8015c50 <HAL_GPIO_DeInit+0x214>)
 8015b46:	4013      	ands	r3, r2
 8015b48:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8015b4a:	4b41      	ldr	r3, [pc, #260]	@ (8015c50 <HAL_GPIO_DeInit+0x214>)
 8015b4c:	689a      	ldr	r2, [r3, #8]
 8015b4e:	68fb      	ldr	r3, [r7, #12]
 8015b50:	43db      	mvns	r3, r3
 8015b52:	493f      	ldr	r1, [pc, #252]	@ (8015c50 <HAL_GPIO_DeInit+0x214>)
 8015b54:	4013      	ands	r3, r2
 8015b56:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8015b58:	697b      	ldr	r3, [r7, #20]
 8015b5a:	f003 0303 	and.w	r3, r3, #3
 8015b5e:	009b      	lsls	r3, r3, #2
 8015b60:	220f      	movs	r2, #15
 8015b62:	fa02 f303 	lsl.w	r3, r2, r3
 8015b66:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8015b68:	4a2e      	ldr	r2, [pc, #184]	@ (8015c24 <HAL_GPIO_DeInit+0x1e8>)
 8015b6a:	697b      	ldr	r3, [r7, #20]
 8015b6c:	089b      	lsrs	r3, r3, #2
 8015b6e:	3302      	adds	r3, #2
 8015b70:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8015b74:	68bb      	ldr	r3, [r7, #8]
 8015b76:	43da      	mvns	r2, r3
 8015b78:	482a      	ldr	r0, [pc, #168]	@ (8015c24 <HAL_GPIO_DeInit+0x1e8>)
 8015b7a:	697b      	ldr	r3, [r7, #20]
 8015b7c:	089b      	lsrs	r3, r3, #2
 8015b7e:	400a      	ands	r2, r1
 8015b80:	3302      	adds	r3, #2
 8015b82:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8015b86:	687b      	ldr	r3, [r7, #4]
 8015b88:	681a      	ldr	r2, [r3, #0]
 8015b8a:	697b      	ldr	r3, [r7, #20]
 8015b8c:	005b      	lsls	r3, r3, #1
 8015b8e:	2103      	movs	r1, #3
 8015b90:	fa01 f303 	lsl.w	r3, r1, r3
 8015b94:	43db      	mvns	r3, r3
 8015b96:	401a      	ands	r2, r3
 8015b98:	687b      	ldr	r3, [r7, #4]
 8015b9a:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8015b9c:	697b      	ldr	r3, [r7, #20]
 8015b9e:	08da      	lsrs	r2, r3, #3
 8015ba0:	687b      	ldr	r3, [r7, #4]
 8015ba2:	3208      	adds	r2, #8
 8015ba4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8015ba8:	697b      	ldr	r3, [r7, #20]
 8015baa:	f003 0307 	and.w	r3, r3, #7
 8015bae:	009b      	lsls	r3, r3, #2
 8015bb0:	220f      	movs	r2, #15
 8015bb2:	fa02 f303 	lsl.w	r3, r2, r3
 8015bb6:	43db      	mvns	r3, r3
 8015bb8:	697a      	ldr	r2, [r7, #20]
 8015bba:	08d2      	lsrs	r2, r2, #3
 8015bbc:	4019      	ands	r1, r3
 8015bbe:	687b      	ldr	r3, [r7, #4]
 8015bc0:	3208      	adds	r2, #8
 8015bc2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8015bc6:	687b      	ldr	r3, [r7, #4]
 8015bc8:	68da      	ldr	r2, [r3, #12]
 8015bca:	697b      	ldr	r3, [r7, #20]
 8015bcc:	005b      	lsls	r3, r3, #1
 8015bce:	2103      	movs	r1, #3
 8015bd0:	fa01 f303 	lsl.w	r3, r1, r3
 8015bd4:	43db      	mvns	r3, r3
 8015bd6:	401a      	ands	r2, r3
 8015bd8:	687b      	ldr	r3, [r7, #4]
 8015bda:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8015bdc:	687b      	ldr	r3, [r7, #4]
 8015bde:	685a      	ldr	r2, [r3, #4]
 8015be0:	2101      	movs	r1, #1
 8015be2:	697b      	ldr	r3, [r7, #20]
 8015be4:	fa01 f303 	lsl.w	r3, r1, r3
 8015be8:	43db      	mvns	r3, r3
 8015bea:	401a      	ands	r2, r3
 8015bec:	687b      	ldr	r3, [r7, #4]
 8015bee:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8015bf0:	687b      	ldr	r3, [r7, #4]
 8015bf2:	689a      	ldr	r2, [r3, #8]
 8015bf4:	697b      	ldr	r3, [r7, #20]
 8015bf6:	005b      	lsls	r3, r3, #1
 8015bf8:	2103      	movs	r1, #3
 8015bfa:	fa01 f303 	lsl.w	r3, r1, r3
 8015bfe:	43db      	mvns	r3, r3
 8015c00:	401a      	ands	r2, r3
 8015c02:	687b      	ldr	r3, [r7, #4]
 8015c04:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8015c06:	697b      	ldr	r3, [r7, #20]
 8015c08:	3301      	adds	r3, #1
 8015c0a:	617b      	str	r3, [r7, #20]
 8015c0c:	697b      	ldr	r3, [r7, #20]
 8015c0e:	2b0f      	cmp	r3, #15
 8015c10:	f67f af22 	bls.w	8015a58 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8015c14:	bf00      	nop
 8015c16:	bf00      	nop
 8015c18:	371c      	adds	r7, #28
 8015c1a:	46bd      	mov	sp, r7
 8015c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c20:	4770      	bx	lr
 8015c22:	bf00      	nop
 8015c24:	40013800 	.word	0x40013800
 8015c28:	40020000 	.word	0x40020000
 8015c2c:	40020400 	.word	0x40020400
 8015c30:	40020800 	.word	0x40020800
 8015c34:	40020c00 	.word	0x40020c00
 8015c38:	40021000 	.word	0x40021000
 8015c3c:	40021400 	.word	0x40021400
 8015c40:	40021800 	.word	0x40021800
 8015c44:	40021c00 	.word	0x40021c00
 8015c48:	40022000 	.word	0x40022000
 8015c4c:	40022400 	.word	0x40022400
 8015c50:	40013c00 	.word	0x40013c00

08015c54 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8015c54:	b480      	push	{r7}
 8015c56:	b083      	sub	sp, #12
 8015c58:	af00      	add	r7, sp, #0
 8015c5a:	6078      	str	r0, [r7, #4]
 8015c5c:	460b      	mov	r3, r1
 8015c5e:	807b      	strh	r3, [r7, #2]
 8015c60:	4613      	mov	r3, r2
 8015c62:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8015c64:	787b      	ldrb	r3, [r7, #1]
 8015c66:	2b00      	cmp	r3, #0
 8015c68:	d003      	beq.n	8015c72 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8015c6a:	887a      	ldrh	r2, [r7, #2]
 8015c6c:	687b      	ldr	r3, [r7, #4]
 8015c6e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8015c70:	e003      	b.n	8015c7a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8015c72:	887b      	ldrh	r3, [r7, #2]
 8015c74:	041a      	lsls	r2, r3, #16
 8015c76:	687b      	ldr	r3, [r7, #4]
 8015c78:	619a      	str	r2, [r3, #24]
}
 8015c7a:	bf00      	nop
 8015c7c:	370c      	adds	r7, #12
 8015c7e:	46bd      	mov	sp, r7
 8015c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c84:	4770      	bx	lr

08015c86 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8015c86:	b580      	push	{r7, lr}
 8015c88:	b086      	sub	sp, #24
 8015c8a:	af02      	add	r7, sp, #8
 8015c8c:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8015c8e:	687b      	ldr	r3, [r7, #4]
 8015c90:	2b00      	cmp	r3, #0
 8015c92:	d101      	bne.n	8015c98 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8015c94:	2301      	movs	r3, #1
 8015c96:	e059      	b.n	8015d4c <HAL_HCD_Init+0xc6>

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hhcd->Instance;
 8015c98:	687b      	ldr	r3, [r7, #4]
 8015c9a:	681b      	ldr	r3, [r3, #0]
 8015c9c:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8015c9e:	687b      	ldr	r3, [r7, #4]
 8015ca0:	f893 33d5 	ldrb.w	r3, [r3, #981]	@ 0x3d5
 8015ca4:	b2db      	uxtb	r3, r3
 8015ca6:	2b00      	cmp	r3, #0
 8015ca8:	d106      	bne.n	8015cb8 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8015caa:	687b      	ldr	r3, [r7, #4]
 8015cac:	2200      	movs	r2, #0
 8015cae:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8015cb2:	6878      	ldr	r0, [r7, #4]
 8015cb4:	f7fc fa5c 	bl	8012170 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8015cb8:	687b      	ldr	r3, [r7, #4]
 8015cba:	2203      	movs	r2, #3
 8015cbc:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8015cc0:	68fb      	ldr	r3, [r7, #12]
 8015cc2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8015cc6:	d102      	bne.n	8015cce <HAL_HCD_Init+0x48>
  {
    hhcd->Init.dma_enable = 0U;
 8015cc8:	687b      	ldr	r3, [r7, #4]
 8015cca:	2200      	movs	r2, #0
 8015ccc:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8015cce:	687b      	ldr	r3, [r7, #4]
 8015cd0:	681b      	ldr	r3, [r3, #0]
 8015cd2:	4618      	mov	r0, r3
 8015cd4:	f005 fff4 	bl	801bcc0 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  if (USB_CoreInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8015cd8:	687b      	ldr	r3, [r7, #4]
 8015cda:	6818      	ldr	r0, [r3, #0]
 8015cdc:	687b      	ldr	r3, [r7, #4]
 8015cde:	7c1a      	ldrb	r2, [r3, #16]
 8015ce0:	f88d 2000 	strb.w	r2, [sp]
 8015ce4:	3304      	adds	r3, #4
 8015ce6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8015ce8:	f005 ff86 	bl	801bbf8 <USB_CoreInit>
 8015cec:	4603      	mov	r3, r0
 8015cee:	2b00      	cmp	r3, #0
 8015cf0:	d005      	beq.n	8015cfe <HAL_HCD_Init+0x78>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8015cf2:	687b      	ldr	r3, [r7, #4]
 8015cf4:	2202      	movs	r2, #2
 8015cf6:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8015cfa:	2301      	movs	r3, #1
 8015cfc:	e026      	b.n	8015d4c <HAL_HCD_Init+0xc6>
  }

  /* Force Host Mode */
  if (USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE) != HAL_OK)
 8015cfe:	687b      	ldr	r3, [r7, #4]
 8015d00:	681b      	ldr	r3, [r3, #0]
 8015d02:	2101      	movs	r1, #1
 8015d04:	4618      	mov	r0, r3
 8015d06:	f005 ffec 	bl	801bce2 <USB_SetCurrentMode>
 8015d0a:	4603      	mov	r3, r0
 8015d0c:	2b00      	cmp	r3, #0
 8015d0e:	d005      	beq.n	8015d1c <HAL_HCD_Init+0x96>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8015d10:	687b      	ldr	r3, [r7, #4]
 8015d12:	2202      	movs	r2, #2
 8015d14:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8015d18:	2301      	movs	r3, #1
 8015d1a:	e017      	b.n	8015d4c <HAL_HCD_Init+0xc6>
  }

  /* Init Host */
  if (USB_HostInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8015d1c:	687b      	ldr	r3, [r7, #4]
 8015d1e:	6818      	ldr	r0, [r3, #0]
 8015d20:	687b      	ldr	r3, [r7, #4]
 8015d22:	7c1a      	ldrb	r2, [r3, #16]
 8015d24:	f88d 2000 	strb.w	r2, [sp]
 8015d28:	3304      	adds	r3, #4
 8015d2a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8015d2c:	f006 f958 	bl	801bfe0 <USB_HostInit>
 8015d30:	4603      	mov	r3, r0
 8015d32:	2b00      	cmp	r3, #0
 8015d34:	d005      	beq.n	8015d42 <HAL_HCD_Init+0xbc>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8015d36:	687b      	ldr	r3, [r7, #4]
 8015d38:	2202      	movs	r2, #2
 8015d3a:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8015d3e:	2301      	movs	r3, #1
 8015d40:	e004      	b.n	8015d4c <HAL_HCD_Init+0xc6>
  }

  hhcd->State = HAL_HCD_STATE_READY;
 8015d42:	687b      	ldr	r3, [r7, #4]
 8015d44:	2201      	movs	r2, #1
 8015d46:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

  return HAL_OK;
 8015d4a:	2300      	movs	r3, #0
}
 8015d4c:	4618      	mov	r0, r3
 8015d4e:	3710      	adds	r7, #16
 8015d50:	46bd      	mov	sp, r7
 8015d52:	bd80      	pop	{r7, pc}

08015d54 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8015d54:	b580      	push	{r7, lr}
 8015d56:	b086      	sub	sp, #24
 8015d58:	af00      	add	r7, sp, #0
 8015d5a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8015d5c:	687b      	ldr	r3, [r7, #4]
 8015d5e:	681b      	ldr	r3, [r3, #0]
 8015d60:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8015d62:	693b      	ldr	r3, [r7, #16]
 8015d64:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8015d66:	687b      	ldr	r3, [r7, #4]
 8015d68:	681b      	ldr	r3, [r3, #0]
 8015d6a:	4618      	mov	r0, r3
 8015d6c:	f006 f8f1 	bl	801bf52 <USB_GetMode>
 8015d70:	4603      	mov	r3, r0
 8015d72:	2b01      	cmp	r3, #1
 8015d74:	f040 80fb 	bne.w	8015f6e <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8015d78:	687b      	ldr	r3, [r7, #4]
 8015d7a:	681b      	ldr	r3, [r3, #0]
 8015d7c:	4618      	mov	r0, r3
 8015d7e:	f006 f8b4 	bl	801beea <USB_ReadInterrupts>
 8015d82:	4603      	mov	r3, r0
 8015d84:	2b00      	cmp	r3, #0
 8015d86:	f000 80f1 	beq.w	8015f6c <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8015d8a:	687b      	ldr	r3, [r7, #4]
 8015d8c:	681b      	ldr	r3, [r3, #0]
 8015d8e:	4618      	mov	r0, r3
 8015d90:	f006 f8ab 	bl	801beea <USB_ReadInterrupts>
 8015d94:	4603      	mov	r3, r0
 8015d96:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8015d9a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8015d9e:	d104      	bne.n	8015daa <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8015da0:	687b      	ldr	r3, [r7, #4]
 8015da2:	681b      	ldr	r3, [r3, #0]
 8015da4:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8015da8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8015daa:	687b      	ldr	r3, [r7, #4]
 8015dac:	681b      	ldr	r3, [r3, #0]
 8015dae:	4618      	mov	r0, r3
 8015db0:	f006 f89b 	bl	801beea <USB_ReadInterrupts>
 8015db4:	4603      	mov	r3, r0
 8015db6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8015dba:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8015dbe:	d104      	bne.n	8015dca <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8015dc0:	687b      	ldr	r3, [r7, #4]
 8015dc2:	681b      	ldr	r3, [r3, #0]
 8015dc4:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8015dc8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8015dca:	687b      	ldr	r3, [r7, #4]
 8015dcc:	681b      	ldr	r3, [r3, #0]
 8015dce:	4618      	mov	r0, r3
 8015dd0:	f006 f88b 	bl	801beea <USB_ReadInterrupts>
 8015dd4:	4603      	mov	r3, r0
 8015dd6:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8015dda:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8015dde:	d104      	bne.n	8015dea <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8015de0:	687b      	ldr	r3, [r7, #4]
 8015de2:	681b      	ldr	r3, [r3, #0]
 8015de4:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8015de8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8015dea:	687b      	ldr	r3, [r7, #4]
 8015dec:	681b      	ldr	r3, [r3, #0]
 8015dee:	4618      	mov	r0, r3
 8015df0:	f006 f87b 	bl	801beea <USB_ReadInterrupts>
 8015df4:	4603      	mov	r3, r0
 8015df6:	f003 0302 	and.w	r3, r3, #2
 8015dfa:	2b02      	cmp	r3, #2
 8015dfc:	d103      	bne.n	8015e06 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8015dfe:	687b      	ldr	r3, [r7, #4]
 8015e00:	681b      	ldr	r3, [r3, #0]
 8015e02:	2202      	movs	r2, #2
 8015e04:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8015e06:	687b      	ldr	r3, [r7, #4]
 8015e08:	681b      	ldr	r3, [r3, #0]
 8015e0a:	4618      	mov	r0, r3
 8015e0c:	f006 f86d 	bl	801beea <USB_ReadInterrupts>
 8015e10:	4603      	mov	r3, r0
 8015e12:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8015e16:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8015e1a:	d120      	bne.n	8015e5e <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8015e1c:	687b      	ldr	r3, [r7, #4]
 8015e1e:	681b      	ldr	r3, [r3, #0]
 8015e20:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8015e24:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8015e26:	68fb      	ldr	r3, [r7, #12]
 8015e28:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8015e2c:	681b      	ldr	r3, [r3, #0]
 8015e2e:	f003 0301 	and.w	r3, r3, #1
 8015e32:	2b00      	cmp	r3, #0
 8015e34:	d113      	bne.n	8015e5e <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8015e36:	2110      	movs	r1, #16
 8015e38:	6938      	ldr	r0, [r7, #16]
 8015e3a:	f005 ff9e 	bl	801bd7a <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8015e3e:	6938      	ldr	r0, [r7, #16]
 8015e40:	f005 ffcd 	bl	801bdde <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8015e44:	687b      	ldr	r3, [r7, #4]
 8015e46:	7a5b      	ldrb	r3, [r3, #9]
 8015e48:	2b02      	cmp	r3, #2
 8015e4a:	d105      	bne.n	8015e58 <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8015e4c:	687b      	ldr	r3, [r7, #4]
 8015e4e:	681b      	ldr	r3, [r3, #0]
 8015e50:	2101      	movs	r1, #1
 8015e52:	4618      	mov	r0, r3
 8015e54:	f006 f988 	bl	801c168 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8015e58:	6878      	ldr	r0, [r7, #4]
 8015e5a:	f000 f89f 	bl	8015f9c <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8015e5e:	687b      	ldr	r3, [r7, #4]
 8015e60:	681b      	ldr	r3, [r3, #0]
 8015e62:	4618      	mov	r0, r3
 8015e64:	f006 f841 	bl	801beea <USB_ReadInterrupts>
 8015e68:	4603      	mov	r3, r0
 8015e6a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8015e6e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8015e72:	d102      	bne.n	8015e7a <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 8015e74:	6878      	ldr	r0, [r7, #4]
 8015e76:	f001 fcc4 	bl	8017802 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8015e7a:	687b      	ldr	r3, [r7, #4]
 8015e7c:	681b      	ldr	r3, [r3, #0]
 8015e7e:	4618      	mov	r0, r3
 8015e80:	f006 f833 	bl	801beea <USB_ReadInterrupts>
 8015e84:	4603      	mov	r3, r0
 8015e86:	f003 0308 	and.w	r3, r3, #8
 8015e8a:	2b08      	cmp	r3, #8
 8015e8c:	d106      	bne.n	8015e9c <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8015e8e:	6878      	ldr	r0, [r7, #4]
 8015e90:	f000 f870 	bl	8015f74 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8015e94:	687b      	ldr	r3, [r7, #4]
 8015e96:	681b      	ldr	r3, [r3, #0]
 8015e98:	2208      	movs	r2, #8
 8015e9a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8015e9c:	687b      	ldr	r3, [r7, #4]
 8015e9e:	681b      	ldr	r3, [r3, #0]
 8015ea0:	4618      	mov	r0, r3
 8015ea2:	f006 f822 	bl	801beea <USB_ReadInterrupts>
 8015ea6:	4603      	mov	r3, r0
 8015ea8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8015eac:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8015eb0:	d139      	bne.n	8015f26 <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8015eb2:	687b      	ldr	r3, [r7, #4]
 8015eb4:	681b      	ldr	r3, [r3, #0]
 8015eb6:	4618      	mov	r0, r3
 8015eb8:	f006 f993 	bl	801c1e2 <USB_HC_ReadInterrupt>
 8015ebc:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8015ebe:	2300      	movs	r3, #0
 8015ec0:	617b      	str	r3, [r7, #20]
 8015ec2:	e025      	b.n	8015f10 <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8015ec4:	697b      	ldr	r3, [r7, #20]
 8015ec6:	f003 030f 	and.w	r3, r3, #15
 8015eca:	68ba      	ldr	r2, [r7, #8]
 8015ecc:	fa22 f303 	lsr.w	r3, r2, r3
 8015ed0:	f003 0301 	and.w	r3, r3, #1
 8015ed4:	2b00      	cmp	r3, #0
 8015ed6:	d018      	beq.n	8015f0a <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8015ed8:	697b      	ldr	r3, [r7, #20]
 8015eda:	015a      	lsls	r2, r3, #5
 8015edc:	68fb      	ldr	r3, [r7, #12]
 8015ede:	4413      	add	r3, r2
 8015ee0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8015ee4:	681b      	ldr	r3, [r3, #0]
 8015ee6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8015eea:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8015eee:	d106      	bne.n	8015efe <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8015ef0:	697b      	ldr	r3, [r7, #20]
 8015ef2:	b2db      	uxtb	r3, r3
 8015ef4:	4619      	mov	r1, r3
 8015ef6:	6878      	ldr	r0, [r7, #4]
 8015ef8:	f000 f87c 	bl	8015ff4 <HCD_HC_IN_IRQHandler>
 8015efc:	e005      	b.n	8015f0a <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8015efe:	697b      	ldr	r3, [r7, #20]
 8015f00:	b2db      	uxtb	r3, r3
 8015f02:	4619      	mov	r1, r3
 8015f04:	6878      	ldr	r0, [r7, #4]
 8015f06:	f000 fede 	bl	8016cc6 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8015f0a:	697b      	ldr	r3, [r7, #20]
 8015f0c:	3301      	adds	r3, #1
 8015f0e:	617b      	str	r3, [r7, #20]
 8015f10:	687b      	ldr	r3, [r7, #4]
 8015f12:	795b      	ldrb	r3, [r3, #5]
 8015f14:	461a      	mov	r2, r3
 8015f16:	697b      	ldr	r3, [r7, #20]
 8015f18:	4293      	cmp	r3, r2
 8015f1a:	d3d3      	bcc.n	8015ec4 <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8015f1c:	687b      	ldr	r3, [r7, #4]
 8015f1e:	681b      	ldr	r3, [r3, #0]
 8015f20:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8015f24:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8015f26:	687b      	ldr	r3, [r7, #4]
 8015f28:	681b      	ldr	r3, [r3, #0]
 8015f2a:	4618      	mov	r0, r3
 8015f2c:	f005 ffdd 	bl	801beea <USB_ReadInterrupts>
 8015f30:	4603      	mov	r3, r0
 8015f32:	f003 0310 	and.w	r3, r3, #16
 8015f36:	2b10      	cmp	r3, #16
 8015f38:	d101      	bne.n	8015f3e <HAL_HCD_IRQHandler+0x1ea>
 8015f3a:	2301      	movs	r3, #1
 8015f3c:	e000      	b.n	8015f40 <HAL_HCD_IRQHandler+0x1ec>
 8015f3e:	2300      	movs	r3, #0
 8015f40:	2b00      	cmp	r3, #0
 8015f42:	d014      	beq.n	8015f6e <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8015f44:	687b      	ldr	r3, [r7, #4]
 8015f46:	681b      	ldr	r3, [r3, #0]
 8015f48:	699a      	ldr	r2, [r3, #24]
 8015f4a:	687b      	ldr	r3, [r7, #4]
 8015f4c:	681b      	ldr	r3, [r3, #0]
 8015f4e:	f022 0210 	bic.w	r2, r2, #16
 8015f52:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8015f54:	6878      	ldr	r0, [r7, #4]
 8015f56:	f001 fb75 	bl	8017644 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8015f5a:	687b      	ldr	r3, [r7, #4]
 8015f5c:	681b      	ldr	r3, [r3, #0]
 8015f5e:	699a      	ldr	r2, [r3, #24]
 8015f60:	687b      	ldr	r3, [r7, #4]
 8015f62:	681b      	ldr	r3, [r3, #0]
 8015f64:	f042 0210 	orr.w	r2, r2, #16
 8015f68:	619a      	str	r2, [r3, #24]
 8015f6a:	e000      	b.n	8015f6e <HAL_HCD_IRQHandler+0x21a>
      return;
 8015f6c:	bf00      	nop
    }
  }
}
 8015f6e:	3718      	adds	r7, #24
 8015f70:	46bd      	mov	sp, r7
 8015f72:	bd80      	pop	{r7, pc}

08015f74 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd HCD handle
  * @retval None
  */
__weak void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8015f74:	b480      	push	{r7}
 8015f76:	b083      	sub	sp, #12
 8015f78:	af00      	add	r7, sp, #0
 8015f7a:	6078      	str	r0, [r7, #4]
  UNUSED(hhcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HCD_SOF_Callback could be implemented in the user file
   */
}
 8015f7c:	bf00      	nop
 8015f7e:	370c      	adds	r7, #12
 8015f80:	46bd      	mov	sp, r7
 8015f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f86:	4770      	bx	lr

08015f88 <HAL_HCD_Connect_Callback>:
  * @brief Connection Event callback.
  * @param  hhcd HCD handle
  * @retval None
  */
__weak void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8015f88:	b480      	push	{r7}
 8015f8a:	b083      	sub	sp, #12
 8015f8c:	af00      	add	r7, sp, #0
 8015f8e:	6078      	str	r0, [r7, #4]
  UNUSED(hhcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HCD_Connect_Callback could be implemented in the user file
   */
}
 8015f90:	bf00      	nop
 8015f92:	370c      	adds	r7, #12
 8015f94:	46bd      	mov	sp, r7
 8015f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f9a:	4770      	bx	lr

08015f9c <HAL_HCD_Disconnect_Callback>:
  * @brief  Disconnection Event callback.
  * @param  hhcd HCD handle
  * @retval None
  */
__weak void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8015f9c:	b480      	push	{r7}
 8015f9e:	b083      	sub	sp, #12
 8015fa0:	af00      	add	r7, sp, #0
 8015fa2:	6078      	str	r0, [r7, #4]
  UNUSED(hhcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HCD_Disconnect_Callback could be implemented in the user file
   */
}
 8015fa4:	bf00      	nop
 8015fa6:	370c      	adds	r7, #12
 8015fa8:	46bd      	mov	sp, r7
 8015faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015fae:	4770      	bx	lr

08015fb0 <HAL_HCD_PortEnabled_Callback>:
  * @brief  Port Enabled  Event callback.
  * @param  hhcd HCD handle
  * @retval None
  */
__weak void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8015fb0:	b480      	push	{r7}
 8015fb2:	b083      	sub	sp, #12
 8015fb4:	af00      	add	r7, sp, #0
 8015fb6:	6078      	str	r0, [r7, #4]
  UNUSED(hhcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HCD_Disconnect_Callback could be implemented in the user file
   */
}
 8015fb8:	bf00      	nop
 8015fba:	370c      	adds	r7, #12
 8015fbc:	46bd      	mov	sp, r7
 8015fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015fc2:	4770      	bx	lr

08015fc4 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Disabled  Event callback.
  * @param  hhcd HCD handle
  * @retval None
  */
__weak void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8015fc4:	b480      	push	{r7}
 8015fc6:	b083      	sub	sp, #12
 8015fc8:	af00      	add	r7, sp, #0
 8015fca:	6078      	str	r0, [r7, #4]
  UNUSED(hhcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HCD_Disconnect_Callback could be implemented in the user file
   */
}
 8015fcc:	bf00      	nop
 8015fce:	370c      	adds	r7, #12
 8015fd0:	46bd      	mov	sp, r7
 8015fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015fd6:	4770      	bx	lr

08015fd8 <HAL_HCD_HC_NotifyURBChange_Callback>:
  *            URB_ERROR/
  *            URB_STALL/
  * @retval None
  */
__weak void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8015fd8:	b480      	push	{r7}
 8015fda:	b083      	sub	sp, #12
 8015fdc:	af00      	add	r7, sp, #0
 8015fde:	6078      	str	r0, [r7, #4]
 8015fe0:	460b      	mov	r3, r1
 8015fe2:	70fb      	strb	r3, [r7, #3]
 8015fe4:	4613      	mov	r3, r2
 8015fe6:	70bb      	strb	r3, [r7, #2]
  UNUSED(urb_state);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HCD_HC_NotifyURBChange_Callback could be implemented in the user file
   */
}
 8015fe8:	bf00      	nop
 8015fea:	370c      	adds	r7, #12
 8015fec:	46bd      	mov	sp, r7
 8015fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ff2:	4770      	bx	lr

08015ff4 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8015ff4:	b580      	push	{r7, lr}
 8015ff6:	b086      	sub	sp, #24
 8015ff8:	af00      	add	r7, sp, #0
 8015ffa:	6078      	str	r0, [r7, #4]
 8015ffc:	460b      	mov	r3, r1
 8015ffe:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8016000:	687b      	ldr	r3, [r7, #4]
 8016002:	681b      	ldr	r3, [r3, #0]
 8016004:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8016006:	697b      	ldr	r3, [r7, #20]
 8016008:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 801600a:	687b      	ldr	r3, [r7, #4]
 801600c:	681b      	ldr	r3, [r3, #0]
 801600e:	78fa      	ldrb	r2, [r7, #3]
 8016010:	4611      	mov	r1, r2
 8016012:	4618      	mov	r0, r3
 8016014:	f005 ff7c 	bl	801bf10 <USB_ReadChInterrupts>
 8016018:	4603      	mov	r3, r0
 801601a:	f003 0304 	and.w	r3, r3, #4
 801601e:	2b04      	cmp	r3, #4
 8016020:	d11a      	bne.n	8016058 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8016022:	78fb      	ldrb	r3, [r7, #3]
 8016024:	015a      	lsls	r2, r3, #5
 8016026:	693b      	ldr	r3, [r7, #16]
 8016028:	4413      	add	r3, r2
 801602a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 801602e:	461a      	mov	r2, r3
 8016030:	2304      	movs	r3, #4
 8016032:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8016034:	78fa      	ldrb	r2, [r7, #3]
 8016036:	6879      	ldr	r1, [r7, #4]
 8016038:	4613      	mov	r3, r2
 801603a:	011b      	lsls	r3, r3, #4
 801603c:	1a9b      	subs	r3, r3, r2
 801603e:	009b      	lsls	r3, r3, #2
 8016040:	440b      	add	r3, r1
 8016042:	334d      	adds	r3, #77	@ 0x4d
 8016044:	2207      	movs	r2, #7
 8016046:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8016048:	687b      	ldr	r3, [r7, #4]
 801604a:	681b      	ldr	r3, [r3, #0]
 801604c:	78fa      	ldrb	r2, [r7, #3]
 801604e:	4611      	mov	r1, r2
 8016050:	4618      	mov	r0, r3
 8016052:	f006 f8d7 	bl	801c204 <USB_HC_Halt>
 8016056:	e09e      	b.n	8016196 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 8016058:	687b      	ldr	r3, [r7, #4]
 801605a:	681b      	ldr	r3, [r3, #0]
 801605c:	78fa      	ldrb	r2, [r7, #3]
 801605e:	4611      	mov	r1, r2
 8016060:	4618      	mov	r0, r3
 8016062:	f005 ff55 	bl	801bf10 <USB_ReadChInterrupts>
 8016066:	4603      	mov	r3, r0
 8016068:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801606c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8016070:	d11b      	bne.n	80160aa <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 8016072:	78fb      	ldrb	r3, [r7, #3]
 8016074:	015a      	lsls	r2, r3, #5
 8016076:	693b      	ldr	r3, [r7, #16]
 8016078:	4413      	add	r3, r2
 801607a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 801607e:	461a      	mov	r2, r3
 8016080:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8016084:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 8016086:	78fa      	ldrb	r2, [r7, #3]
 8016088:	6879      	ldr	r1, [r7, #4]
 801608a:	4613      	mov	r3, r2
 801608c:	011b      	lsls	r3, r3, #4
 801608e:	1a9b      	subs	r3, r3, r2
 8016090:	009b      	lsls	r3, r3, #2
 8016092:	440b      	add	r3, r1
 8016094:	334d      	adds	r3, #77	@ 0x4d
 8016096:	2208      	movs	r2, #8
 8016098:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 801609a:	687b      	ldr	r3, [r7, #4]
 801609c:	681b      	ldr	r3, [r3, #0]
 801609e:	78fa      	ldrb	r2, [r7, #3]
 80160a0:	4611      	mov	r1, r2
 80160a2:	4618      	mov	r0, r3
 80160a4:	f006 f8ae 	bl	801c204 <USB_HC_Halt>
 80160a8:	e075      	b.n	8016196 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 80160aa:	687b      	ldr	r3, [r7, #4]
 80160ac:	681b      	ldr	r3, [r3, #0]
 80160ae:	78fa      	ldrb	r2, [r7, #3]
 80160b0:	4611      	mov	r1, r2
 80160b2:	4618      	mov	r0, r3
 80160b4:	f005 ff2c 	bl	801bf10 <USB_ReadChInterrupts>
 80160b8:	4603      	mov	r3, r0
 80160ba:	f003 0308 	and.w	r3, r3, #8
 80160be:	2b08      	cmp	r3, #8
 80160c0:	d11a      	bne.n	80160f8 <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 80160c2:	78fb      	ldrb	r3, [r7, #3]
 80160c4:	015a      	lsls	r2, r3, #5
 80160c6:	693b      	ldr	r3, [r7, #16]
 80160c8:	4413      	add	r3, r2
 80160ca:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80160ce:	461a      	mov	r2, r3
 80160d0:	2308      	movs	r3, #8
 80160d2:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 80160d4:	78fa      	ldrb	r2, [r7, #3]
 80160d6:	6879      	ldr	r1, [r7, #4]
 80160d8:	4613      	mov	r3, r2
 80160da:	011b      	lsls	r3, r3, #4
 80160dc:	1a9b      	subs	r3, r3, r2
 80160de:	009b      	lsls	r3, r3, #2
 80160e0:	440b      	add	r3, r1
 80160e2:	334d      	adds	r3, #77	@ 0x4d
 80160e4:	2206      	movs	r2, #6
 80160e6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80160e8:	687b      	ldr	r3, [r7, #4]
 80160ea:	681b      	ldr	r3, [r3, #0]
 80160ec:	78fa      	ldrb	r2, [r7, #3]
 80160ee:	4611      	mov	r1, r2
 80160f0:	4618      	mov	r0, r3
 80160f2:	f006 f887 	bl	801c204 <USB_HC_Halt>
 80160f6:	e04e      	b.n	8016196 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 80160f8:	687b      	ldr	r3, [r7, #4]
 80160fa:	681b      	ldr	r3, [r3, #0]
 80160fc:	78fa      	ldrb	r2, [r7, #3]
 80160fe:	4611      	mov	r1, r2
 8016100:	4618      	mov	r0, r3
 8016102:	f005 ff05 	bl	801bf10 <USB_ReadChInterrupts>
 8016106:	4603      	mov	r3, r0
 8016108:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 801610c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8016110:	d11b      	bne.n	801614a <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8016112:	78fb      	ldrb	r3, [r7, #3]
 8016114:	015a      	lsls	r2, r3, #5
 8016116:	693b      	ldr	r3, [r7, #16]
 8016118:	4413      	add	r3, r2
 801611a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 801611e:	461a      	mov	r2, r3
 8016120:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8016124:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8016126:	78fa      	ldrb	r2, [r7, #3]
 8016128:	6879      	ldr	r1, [r7, #4]
 801612a:	4613      	mov	r3, r2
 801612c:	011b      	lsls	r3, r3, #4
 801612e:	1a9b      	subs	r3, r3, r2
 8016130:	009b      	lsls	r3, r3, #2
 8016132:	440b      	add	r3, r1
 8016134:	334d      	adds	r3, #77	@ 0x4d
 8016136:	2209      	movs	r2, #9
 8016138:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 801613a:	687b      	ldr	r3, [r7, #4]
 801613c:	681b      	ldr	r3, [r3, #0]
 801613e:	78fa      	ldrb	r2, [r7, #3]
 8016140:	4611      	mov	r1, r2
 8016142:	4618      	mov	r0, r3
 8016144:	f006 f85e 	bl	801c204 <USB_HC_Halt>
 8016148:	e025      	b.n	8016196 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 801614a:	687b      	ldr	r3, [r7, #4]
 801614c:	681b      	ldr	r3, [r3, #0]
 801614e:	78fa      	ldrb	r2, [r7, #3]
 8016150:	4611      	mov	r1, r2
 8016152:	4618      	mov	r0, r3
 8016154:	f005 fedc 	bl	801bf10 <USB_ReadChInterrupts>
 8016158:	4603      	mov	r3, r0
 801615a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801615e:	2b80      	cmp	r3, #128	@ 0x80
 8016160:	d119      	bne.n	8016196 <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8016162:	78fb      	ldrb	r3, [r7, #3]
 8016164:	015a      	lsls	r2, r3, #5
 8016166:	693b      	ldr	r3, [r7, #16]
 8016168:	4413      	add	r3, r2
 801616a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 801616e:	461a      	mov	r2, r3
 8016170:	2380      	movs	r3, #128	@ 0x80
 8016172:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8016174:	78fa      	ldrb	r2, [r7, #3]
 8016176:	6879      	ldr	r1, [r7, #4]
 8016178:	4613      	mov	r3, r2
 801617a:	011b      	lsls	r3, r3, #4
 801617c:	1a9b      	subs	r3, r3, r2
 801617e:	009b      	lsls	r3, r3, #2
 8016180:	440b      	add	r3, r1
 8016182:	334d      	adds	r3, #77	@ 0x4d
 8016184:	2207      	movs	r2, #7
 8016186:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8016188:	687b      	ldr	r3, [r7, #4]
 801618a:	681b      	ldr	r3, [r3, #0]
 801618c:	78fa      	ldrb	r2, [r7, #3]
 801618e:	4611      	mov	r1, r2
 8016190:	4618      	mov	r0, r3
 8016192:	f006 f837 	bl	801c204 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8016196:	687b      	ldr	r3, [r7, #4]
 8016198:	681b      	ldr	r3, [r3, #0]
 801619a:	78fa      	ldrb	r2, [r7, #3]
 801619c:	4611      	mov	r1, r2
 801619e:	4618      	mov	r0, r3
 80161a0:	f005 feb6 	bl	801bf10 <USB_ReadChInterrupts>
 80161a4:	4603      	mov	r3, r0
 80161a6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80161aa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80161ae:	d112      	bne.n	80161d6 <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80161b0:	687b      	ldr	r3, [r7, #4]
 80161b2:	681b      	ldr	r3, [r3, #0]
 80161b4:	78fa      	ldrb	r2, [r7, #3]
 80161b6:	4611      	mov	r1, r2
 80161b8:	4618      	mov	r0, r3
 80161ba:	f006 f823 	bl	801c204 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 80161be:	78fb      	ldrb	r3, [r7, #3]
 80161c0:	015a      	lsls	r2, r3, #5
 80161c2:	693b      	ldr	r3, [r7, #16]
 80161c4:	4413      	add	r3, r2
 80161c6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80161ca:	461a      	mov	r2, r3
 80161cc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80161d0:	6093      	str	r3, [r2, #8]
 80161d2:	f000 bd75 	b.w	8016cc0 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 80161d6:	687b      	ldr	r3, [r7, #4]
 80161d8:	681b      	ldr	r3, [r3, #0]
 80161da:	78fa      	ldrb	r2, [r7, #3]
 80161dc:	4611      	mov	r1, r2
 80161de:	4618      	mov	r0, r3
 80161e0:	f005 fe96 	bl	801bf10 <USB_ReadChInterrupts>
 80161e4:	4603      	mov	r3, r0
 80161e6:	f003 0301 	and.w	r3, r3, #1
 80161ea:	2b01      	cmp	r3, #1
 80161ec:	f040 8128 	bne.w	8016440 <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 80161f0:	78fb      	ldrb	r3, [r7, #3]
 80161f2:	015a      	lsls	r2, r3, #5
 80161f4:	693b      	ldr	r3, [r7, #16]
 80161f6:	4413      	add	r3, r2
 80161f8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80161fc:	461a      	mov	r2, r3
 80161fe:	2320      	movs	r3, #32
 8016200:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 8016202:	78fa      	ldrb	r2, [r7, #3]
 8016204:	6879      	ldr	r1, [r7, #4]
 8016206:	4613      	mov	r3, r2
 8016208:	011b      	lsls	r3, r3, #4
 801620a:	1a9b      	subs	r3, r3, r2
 801620c:	009b      	lsls	r3, r3, #2
 801620e:	440b      	add	r3, r1
 8016210:	331b      	adds	r3, #27
 8016212:	781b      	ldrb	r3, [r3, #0]
 8016214:	2b01      	cmp	r3, #1
 8016216:	d119      	bne.n	801624c <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8016218:	78fa      	ldrb	r2, [r7, #3]
 801621a:	6879      	ldr	r1, [r7, #4]
 801621c:	4613      	mov	r3, r2
 801621e:	011b      	lsls	r3, r3, #4
 8016220:	1a9b      	subs	r3, r3, r2
 8016222:	009b      	lsls	r3, r3, #2
 8016224:	440b      	add	r3, r1
 8016226:	331b      	adds	r3, #27
 8016228:	2200      	movs	r2, #0
 801622a:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 801622c:	78fb      	ldrb	r3, [r7, #3]
 801622e:	015a      	lsls	r2, r3, #5
 8016230:	693b      	ldr	r3, [r7, #16]
 8016232:	4413      	add	r3, r2
 8016234:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8016238:	685b      	ldr	r3, [r3, #4]
 801623a:	78fa      	ldrb	r2, [r7, #3]
 801623c:	0151      	lsls	r1, r2, #5
 801623e:	693a      	ldr	r2, [r7, #16]
 8016240:	440a      	add	r2, r1
 8016242:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8016246:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 801624a:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 801624c:	687b      	ldr	r3, [r7, #4]
 801624e:	799b      	ldrb	r3, [r3, #6]
 8016250:	2b00      	cmp	r3, #0
 8016252:	d01b      	beq.n	801628c <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8016254:	78fa      	ldrb	r2, [r7, #3]
 8016256:	6879      	ldr	r1, [r7, #4]
 8016258:	4613      	mov	r3, r2
 801625a:	011b      	lsls	r3, r3, #4
 801625c:	1a9b      	subs	r3, r3, r2
 801625e:	009b      	lsls	r3, r3, #2
 8016260:	440b      	add	r3, r1
 8016262:	3330      	adds	r3, #48	@ 0x30
 8016264:	6819      	ldr	r1, [r3, #0]
 8016266:	78fb      	ldrb	r3, [r7, #3]
 8016268:	015a      	lsls	r2, r3, #5
 801626a:	693b      	ldr	r3, [r7, #16]
 801626c:	4413      	add	r3, r2
 801626e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8016272:	691b      	ldr	r3, [r3, #16]
 8016274:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8016278:	78fa      	ldrb	r2, [r7, #3]
 801627a:	1ac9      	subs	r1, r1, r3
 801627c:	6878      	ldr	r0, [r7, #4]
 801627e:	4613      	mov	r3, r2
 8016280:	011b      	lsls	r3, r3, #4
 8016282:	1a9b      	subs	r3, r3, r2
 8016284:	009b      	lsls	r3, r3, #2
 8016286:	4403      	add	r3, r0
 8016288:	3338      	adds	r3, #56	@ 0x38
 801628a:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 801628c:	78fa      	ldrb	r2, [r7, #3]
 801628e:	6879      	ldr	r1, [r7, #4]
 8016290:	4613      	mov	r3, r2
 8016292:	011b      	lsls	r3, r3, #4
 8016294:	1a9b      	subs	r3, r3, r2
 8016296:	009b      	lsls	r3, r3, #2
 8016298:	440b      	add	r3, r1
 801629a:	334d      	adds	r3, #77	@ 0x4d
 801629c:	2201      	movs	r2, #1
 801629e:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 80162a0:	78fa      	ldrb	r2, [r7, #3]
 80162a2:	6879      	ldr	r1, [r7, #4]
 80162a4:	4613      	mov	r3, r2
 80162a6:	011b      	lsls	r3, r3, #4
 80162a8:	1a9b      	subs	r3, r3, r2
 80162aa:	009b      	lsls	r3, r3, #2
 80162ac:	440b      	add	r3, r1
 80162ae:	3344      	adds	r3, #68	@ 0x44
 80162b0:	2200      	movs	r2, #0
 80162b2:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 80162b4:	78fb      	ldrb	r3, [r7, #3]
 80162b6:	015a      	lsls	r2, r3, #5
 80162b8:	693b      	ldr	r3, [r7, #16]
 80162ba:	4413      	add	r3, r2
 80162bc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80162c0:	461a      	mov	r2, r3
 80162c2:	2301      	movs	r3, #1
 80162c4:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80162c6:	78fa      	ldrb	r2, [r7, #3]
 80162c8:	6879      	ldr	r1, [r7, #4]
 80162ca:	4613      	mov	r3, r2
 80162cc:	011b      	lsls	r3, r3, #4
 80162ce:	1a9b      	subs	r3, r3, r2
 80162d0:	009b      	lsls	r3, r3, #2
 80162d2:	440b      	add	r3, r1
 80162d4:	3326      	adds	r3, #38	@ 0x26
 80162d6:	781b      	ldrb	r3, [r3, #0]
 80162d8:	2b00      	cmp	r3, #0
 80162da:	d00a      	beq.n	80162f2 <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80162dc:	78fa      	ldrb	r2, [r7, #3]
 80162de:	6879      	ldr	r1, [r7, #4]
 80162e0:	4613      	mov	r3, r2
 80162e2:	011b      	lsls	r3, r3, #4
 80162e4:	1a9b      	subs	r3, r3, r2
 80162e6:	009b      	lsls	r3, r3, #2
 80162e8:	440b      	add	r3, r1
 80162ea:	3326      	adds	r3, #38	@ 0x26
 80162ec:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80162ee:	2b02      	cmp	r3, #2
 80162f0:	d110      	bne.n	8016314 <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80162f2:	687b      	ldr	r3, [r7, #4]
 80162f4:	681b      	ldr	r3, [r3, #0]
 80162f6:	78fa      	ldrb	r2, [r7, #3]
 80162f8:	4611      	mov	r1, r2
 80162fa:	4618      	mov	r0, r3
 80162fc:	f005 ff82 	bl	801c204 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8016300:	78fb      	ldrb	r3, [r7, #3]
 8016302:	015a      	lsls	r2, r3, #5
 8016304:	693b      	ldr	r3, [r7, #16]
 8016306:	4413      	add	r3, r2
 8016308:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 801630c:	461a      	mov	r2, r3
 801630e:	2310      	movs	r3, #16
 8016310:	6093      	str	r3, [r2, #8]
 8016312:	e03d      	b.n	8016390 <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8016314:	78fa      	ldrb	r2, [r7, #3]
 8016316:	6879      	ldr	r1, [r7, #4]
 8016318:	4613      	mov	r3, r2
 801631a:	011b      	lsls	r3, r3, #4
 801631c:	1a9b      	subs	r3, r3, r2
 801631e:	009b      	lsls	r3, r3, #2
 8016320:	440b      	add	r3, r1
 8016322:	3326      	adds	r3, #38	@ 0x26
 8016324:	781b      	ldrb	r3, [r3, #0]
 8016326:	2b03      	cmp	r3, #3
 8016328:	d00a      	beq.n	8016340 <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 801632a:	78fa      	ldrb	r2, [r7, #3]
 801632c:	6879      	ldr	r1, [r7, #4]
 801632e:	4613      	mov	r3, r2
 8016330:	011b      	lsls	r3, r3, #4
 8016332:	1a9b      	subs	r3, r3, r2
 8016334:	009b      	lsls	r3, r3, #2
 8016336:	440b      	add	r3, r1
 8016338:	3326      	adds	r3, #38	@ 0x26
 801633a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 801633c:	2b01      	cmp	r3, #1
 801633e:	d127      	bne.n	8016390 <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8016340:	78fb      	ldrb	r3, [r7, #3]
 8016342:	015a      	lsls	r2, r3, #5
 8016344:	693b      	ldr	r3, [r7, #16]
 8016346:	4413      	add	r3, r2
 8016348:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 801634c:	681b      	ldr	r3, [r3, #0]
 801634e:	78fa      	ldrb	r2, [r7, #3]
 8016350:	0151      	lsls	r1, r2, #5
 8016352:	693a      	ldr	r2, [r7, #16]
 8016354:	440a      	add	r2, r1
 8016356:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 801635a:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 801635e:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8016360:	78fa      	ldrb	r2, [r7, #3]
 8016362:	6879      	ldr	r1, [r7, #4]
 8016364:	4613      	mov	r3, r2
 8016366:	011b      	lsls	r3, r3, #4
 8016368:	1a9b      	subs	r3, r3, r2
 801636a:	009b      	lsls	r3, r3, #2
 801636c:	440b      	add	r3, r1
 801636e:	334c      	adds	r3, #76	@ 0x4c
 8016370:	2201      	movs	r2, #1
 8016372:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8016374:	78fa      	ldrb	r2, [r7, #3]
 8016376:	6879      	ldr	r1, [r7, #4]
 8016378:	4613      	mov	r3, r2
 801637a:	011b      	lsls	r3, r3, #4
 801637c:	1a9b      	subs	r3, r3, r2
 801637e:	009b      	lsls	r3, r3, #2
 8016380:	440b      	add	r3, r1
 8016382:	334c      	adds	r3, #76	@ 0x4c
 8016384:	781a      	ldrb	r2, [r3, #0]
 8016386:	78fb      	ldrb	r3, [r7, #3]
 8016388:	4619      	mov	r1, r3
 801638a:	6878      	ldr	r0, [r7, #4]
 801638c:	f7ff fe24 	bl	8015fd8 <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 8016390:	687b      	ldr	r3, [r7, #4]
 8016392:	799b      	ldrb	r3, [r3, #6]
 8016394:	2b01      	cmp	r3, #1
 8016396:	d13b      	bne.n	8016410 <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 8016398:	78fa      	ldrb	r2, [r7, #3]
 801639a:	6879      	ldr	r1, [r7, #4]
 801639c:	4613      	mov	r3, r2
 801639e:	011b      	lsls	r3, r3, #4
 80163a0:	1a9b      	subs	r3, r3, r2
 80163a2:	009b      	lsls	r3, r3, #2
 80163a4:	440b      	add	r3, r1
 80163a6:	3338      	adds	r3, #56	@ 0x38
 80163a8:	6819      	ldr	r1, [r3, #0]
 80163aa:	78fa      	ldrb	r2, [r7, #3]
 80163ac:	6878      	ldr	r0, [r7, #4]
 80163ae:	4613      	mov	r3, r2
 80163b0:	011b      	lsls	r3, r3, #4
 80163b2:	1a9b      	subs	r3, r3, r2
 80163b4:	009b      	lsls	r3, r3, #2
 80163b6:	4403      	add	r3, r0
 80163b8:	3328      	adds	r3, #40	@ 0x28
 80163ba:	881b      	ldrh	r3, [r3, #0]
 80163bc:	440b      	add	r3, r1
 80163be:	1e59      	subs	r1, r3, #1
 80163c0:	78fa      	ldrb	r2, [r7, #3]
 80163c2:	6878      	ldr	r0, [r7, #4]
 80163c4:	4613      	mov	r3, r2
 80163c6:	011b      	lsls	r3, r3, #4
 80163c8:	1a9b      	subs	r3, r3, r2
 80163ca:	009b      	lsls	r3, r3, #2
 80163cc:	4403      	add	r3, r0
 80163ce:	3328      	adds	r3, #40	@ 0x28
 80163d0:	881b      	ldrh	r3, [r3, #0]
 80163d2:	fbb1 f3f3 	udiv	r3, r1, r3
 80163d6:	f003 0301 	and.w	r3, r3, #1
 80163da:	2b00      	cmp	r3, #0
 80163dc:	f000 8470 	beq.w	8016cc0 <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 80163e0:	78fa      	ldrb	r2, [r7, #3]
 80163e2:	6879      	ldr	r1, [r7, #4]
 80163e4:	4613      	mov	r3, r2
 80163e6:	011b      	lsls	r3, r3, #4
 80163e8:	1a9b      	subs	r3, r3, r2
 80163ea:	009b      	lsls	r3, r3, #2
 80163ec:	440b      	add	r3, r1
 80163ee:	333c      	adds	r3, #60	@ 0x3c
 80163f0:	781b      	ldrb	r3, [r3, #0]
 80163f2:	78fa      	ldrb	r2, [r7, #3]
 80163f4:	f083 0301 	eor.w	r3, r3, #1
 80163f8:	b2d8      	uxtb	r0, r3
 80163fa:	6879      	ldr	r1, [r7, #4]
 80163fc:	4613      	mov	r3, r2
 80163fe:	011b      	lsls	r3, r3, #4
 8016400:	1a9b      	subs	r3, r3, r2
 8016402:	009b      	lsls	r3, r3, #2
 8016404:	440b      	add	r3, r1
 8016406:	333c      	adds	r3, #60	@ 0x3c
 8016408:	4602      	mov	r2, r0
 801640a:	701a      	strb	r2, [r3, #0]
 801640c:	f000 bc58 	b.w	8016cc0 <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 8016410:	78fa      	ldrb	r2, [r7, #3]
 8016412:	6879      	ldr	r1, [r7, #4]
 8016414:	4613      	mov	r3, r2
 8016416:	011b      	lsls	r3, r3, #4
 8016418:	1a9b      	subs	r3, r3, r2
 801641a:	009b      	lsls	r3, r3, #2
 801641c:	440b      	add	r3, r1
 801641e:	333c      	adds	r3, #60	@ 0x3c
 8016420:	781b      	ldrb	r3, [r3, #0]
 8016422:	78fa      	ldrb	r2, [r7, #3]
 8016424:	f083 0301 	eor.w	r3, r3, #1
 8016428:	b2d8      	uxtb	r0, r3
 801642a:	6879      	ldr	r1, [r7, #4]
 801642c:	4613      	mov	r3, r2
 801642e:	011b      	lsls	r3, r3, #4
 8016430:	1a9b      	subs	r3, r3, r2
 8016432:	009b      	lsls	r3, r3, #2
 8016434:	440b      	add	r3, r1
 8016436:	333c      	adds	r3, #60	@ 0x3c
 8016438:	4602      	mov	r2, r0
 801643a:	701a      	strb	r2, [r3, #0]
 801643c:	f000 bc40 	b.w	8016cc0 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8016440:	687b      	ldr	r3, [r7, #4]
 8016442:	681b      	ldr	r3, [r3, #0]
 8016444:	78fa      	ldrb	r2, [r7, #3]
 8016446:	4611      	mov	r1, r2
 8016448:	4618      	mov	r0, r3
 801644a:	f005 fd61 	bl	801bf10 <USB_ReadChInterrupts>
 801644e:	4603      	mov	r3, r0
 8016450:	f003 0320 	and.w	r3, r3, #32
 8016454:	2b20      	cmp	r3, #32
 8016456:	d131      	bne.n	80164bc <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8016458:	78fb      	ldrb	r3, [r7, #3]
 801645a:	015a      	lsls	r2, r3, #5
 801645c:	693b      	ldr	r3, [r7, #16]
 801645e:	4413      	add	r3, r2
 8016460:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8016464:	461a      	mov	r2, r3
 8016466:	2320      	movs	r3, #32
 8016468:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 801646a:	78fa      	ldrb	r2, [r7, #3]
 801646c:	6879      	ldr	r1, [r7, #4]
 801646e:	4613      	mov	r3, r2
 8016470:	011b      	lsls	r3, r3, #4
 8016472:	1a9b      	subs	r3, r3, r2
 8016474:	009b      	lsls	r3, r3, #2
 8016476:	440b      	add	r3, r1
 8016478:	331a      	adds	r3, #26
 801647a:	781b      	ldrb	r3, [r3, #0]
 801647c:	2b01      	cmp	r3, #1
 801647e:	f040 841f 	bne.w	8016cc0 <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 8016482:	78fa      	ldrb	r2, [r7, #3]
 8016484:	6879      	ldr	r1, [r7, #4]
 8016486:	4613      	mov	r3, r2
 8016488:	011b      	lsls	r3, r3, #4
 801648a:	1a9b      	subs	r3, r3, r2
 801648c:	009b      	lsls	r3, r3, #2
 801648e:	440b      	add	r3, r1
 8016490:	331b      	adds	r3, #27
 8016492:	2201      	movs	r2, #1
 8016494:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8016496:	78fa      	ldrb	r2, [r7, #3]
 8016498:	6879      	ldr	r1, [r7, #4]
 801649a:	4613      	mov	r3, r2
 801649c:	011b      	lsls	r3, r3, #4
 801649e:	1a9b      	subs	r3, r3, r2
 80164a0:	009b      	lsls	r3, r3, #2
 80164a2:	440b      	add	r3, r1
 80164a4:	334d      	adds	r3, #77	@ 0x4d
 80164a6:	2203      	movs	r2, #3
 80164a8:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80164aa:	687b      	ldr	r3, [r7, #4]
 80164ac:	681b      	ldr	r3, [r3, #0]
 80164ae:	78fa      	ldrb	r2, [r7, #3]
 80164b0:	4611      	mov	r1, r2
 80164b2:	4618      	mov	r0, r3
 80164b4:	f005 fea6 	bl	801c204 <USB_HC_Halt>
 80164b8:	f000 bc02 	b.w	8016cc0 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 80164bc:	687b      	ldr	r3, [r7, #4]
 80164be:	681b      	ldr	r3, [r3, #0]
 80164c0:	78fa      	ldrb	r2, [r7, #3]
 80164c2:	4611      	mov	r1, r2
 80164c4:	4618      	mov	r0, r3
 80164c6:	f005 fd23 	bl	801bf10 <USB_ReadChInterrupts>
 80164ca:	4603      	mov	r3, r0
 80164cc:	f003 0302 	and.w	r3, r3, #2
 80164d0:	2b02      	cmp	r3, #2
 80164d2:	f040 8305 	bne.w	8016ae0 <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 80164d6:	78fb      	ldrb	r3, [r7, #3]
 80164d8:	015a      	lsls	r2, r3, #5
 80164da:	693b      	ldr	r3, [r7, #16]
 80164dc:	4413      	add	r3, r2
 80164de:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80164e2:	461a      	mov	r2, r3
 80164e4:	2302      	movs	r3, #2
 80164e6:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 80164e8:	78fa      	ldrb	r2, [r7, #3]
 80164ea:	6879      	ldr	r1, [r7, #4]
 80164ec:	4613      	mov	r3, r2
 80164ee:	011b      	lsls	r3, r3, #4
 80164f0:	1a9b      	subs	r3, r3, r2
 80164f2:	009b      	lsls	r3, r3, #2
 80164f4:	440b      	add	r3, r1
 80164f6:	334d      	adds	r3, #77	@ 0x4d
 80164f8:	781b      	ldrb	r3, [r3, #0]
 80164fa:	2b01      	cmp	r3, #1
 80164fc:	d114      	bne.n	8016528 <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80164fe:	78fa      	ldrb	r2, [r7, #3]
 8016500:	6879      	ldr	r1, [r7, #4]
 8016502:	4613      	mov	r3, r2
 8016504:	011b      	lsls	r3, r3, #4
 8016506:	1a9b      	subs	r3, r3, r2
 8016508:	009b      	lsls	r3, r3, #2
 801650a:	440b      	add	r3, r1
 801650c:	334d      	adds	r3, #77	@ 0x4d
 801650e:	2202      	movs	r2, #2
 8016510:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8016512:	78fa      	ldrb	r2, [r7, #3]
 8016514:	6879      	ldr	r1, [r7, #4]
 8016516:	4613      	mov	r3, r2
 8016518:	011b      	lsls	r3, r3, #4
 801651a:	1a9b      	subs	r3, r3, r2
 801651c:	009b      	lsls	r3, r3, #2
 801651e:	440b      	add	r3, r1
 8016520:	334c      	adds	r3, #76	@ 0x4c
 8016522:	2201      	movs	r2, #1
 8016524:	701a      	strb	r2, [r3, #0]
 8016526:	e2cc      	b.n	8016ac2 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8016528:	78fa      	ldrb	r2, [r7, #3]
 801652a:	6879      	ldr	r1, [r7, #4]
 801652c:	4613      	mov	r3, r2
 801652e:	011b      	lsls	r3, r3, #4
 8016530:	1a9b      	subs	r3, r3, r2
 8016532:	009b      	lsls	r3, r3, #2
 8016534:	440b      	add	r3, r1
 8016536:	334d      	adds	r3, #77	@ 0x4d
 8016538:	781b      	ldrb	r3, [r3, #0]
 801653a:	2b06      	cmp	r3, #6
 801653c:	d114      	bne.n	8016568 <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 801653e:	78fa      	ldrb	r2, [r7, #3]
 8016540:	6879      	ldr	r1, [r7, #4]
 8016542:	4613      	mov	r3, r2
 8016544:	011b      	lsls	r3, r3, #4
 8016546:	1a9b      	subs	r3, r3, r2
 8016548:	009b      	lsls	r3, r3, #2
 801654a:	440b      	add	r3, r1
 801654c:	334d      	adds	r3, #77	@ 0x4d
 801654e:	2202      	movs	r2, #2
 8016550:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 8016552:	78fa      	ldrb	r2, [r7, #3]
 8016554:	6879      	ldr	r1, [r7, #4]
 8016556:	4613      	mov	r3, r2
 8016558:	011b      	lsls	r3, r3, #4
 801655a:	1a9b      	subs	r3, r3, r2
 801655c:	009b      	lsls	r3, r3, #2
 801655e:	440b      	add	r3, r1
 8016560:	334c      	adds	r3, #76	@ 0x4c
 8016562:	2205      	movs	r2, #5
 8016564:	701a      	strb	r2, [r3, #0]
 8016566:	e2ac      	b.n	8016ac2 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8016568:	78fa      	ldrb	r2, [r7, #3]
 801656a:	6879      	ldr	r1, [r7, #4]
 801656c:	4613      	mov	r3, r2
 801656e:	011b      	lsls	r3, r3, #4
 8016570:	1a9b      	subs	r3, r3, r2
 8016572:	009b      	lsls	r3, r3, #2
 8016574:	440b      	add	r3, r1
 8016576:	334d      	adds	r3, #77	@ 0x4d
 8016578:	781b      	ldrb	r3, [r3, #0]
 801657a:	2b07      	cmp	r3, #7
 801657c:	d00b      	beq.n	8016596 <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 801657e:	78fa      	ldrb	r2, [r7, #3]
 8016580:	6879      	ldr	r1, [r7, #4]
 8016582:	4613      	mov	r3, r2
 8016584:	011b      	lsls	r3, r3, #4
 8016586:	1a9b      	subs	r3, r3, r2
 8016588:	009b      	lsls	r3, r3, #2
 801658a:	440b      	add	r3, r1
 801658c:	334d      	adds	r3, #77	@ 0x4d
 801658e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8016590:	2b09      	cmp	r3, #9
 8016592:	f040 80a6 	bne.w	80166e2 <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8016596:	78fa      	ldrb	r2, [r7, #3]
 8016598:	6879      	ldr	r1, [r7, #4]
 801659a:	4613      	mov	r3, r2
 801659c:	011b      	lsls	r3, r3, #4
 801659e:	1a9b      	subs	r3, r3, r2
 80165a0:	009b      	lsls	r3, r3, #2
 80165a2:	440b      	add	r3, r1
 80165a4:	334d      	adds	r3, #77	@ 0x4d
 80165a6:	2202      	movs	r2, #2
 80165a8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 80165aa:	78fa      	ldrb	r2, [r7, #3]
 80165ac:	6879      	ldr	r1, [r7, #4]
 80165ae:	4613      	mov	r3, r2
 80165b0:	011b      	lsls	r3, r3, #4
 80165b2:	1a9b      	subs	r3, r3, r2
 80165b4:	009b      	lsls	r3, r3, #2
 80165b6:	440b      	add	r3, r1
 80165b8:	3344      	adds	r3, #68	@ 0x44
 80165ba:	681b      	ldr	r3, [r3, #0]
 80165bc:	1c59      	adds	r1, r3, #1
 80165be:	6878      	ldr	r0, [r7, #4]
 80165c0:	4613      	mov	r3, r2
 80165c2:	011b      	lsls	r3, r3, #4
 80165c4:	1a9b      	subs	r3, r3, r2
 80165c6:	009b      	lsls	r3, r3, #2
 80165c8:	4403      	add	r3, r0
 80165ca:	3344      	adds	r3, #68	@ 0x44
 80165cc:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80165ce:	78fa      	ldrb	r2, [r7, #3]
 80165d0:	6879      	ldr	r1, [r7, #4]
 80165d2:	4613      	mov	r3, r2
 80165d4:	011b      	lsls	r3, r3, #4
 80165d6:	1a9b      	subs	r3, r3, r2
 80165d8:	009b      	lsls	r3, r3, #2
 80165da:	440b      	add	r3, r1
 80165dc:	3344      	adds	r3, #68	@ 0x44
 80165de:	681b      	ldr	r3, [r3, #0]
 80165e0:	2b02      	cmp	r3, #2
 80165e2:	d943      	bls.n	801666c <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 80165e4:	78fa      	ldrb	r2, [r7, #3]
 80165e6:	6879      	ldr	r1, [r7, #4]
 80165e8:	4613      	mov	r3, r2
 80165ea:	011b      	lsls	r3, r3, #4
 80165ec:	1a9b      	subs	r3, r3, r2
 80165ee:	009b      	lsls	r3, r3, #2
 80165f0:	440b      	add	r3, r1
 80165f2:	3344      	adds	r3, #68	@ 0x44
 80165f4:	2200      	movs	r2, #0
 80165f6:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 80165f8:	78fa      	ldrb	r2, [r7, #3]
 80165fa:	6879      	ldr	r1, [r7, #4]
 80165fc:	4613      	mov	r3, r2
 80165fe:	011b      	lsls	r3, r3, #4
 8016600:	1a9b      	subs	r3, r3, r2
 8016602:	009b      	lsls	r3, r3, #2
 8016604:	440b      	add	r3, r1
 8016606:	331a      	adds	r3, #26
 8016608:	781b      	ldrb	r3, [r3, #0]
 801660a:	2b01      	cmp	r3, #1
 801660c:	d123      	bne.n	8016656 <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 801660e:	78fa      	ldrb	r2, [r7, #3]
 8016610:	6879      	ldr	r1, [r7, #4]
 8016612:	4613      	mov	r3, r2
 8016614:	011b      	lsls	r3, r3, #4
 8016616:	1a9b      	subs	r3, r3, r2
 8016618:	009b      	lsls	r3, r3, #2
 801661a:	440b      	add	r3, r1
 801661c:	331b      	adds	r3, #27
 801661e:	2200      	movs	r2, #0
 8016620:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 8016622:	78fa      	ldrb	r2, [r7, #3]
 8016624:	6879      	ldr	r1, [r7, #4]
 8016626:	4613      	mov	r3, r2
 8016628:	011b      	lsls	r3, r3, #4
 801662a:	1a9b      	subs	r3, r3, r2
 801662c:	009b      	lsls	r3, r3, #2
 801662e:	440b      	add	r3, r1
 8016630:	331c      	adds	r3, #28
 8016632:	2200      	movs	r2, #0
 8016634:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8016636:	78fb      	ldrb	r3, [r7, #3]
 8016638:	015a      	lsls	r2, r3, #5
 801663a:	693b      	ldr	r3, [r7, #16]
 801663c:	4413      	add	r3, r2
 801663e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8016642:	685b      	ldr	r3, [r3, #4]
 8016644:	78fa      	ldrb	r2, [r7, #3]
 8016646:	0151      	lsls	r1, r2, #5
 8016648:	693a      	ldr	r2, [r7, #16]
 801664a:	440a      	add	r2, r1
 801664c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8016650:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8016654:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 8016656:	78fa      	ldrb	r2, [r7, #3]
 8016658:	6879      	ldr	r1, [r7, #4]
 801665a:	4613      	mov	r3, r2
 801665c:	011b      	lsls	r3, r3, #4
 801665e:	1a9b      	subs	r3, r3, r2
 8016660:	009b      	lsls	r3, r3, #2
 8016662:	440b      	add	r3, r1
 8016664:	334c      	adds	r3, #76	@ 0x4c
 8016666:	2204      	movs	r2, #4
 8016668:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 801666a:	e229      	b.n	8016ac0 <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 801666c:	78fa      	ldrb	r2, [r7, #3]
 801666e:	6879      	ldr	r1, [r7, #4]
 8016670:	4613      	mov	r3, r2
 8016672:	011b      	lsls	r3, r3, #4
 8016674:	1a9b      	subs	r3, r3, r2
 8016676:	009b      	lsls	r3, r3, #2
 8016678:	440b      	add	r3, r1
 801667a:	334c      	adds	r3, #76	@ 0x4c
 801667c:	2202      	movs	r2, #2
 801667e:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8016680:	78fa      	ldrb	r2, [r7, #3]
 8016682:	6879      	ldr	r1, [r7, #4]
 8016684:	4613      	mov	r3, r2
 8016686:	011b      	lsls	r3, r3, #4
 8016688:	1a9b      	subs	r3, r3, r2
 801668a:	009b      	lsls	r3, r3, #2
 801668c:	440b      	add	r3, r1
 801668e:	3326      	adds	r3, #38	@ 0x26
 8016690:	781b      	ldrb	r3, [r3, #0]
 8016692:	2b00      	cmp	r3, #0
 8016694:	d00b      	beq.n	80166ae <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8016696:	78fa      	ldrb	r2, [r7, #3]
 8016698:	6879      	ldr	r1, [r7, #4]
 801669a:	4613      	mov	r3, r2
 801669c:	011b      	lsls	r3, r3, #4
 801669e:	1a9b      	subs	r3, r3, r2
 80166a0:	009b      	lsls	r3, r3, #2
 80166a2:	440b      	add	r3, r1
 80166a4:	3326      	adds	r3, #38	@ 0x26
 80166a6:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80166a8:	2b02      	cmp	r3, #2
 80166aa:	f040 8209 	bne.w	8016ac0 <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 80166ae:	78fb      	ldrb	r3, [r7, #3]
 80166b0:	015a      	lsls	r2, r3, #5
 80166b2:	693b      	ldr	r3, [r7, #16]
 80166b4:	4413      	add	r3, r2
 80166b6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80166ba:	681b      	ldr	r3, [r3, #0]
 80166bc:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80166be:	68fb      	ldr	r3, [r7, #12]
 80166c0:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80166c4:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80166c6:	68fb      	ldr	r3, [r7, #12]
 80166c8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80166cc:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 80166ce:	78fb      	ldrb	r3, [r7, #3]
 80166d0:	015a      	lsls	r2, r3, #5
 80166d2:	693b      	ldr	r3, [r7, #16]
 80166d4:	4413      	add	r3, r2
 80166d6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80166da:	461a      	mov	r2, r3
 80166dc:	68fb      	ldr	r3, [r7, #12]
 80166de:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80166e0:	e1ee      	b.n	8016ac0 <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 80166e2:	78fa      	ldrb	r2, [r7, #3]
 80166e4:	6879      	ldr	r1, [r7, #4]
 80166e6:	4613      	mov	r3, r2
 80166e8:	011b      	lsls	r3, r3, #4
 80166ea:	1a9b      	subs	r3, r3, r2
 80166ec:	009b      	lsls	r3, r3, #2
 80166ee:	440b      	add	r3, r1
 80166f0:	334d      	adds	r3, #77	@ 0x4d
 80166f2:	781b      	ldrb	r3, [r3, #0]
 80166f4:	2b05      	cmp	r3, #5
 80166f6:	f040 80c8 	bne.w	801688a <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80166fa:	78fa      	ldrb	r2, [r7, #3]
 80166fc:	6879      	ldr	r1, [r7, #4]
 80166fe:	4613      	mov	r3, r2
 8016700:	011b      	lsls	r3, r3, #4
 8016702:	1a9b      	subs	r3, r3, r2
 8016704:	009b      	lsls	r3, r3, #2
 8016706:	440b      	add	r3, r1
 8016708:	334d      	adds	r3, #77	@ 0x4d
 801670a:	2202      	movs	r2, #2
 801670c:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 801670e:	78fa      	ldrb	r2, [r7, #3]
 8016710:	6879      	ldr	r1, [r7, #4]
 8016712:	4613      	mov	r3, r2
 8016714:	011b      	lsls	r3, r3, #4
 8016716:	1a9b      	subs	r3, r3, r2
 8016718:	009b      	lsls	r3, r3, #2
 801671a:	440b      	add	r3, r1
 801671c:	331b      	adds	r3, #27
 801671e:	781b      	ldrb	r3, [r3, #0]
 8016720:	2b01      	cmp	r3, #1
 8016722:	f040 81ce 	bne.w	8016ac2 <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8016726:	78fa      	ldrb	r2, [r7, #3]
 8016728:	6879      	ldr	r1, [r7, #4]
 801672a:	4613      	mov	r3, r2
 801672c:	011b      	lsls	r3, r3, #4
 801672e:	1a9b      	subs	r3, r3, r2
 8016730:	009b      	lsls	r3, r3, #2
 8016732:	440b      	add	r3, r1
 8016734:	3326      	adds	r3, #38	@ 0x26
 8016736:	781b      	ldrb	r3, [r3, #0]
 8016738:	2b03      	cmp	r3, #3
 801673a:	d16b      	bne.n	8016814 <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 801673c:	78fa      	ldrb	r2, [r7, #3]
 801673e:	6879      	ldr	r1, [r7, #4]
 8016740:	4613      	mov	r3, r2
 8016742:	011b      	lsls	r3, r3, #4
 8016744:	1a9b      	subs	r3, r3, r2
 8016746:	009b      	lsls	r3, r3, #2
 8016748:	440b      	add	r3, r1
 801674a:	3348      	adds	r3, #72	@ 0x48
 801674c:	681b      	ldr	r3, [r3, #0]
 801674e:	1c59      	adds	r1, r3, #1
 8016750:	6878      	ldr	r0, [r7, #4]
 8016752:	4613      	mov	r3, r2
 8016754:	011b      	lsls	r3, r3, #4
 8016756:	1a9b      	subs	r3, r3, r2
 8016758:	009b      	lsls	r3, r3, #2
 801675a:	4403      	add	r3, r0
 801675c:	3348      	adds	r3, #72	@ 0x48
 801675e:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 8016760:	78fa      	ldrb	r2, [r7, #3]
 8016762:	6879      	ldr	r1, [r7, #4]
 8016764:	4613      	mov	r3, r2
 8016766:	011b      	lsls	r3, r3, #4
 8016768:	1a9b      	subs	r3, r3, r2
 801676a:	009b      	lsls	r3, r3, #2
 801676c:	440b      	add	r3, r1
 801676e:	3348      	adds	r3, #72	@ 0x48
 8016770:	681b      	ldr	r3, [r3, #0]
 8016772:	2b02      	cmp	r3, #2
 8016774:	d943      	bls.n	80167fe <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 8016776:	78fa      	ldrb	r2, [r7, #3]
 8016778:	6879      	ldr	r1, [r7, #4]
 801677a:	4613      	mov	r3, r2
 801677c:	011b      	lsls	r3, r3, #4
 801677e:	1a9b      	subs	r3, r3, r2
 8016780:	009b      	lsls	r3, r3, #2
 8016782:	440b      	add	r3, r1
 8016784:	3348      	adds	r3, #72	@ 0x48
 8016786:	2200      	movs	r2, #0
 8016788:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 801678a:	78fa      	ldrb	r2, [r7, #3]
 801678c:	6879      	ldr	r1, [r7, #4]
 801678e:	4613      	mov	r3, r2
 8016790:	011b      	lsls	r3, r3, #4
 8016792:	1a9b      	subs	r3, r3, r2
 8016794:	009b      	lsls	r3, r3, #2
 8016796:	440b      	add	r3, r1
 8016798:	331b      	adds	r3, #27
 801679a:	2200      	movs	r2, #0
 801679c:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 801679e:	78fa      	ldrb	r2, [r7, #3]
 80167a0:	6879      	ldr	r1, [r7, #4]
 80167a2:	4613      	mov	r3, r2
 80167a4:	011b      	lsls	r3, r3, #4
 80167a6:	1a9b      	subs	r3, r3, r2
 80167a8:	009b      	lsls	r3, r3, #2
 80167aa:	440b      	add	r3, r1
 80167ac:	3344      	adds	r3, #68	@ 0x44
 80167ae:	681b      	ldr	r3, [r3, #0]
 80167b0:	2b02      	cmp	r3, #2
 80167b2:	d809      	bhi.n	80167c8 <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 80167b4:	78fa      	ldrb	r2, [r7, #3]
 80167b6:	6879      	ldr	r1, [r7, #4]
 80167b8:	4613      	mov	r3, r2
 80167ba:	011b      	lsls	r3, r3, #4
 80167bc:	1a9b      	subs	r3, r3, r2
 80167be:	009b      	lsls	r3, r3, #2
 80167c0:	440b      	add	r3, r1
 80167c2:	331c      	adds	r3, #28
 80167c4:	2201      	movs	r2, #1
 80167c6:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80167c8:	78fb      	ldrb	r3, [r7, #3]
 80167ca:	015a      	lsls	r2, r3, #5
 80167cc:	693b      	ldr	r3, [r7, #16]
 80167ce:	4413      	add	r3, r2
 80167d0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80167d4:	685b      	ldr	r3, [r3, #4]
 80167d6:	78fa      	ldrb	r2, [r7, #3]
 80167d8:	0151      	lsls	r1, r2, #5
 80167da:	693a      	ldr	r2, [r7, #16]
 80167dc:	440a      	add	r2, r1
 80167de:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80167e2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80167e6:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 80167e8:	78fa      	ldrb	r2, [r7, #3]
 80167ea:	6879      	ldr	r1, [r7, #4]
 80167ec:	4613      	mov	r3, r2
 80167ee:	011b      	lsls	r3, r3, #4
 80167f0:	1a9b      	subs	r3, r3, r2
 80167f2:	009b      	lsls	r3, r3, #2
 80167f4:	440b      	add	r3, r1
 80167f6:	334c      	adds	r3, #76	@ 0x4c
 80167f8:	2204      	movs	r2, #4
 80167fa:	701a      	strb	r2, [r3, #0]
 80167fc:	e014      	b.n	8016828 <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80167fe:	78fa      	ldrb	r2, [r7, #3]
 8016800:	6879      	ldr	r1, [r7, #4]
 8016802:	4613      	mov	r3, r2
 8016804:	011b      	lsls	r3, r3, #4
 8016806:	1a9b      	subs	r3, r3, r2
 8016808:	009b      	lsls	r3, r3, #2
 801680a:	440b      	add	r3, r1
 801680c:	334c      	adds	r3, #76	@ 0x4c
 801680e:	2202      	movs	r2, #2
 8016810:	701a      	strb	r2, [r3, #0]
 8016812:	e009      	b.n	8016828 <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8016814:	78fa      	ldrb	r2, [r7, #3]
 8016816:	6879      	ldr	r1, [r7, #4]
 8016818:	4613      	mov	r3, r2
 801681a:	011b      	lsls	r3, r3, #4
 801681c:	1a9b      	subs	r3, r3, r2
 801681e:	009b      	lsls	r3, r3, #2
 8016820:	440b      	add	r3, r1
 8016822:	334c      	adds	r3, #76	@ 0x4c
 8016824:	2202      	movs	r2, #2
 8016826:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8016828:	78fa      	ldrb	r2, [r7, #3]
 801682a:	6879      	ldr	r1, [r7, #4]
 801682c:	4613      	mov	r3, r2
 801682e:	011b      	lsls	r3, r3, #4
 8016830:	1a9b      	subs	r3, r3, r2
 8016832:	009b      	lsls	r3, r3, #2
 8016834:	440b      	add	r3, r1
 8016836:	3326      	adds	r3, #38	@ 0x26
 8016838:	781b      	ldrb	r3, [r3, #0]
 801683a:	2b00      	cmp	r3, #0
 801683c:	d00b      	beq.n	8016856 <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 801683e:	78fa      	ldrb	r2, [r7, #3]
 8016840:	6879      	ldr	r1, [r7, #4]
 8016842:	4613      	mov	r3, r2
 8016844:	011b      	lsls	r3, r3, #4
 8016846:	1a9b      	subs	r3, r3, r2
 8016848:	009b      	lsls	r3, r3, #2
 801684a:	440b      	add	r3, r1
 801684c:	3326      	adds	r3, #38	@ 0x26
 801684e:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8016850:	2b02      	cmp	r3, #2
 8016852:	f040 8136 	bne.w	8016ac2 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8016856:	78fb      	ldrb	r3, [r7, #3]
 8016858:	015a      	lsls	r2, r3, #5
 801685a:	693b      	ldr	r3, [r7, #16]
 801685c:	4413      	add	r3, r2
 801685e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8016862:	681b      	ldr	r3, [r3, #0]
 8016864:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8016866:	68fb      	ldr	r3, [r7, #12]
 8016868:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 801686c:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 801686e:	68fb      	ldr	r3, [r7, #12]
 8016870:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8016874:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8016876:	78fb      	ldrb	r3, [r7, #3]
 8016878:	015a      	lsls	r2, r3, #5
 801687a:	693b      	ldr	r3, [r7, #16]
 801687c:	4413      	add	r3, r2
 801687e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8016882:	461a      	mov	r2, r3
 8016884:	68fb      	ldr	r3, [r7, #12]
 8016886:	6013      	str	r3, [r2, #0]
 8016888:	e11b      	b.n	8016ac2 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 801688a:	78fa      	ldrb	r2, [r7, #3]
 801688c:	6879      	ldr	r1, [r7, #4]
 801688e:	4613      	mov	r3, r2
 8016890:	011b      	lsls	r3, r3, #4
 8016892:	1a9b      	subs	r3, r3, r2
 8016894:	009b      	lsls	r3, r3, #2
 8016896:	440b      	add	r3, r1
 8016898:	334d      	adds	r3, #77	@ 0x4d
 801689a:	781b      	ldrb	r3, [r3, #0]
 801689c:	2b03      	cmp	r3, #3
 801689e:	f040 8081 	bne.w	80169a4 <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80168a2:	78fa      	ldrb	r2, [r7, #3]
 80168a4:	6879      	ldr	r1, [r7, #4]
 80168a6:	4613      	mov	r3, r2
 80168a8:	011b      	lsls	r3, r3, #4
 80168aa:	1a9b      	subs	r3, r3, r2
 80168ac:	009b      	lsls	r3, r3, #2
 80168ae:	440b      	add	r3, r1
 80168b0:	334d      	adds	r3, #77	@ 0x4d
 80168b2:	2202      	movs	r2, #2
 80168b4:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80168b6:	78fa      	ldrb	r2, [r7, #3]
 80168b8:	6879      	ldr	r1, [r7, #4]
 80168ba:	4613      	mov	r3, r2
 80168bc:	011b      	lsls	r3, r3, #4
 80168be:	1a9b      	subs	r3, r3, r2
 80168c0:	009b      	lsls	r3, r3, #2
 80168c2:	440b      	add	r3, r1
 80168c4:	331b      	adds	r3, #27
 80168c6:	781b      	ldrb	r3, [r3, #0]
 80168c8:	2b01      	cmp	r3, #1
 80168ca:	f040 80fa 	bne.w	8016ac2 <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80168ce:	78fa      	ldrb	r2, [r7, #3]
 80168d0:	6879      	ldr	r1, [r7, #4]
 80168d2:	4613      	mov	r3, r2
 80168d4:	011b      	lsls	r3, r3, #4
 80168d6:	1a9b      	subs	r3, r3, r2
 80168d8:	009b      	lsls	r3, r3, #2
 80168da:	440b      	add	r3, r1
 80168dc:	334c      	adds	r3, #76	@ 0x4c
 80168de:	2202      	movs	r2, #2
 80168e0:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 80168e2:	78fb      	ldrb	r3, [r7, #3]
 80168e4:	015a      	lsls	r2, r3, #5
 80168e6:	693b      	ldr	r3, [r7, #16]
 80168e8:	4413      	add	r3, r2
 80168ea:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80168ee:	685b      	ldr	r3, [r3, #4]
 80168f0:	78fa      	ldrb	r2, [r7, #3]
 80168f2:	0151      	lsls	r1, r2, #5
 80168f4:	693a      	ldr	r2, [r7, #16]
 80168f6:	440a      	add	r2, r1
 80168f8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80168fc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8016900:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8016902:	78fb      	ldrb	r3, [r7, #3]
 8016904:	015a      	lsls	r2, r3, #5
 8016906:	693b      	ldr	r3, [r7, #16]
 8016908:	4413      	add	r3, r2
 801690a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 801690e:	68db      	ldr	r3, [r3, #12]
 8016910:	78fa      	ldrb	r2, [r7, #3]
 8016912:	0151      	lsls	r1, r2, #5
 8016914:	693a      	ldr	r2, [r7, #16]
 8016916:	440a      	add	r2, r1
 8016918:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 801691c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8016920:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 8016922:	78fb      	ldrb	r3, [r7, #3]
 8016924:	015a      	lsls	r2, r3, #5
 8016926:	693b      	ldr	r3, [r7, #16]
 8016928:	4413      	add	r3, r2
 801692a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 801692e:	68db      	ldr	r3, [r3, #12]
 8016930:	78fa      	ldrb	r2, [r7, #3]
 8016932:	0151      	lsls	r1, r2, #5
 8016934:	693a      	ldr	r2, [r7, #16]
 8016936:	440a      	add	r2, r1
 8016938:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 801693c:	f023 0320 	bic.w	r3, r3, #32
 8016940:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8016942:	78fa      	ldrb	r2, [r7, #3]
 8016944:	6879      	ldr	r1, [r7, #4]
 8016946:	4613      	mov	r3, r2
 8016948:	011b      	lsls	r3, r3, #4
 801694a:	1a9b      	subs	r3, r3, r2
 801694c:	009b      	lsls	r3, r3, #2
 801694e:	440b      	add	r3, r1
 8016950:	3326      	adds	r3, #38	@ 0x26
 8016952:	781b      	ldrb	r3, [r3, #0]
 8016954:	2b00      	cmp	r3, #0
 8016956:	d00b      	beq.n	8016970 <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8016958:	78fa      	ldrb	r2, [r7, #3]
 801695a:	6879      	ldr	r1, [r7, #4]
 801695c:	4613      	mov	r3, r2
 801695e:	011b      	lsls	r3, r3, #4
 8016960:	1a9b      	subs	r3, r3, r2
 8016962:	009b      	lsls	r3, r3, #2
 8016964:	440b      	add	r3, r1
 8016966:	3326      	adds	r3, #38	@ 0x26
 8016968:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 801696a:	2b02      	cmp	r3, #2
 801696c:	f040 80a9 	bne.w	8016ac2 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8016970:	78fb      	ldrb	r3, [r7, #3]
 8016972:	015a      	lsls	r2, r3, #5
 8016974:	693b      	ldr	r3, [r7, #16]
 8016976:	4413      	add	r3, r2
 8016978:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 801697c:	681b      	ldr	r3, [r3, #0]
 801697e:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8016980:	68fb      	ldr	r3, [r7, #12]
 8016982:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8016986:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8016988:	68fb      	ldr	r3, [r7, #12]
 801698a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 801698e:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8016990:	78fb      	ldrb	r3, [r7, #3]
 8016992:	015a      	lsls	r2, r3, #5
 8016994:	693b      	ldr	r3, [r7, #16]
 8016996:	4413      	add	r3, r2
 8016998:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 801699c:	461a      	mov	r2, r3
 801699e:	68fb      	ldr	r3, [r7, #12]
 80169a0:	6013      	str	r3, [r2, #0]
 80169a2:	e08e      	b.n	8016ac2 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 80169a4:	78fa      	ldrb	r2, [r7, #3]
 80169a6:	6879      	ldr	r1, [r7, #4]
 80169a8:	4613      	mov	r3, r2
 80169aa:	011b      	lsls	r3, r3, #4
 80169ac:	1a9b      	subs	r3, r3, r2
 80169ae:	009b      	lsls	r3, r3, #2
 80169b0:	440b      	add	r3, r1
 80169b2:	334d      	adds	r3, #77	@ 0x4d
 80169b4:	781b      	ldrb	r3, [r3, #0]
 80169b6:	2b04      	cmp	r3, #4
 80169b8:	d143      	bne.n	8016a42 <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80169ba:	78fa      	ldrb	r2, [r7, #3]
 80169bc:	6879      	ldr	r1, [r7, #4]
 80169be:	4613      	mov	r3, r2
 80169c0:	011b      	lsls	r3, r3, #4
 80169c2:	1a9b      	subs	r3, r3, r2
 80169c4:	009b      	lsls	r3, r3, #2
 80169c6:	440b      	add	r3, r1
 80169c8:	334d      	adds	r3, #77	@ 0x4d
 80169ca:	2202      	movs	r2, #2
 80169cc:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80169ce:	78fa      	ldrb	r2, [r7, #3]
 80169d0:	6879      	ldr	r1, [r7, #4]
 80169d2:	4613      	mov	r3, r2
 80169d4:	011b      	lsls	r3, r3, #4
 80169d6:	1a9b      	subs	r3, r3, r2
 80169d8:	009b      	lsls	r3, r3, #2
 80169da:	440b      	add	r3, r1
 80169dc:	334c      	adds	r3, #76	@ 0x4c
 80169de:	2202      	movs	r2, #2
 80169e0:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80169e2:	78fa      	ldrb	r2, [r7, #3]
 80169e4:	6879      	ldr	r1, [r7, #4]
 80169e6:	4613      	mov	r3, r2
 80169e8:	011b      	lsls	r3, r3, #4
 80169ea:	1a9b      	subs	r3, r3, r2
 80169ec:	009b      	lsls	r3, r3, #2
 80169ee:	440b      	add	r3, r1
 80169f0:	3326      	adds	r3, #38	@ 0x26
 80169f2:	781b      	ldrb	r3, [r3, #0]
 80169f4:	2b00      	cmp	r3, #0
 80169f6:	d00a      	beq.n	8016a0e <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80169f8:	78fa      	ldrb	r2, [r7, #3]
 80169fa:	6879      	ldr	r1, [r7, #4]
 80169fc:	4613      	mov	r3, r2
 80169fe:	011b      	lsls	r3, r3, #4
 8016a00:	1a9b      	subs	r3, r3, r2
 8016a02:	009b      	lsls	r3, r3, #2
 8016a04:	440b      	add	r3, r1
 8016a06:	3326      	adds	r3, #38	@ 0x26
 8016a08:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8016a0a:	2b02      	cmp	r3, #2
 8016a0c:	d159      	bne.n	8016ac2 <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8016a0e:	78fb      	ldrb	r3, [r7, #3]
 8016a10:	015a      	lsls	r2, r3, #5
 8016a12:	693b      	ldr	r3, [r7, #16]
 8016a14:	4413      	add	r3, r2
 8016a16:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8016a1a:	681b      	ldr	r3, [r3, #0]
 8016a1c:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8016a1e:	68fb      	ldr	r3, [r7, #12]
 8016a20:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8016a24:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8016a26:	68fb      	ldr	r3, [r7, #12]
 8016a28:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8016a2c:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8016a2e:	78fb      	ldrb	r3, [r7, #3]
 8016a30:	015a      	lsls	r2, r3, #5
 8016a32:	693b      	ldr	r3, [r7, #16]
 8016a34:	4413      	add	r3, r2
 8016a36:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8016a3a:	461a      	mov	r2, r3
 8016a3c:	68fb      	ldr	r3, [r7, #12]
 8016a3e:	6013      	str	r3, [r2, #0]
 8016a40:	e03f      	b.n	8016ac2 <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 8016a42:	78fa      	ldrb	r2, [r7, #3]
 8016a44:	6879      	ldr	r1, [r7, #4]
 8016a46:	4613      	mov	r3, r2
 8016a48:	011b      	lsls	r3, r3, #4
 8016a4a:	1a9b      	subs	r3, r3, r2
 8016a4c:	009b      	lsls	r3, r3, #2
 8016a4e:	440b      	add	r3, r1
 8016a50:	334d      	adds	r3, #77	@ 0x4d
 8016a52:	781b      	ldrb	r3, [r3, #0]
 8016a54:	2b08      	cmp	r3, #8
 8016a56:	d126      	bne.n	8016aa6 <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8016a58:	78fa      	ldrb	r2, [r7, #3]
 8016a5a:	6879      	ldr	r1, [r7, #4]
 8016a5c:	4613      	mov	r3, r2
 8016a5e:	011b      	lsls	r3, r3, #4
 8016a60:	1a9b      	subs	r3, r3, r2
 8016a62:	009b      	lsls	r3, r3, #2
 8016a64:	440b      	add	r3, r1
 8016a66:	334d      	adds	r3, #77	@ 0x4d
 8016a68:	2202      	movs	r2, #2
 8016a6a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8016a6c:	78fa      	ldrb	r2, [r7, #3]
 8016a6e:	6879      	ldr	r1, [r7, #4]
 8016a70:	4613      	mov	r3, r2
 8016a72:	011b      	lsls	r3, r3, #4
 8016a74:	1a9b      	subs	r3, r3, r2
 8016a76:	009b      	lsls	r3, r3, #2
 8016a78:	440b      	add	r3, r1
 8016a7a:	3344      	adds	r3, #68	@ 0x44
 8016a7c:	681b      	ldr	r3, [r3, #0]
 8016a7e:	1c59      	adds	r1, r3, #1
 8016a80:	6878      	ldr	r0, [r7, #4]
 8016a82:	4613      	mov	r3, r2
 8016a84:	011b      	lsls	r3, r3, #4
 8016a86:	1a9b      	subs	r3, r3, r2
 8016a88:	009b      	lsls	r3, r3, #2
 8016a8a:	4403      	add	r3, r0
 8016a8c:	3344      	adds	r3, #68	@ 0x44
 8016a8e:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 8016a90:	78fa      	ldrb	r2, [r7, #3]
 8016a92:	6879      	ldr	r1, [r7, #4]
 8016a94:	4613      	mov	r3, r2
 8016a96:	011b      	lsls	r3, r3, #4
 8016a98:	1a9b      	subs	r3, r3, r2
 8016a9a:	009b      	lsls	r3, r3, #2
 8016a9c:	440b      	add	r3, r1
 8016a9e:	334c      	adds	r3, #76	@ 0x4c
 8016aa0:	2204      	movs	r2, #4
 8016aa2:	701a      	strb	r2, [r3, #0]
 8016aa4:	e00d      	b.n	8016ac2 <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 8016aa6:	78fa      	ldrb	r2, [r7, #3]
 8016aa8:	6879      	ldr	r1, [r7, #4]
 8016aaa:	4613      	mov	r3, r2
 8016aac:	011b      	lsls	r3, r3, #4
 8016aae:	1a9b      	subs	r3, r3, r2
 8016ab0:	009b      	lsls	r3, r3, #2
 8016ab2:	440b      	add	r3, r1
 8016ab4:	334d      	adds	r3, #77	@ 0x4d
 8016ab6:	781b      	ldrb	r3, [r3, #0]
 8016ab8:	2b02      	cmp	r3, #2
 8016aba:	f000 8100 	beq.w	8016cbe <HCD_HC_IN_IRQHandler+0xcca>
 8016abe:	e000      	b.n	8016ac2 <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8016ac0:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8016ac2:	78fa      	ldrb	r2, [r7, #3]
 8016ac4:	6879      	ldr	r1, [r7, #4]
 8016ac6:	4613      	mov	r3, r2
 8016ac8:	011b      	lsls	r3, r3, #4
 8016aca:	1a9b      	subs	r3, r3, r2
 8016acc:	009b      	lsls	r3, r3, #2
 8016ace:	440b      	add	r3, r1
 8016ad0:	334c      	adds	r3, #76	@ 0x4c
 8016ad2:	781a      	ldrb	r2, [r3, #0]
 8016ad4:	78fb      	ldrb	r3, [r7, #3]
 8016ad6:	4619      	mov	r1, r3
 8016ad8:	6878      	ldr	r0, [r7, #4]
 8016ada:	f7ff fa7d 	bl	8015fd8 <HAL_HCD_HC_NotifyURBChange_Callback>
 8016ade:	e0ef      	b.n	8016cc0 <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8016ae0:	687b      	ldr	r3, [r7, #4]
 8016ae2:	681b      	ldr	r3, [r3, #0]
 8016ae4:	78fa      	ldrb	r2, [r7, #3]
 8016ae6:	4611      	mov	r1, r2
 8016ae8:	4618      	mov	r0, r3
 8016aea:	f005 fa11 	bl	801bf10 <USB_ReadChInterrupts>
 8016aee:	4603      	mov	r3, r0
 8016af0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8016af4:	2b40      	cmp	r3, #64	@ 0x40
 8016af6:	d12f      	bne.n	8016b58 <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8016af8:	78fb      	ldrb	r3, [r7, #3]
 8016afa:	015a      	lsls	r2, r3, #5
 8016afc:	693b      	ldr	r3, [r7, #16]
 8016afe:	4413      	add	r3, r2
 8016b00:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8016b04:	461a      	mov	r2, r3
 8016b06:	2340      	movs	r3, #64	@ 0x40
 8016b08:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 8016b0a:	78fa      	ldrb	r2, [r7, #3]
 8016b0c:	6879      	ldr	r1, [r7, #4]
 8016b0e:	4613      	mov	r3, r2
 8016b10:	011b      	lsls	r3, r3, #4
 8016b12:	1a9b      	subs	r3, r3, r2
 8016b14:	009b      	lsls	r3, r3, #2
 8016b16:	440b      	add	r3, r1
 8016b18:	334d      	adds	r3, #77	@ 0x4d
 8016b1a:	2205      	movs	r2, #5
 8016b1c:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8016b1e:	78fa      	ldrb	r2, [r7, #3]
 8016b20:	6879      	ldr	r1, [r7, #4]
 8016b22:	4613      	mov	r3, r2
 8016b24:	011b      	lsls	r3, r3, #4
 8016b26:	1a9b      	subs	r3, r3, r2
 8016b28:	009b      	lsls	r3, r3, #2
 8016b2a:	440b      	add	r3, r1
 8016b2c:	331a      	adds	r3, #26
 8016b2e:	781b      	ldrb	r3, [r3, #0]
 8016b30:	2b00      	cmp	r3, #0
 8016b32:	d109      	bne.n	8016b48 <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8016b34:	78fa      	ldrb	r2, [r7, #3]
 8016b36:	6879      	ldr	r1, [r7, #4]
 8016b38:	4613      	mov	r3, r2
 8016b3a:	011b      	lsls	r3, r3, #4
 8016b3c:	1a9b      	subs	r3, r3, r2
 8016b3e:	009b      	lsls	r3, r3, #2
 8016b40:	440b      	add	r3, r1
 8016b42:	3344      	adds	r3, #68	@ 0x44
 8016b44:	2200      	movs	r2, #0
 8016b46:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8016b48:	687b      	ldr	r3, [r7, #4]
 8016b4a:	681b      	ldr	r3, [r3, #0]
 8016b4c:	78fa      	ldrb	r2, [r7, #3]
 8016b4e:	4611      	mov	r1, r2
 8016b50:	4618      	mov	r0, r3
 8016b52:	f005 fb57 	bl	801c204 <USB_HC_Halt>
 8016b56:	e0b3      	b.n	8016cc0 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8016b58:	687b      	ldr	r3, [r7, #4]
 8016b5a:	681b      	ldr	r3, [r3, #0]
 8016b5c:	78fa      	ldrb	r2, [r7, #3]
 8016b5e:	4611      	mov	r1, r2
 8016b60:	4618      	mov	r0, r3
 8016b62:	f005 f9d5 	bl	801bf10 <USB_ReadChInterrupts>
 8016b66:	4603      	mov	r3, r0
 8016b68:	f003 0310 	and.w	r3, r3, #16
 8016b6c:	2b10      	cmp	r3, #16
 8016b6e:	f040 80a7 	bne.w	8016cc0 <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8016b72:	78fa      	ldrb	r2, [r7, #3]
 8016b74:	6879      	ldr	r1, [r7, #4]
 8016b76:	4613      	mov	r3, r2
 8016b78:	011b      	lsls	r3, r3, #4
 8016b7a:	1a9b      	subs	r3, r3, r2
 8016b7c:	009b      	lsls	r3, r3, #2
 8016b7e:	440b      	add	r3, r1
 8016b80:	3326      	adds	r3, #38	@ 0x26
 8016b82:	781b      	ldrb	r3, [r3, #0]
 8016b84:	2b03      	cmp	r3, #3
 8016b86:	d11b      	bne.n	8016bc0 <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8016b88:	78fa      	ldrb	r2, [r7, #3]
 8016b8a:	6879      	ldr	r1, [r7, #4]
 8016b8c:	4613      	mov	r3, r2
 8016b8e:	011b      	lsls	r3, r3, #4
 8016b90:	1a9b      	subs	r3, r3, r2
 8016b92:	009b      	lsls	r3, r3, #2
 8016b94:	440b      	add	r3, r1
 8016b96:	3344      	adds	r3, #68	@ 0x44
 8016b98:	2200      	movs	r2, #0
 8016b9a:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 8016b9c:	78fa      	ldrb	r2, [r7, #3]
 8016b9e:	6879      	ldr	r1, [r7, #4]
 8016ba0:	4613      	mov	r3, r2
 8016ba2:	011b      	lsls	r3, r3, #4
 8016ba4:	1a9b      	subs	r3, r3, r2
 8016ba6:	009b      	lsls	r3, r3, #2
 8016ba8:	440b      	add	r3, r1
 8016baa:	334d      	adds	r3, #77	@ 0x4d
 8016bac:	2204      	movs	r2, #4
 8016bae:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8016bb0:	687b      	ldr	r3, [r7, #4]
 8016bb2:	681b      	ldr	r3, [r3, #0]
 8016bb4:	78fa      	ldrb	r2, [r7, #3]
 8016bb6:	4611      	mov	r1, r2
 8016bb8:	4618      	mov	r0, r3
 8016bba:	f005 fb23 	bl	801c204 <USB_HC_Halt>
 8016bbe:	e03f      	b.n	8016c40 <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8016bc0:	78fa      	ldrb	r2, [r7, #3]
 8016bc2:	6879      	ldr	r1, [r7, #4]
 8016bc4:	4613      	mov	r3, r2
 8016bc6:	011b      	lsls	r3, r3, #4
 8016bc8:	1a9b      	subs	r3, r3, r2
 8016bca:	009b      	lsls	r3, r3, #2
 8016bcc:	440b      	add	r3, r1
 8016bce:	3326      	adds	r3, #38	@ 0x26
 8016bd0:	781b      	ldrb	r3, [r3, #0]
 8016bd2:	2b00      	cmp	r3, #0
 8016bd4:	d00a      	beq.n	8016bec <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8016bd6:	78fa      	ldrb	r2, [r7, #3]
 8016bd8:	6879      	ldr	r1, [r7, #4]
 8016bda:	4613      	mov	r3, r2
 8016bdc:	011b      	lsls	r3, r3, #4
 8016bde:	1a9b      	subs	r3, r3, r2
 8016be0:	009b      	lsls	r3, r3, #2
 8016be2:	440b      	add	r3, r1
 8016be4:	3326      	adds	r3, #38	@ 0x26
 8016be6:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8016be8:	2b02      	cmp	r3, #2
 8016bea:	d129      	bne.n	8016c40 <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8016bec:	78fa      	ldrb	r2, [r7, #3]
 8016bee:	6879      	ldr	r1, [r7, #4]
 8016bf0:	4613      	mov	r3, r2
 8016bf2:	011b      	lsls	r3, r3, #4
 8016bf4:	1a9b      	subs	r3, r3, r2
 8016bf6:	009b      	lsls	r3, r3, #2
 8016bf8:	440b      	add	r3, r1
 8016bfa:	3344      	adds	r3, #68	@ 0x44
 8016bfc:	2200      	movs	r2, #0
 8016bfe:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 8016c00:	687b      	ldr	r3, [r7, #4]
 8016c02:	799b      	ldrb	r3, [r3, #6]
 8016c04:	2b00      	cmp	r3, #0
 8016c06:	d00a      	beq.n	8016c1e <HCD_HC_IN_IRQHandler+0xc2a>
 8016c08:	78fa      	ldrb	r2, [r7, #3]
 8016c0a:	6879      	ldr	r1, [r7, #4]
 8016c0c:	4613      	mov	r3, r2
 8016c0e:	011b      	lsls	r3, r3, #4
 8016c10:	1a9b      	subs	r3, r3, r2
 8016c12:	009b      	lsls	r3, r3, #2
 8016c14:	440b      	add	r3, r1
 8016c16:	331b      	adds	r3, #27
 8016c18:	781b      	ldrb	r3, [r3, #0]
 8016c1a:	2b01      	cmp	r3, #1
 8016c1c:	d110      	bne.n	8016c40 <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 8016c1e:	78fa      	ldrb	r2, [r7, #3]
 8016c20:	6879      	ldr	r1, [r7, #4]
 8016c22:	4613      	mov	r3, r2
 8016c24:	011b      	lsls	r3, r3, #4
 8016c26:	1a9b      	subs	r3, r3, r2
 8016c28:	009b      	lsls	r3, r3, #2
 8016c2a:	440b      	add	r3, r1
 8016c2c:	334d      	adds	r3, #77	@ 0x4d
 8016c2e:	2204      	movs	r2, #4
 8016c30:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 8016c32:	687b      	ldr	r3, [r7, #4]
 8016c34:	681b      	ldr	r3, [r3, #0]
 8016c36:	78fa      	ldrb	r2, [r7, #3]
 8016c38:	4611      	mov	r1, r2
 8016c3a:	4618      	mov	r0, r3
 8016c3c:	f005 fae2 	bl	801c204 <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 8016c40:	78fa      	ldrb	r2, [r7, #3]
 8016c42:	6879      	ldr	r1, [r7, #4]
 8016c44:	4613      	mov	r3, r2
 8016c46:	011b      	lsls	r3, r3, #4
 8016c48:	1a9b      	subs	r3, r3, r2
 8016c4a:	009b      	lsls	r3, r3, #2
 8016c4c:	440b      	add	r3, r1
 8016c4e:	331b      	adds	r3, #27
 8016c50:	781b      	ldrb	r3, [r3, #0]
 8016c52:	2b01      	cmp	r3, #1
 8016c54:	d129      	bne.n	8016caa <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8016c56:	78fa      	ldrb	r2, [r7, #3]
 8016c58:	6879      	ldr	r1, [r7, #4]
 8016c5a:	4613      	mov	r3, r2
 8016c5c:	011b      	lsls	r3, r3, #4
 8016c5e:	1a9b      	subs	r3, r3, r2
 8016c60:	009b      	lsls	r3, r3, #2
 8016c62:	440b      	add	r3, r1
 8016c64:	331b      	adds	r3, #27
 8016c66:	2200      	movs	r2, #0
 8016c68:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8016c6a:	78fb      	ldrb	r3, [r7, #3]
 8016c6c:	015a      	lsls	r2, r3, #5
 8016c6e:	693b      	ldr	r3, [r7, #16]
 8016c70:	4413      	add	r3, r2
 8016c72:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8016c76:	685b      	ldr	r3, [r3, #4]
 8016c78:	78fa      	ldrb	r2, [r7, #3]
 8016c7a:	0151      	lsls	r1, r2, #5
 8016c7c:	693a      	ldr	r2, [r7, #16]
 8016c7e:	440a      	add	r2, r1
 8016c80:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8016c84:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8016c88:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 8016c8a:	78fb      	ldrb	r3, [r7, #3]
 8016c8c:	015a      	lsls	r2, r3, #5
 8016c8e:	693b      	ldr	r3, [r7, #16]
 8016c90:	4413      	add	r3, r2
 8016c92:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8016c96:	68db      	ldr	r3, [r3, #12]
 8016c98:	78fa      	ldrb	r2, [r7, #3]
 8016c9a:	0151      	lsls	r1, r2, #5
 8016c9c:	693a      	ldr	r2, [r7, #16]
 8016c9e:	440a      	add	r2, r1
 8016ca0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8016ca4:	f043 0320 	orr.w	r3, r3, #32
 8016ca8:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8016caa:	78fb      	ldrb	r3, [r7, #3]
 8016cac:	015a      	lsls	r2, r3, #5
 8016cae:	693b      	ldr	r3, [r7, #16]
 8016cb0:	4413      	add	r3, r2
 8016cb2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8016cb6:	461a      	mov	r2, r3
 8016cb8:	2310      	movs	r3, #16
 8016cba:	6093      	str	r3, [r2, #8]
 8016cbc:	e000      	b.n	8016cc0 <HCD_HC_IN_IRQHandler+0xccc>
        return;
 8016cbe:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 8016cc0:	3718      	adds	r7, #24
 8016cc2:	46bd      	mov	sp, r7
 8016cc4:	bd80      	pop	{r7, pc}

08016cc6 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8016cc6:	b580      	push	{r7, lr}
 8016cc8:	b086      	sub	sp, #24
 8016cca:	af00      	add	r7, sp, #0
 8016ccc:	6078      	str	r0, [r7, #4]
 8016cce:	460b      	mov	r3, r1
 8016cd0:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8016cd2:	687b      	ldr	r3, [r7, #4]
 8016cd4:	681b      	ldr	r3, [r3, #0]
 8016cd6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8016cd8:	697b      	ldr	r3, [r7, #20]
 8016cda:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8016cdc:	687b      	ldr	r3, [r7, #4]
 8016cde:	681b      	ldr	r3, [r3, #0]
 8016ce0:	78fa      	ldrb	r2, [r7, #3]
 8016ce2:	4611      	mov	r1, r2
 8016ce4:	4618      	mov	r0, r3
 8016ce6:	f005 f913 	bl	801bf10 <USB_ReadChInterrupts>
 8016cea:	4603      	mov	r3, r0
 8016cec:	f003 0304 	and.w	r3, r3, #4
 8016cf0:	2b04      	cmp	r3, #4
 8016cf2:	d11b      	bne.n	8016d2c <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8016cf4:	78fb      	ldrb	r3, [r7, #3]
 8016cf6:	015a      	lsls	r2, r3, #5
 8016cf8:	693b      	ldr	r3, [r7, #16]
 8016cfa:	4413      	add	r3, r2
 8016cfc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8016d00:	461a      	mov	r2, r3
 8016d02:	2304      	movs	r3, #4
 8016d04:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8016d06:	78fa      	ldrb	r2, [r7, #3]
 8016d08:	6879      	ldr	r1, [r7, #4]
 8016d0a:	4613      	mov	r3, r2
 8016d0c:	011b      	lsls	r3, r3, #4
 8016d0e:	1a9b      	subs	r3, r3, r2
 8016d10:	009b      	lsls	r3, r3, #2
 8016d12:	440b      	add	r3, r1
 8016d14:	334d      	adds	r3, #77	@ 0x4d
 8016d16:	2207      	movs	r2, #7
 8016d18:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8016d1a:	687b      	ldr	r3, [r7, #4]
 8016d1c:	681b      	ldr	r3, [r3, #0]
 8016d1e:	78fa      	ldrb	r2, [r7, #3]
 8016d20:	4611      	mov	r1, r2
 8016d22:	4618      	mov	r0, r3
 8016d24:	f005 fa6e 	bl	801c204 <USB_HC_Halt>
 8016d28:	f000 bc89 	b.w	801763e <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8016d2c:	687b      	ldr	r3, [r7, #4]
 8016d2e:	681b      	ldr	r3, [r3, #0]
 8016d30:	78fa      	ldrb	r2, [r7, #3]
 8016d32:	4611      	mov	r1, r2
 8016d34:	4618      	mov	r0, r3
 8016d36:	f005 f8eb 	bl	801bf10 <USB_ReadChInterrupts>
 8016d3a:	4603      	mov	r3, r0
 8016d3c:	f003 0320 	and.w	r3, r3, #32
 8016d40:	2b20      	cmp	r3, #32
 8016d42:	f040 8082 	bne.w	8016e4a <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8016d46:	78fb      	ldrb	r3, [r7, #3]
 8016d48:	015a      	lsls	r2, r3, #5
 8016d4a:	693b      	ldr	r3, [r7, #16]
 8016d4c:	4413      	add	r3, r2
 8016d4e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8016d52:	461a      	mov	r2, r3
 8016d54:	2320      	movs	r3, #32
 8016d56:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 8016d58:	78fa      	ldrb	r2, [r7, #3]
 8016d5a:	6879      	ldr	r1, [r7, #4]
 8016d5c:	4613      	mov	r3, r2
 8016d5e:	011b      	lsls	r3, r3, #4
 8016d60:	1a9b      	subs	r3, r3, r2
 8016d62:	009b      	lsls	r3, r3, #2
 8016d64:	440b      	add	r3, r1
 8016d66:	3319      	adds	r3, #25
 8016d68:	781b      	ldrb	r3, [r3, #0]
 8016d6a:	2b01      	cmp	r3, #1
 8016d6c:	d124      	bne.n	8016db8 <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 8016d6e:	78fa      	ldrb	r2, [r7, #3]
 8016d70:	6879      	ldr	r1, [r7, #4]
 8016d72:	4613      	mov	r3, r2
 8016d74:	011b      	lsls	r3, r3, #4
 8016d76:	1a9b      	subs	r3, r3, r2
 8016d78:	009b      	lsls	r3, r3, #2
 8016d7a:	440b      	add	r3, r1
 8016d7c:	3319      	adds	r3, #25
 8016d7e:	2200      	movs	r2, #0
 8016d80:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8016d82:	78fa      	ldrb	r2, [r7, #3]
 8016d84:	6879      	ldr	r1, [r7, #4]
 8016d86:	4613      	mov	r3, r2
 8016d88:	011b      	lsls	r3, r3, #4
 8016d8a:	1a9b      	subs	r3, r3, r2
 8016d8c:	009b      	lsls	r3, r3, #2
 8016d8e:	440b      	add	r3, r1
 8016d90:	334c      	adds	r3, #76	@ 0x4c
 8016d92:	2202      	movs	r2, #2
 8016d94:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8016d96:	78fa      	ldrb	r2, [r7, #3]
 8016d98:	6879      	ldr	r1, [r7, #4]
 8016d9a:	4613      	mov	r3, r2
 8016d9c:	011b      	lsls	r3, r3, #4
 8016d9e:	1a9b      	subs	r3, r3, r2
 8016da0:	009b      	lsls	r3, r3, #2
 8016da2:	440b      	add	r3, r1
 8016da4:	334d      	adds	r3, #77	@ 0x4d
 8016da6:	2203      	movs	r2, #3
 8016da8:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8016daa:	687b      	ldr	r3, [r7, #4]
 8016dac:	681b      	ldr	r3, [r3, #0]
 8016dae:	78fa      	ldrb	r2, [r7, #3]
 8016db0:	4611      	mov	r1, r2
 8016db2:	4618      	mov	r0, r3
 8016db4:	f005 fa26 	bl	801c204 <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 8016db8:	78fa      	ldrb	r2, [r7, #3]
 8016dba:	6879      	ldr	r1, [r7, #4]
 8016dbc:	4613      	mov	r3, r2
 8016dbe:	011b      	lsls	r3, r3, #4
 8016dc0:	1a9b      	subs	r3, r3, r2
 8016dc2:	009b      	lsls	r3, r3, #2
 8016dc4:	440b      	add	r3, r1
 8016dc6:	331a      	adds	r3, #26
 8016dc8:	781b      	ldrb	r3, [r3, #0]
 8016dca:	2b01      	cmp	r3, #1
 8016dcc:	f040 8437 	bne.w	801763e <HCD_HC_OUT_IRQHandler+0x978>
 8016dd0:	78fa      	ldrb	r2, [r7, #3]
 8016dd2:	6879      	ldr	r1, [r7, #4]
 8016dd4:	4613      	mov	r3, r2
 8016dd6:	011b      	lsls	r3, r3, #4
 8016dd8:	1a9b      	subs	r3, r3, r2
 8016dda:	009b      	lsls	r3, r3, #2
 8016ddc:	440b      	add	r3, r1
 8016dde:	331b      	adds	r3, #27
 8016de0:	781b      	ldrb	r3, [r3, #0]
 8016de2:	2b00      	cmp	r3, #0
 8016de4:	f040 842b 	bne.w	801763e <HCD_HC_OUT_IRQHandler+0x978>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 8016de8:	78fa      	ldrb	r2, [r7, #3]
 8016dea:	6879      	ldr	r1, [r7, #4]
 8016dec:	4613      	mov	r3, r2
 8016dee:	011b      	lsls	r3, r3, #4
 8016df0:	1a9b      	subs	r3, r3, r2
 8016df2:	009b      	lsls	r3, r3, #2
 8016df4:	440b      	add	r3, r1
 8016df6:	3326      	adds	r3, #38	@ 0x26
 8016df8:	781b      	ldrb	r3, [r3, #0]
 8016dfa:	2b01      	cmp	r3, #1
 8016dfc:	d009      	beq.n	8016e12 <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 8016dfe:	78fa      	ldrb	r2, [r7, #3]
 8016e00:	6879      	ldr	r1, [r7, #4]
 8016e02:	4613      	mov	r3, r2
 8016e04:	011b      	lsls	r3, r3, #4
 8016e06:	1a9b      	subs	r3, r3, r2
 8016e08:	009b      	lsls	r3, r3, #2
 8016e0a:	440b      	add	r3, r1
 8016e0c:	331b      	adds	r3, #27
 8016e0e:	2201      	movs	r2, #1
 8016e10:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 8016e12:	78fa      	ldrb	r2, [r7, #3]
 8016e14:	6879      	ldr	r1, [r7, #4]
 8016e16:	4613      	mov	r3, r2
 8016e18:	011b      	lsls	r3, r3, #4
 8016e1a:	1a9b      	subs	r3, r3, r2
 8016e1c:	009b      	lsls	r3, r3, #2
 8016e1e:	440b      	add	r3, r1
 8016e20:	334d      	adds	r3, #77	@ 0x4d
 8016e22:	2203      	movs	r2, #3
 8016e24:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8016e26:	687b      	ldr	r3, [r7, #4]
 8016e28:	681b      	ldr	r3, [r3, #0]
 8016e2a:	78fa      	ldrb	r2, [r7, #3]
 8016e2c:	4611      	mov	r1, r2
 8016e2e:	4618      	mov	r0, r3
 8016e30:	f005 f9e8 	bl	801c204 <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 8016e34:	78fa      	ldrb	r2, [r7, #3]
 8016e36:	6879      	ldr	r1, [r7, #4]
 8016e38:	4613      	mov	r3, r2
 8016e3a:	011b      	lsls	r3, r3, #4
 8016e3c:	1a9b      	subs	r3, r3, r2
 8016e3e:	009b      	lsls	r3, r3, #2
 8016e40:	440b      	add	r3, r1
 8016e42:	3344      	adds	r3, #68	@ 0x44
 8016e44:	2200      	movs	r2, #0
 8016e46:	601a      	str	r2, [r3, #0]
 8016e48:	e3f9      	b.n	801763e <HCD_HC_OUT_IRQHandler+0x978>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8016e4a:	687b      	ldr	r3, [r7, #4]
 8016e4c:	681b      	ldr	r3, [r3, #0]
 8016e4e:	78fa      	ldrb	r2, [r7, #3]
 8016e50:	4611      	mov	r1, r2
 8016e52:	4618      	mov	r0, r3
 8016e54:	f005 f85c 	bl	801bf10 <USB_ReadChInterrupts>
 8016e58:	4603      	mov	r3, r0
 8016e5a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8016e5e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8016e62:	d111      	bne.n	8016e88 <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8016e64:	78fb      	ldrb	r3, [r7, #3]
 8016e66:	015a      	lsls	r2, r3, #5
 8016e68:	693b      	ldr	r3, [r7, #16]
 8016e6a:	4413      	add	r3, r2
 8016e6c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8016e70:	461a      	mov	r2, r3
 8016e72:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8016e76:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8016e78:	687b      	ldr	r3, [r7, #4]
 8016e7a:	681b      	ldr	r3, [r3, #0]
 8016e7c:	78fa      	ldrb	r2, [r7, #3]
 8016e7e:	4611      	mov	r1, r2
 8016e80:	4618      	mov	r0, r3
 8016e82:	f005 f9bf 	bl	801c204 <USB_HC_Halt>
 8016e86:	e3da      	b.n	801763e <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8016e88:	687b      	ldr	r3, [r7, #4]
 8016e8a:	681b      	ldr	r3, [r3, #0]
 8016e8c:	78fa      	ldrb	r2, [r7, #3]
 8016e8e:	4611      	mov	r1, r2
 8016e90:	4618      	mov	r0, r3
 8016e92:	f005 f83d 	bl	801bf10 <USB_ReadChInterrupts>
 8016e96:	4603      	mov	r3, r0
 8016e98:	f003 0301 	and.w	r3, r3, #1
 8016e9c:	2b01      	cmp	r3, #1
 8016e9e:	d168      	bne.n	8016f72 <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8016ea0:	78fa      	ldrb	r2, [r7, #3]
 8016ea2:	6879      	ldr	r1, [r7, #4]
 8016ea4:	4613      	mov	r3, r2
 8016ea6:	011b      	lsls	r3, r3, #4
 8016ea8:	1a9b      	subs	r3, r3, r2
 8016eaa:	009b      	lsls	r3, r3, #2
 8016eac:	440b      	add	r3, r1
 8016eae:	3344      	adds	r3, #68	@ 0x44
 8016eb0:	2200      	movs	r2, #0
 8016eb2:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8016eb4:	687b      	ldr	r3, [r7, #4]
 8016eb6:	681b      	ldr	r3, [r3, #0]
 8016eb8:	78fa      	ldrb	r2, [r7, #3]
 8016eba:	4611      	mov	r1, r2
 8016ebc:	4618      	mov	r0, r3
 8016ebe:	f005 f827 	bl	801bf10 <USB_ReadChInterrupts>
 8016ec2:	4603      	mov	r3, r0
 8016ec4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8016ec8:	2b40      	cmp	r3, #64	@ 0x40
 8016eca:	d112      	bne.n	8016ef2 <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8016ecc:	78fa      	ldrb	r2, [r7, #3]
 8016ece:	6879      	ldr	r1, [r7, #4]
 8016ed0:	4613      	mov	r3, r2
 8016ed2:	011b      	lsls	r3, r3, #4
 8016ed4:	1a9b      	subs	r3, r3, r2
 8016ed6:	009b      	lsls	r3, r3, #2
 8016ed8:	440b      	add	r3, r1
 8016eda:	3319      	adds	r3, #25
 8016edc:	2201      	movs	r2, #1
 8016ede:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8016ee0:	78fb      	ldrb	r3, [r7, #3]
 8016ee2:	015a      	lsls	r2, r3, #5
 8016ee4:	693b      	ldr	r3, [r7, #16]
 8016ee6:	4413      	add	r3, r2
 8016ee8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8016eec:	461a      	mov	r2, r3
 8016eee:	2340      	movs	r3, #64	@ 0x40
 8016ef0:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 8016ef2:	78fa      	ldrb	r2, [r7, #3]
 8016ef4:	6879      	ldr	r1, [r7, #4]
 8016ef6:	4613      	mov	r3, r2
 8016ef8:	011b      	lsls	r3, r3, #4
 8016efa:	1a9b      	subs	r3, r3, r2
 8016efc:	009b      	lsls	r3, r3, #2
 8016efe:	440b      	add	r3, r1
 8016f00:	331b      	adds	r3, #27
 8016f02:	781b      	ldrb	r3, [r3, #0]
 8016f04:	2b00      	cmp	r3, #0
 8016f06:	d019      	beq.n	8016f3c <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8016f08:	78fa      	ldrb	r2, [r7, #3]
 8016f0a:	6879      	ldr	r1, [r7, #4]
 8016f0c:	4613      	mov	r3, r2
 8016f0e:	011b      	lsls	r3, r3, #4
 8016f10:	1a9b      	subs	r3, r3, r2
 8016f12:	009b      	lsls	r3, r3, #2
 8016f14:	440b      	add	r3, r1
 8016f16:	331b      	adds	r3, #27
 8016f18:	2200      	movs	r2, #0
 8016f1a:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8016f1c:	78fb      	ldrb	r3, [r7, #3]
 8016f1e:	015a      	lsls	r2, r3, #5
 8016f20:	693b      	ldr	r3, [r7, #16]
 8016f22:	4413      	add	r3, r2
 8016f24:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8016f28:	685b      	ldr	r3, [r3, #4]
 8016f2a:	78fa      	ldrb	r2, [r7, #3]
 8016f2c:	0151      	lsls	r1, r2, #5
 8016f2e:	693a      	ldr	r2, [r7, #16]
 8016f30:	440a      	add	r2, r1
 8016f32:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8016f36:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8016f3a:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8016f3c:	78fb      	ldrb	r3, [r7, #3]
 8016f3e:	015a      	lsls	r2, r3, #5
 8016f40:	693b      	ldr	r3, [r7, #16]
 8016f42:	4413      	add	r3, r2
 8016f44:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8016f48:	461a      	mov	r2, r3
 8016f4a:	2301      	movs	r3, #1
 8016f4c:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 8016f4e:	78fa      	ldrb	r2, [r7, #3]
 8016f50:	6879      	ldr	r1, [r7, #4]
 8016f52:	4613      	mov	r3, r2
 8016f54:	011b      	lsls	r3, r3, #4
 8016f56:	1a9b      	subs	r3, r3, r2
 8016f58:	009b      	lsls	r3, r3, #2
 8016f5a:	440b      	add	r3, r1
 8016f5c:	334d      	adds	r3, #77	@ 0x4d
 8016f5e:	2201      	movs	r2, #1
 8016f60:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8016f62:	687b      	ldr	r3, [r7, #4]
 8016f64:	681b      	ldr	r3, [r3, #0]
 8016f66:	78fa      	ldrb	r2, [r7, #3]
 8016f68:	4611      	mov	r1, r2
 8016f6a:	4618      	mov	r0, r3
 8016f6c:	f005 f94a 	bl	801c204 <USB_HC_Halt>
 8016f70:	e365      	b.n	801763e <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8016f72:	687b      	ldr	r3, [r7, #4]
 8016f74:	681b      	ldr	r3, [r3, #0]
 8016f76:	78fa      	ldrb	r2, [r7, #3]
 8016f78:	4611      	mov	r1, r2
 8016f7a:	4618      	mov	r0, r3
 8016f7c:	f004 ffc8 	bl	801bf10 <USB_ReadChInterrupts>
 8016f80:	4603      	mov	r3, r0
 8016f82:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8016f86:	2b40      	cmp	r3, #64	@ 0x40
 8016f88:	d139      	bne.n	8016ffe <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 8016f8a:	78fa      	ldrb	r2, [r7, #3]
 8016f8c:	6879      	ldr	r1, [r7, #4]
 8016f8e:	4613      	mov	r3, r2
 8016f90:	011b      	lsls	r3, r3, #4
 8016f92:	1a9b      	subs	r3, r3, r2
 8016f94:	009b      	lsls	r3, r3, #2
 8016f96:	440b      	add	r3, r1
 8016f98:	334d      	adds	r3, #77	@ 0x4d
 8016f9a:	2205      	movs	r2, #5
 8016f9c:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8016f9e:	78fa      	ldrb	r2, [r7, #3]
 8016fa0:	6879      	ldr	r1, [r7, #4]
 8016fa2:	4613      	mov	r3, r2
 8016fa4:	011b      	lsls	r3, r3, #4
 8016fa6:	1a9b      	subs	r3, r3, r2
 8016fa8:	009b      	lsls	r3, r3, #2
 8016faa:	440b      	add	r3, r1
 8016fac:	331a      	adds	r3, #26
 8016fae:	781b      	ldrb	r3, [r3, #0]
 8016fb0:	2b00      	cmp	r3, #0
 8016fb2:	d109      	bne.n	8016fc8 <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8016fb4:	78fa      	ldrb	r2, [r7, #3]
 8016fb6:	6879      	ldr	r1, [r7, #4]
 8016fb8:	4613      	mov	r3, r2
 8016fba:	011b      	lsls	r3, r3, #4
 8016fbc:	1a9b      	subs	r3, r3, r2
 8016fbe:	009b      	lsls	r3, r3, #2
 8016fc0:	440b      	add	r3, r1
 8016fc2:	3319      	adds	r3, #25
 8016fc4:	2201      	movs	r2, #1
 8016fc6:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 8016fc8:	78fa      	ldrb	r2, [r7, #3]
 8016fca:	6879      	ldr	r1, [r7, #4]
 8016fcc:	4613      	mov	r3, r2
 8016fce:	011b      	lsls	r3, r3, #4
 8016fd0:	1a9b      	subs	r3, r3, r2
 8016fd2:	009b      	lsls	r3, r3, #2
 8016fd4:	440b      	add	r3, r1
 8016fd6:	3344      	adds	r3, #68	@ 0x44
 8016fd8:	2200      	movs	r2, #0
 8016fda:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8016fdc:	687b      	ldr	r3, [r7, #4]
 8016fde:	681b      	ldr	r3, [r3, #0]
 8016fe0:	78fa      	ldrb	r2, [r7, #3]
 8016fe2:	4611      	mov	r1, r2
 8016fe4:	4618      	mov	r0, r3
 8016fe6:	f005 f90d 	bl	801c204 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8016fea:	78fb      	ldrb	r3, [r7, #3]
 8016fec:	015a      	lsls	r2, r3, #5
 8016fee:	693b      	ldr	r3, [r7, #16]
 8016ff0:	4413      	add	r3, r2
 8016ff2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8016ff6:	461a      	mov	r2, r3
 8016ff8:	2340      	movs	r3, #64	@ 0x40
 8016ffa:	6093      	str	r3, [r2, #8]
 8016ffc:	e31f      	b.n	801763e <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8016ffe:	687b      	ldr	r3, [r7, #4]
 8017000:	681b      	ldr	r3, [r3, #0]
 8017002:	78fa      	ldrb	r2, [r7, #3]
 8017004:	4611      	mov	r1, r2
 8017006:	4618      	mov	r0, r3
 8017008:	f004 ff82 	bl	801bf10 <USB_ReadChInterrupts>
 801700c:	4603      	mov	r3, r0
 801700e:	f003 0308 	and.w	r3, r3, #8
 8017012:	2b08      	cmp	r3, #8
 8017014:	d11a      	bne.n	801704c <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8017016:	78fb      	ldrb	r3, [r7, #3]
 8017018:	015a      	lsls	r2, r3, #5
 801701a:	693b      	ldr	r3, [r7, #16]
 801701c:	4413      	add	r3, r2
 801701e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8017022:	461a      	mov	r2, r3
 8017024:	2308      	movs	r3, #8
 8017026:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8017028:	78fa      	ldrb	r2, [r7, #3]
 801702a:	6879      	ldr	r1, [r7, #4]
 801702c:	4613      	mov	r3, r2
 801702e:	011b      	lsls	r3, r3, #4
 8017030:	1a9b      	subs	r3, r3, r2
 8017032:	009b      	lsls	r3, r3, #2
 8017034:	440b      	add	r3, r1
 8017036:	334d      	adds	r3, #77	@ 0x4d
 8017038:	2206      	movs	r2, #6
 801703a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 801703c:	687b      	ldr	r3, [r7, #4]
 801703e:	681b      	ldr	r3, [r3, #0]
 8017040:	78fa      	ldrb	r2, [r7, #3]
 8017042:	4611      	mov	r1, r2
 8017044:	4618      	mov	r0, r3
 8017046:	f005 f8dd 	bl	801c204 <USB_HC_Halt>
 801704a:	e2f8      	b.n	801763e <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 801704c:	687b      	ldr	r3, [r7, #4]
 801704e:	681b      	ldr	r3, [r3, #0]
 8017050:	78fa      	ldrb	r2, [r7, #3]
 8017052:	4611      	mov	r1, r2
 8017054:	4618      	mov	r0, r3
 8017056:	f004 ff5b 	bl	801bf10 <USB_ReadChInterrupts>
 801705a:	4603      	mov	r3, r0
 801705c:	f003 0310 	and.w	r3, r3, #16
 8017060:	2b10      	cmp	r3, #16
 8017062:	d144      	bne.n	80170ee <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8017064:	78fa      	ldrb	r2, [r7, #3]
 8017066:	6879      	ldr	r1, [r7, #4]
 8017068:	4613      	mov	r3, r2
 801706a:	011b      	lsls	r3, r3, #4
 801706c:	1a9b      	subs	r3, r3, r2
 801706e:	009b      	lsls	r3, r3, #2
 8017070:	440b      	add	r3, r1
 8017072:	3344      	adds	r3, #68	@ 0x44
 8017074:	2200      	movs	r2, #0
 8017076:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 8017078:	78fa      	ldrb	r2, [r7, #3]
 801707a:	6879      	ldr	r1, [r7, #4]
 801707c:	4613      	mov	r3, r2
 801707e:	011b      	lsls	r3, r3, #4
 8017080:	1a9b      	subs	r3, r3, r2
 8017082:	009b      	lsls	r3, r3, #2
 8017084:	440b      	add	r3, r1
 8017086:	334d      	adds	r3, #77	@ 0x4d
 8017088:	2204      	movs	r2, #4
 801708a:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 801708c:	78fa      	ldrb	r2, [r7, #3]
 801708e:	6879      	ldr	r1, [r7, #4]
 8017090:	4613      	mov	r3, r2
 8017092:	011b      	lsls	r3, r3, #4
 8017094:	1a9b      	subs	r3, r3, r2
 8017096:	009b      	lsls	r3, r3, #2
 8017098:	440b      	add	r3, r1
 801709a:	3319      	adds	r3, #25
 801709c:	781b      	ldrb	r3, [r3, #0]
 801709e:	2b00      	cmp	r3, #0
 80170a0:	d114      	bne.n	80170cc <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 80170a2:	78fa      	ldrb	r2, [r7, #3]
 80170a4:	6879      	ldr	r1, [r7, #4]
 80170a6:	4613      	mov	r3, r2
 80170a8:	011b      	lsls	r3, r3, #4
 80170aa:	1a9b      	subs	r3, r3, r2
 80170ac:	009b      	lsls	r3, r3, #2
 80170ae:	440b      	add	r3, r1
 80170b0:	3318      	adds	r3, #24
 80170b2:	781b      	ldrb	r3, [r3, #0]
 80170b4:	2b00      	cmp	r3, #0
 80170b6:	d109      	bne.n	80170cc <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 80170b8:	78fa      	ldrb	r2, [r7, #3]
 80170ba:	6879      	ldr	r1, [r7, #4]
 80170bc:	4613      	mov	r3, r2
 80170be:	011b      	lsls	r3, r3, #4
 80170c0:	1a9b      	subs	r3, r3, r2
 80170c2:	009b      	lsls	r3, r3, #2
 80170c4:	440b      	add	r3, r1
 80170c6:	3319      	adds	r3, #25
 80170c8:	2201      	movs	r2, #1
 80170ca:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80170cc:	687b      	ldr	r3, [r7, #4]
 80170ce:	681b      	ldr	r3, [r3, #0]
 80170d0:	78fa      	ldrb	r2, [r7, #3]
 80170d2:	4611      	mov	r1, r2
 80170d4:	4618      	mov	r0, r3
 80170d6:	f005 f895 	bl	801c204 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 80170da:	78fb      	ldrb	r3, [r7, #3]
 80170dc:	015a      	lsls	r2, r3, #5
 80170de:	693b      	ldr	r3, [r7, #16]
 80170e0:	4413      	add	r3, r2
 80170e2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80170e6:	461a      	mov	r2, r3
 80170e8:	2310      	movs	r3, #16
 80170ea:	6093      	str	r3, [r2, #8]
 80170ec:	e2a7      	b.n	801763e <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 80170ee:	687b      	ldr	r3, [r7, #4]
 80170f0:	681b      	ldr	r3, [r3, #0]
 80170f2:	78fa      	ldrb	r2, [r7, #3]
 80170f4:	4611      	mov	r1, r2
 80170f6:	4618      	mov	r0, r3
 80170f8:	f004 ff0a 	bl	801bf10 <USB_ReadChInterrupts>
 80170fc:	4603      	mov	r3, r0
 80170fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8017102:	2b80      	cmp	r3, #128	@ 0x80
 8017104:	f040 8083 	bne.w	801720e <HCD_HC_OUT_IRQHandler+0x548>
  {
    if (hhcd->Init.dma_enable == 0U)
 8017108:	687b      	ldr	r3, [r7, #4]
 801710a:	799b      	ldrb	r3, [r3, #6]
 801710c:	2b00      	cmp	r3, #0
 801710e:	d111      	bne.n	8017134 <HCD_HC_OUT_IRQHandler+0x46e>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 8017110:	78fa      	ldrb	r2, [r7, #3]
 8017112:	6879      	ldr	r1, [r7, #4]
 8017114:	4613      	mov	r3, r2
 8017116:	011b      	lsls	r3, r3, #4
 8017118:	1a9b      	subs	r3, r3, r2
 801711a:	009b      	lsls	r3, r3, #2
 801711c:	440b      	add	r3, r1
 801711e:	334d      	adds	r3, #77	@ 0x4d
 8017120:	2207      	movs	r2, #7
 8017122:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8017124:	687b      	ldr	r3, [r7, #4]
 8017126:	681b      	ldr	r3, [r3, #0]
 8017128:	78fa      	ldrb	r2, [r7, #3]
 801712a:	4611      	mov	r1, r2
 801712c:	4618      	mov	r0, r3
 801712e:	f005 f869 	bl	801c204 <USB_HC_Halt>
 8017132:	e062      	b.n	80171fa <HCD_HC_OUT_IRQHandler+0x534>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 8017134:	78fa      	ldrb	r2, [r7, #3]
 8017136:	6879      	ldr	r1, [r7, #4]
 8017138:	4613      	mov	r3, r2
 801713a:	011b      	lsls	r3, r3, #4
 801713c:	1a9b      	subs	r3, r3, r2
 801713e:	009b      	lsls	r3, r3, #2
 8017140:	440b      	add	r3, r1
 8017142:	3344      	adds	r3, #68	@ 0x44
 8017144:	681b      	ldr	r3, [r3, #0]
 8017146:	1c59      	adds	r1, r3, #1
 8017148:	6878      	ldr	r0, [r7, #4]
 801714a:	4613      	mov	r3, r2
 801714c:	011b      	lsls	r3, r3, #4
 801714e:	1a9b      	subs	r3, r3, r2
 8017150:	009b      	lsls	r3, r3, #2
 8017152:	4403      	add	r3, r0
 8017154:	3344      	adds	r3, #68	@ 0x44
 8017156:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8017158:	78fa      	ldrb	r2, [r7, #3]
 801715a:	6879      	ldr	r1, [r7, #4]
 801715c:	4613      	mov	r3, r2
 801715e:	011b      	lsls	r3, r3, #4
 8017160:	1a9b      	subs	r3, r3, r2
 8017162:	009b      	lsls	r3, r3, #2
 8017164:	440b      	add	r3, r1
 8017166:	3344      	adds	r3, #68	@ 0x44
 8017168:	681b      	ldr	r3, [r3, #0]
 801716a:	2b02      	cmp	r3, #2
 801716c:	d922      	bls.n	80171b4 <HCD_HC_OUT_IRQHandler+0x4ee>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 801716e:	78fa      	ldrb	r2, [r7, #3]
 8017170:	6879      	ldr	r1, [r7, #4]
 8017172:	4613      	mov	r3, r2
 8017174:	011b      	lsls	r3, r3, #4
 8017176:	1a9b      	subs	r3, r3, r2
 8017178:	009b      	lsls	r3, r3, #2
 801717a:	440b      	add	r3, r1
 801717c:	3344      	adds	r3, #68	@ 0x44
 801717e:	2200      	movs	r2, #0
 8017180:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8017182:	78fa      	ldrb	r2, [r7, #3]
 8017184:	6879      	ldr	r1, [r7, #4]
 8017186:	4613      	mov	r3, r2
 8017188:	011b      	lsls	r3, r3, #4
 801718a:	1a9b      	subs	r3, r3, r2
 801718c:	009b      	lsls	r3, r3, #2
 801718e:	440b      	add	r3, r1
 8017190:	334c      	adds	r3, #76	@ 0x4c
 8017192:	2204      	movs	r2, #4
 8017194:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8017196:	78fa      	ldrb	r2, [r7, #3]
 8017198:	6879      	ldr	r1, [r7, #4]
 801719a:	4613      	mov	r3, r2
 801719c:	011b      	lsls	r3, r3, #4
 801719e:	1a9b      	subs	r3, r3, r2
 80171a0:	009b      	lsls	r3, r3, #2
 80171a2:	440b      	add	r3, r1
 80171a4:	334c      	adds	r3, #76	@ 0x4c
 80171a6:	781a      	ldrb	r2, [r3, #0]
 80171a8:	78fb      	ldrb	r3, [r7, #3]
 80171aa:	4619      	mov	r1, r3
 80171ac:	6878      	ldr	r0, [r7, #4]
 80171ae:	f7fe ff13 	bl	8015fd8 <HAL_HCD_HC_NotifyURBChange_Callback>
 80171b2:	e022      	b.n	80171fa <HCD_HC_OUT_IRQHandler+0x534>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80171b4:	78fa      	ldrb	r2, [r7, #3]
 80171b6:	6879      	ldr	r1, [r7, #4]
 80171b8:	4613      	mov	r3, r2
 80171ba:	011b      	lsls	r3, r3, #4
 80171bc:	1a9b      	subs	r3, r3, r2
 80171be:	009b      	lsls	r3, r3, #2
 80171c0:	440b      	add	r3, r1
 80171c2:	334c      	adds	r3, #76	@ 0x4c
 80171c4:	2202      	movs	r2, #2
 80171c6:	701a      	strb	r2, [r3, #0]

        /* Re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 80171c8:	78fb      	ldrb	r3, [r7, #3]
 80171ca:	015a      	lsls	r2, r3, #5
 80171cc:	693b      	ldr	r3, [r7, #16]
 80171ce:	4413      	add	r3, r2
 80171d0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80171d4:	681b      	ldr	r3, [r3, #0]
 80171d6:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80171d8:	68fb      	ldr	r3, [r7, #12]
 80171da:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80171de:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80171e0:	68fb      	ldr	r3, [r7, #12]
 80171e2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80171e6:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 80171e8:	78fb      	ldrb	r3, [r7, #3]
 80171ea:	015a      	lsls	r2, r3, #5
 80171ec:	693b      	ldr	r3, [r7, #16]
 80171ee:	4413      	add	r3, r2
 80171f0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80171f4:	461a      	mov	r2, r3
 80171f6:	68fb      	ldr	r3, [r7, #12]
 80171f8:	6013      	str	r3, [r2, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 80171fa:	78fb      	ldrb	r3, [r7, #3]
 80171fc:	015a      	lsls	r2, r3, #5
 80171fe:	693b      	ldr	r3, [r7, #16]
 8017200:	4413      	add	r3, r2
 8017202:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8017206:	461a      	mov	r2, r3
 8017208:	2380      	movs	r3, #128	@ 0x80
 801720a:	6093      	str	r3, [r2, #8]
 801720c:	e217      	b.n	801763e <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 801720e:	687b      	ldr	r3, [r7, #4]
 8017210:	681b      	ldr	r3, [r3, #0]
 8017212:	78fa      	ldrb	r2, [r7, #3]
 8017214:	4611      	mov	r1, r2
 8017216:	4618      	mov	r0, r3
 8017218:	f004 fe7a 	bl	801bf10 <USB_ReadChInterrupts>
 801721c:	4603      	mov	r3, r0
 801721e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8017222:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8017226:	d11b      	bne.n	8017260 <HCD_HC_OUT_IRQHandler+0x59a>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8017228:	78fa      	ldrb	r2, [r7, #3]
 801722a:	6879      	ldr	r1, [r7, #4]
 801722c:	4613      	mov	r3, r2
 801722e:	011b      	lsls	r3, r3, #4
 8017230:	1a9b      	subs	r3, r3, r2
 8017232:	009b      	lsls	r3, r3, #2
 8017234:	440b      	add	r3, r1
 8017236:	334d      	adds	r3, #77	@ 0x4d
 8017238:	2209      	movs	r2, #9
 801723a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 801723c:	687b      	ldr	r3, [r7, #4]
 801723e:	681b      	ldr	r3, [r3, #0]
 8017240:	78fa      	ldrb	r2, [r7, #3]
 8017242:	4611      	mov	r1, r2
 8017244:	4618      	mov	r0, r3
 8017246:	f004 ffdd 	bl	801c204 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 801724a:	78fb      	ldrb	r3, [r7, #3]
 801724c:	015a      	lsls	r2, r3, #5
 801724e:	693b      	ldr	r3, [r7, #16]
 8017250:	4413      	add	r3, r2
 8017252:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8017256:	461a      	mov	r2, r3
 8017258:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801725c:	6093      	str	r3, [r2, #8]
 801725e:	e1ee      	b.n	801763e <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8017260:	687b      	ldr	r3, [r7, #4]
 8017262:	681b      	ldr	r3, [r3, #0]
 8017264:	78fa      	ldrb	r2, [r7, #3]
 8017266:	4611      	mov	r1, r2
 8017268:	4618      	mov	r0, r3
 801726a:	f004 fe51 	bl	801bf10 <USB_ReadChInterrupts>
 801726e:	4603      	mov	r3, r0
 8017270:	f003 0302 	and.w	r3, r3, #2
 8017274:	2b02      	cmp	r3, #2
 8017276:	f040 81df 	bne.w	8017638 <HCD_HC_OUT_IRQHandler+0x972>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 801727a:	78fb      	ldrb	r3, [r7, #3]
 801727c:	015a      	lsls	r2, r3, #5
 801727e:	693b      	ldr	r3, [r7, #16]
 8017280:	4413      	add	r3, r2
 8017282:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8017286:	461a      	mov	r2, r3
 8017288:	2302      	movs	r3, #2
 801728a:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 801728c:	78fa      	ldrb	r2, [r7, #3]
 801728e:	6879      	ldr	r1, [r7, #4]
 8017290:	4613      	mov	r3, r2
 8017292:	011b      	lsls	r3, r3, #4
 8017294:	1a9b      	subs	r3, r3, r2
 8017296:	009b      	lsls	r3, r3, #2
 8017298:	440b      	add	r3, r1
 801729a:	334d      	adds	r3, #77	@ 0x4d
 801729c:	781b      	ldrb	r3, [r3, #0]
 801729e:	2b01      	cmp	r3, #1
 80172a0:	f040 8093 	bne.w	80173ca <HCD_HC_OUT_IRQHandler+0x704>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80172a4:	78fa      	ldrb	r2, [r7, #3]
 80172a6:	6879      	ldr	r1, [r7, #4]
 80172a8:	4613      	mov	r3, r2
 80172aa:	011b      	lsls	r3, r3, #4
 80172ac:	1a9b      	subs	r3, r3, r2
 80172ae:	009b      	lsls	r3, r3, #2
 80172b0:	440b      	add	r3, r1
 80172b2:	334d      	adds	r3, #77	@ 0x4d
 80172b4:	2202      	movs	r2, #2
 80172b6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 80172b8:	78fa      	ldrb	r2, [r7, #3]
 80172ba:	6879      	ldr	r1, [r7, #4]
 80172bc:	4613      	mov	r3, r2
 80172be:	011b      	lsls	r3, r3, #4
 80172c0:	1a9b      	subs	r3, r3, r2
 80172c2:	009b      	lsls	r3, r3, #2
 80172c4:	440b      	add	r3, r1
 80172c6:	334c      	adds	r3, #76	@ 0x4c
 80172c8:	2201      	movs	r2, #1
 80172ca:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 80172cc:	78fa      	ldrb	r2, [r7, #3]
 80172ce:	6879      	ldr	r1, [r7, #4]
 80172d0:	4613      	mov	r3, r2
 80172d2:	011b      	lsls	r3, r3, #4
 80172d4:	1a9b      	subs	r3, r3, r2
 80172d6:	009b      	lsls	r3, r3, #2
 80172d8:	440b      	add	r3, r1
 80172da:	3326      	adds	r3, #38	@ 0x26
 80172dc:	781b      	ldrb	r3, [r3, #0]
 80172de:	2b02      	cmp	r3, #2
 80172e0:	d00b      	beq.n	80172fa <HCD_HC_OUT_IRQHandler+0x634>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 80172e2:	78fa      	ldrb	r2, [r7, #3]
 80172e4:	6879      	ldr	r1, [r7, #4]
 80172e6:	4613      	mov	r3, r2
 80172e8:	011b      	lsls	r3, r3, #4
 80172ea:	1a9b      	subs	r3, r3, r2
 80172ec:	009b      	lsls	r3, r3, #2
 80172ee:	440b      	add	r3, r1
 80172f0:	3326      	adds	r3, #38	@ 0x26
 80172f2:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 80172f4:	2b03      	cmp	r3, #3
 80172f6:	f040 8190 	bne.w	801761a <HCD_HC_OUT_IRQHandler+0x954>
      {
        if (hhcd->Init.dma_enable == 0U)
 80172fa:	687b      	ldr	r3, [r7, #4]
 80172fc:	799b      	ldrb	r3, [r3, #6]
 80172fe:	2b00      	cmp	r3, #0
 8017300:	d115      	bne.n	801732e <HCD_HC_OUT_IRQHandler+0x668>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 8017302:	78fa      	ldrb	r2, [r7, #3]
 8017304:	6879      	ldr	r1, [r7, #4]
 8017306:	4613      	mov	r3, r2
 8017308:	011b      	lsls	r3, r3, #4
 801730a:	1a9b      	subs	r3, r3, r2
 801730c:	009b      	lsls	r3, r3, #2
 801730e:	440b      	add	r3, r1
 8017310:	333d      	adds	r3, #61	@ 0x3d
 8017312:	781b      	ldrb	r3, [r3, #0]
 8017314:	78fa      	ldrb	r2, [r7, #3]
 8017316:	f083 0301 	eor.w	r3, r3, #1
 801731a:	b2d8      	uxtb	r0, r3
 801731c:	6879      	ldr	r1, [r7, #4]
 801731e:	4613      	mov	r3, r2
 8017320:	011b      	lsls	r3, r3, #4
 8017322:	1a9b      	subs	r3, r3, r2
 8017324:	009b      	lsls	r3, r3, #2
 8017326:	440b      	add	r3, r1
 8017328:	333d      	adds	r3, #61	@ 0x3d
 801732a:	4602      	mov	r2, r0
 801732c:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 801732e:	687b      	ldr	r3, [r7, #4]
 8017330:	799b      	ldrb	r3, [r3, #6]
 8017332:	2b01      	cmp	r3, #1
 8017334:	f040 8171 	bne.w	801761a <HCD_HC_OUT_IRQHandler+0x954>
 8017338:	78fa      	ldrb	r2, [r7, #3]
 801733a:	6879      	ldr	r1, [r7, #4]
 801733c:	4613      	mov	r3, r2
 801733e:	011b      	lsls	r3, r3, #4
 8017340:	1a9b      	subs	r3, r3, r2
 8017342:	009b      	lsls	r3, r3, #2
 8017344:	440b      	add	r3, r1
 8017346:	3334      	adds	r3, #52	@ 0x34
 8017348:	681b      	ldr	r3, [r3, #0]
 801734a:	2b00      	cmp	r3, #0
 801734c:	f000 8165 	beq.w	801761a <HCD_HC_OUT_IRQHandler+0x954>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 8017350:	78fa      	ldrb	r2, [r7, #3]
 8017352:	6879      	ldr	r1, [r7, #4]
 8017354:	4613      	mov	r3, r2
 8017356:	011b      	lsls	r3, r3, #4
 8017358:	1a9b      	subs	r3, r3, r2
 801735a:	009b      	lsls	r3, r3, #2
 801735c:	440b      	add	r3, r1
 801735e:	3334      	adds	r3, #52	@ 0x34
 8017360:	6819      	ldr	r1, [r3, #0]
 8017362:	78fa      	ldrb	r2, [r7, #3]
 8017364:	6878      	ldr	r0, [r7, #4]
 8017366:	4613      	mov	r3, r2
 8017368:	011b      	lsls	r3, r3, #4
 801736a:	1a9b      	subs	r3, r3, r2
 801736c:	009b      	lsls	r3, r3, #2
 801736e:	4403      	add	r3, r0
 8017370:	3328      	adds	r3, #40	@ 0x28
 8017372:	881b      	ldrh	r3, [r3, #0]
 8017374:	440b      	add	r3, r1
 8017376:	1e59      	subs	r1, r3, #1
 8017378:	78fa      	ldrb	r2, [r7, #3]
 801737a:	6878      	ldr	r0, [r7, #4]
 801737c:	4613      	mov	r3, r2
 801737e:	011b      	lsls	r3, r3, #4
 8017380:	1a9b      	subs	r3, r3, r2
 8017382:	009b      	lsls	r3, r3, #2
 8017384:	4403      	add	r3, r0
 8017386:	3328      	adds	r3, #40	@ 0x28
 8017388:	881b      	ldrh	r3, [r3, #0]
 801738a:	fbb1 f3f3 	udiv	r3, r1, r3
 801738e:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 8017390:	68bb      	ldr	r3, [r7, #8]
 8017392:	f003 0301 	and.w	r3, r3, #1
 8017396:	2b00      	cmp	r3, #0
 8017398:	f000 813f 	beq.w	801761a <HCD_HC_OUT_IRQHandler+0x954>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 801739c:	78fa      	ldrb	r2, [r7, #3]
 801739e:	6879      	ldr	r1, [r7, #4]
 80173a0:	4613      	mov	r3, r2
 80173a2:	011b      	lsls	r3, r3, #4
 80173a4:	1a9b      	subs	r3, r3, r2
 80173a6:	009b      	lsls	r3, r3, #2
 80173a8:	440b      	add	r3, r1
 80173aa:	333d      	adds	r3, #61	@ 0x3d
 80173ac:	781b      	ldrb	r3, [r3, #0]
 80173ae:	78fa      	ldrb	r2, [r7, #3]
 80173b0:	f083 0301 	eor.w	r3, r3, #1
 80173b4:	b2d8      	uxtb	r0, r3
 80173b6:	6879      	ldr	r1, [r7, #4]
 80173b8:	4613      	mov	r3, r2
 80173ba:	011b      	lsls	r3, r3, #4
 80173bc:	1a9b      	subs	r3, r3, r2
 80173be:	009b      	lsls	r3, r3, #2
 80173c0:	440b      	add	r3, r1
 80173c2:	333d      	adds	r3, #61	@ 0x3d
 80173c4:	4602      	mov	r2, r0
 80173c6:	701a      	strb	r2, [r3, #0]
 80173c8:	e127      	b.n	801761a <HCD_HC_OUT_IRQHandler+0x954>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 80173ca:	78fa      	ldrb	r2, [r7, #3]
 80173cc:	6879      	ldr	r1, [r7, #4]
 80173ce:	4613      	mov	r3, r2
 80173d0:	011b      	lsls	r3, r3, #4
 80173d2:	1a9b      	subs	r3, r3, r2
 80173d4:	009b      	lsls	r3, r3, #2
 80173d6:	440b      	add	r3, r1
 80173d8:	334d      	adds	r3, #77	@ 0x4d
 80173da:	781b      	ldrb	r3, [r3, #0]
 80173dc:	2b03      	cmp	r3, #3
 80173de:	d120      	bne.n	8017422 <HCD_HC_OUT_IRQHandler+0x75c>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80173e0:	78fa      	ldrb	r2, [r7, #3]
 80173e2:	6879      	ldr	r1, [r7, #4]
 80173e4:	4613      	mov	r3, r2
 80173e6:	011b      	lsls	r3, r3, #4
 80173e8:	1a9b      	subs	r3, r3, r2
 80173ea:	009b      	lsls	r3, r3, #2
 80173ec:	440b      	add	r3, r1
 80173ee:	334d      	adds	r3, #77	@ 0x4d
 80173f0:	2202      	movs	r2, #2
 80173f2:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80173f4:	78fa      	ldrb	r2, [r7, #3]
 80173f6:	6879      	ldr	r1, [r7, #4]
 80173f8:	4613      	mov	r3, r2
 80173fa:	011b      	lsls	r3, r3, #4
 80173fc:	1a9b      	subs	r3, r3, r2
 80173fe:	009b      	lsls	r3, r3, #2
 8017400:	440b      	add	r3, r1
 8017402:	331b      	adds	r3, #27
 8017404:	781b      	ldrb	r3, [r3, #0]
 8017406:	2b01      	cmp	r3, #1
 8017408:	f040 8107 	bne.w	801761a <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 801740c:	78fa      	ldrb	r2, [r7, #3]
 801740e:	6879      	ldr	r1, [r7, #4]
 8017410:	4613      	mov	r3, r2
 8017412:	011b      	lsls	r3, r3, #4
 8017414:	1a9b      	subs	r3, r3, r2
 8017416:	009b      	lsls	r3, r3, #2
 8017418:	440b      	add	r3, r1
 801741a:	334c      	adds	r3, #76	@ 0x4c
 801741c:	2202      	movs	r2, #2
 801741e:	701a      	strb	r2, [r3, #0]
 8017420:	e0fb      	b.n	801761a <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8017422:	78fa      	ldrb	r2, [r7, #3]
 8017424:	6879      	ldr	r1, [r7, #4]
 8017426:	4613      	mov	r3, r2
 8017428:	011b      	lsls	r3, r3, #4
 801742a:	1a9b      	subs	r3, r3, r2
 801742c:	009b      	lsls	r3, r3, #2
 801742e:	440b      	add	r3, r1
 8017430:	334d      	adds	r3, #77	@ 0x4d
 8017432:	781b      	ldrb	r3, [r3, #0]
 8017434:	2b04      	cmp	r3, #4
 8017436:	d13a      	bne.n	80174ae <HCD_HC_OUT_IRQHandler+0x7e8>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8017438:	78fa      	ldrb	r2, [r7, #3]
 801743a:	6879      	ldr	r1, [r7, #4]
 801743c:	4613      	mov	r3, r2
 801743e:	011b      	lsls	r3, r3, #4
 8017440:	1a9b      	subs	r3, r3, r2
 8017442:	009b      	lsls	r3, r3, #2
 8017444:	440b      	add	r3, r1
 8017446:	334d      	adds	r3, #77	@ 0x4d
 8017448:	2202      	movs	r2, #2
 801744a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 801744c:	78fa      	ldrb	r2, [r7, #3]
 801744e:	6879      	ldr	r1, [r7, #4]
 8017450:	4613      	mov	r3, r2
 8017452:	011b      	lsls	r3, r3, #4
 8017454:	1a9b      	subs	r3, r3, r2
 8017456:	009b      	lsls	r3, r3, #2
 8017458:	440b      	add	r3, r1
 801745a:	334c      	adds	r3, #76	@ 0x4c
 801745c:	2202      	movs	r2, #2
 801745e:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8017460:	78fa      	ldrb	r2, [r7, #3]
 8017462:	6879      	ldr	r1, [r7, #4]
 8017464:	4613      	mov	r3, r2
 8017466:	011b      	lsls	r3, r3, #4
 8017468:	1a9b      	subs	r3, r3, r2
 801746a:	009b      	lsls	r3, r3, #2
 801746c:	440b      	add	r3, r1
 801746e:	331b      	adds	r3, #27
 8017470:	781b      	ldrb	r3, [r3, #0]
 8017472:	2b01      	cmp	r3, #1
 8017474:	f040 80d1 	bne.w	801761a <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 8017478:	78fa      	ldrb	r2, [r7, #3]
 801747a:	6879      	ldr	r1, [r7, #4]
 801747c:	4613      	mov	r3, r2
 801747e:	011b      	lsls	r3, r3, #4
 8017480:	1a9b      	subs	r3, r3, r2
 8017482:	009b      	lsls	r3, r3, #2
 8017484:	440b      	add	r3, r1
 8017486:	331b      	adds	r3, #27
 8017488:	2200      	movs	r2, #0
 801748a:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 801748c:	78fb      	ldrb	r3, [r7, #3]
 801748e:	015a      	lsls	r2, r3, #5
 8017490:	693b      	ldr	r3, [r7, #16]
 8017492:	4413      	add	r3, r2
 8017494:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8017498:	685b      	ldr	r3, [r3, #4]
 801749a:	78fa      	ldrb	r2, [r7, #3]
 801749c:	0151      	lsls	r1, r2, #5
 801749e:	693a      	ldr	r2, [r7, #16]
 80174a0:	440a      	add	r2, r1
 80174a2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80174a6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80174aa:	6053      	str	r3, [r2, #4]
 80174ac:	e0b5      	b.n	801761a <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 80174ae:	78fa      	ldrb	r2, [r7, #3]
 80174b0:	6879      	ldr	r1, [r7, #4]
 80174b2:	4613      	mov	r3, r2
 80174b4:	011b      	lsls	r3, r3, #4
 80174b6:	1a9b      	subs	r3, r3, r2
 80174b8:	009b      	lsls	r3, r3, #2
 80174ba:	440b      	add	r3, r1
 80174bc:	334d      	adds	r3, #77	@ 0x4d
 80174be:	781b      	ldrb	r3, [r3, #0]
 80174c0:	2b05      	cmp	r3, #5
 80174c2:	d114      	bne.n	80174ee <HCD_HC_OUT_IRQHandler+0x828>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80174c4:	78fa      	ldrb	r2, [r7, #3]
 80174c6:	6879      	ldr	r1, [r7, #4]
 80174c8:	4613      	mov	r3, r2
 80174ca:	011b      	lsls	r3, r3, #4
 80174cc:	1a9b      	subs	r3, r3, r2
 80174ce:	009b      	lsls	r3, r3, #2
 80174d0:	440b      	add	r3, r1
 80174d2:	334d      	adds	r3, #77	@ 0x4d
 80174d4:	2202      	movs	r2, #2
 80174d6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 80174d8:	78fa      	ldrb	r2, [r7, #3]
 80174da:	6879      	ldr	r1, [r7, #4]
 80174dc:	4613      	mov	r3, r2
 80174de:	011b      	lsls	r3, r3, #4
 80174e0:	1a9b      	subs	r3, r3, r2
 80174e2:	009b      	lsls	r3, r3, #2
 80174e4:	440b      	add	r3, r1
 80174e6:	334c      	adds	r3, #76	@ 0x4c
 80174e8:	2202      	movs	r2, #2
 80174ea:	701a      	strb	r2, [r3, #0]
 80174ec:	e095      	b.n	801761a <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 80174ee:	78fa      	ldrb	r2, [r7, #3]
 80174f0:	6879      	ldr	r1, [r7, #4]
 80174f2:	4613      	mov	r3, r2
 80174f4:	011b      	lsls	r3, r3, #4
 80174f6:	1a9b      	subs	r3, r3, r2
 80174f8:	009b      	lsls	r3, r3, #2
 80174fa:	440b      	add	r3, r1
 80174fc:	334d      	adds	r3, #77	@ 0x4d
 80174fe:	781b      	ldrb	r3, [r3, #0]
 8017500:	2b06      	cmp	r3, #6
 8017502:	d114      	bne.n	801752e <HCD_HC_OUT_IRQHandler+0x868>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8017504:	78fa      	ldrb	r2, [r7, #3]
 8017506:	6879      	ldr	r1, [r7, #4]
 8017508:	4613      	mov	r3, r2
 801750a:	011b      	lsls	r3, r3, #4
 801750c:	1a9b      	subs	r3, r3, r2
 801750e:	009b      	lsls	r3, r3, #2
 8017510:	440b      	add	r3, r1
 8017512:	334d      	adds	r3, #77	@ 0x4d
 8017514:	2202      	movs	r2, #2
 8017516:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 8017518:	78fa      	ldrb	r2, [r7, #3]
 801751a:	6879      	ldr	r1, [r7, #4]
 801751c:	4613      	mov	r3, r2
 801751e:	011b      	lsls	r3, r3, #4
 8017520:	1a9b      	subs	r3, r3, r2
 8017522:	009b      	lsls	r3, r3, #2
 8017524:	440b      	add	r3, r1
 8017526:	334c      	adds	r3, #76	@ 0x4c
 8017528:	2205      	movs	r2, #5
 801752a:	701a      	strb	r2, [r3, #0]
 801752c:	e075      	b.n	801761a <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 801752e:	78fa      	ldrb	r2, [r7, #3]
 8017530:	6879      	ldr	r1, [r7, #4]
 8017532:	4613      	mov	r3, r2
 8017534:	011b      	lsls	r3, r3, #4
 8017536:	1a9b      	subs	r3, r3, r2
 8017538:	009b      	lsls	r3, r3, #2
 801753a:	440b      	add	r3, r1
 801753c:	334d      	adds	r3, #77	@ 0x4d
 801753e:	781b      	ldrb	r3, [r3, #0]
 8017540:	2b07      	cmp	r3, #7
 8017542:	d00a      	beq.n	801755a <HCD_HC_OUT_IRQHandler+0x894>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8017544:	78fa      	ldrb	r2, [r7, #3]
 8017546:	6879      	ldr	r1, [r7, #4]
 8017548:	4613      	mov	r3, r2
 801754a:	011b      	lsls	r3, r3, #4
 801754c:	1a9b      	subs	r3, r3, r2
 801754e:	009b      	lsls	r3, r3, #2
 8017550:	440b      	add	r3, r1
 8017552:	334d      	adds	r3, #77	@ 0x4d
 8017554:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8017556:	2b09      	cmp	r3, #9
 8017558:	d170      	bne.n	801763c <HCD_HC_OUT_IRQHandler+0x976>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 801755a:	78fa      	ldrb	r2, [r7, #3]
 801755c:	6879      	ldr	r1, [r7, #4]
 801755e:	4613      	mov	r3, r2
 8017560:	011b      	lsls	r3, r3, #4
 8017562:	1a9b      	subs	r3, r3, r2
 8017564:	009b      	lsls	r3, r3, #2
 8017566:	440b      	add	r3, r1
 8017568:	334d      	adds	r3, #77	@ 0x4d
 801756a:	2202      	movs	r2, #2
 801756c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 801756e:	78fa      	ldrb	r2, [r7, #3]
 8017570:	6879      	ldr	r1, [r7, #4]
 8017572:	4613      	mov	r3, r2
 8017574:	011b      	lsls	r3, r3, #4
 8017576:	1a9b      	subs	r3, r3, r2
 8017578:	009b      	lsls	r3, r3, #2
 801757a:	440b      	add	r3, r1
 801757c:	3344      	adds	r3, #68	@ 0x44
 801757e:	681b      	ldr	r3, [r3, #0]
 8017580:	1c59      	adds	r1, r3, #1
 8017582:	6878      	ldr	r0, [r7, #4]
 8017584:	4613      	mov	r3, r2
 8017586:	011b      	lsls	r3, r3, #4
 8017588:	1a9b      	subs	r3, r3, r2
 801758a:	009b      	lsls	r3, r3, #2
 801758c:	4403      	add	r3, r0
 801758e:	3344      	adds	r3, #68	@ 0x44
 8017590:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8017592:	78fa      	ldrb	r2, [r7, #3]
 8017594:	6879      	ldr	r1, [r7, #4]
 8017596:	4613      	mov	r3, r2
 8017598:	011b      	lsls	r3, r3, #4
 801759a:	1a9b      	subs	r3, r3, r2
 801759c:	009b      	lsls	r3, r3, #2
 801759e:	440b      	add	r3, r1
 80175a0:	3344      	adds	r3, #68	@ 0x44
 80175a2:	681b      	ldr	r3, [r3, #0]
 80175a4:	2b02      	cmp	r3, #2
 80175a6:	d914      	bls.n	80175d2 <HCD_HC_OUT_IRQHandler+0x90c>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 80175a8:	78fa      	ldrb	r2, [r7, #3]
 80175aa:	6879      	ldr	r1, [r7, #4]
 80175ac:	4613      	mov	r3, r2
 80175ae:	011b      	lsls	r3, r3, #4
 80175b0:	1a9b      	subs	r3, r3, r2
 80175b2:	009b      	lsls	r3, r3, #2
 80175b4:	440b      	add	r3, r1
 80175b6:	3344      	adds	r3, #68	@ 0x44
 80175b8:	2200      	movs	r2, #0
 80175ba:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 80175bc:	78fa      	ldrb	r2, [r7, #3]
 80175be:	6879      	ldr	r1, [r7, #4]
 80175c0:	4613      	mov	r3, r2
 80175c2:	011b      	lsls	r3, r3, #4
 80175c4:	1a9b      	subs	r3, r3, r2
 80175c6:	009b      	lsls	r3, r3, #2
 80175c8:	440b      	add	r3, r1
 80175ca:	334c      	adds	r3, #76	@ 0x4c
 80175cc:	2204      	movs	r2, #4
 80175ce:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80175d0:	e022      	b.n	8017618 <HCD_HC_OUT_IRQHandler+0x952>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80175d2:	78fa      	ldrb	r2, [r7, #3]
 80175d4:	6879      	ldr	r1, [r7, #4]
 80175d6:	4613      	mov	r3, r2
 80175d8:	011b      	lsls	r3, r3, #4
 80175da:	1a9b      	subs	r3, r3, r2
 80175dc:	009b      	lsls	r3, r3, #2
 80175de:	440b      	add	r3, r1
 80175e0:	334c      	adds	r3, #76	@ 0x4c
 80175e2:	2202      	movs	r2, #2
 80175e4:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 80175e6:	78fb      	ldrb	r3, [r7, #3]
 80175e8:	015a      	lsls	r2, r3, #5
 80175ea:	693b      	ldr	r3, [r7, #16]
 80175ec:	4413      	add	r3, r2
 80175ee:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80175f2:	681b      	ldr	r3, [r3, #0]
 80175f4:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80175f6:	68fb      	ldr	r3, [r7, #12]
 80175f8:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80175fc:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80175fe:	68fb      	ldr	r3, [r7, #12]
 8017600:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8017604:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8017606:	78fb      	ldrb	r3, [r7, #3]
 8017608:	015a      	lsls	r2, r3, #5
 801760a:	693b      	ldr	r3, [r7, #16]
 801760c:	4413      	add	r3, r2
 801760e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8017612:	461a      	mov	r2, r3
 8017614:	68fb      	ldr	r3, [r7, #12]
 8017616:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8017618:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 801761a:	78fa      	ldrb	r2, [r7, #3]
 801761c:	6879      	ldr	r1, [r7, #4]
 801761e:	4613      	mov	r3, r2
 8017620:	011b      	lsls	r3, r3, #4
 8017622:	1a9b      	subs	r3, r3, r2
 8017624:	009b      	lsls	r3, r3, #2
 8017626:	440b      	add	r3, r1
 8017628:	334c      	adds	r3, #76	@ 0x4c
 801762a:	781a      	ldrb	r2, [r3, #0]
 801762c:	78fb      	ldrb	r3, [r7, #3]
 801762e:	4619      	mov	r1, r3
 8017630:	6878      	ldr	r0, [r7, #4]
 8017632:	f7fe fcd1 	bl	8015fd8 <HAL_HCD_HC_NotifyURBChange_Callback>
 8017636:	e002      	b.n	801763e <HCD_HC_OUT_IRQHandler+0x978>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 8017638:	bf00      	nop
 801763a:	e000      	b.n	801763e <HCD_HC_OUT_IRQHandler+0x978>
      return;
 801763c:	bf00      	nop
  }
}
 801763e:	3718      	adds	r7, #24
 8017640:	46bd      	mov	sp, r7
 8017642:	bd80      	pop	{r7, pc}

08017644 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8017644:	b580      	push	{r7, lr}
 8017646:	b08a      	sub	sp, #40	@ 0x28
 8017648:	af00      	add	r7, sp, #0
 801764a:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 801764c:	687b      	ldr	r3, [r7, #4]
 801764e:	681b      	ldr	r3, [r3, #0]
 8017650:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8017652:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017654:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8017656:	687b      	ldr	r3, [r7, #4]
 8017658:	681b      	ldr	r3, [r3, #0]
 801765a:	6a1b      	ldr	r3, [r3, #32]
 801765c:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 801765e:	69fb      	ldr	r3, [r7, #28]
 8017660:	f003 030f 	and.w	r3, r3, #15
 8017664:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8017666:	69fb      	ldr	r3, [r7, #28]
 8017668:	0c5b      	lsrs	r3, r3, #17
 801766a:	f003 030f 	and.w	r3, r3, #15
 801766e:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8017670:	69fb      	ldr	r3, [r7, #28]
 8017672:	091b      	lsrs	r3, r3, #4
 8017674:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8017678:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 801767a:	697b      	ldr	r3, [r7, #20]
 801767c:	2b02      	cmp	r3, #2
 801767e:	d004      	beq.n	801768a <HCD_RXQLVL_IRQHandler+0x46>
 8017680:	697b      	ldr	r3, [r7, #20]
 8017682:	2b05      	cmp	r3, #5
 8017684:	f000 80b6 	beq.w	80177f4 <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8017688:	e0b7      	b.n	80177fa <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 801768a:	693b      	ldr	r3, [r7, #16]
 801768c:	2b00      	cmp	r3, #0
 801768e:	f000 80b3 	beq.w	80177f8 <HCD_RXQLVL_IRQHandler+0x1b4>
 8017692:	6879      	ldr	r1, [r7, #4]
 8017694:	69ba      	ldr	r2, [r7, #24]
 8017696:	4613      	mov	r3, r2
 8017698:	011b      	lsls	r3, r3, #4
 801769a:	1a9b      	subs	r3, r3, r2
 801769c:	009b      	lsls	r3, r3, #2
 801769e:	440b      	add	r3, r1
 80176a0:	332c      	adds	r3, #44	@ 0x2c
 80176a2:	681b      	ldr	r3, [r3, #0]
 80176a4:	2b00      	cmp	r3, #0
 80176a6:	f000 80a7 	beq.w	80177f8 <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 80176aa:	6879      	ldr	r1, [r7, #4]
 80176ac:	69ba      	ldr	r2, [r7, #24]
 80176ae:	4613      	mov	r3, r2
 80176b0:	011b      	lsls	r3, r3, #4
 80176b2:	1a9b      	subs	r3, r3, r2
 80176b4:	009b      	lsls	r3, r3, #2
 80176b6:	440b      	add	r3, r1
 80176b8:	3338      	adds	r3, #56	@ 0x38
 80176ba:	681a      	ldr	r2, [r3, #0]
 80176bc:	693b      	ldr	r3, [r7, #16]
 80176be:	18d1      	adds	r1, r2, r3
 80176c0:	6878      	ldr	r0, [r7, #4]
 80176c2:	69ba      	ldr	r2, [r7, #24]
 80176c4:	4613      	mov	r3, r2
 80176c6:	011b      	lsls	r3, r3, #4
 80176c8:	1a9b      	subs	r3, r3, r2
 80176ca:	009b      	lsls	r3, r3, #2
 80176cc:	4403      	add	r3, r0
 80176ce:	3334      	adds	r3, #52	@ 0x34
 80176d0:	681b      	ldr	r3, [r3, #0]
 80176d2:	4299      	cmp	r1, r3
 80176d4:	f200 8083 	bhi.w	80177de <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 80176d8:	687b      	ldr	r3, [r7, #4]
 80176da:	6818      	ldr	r0, [r3, #0]
 80176dc:	6879      	ldr	r1, [r7, #4]
 80176de:	69ba      	ldr	r2, [r7, #24]
 80176e0:	4613      	mov	r3, r2
 80176e2:	011b      	lsls	r3, r3, #4
 80176e4:	1a9b      	subs	r3, r3, r2
 80176e6:	009b      	lsls	r3, r3, #2
 80176e8:	440b      	add	r3, r1
 80176ea:	332c      	adds	r3, #44	@ 0x2c
 80176ec:	681b      	ldr	r3, [r3, #0]
 80176ee:	693a      	ldr	r2, [r7, #16]
 80176f0:	b292      	uxth	r2, r2
 80176f2:	4619      	mov	r1, r3
 80176f4:	f004 fba1 	bl	801be3a <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 80176f8:	6879      	ldr	r1, [r7, #4]
 80176fa:	69ba      	ldr	r2, [r7, #24]
 80176fc:	4613      	mov	r3, r2
 80176fe:	011b      	lsls	r3, r3, #4
 8017700:	1a9b      	subs	r3, r3, r2
 8017702:	009b      	lsls	r3, r3, #2
 8017704:	440b      	add	r3, r1
 8017706:	332c      	adds	r3, #44	@ 0x2c
 8017708:	681a      	ldr	r2, [r3, #0]
 801770a:	693b      	ldr	r3, [r7, #16]
 801770c:	18d1      	adds	r1, r2, r3
 801770e:	6878      	ldr	r0, [r7, #4]
 8017710:	69ba      	ldr	r2, [r7, #24]
 8017712:	4613      	mov	r3, r2
 8017714:	011b      	lsls	r3, r3, #4
 8017716:	1a9b      	subs	r3, r3, r2
 8017718:	009b      	lsls	r3, r3, #2
 801771a:	4403      	add	r3, r0
 801771c:	332c      	adds	r3, #44	@ 0x2c
 801771e:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 8017720:	6879      	ldr	r1, [r7, #4]
 8017722:	69ba      	ldr	r2, [r7, #24]
 8017724:	4613      	mov	r3, r2
 8017726:	011b      	lsls	r3, r3, #4
 8017728:	1a9b      	subs	r3, r3, r2
 801772a:	009b      	lsls	r3, r3, #2
 801772c:	440b      	add	r3, r1
 801772e:	3338      	adds	r3, #56	@ 0x38
 8017730:	681a      	ldr	r2, [r3, #0]
 8017732:	693b      	ldr	r3, [r7, #16]
 8017734:	18d1      	adds	r1, r2, r3
 8017736:	6878      	ldr	r0, [r7, #4]
 8017738:	69ba      	ldr	r2, [r7, #24]
 801773a:	4613      	mov	r3, r2
 801773c:	011b      	lsls	r3, r3, #4
 801773e:	1a9b      	subs	r3, r3, r2
 8017740:	009b      	lsls	r3, r3, #2
 8017742:	4403      	add	r3, r0
 8017744:	3338      	adds	r3, #56	@ 0x38
 8017746:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8017748:	69bb      	ldr	r3, [r7, #24]
 801774a:	015a      	lsls	r2, r3, #5
 801774c:	6a3b      	ldr	r3, [r7, #32]
 801774e:	4413      	add	r3, r2
 8017750:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8017754:	691b      	ldr	r3, [r3, #16]
 8017756:	0cdb      	lsrs	r3, r3, #19
 8017758:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801775c:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 801775e:	6879      	ldr	r1, [r7, #4]
 8017760:	69ba      	ldr	r2, [r7, #24]
 8017762:	4613      	mov	r3, r2
 8017764:	011b      	lsls	r3, r3, #4
 8017766:	1a9b      	subs	r3, r3, r2
 8017768:	009b      	lsls	r3, r3, #2
 801776a:	440b      	add	r3, r1
 801776c:	3328      	adds	r3, #40	@ 0x28
 801776e:	881b      	ldrh	r3, [r3, #0]
 8017770:	461a      	mov	r2, r3
 8017772:	693b      	ldr	r3, [r7, #16]
 8017774:	4293      	cmp	r3, r2
 8017776:	d13f      	bne.n	80177f8 <HCD_RXQLVL_IRQHandler+0x1b4>
 8017778:	68fb      	ldr	r3, [r7, #12]
 801777a:	2b00      	cmp	r3, #0
 801777c:	d03c      	beq.n	80177f8 <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 801777e:	69bb      	ldr	r3, [r7, #24]
 8017780:	015a      	lsls	r2, r3, #5
 8017782:	6a3b      	ldr	r3, [r7, #32]
 8017784:	4413      	add	r3, r2
 8017786:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 801778a:	681b      	ldr	r3, [r3, #0]
 801778c:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 801778e:	68bb      	ldr	r3, [r7, #8]
 8017790:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8017794:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8017796:	68bb      	ldr	r3, [r7, #8]
 8017798:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 801779c:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 801779e:	69bb      	ldr	r3, [r7, #24]
 80177a0:	015a      	lsls	r2, r3, #5
 80177a2:	6a3b      	ldr	r3, [r7, #32]
 80177a4:	4413      	add	r3, r2
 80177a6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80177aa:	461a      	mov	r2, r3
 80177ac:	68bb      	ldr	r3, [r7, #8]
 80177ae:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 80177b0:	6879      	ldr	r1, [r7, #4]
 80177b2:	69ba      	ldr	r2, [r7, #24]
 80177b4:	4613      	mov	r3, r2
 80177b6:	011b      	lsls	r3, r3, #4
 80177b8:	1a9b      	subs	r3, r3, r2
 80177ba:	009b      	lsls	r3, r3, #2
 80177bc:	440b      	add	r3, r1
 80177be:	333c      	adds	r3, #60	@ 0x3c
 80177c0:	781b      	ldrb	r3, [r3, #0]
 80177c2:	f083 0301 	eor.w	r3, r3, #1
 80177c6:	b2d8      	uxtb	r0, r3
 80177c8:	6879      	ldr	r1, [r7, #4]
 80177ca:	69ba      	ldr	r2, [r7, #24]
 80177cc:	4613      	mov	r3, r2
 80177ce:	011b      	lsls	r3, r3, #4
 80177d0:	1a9b      	subs	r3, r3, r2
 80177d2:	009b      	lsls	r3, r3, #2
 80177d4:	440b      	add	r3, r1
 80177d6:	333c      	adds	r3, #60	@ 0x3c
 80177d8:	4602      	mov	r2, r0
 80177da:	701a      	strb	r2, [r3, #0]
      break;
 80177dc:	e00c      	b.n	80177f8 <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 80177de:	6879      	ldr	r1, [r7, #4]
 80177e0:	69ba      	ldr	r2, [r7, #24]
 80177e2:	4613      	mov	r3, r2
 80177e4:	011b      	lsls	r3, r3, #4
 80177e6:	1a9b      	subs	r3, r3, r2
 80177e8:	009b      	lsls	r3, r3, #2
 80177ea:	440b      	add	r3, r1
 80177ec:	334c      	adds	r3, #76	@ 0x4c
 80177ee:	2204      	movs	r2, #4
 80177f0:	701a      	strb	r2, [r3, #0]
      break;
 80177f2:	e001      	b.n	80177f8 <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 80177f4:	bf00      	nop
 80177f6:	e000      	b.n	80177fa <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 80177f8:	bf00      	nop
  }
}
 80177fa:	bf00      	nop
 80177fc:	3728      	adds	r7, #40	@ 0x28
 80177fe:	46bd      	mov	sp, r7
 8017800:	bd80      	pop	{r7, pc}

08017802 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8017802:	b580      	push	{r7, lr}
 8017804:	b086      	sub	sp, #24
 8017806:	af00      	add	r7, sp, #0
 8017808:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 801780a:	687b      	ldr	r3, [r7, #4]
 801780c:	681b      	ldr	r3, [r3, #0]
 801780e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8017810:	697b      	ldr	r3, [r7, #20]
 8017812:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8017814:	693b      	ldr	r3, [r7, #16]
 8017816:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 801781a:	681b      	ldr	r3, [r3, #0]
 801781c:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 801781e:	693b      	ldr	r3, [r7, #16]
 8017820:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8017824:	681b      	ldr	r3, [r3, #0]
 8017826:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8017828:	68bb      	ldr	r3, [r7, #8]
 801782a:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 801782e:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8017830:	68fb      	ldr	r3, [r7, #12]
 8017832:	f003 0302 	and.w	r3, r3, #2
 8017836:	2b02      	cmp	r3, #2
 8017838:	d10b      	bne.n	8017852 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 801783a:	68fb      	ldr	r3, [r7, #12]
 801783c:	f003 0301 	and.w	r3, r3, #1
 8017840:	2b01      	cmp	r3, #1
 8017842:	d102      	bne.n	801784a <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8017844:	6878      	ldr	r0, [r7, #4]
 8017846:	f7fe fb9f 	bl	8015f88 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 801784a:	68bb      	ldr	r3, [r7, #8]
 801784c:	f043 0302 	orr.w	r3, r3, #2
 8017850:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8017852:	68fb      	ldr	r3, [r7, #12]
 8017854:	f003 0308 	and.w	r3, r3, #8
 8017858:	2b08      	cmp	r3, #8
 801785a:	d132      	bne.n	80178c2 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 801785c:	68bb      	ldr	r3, [r7, #8]
 801785e:	f043 0308 	orr.w	r3, r3, #8
 8017862:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8017864:	68fb      	ldr	r3, [r7, #12]
 8017866:	f003 0304 	and.w	r3, r3, #4
 801786a:	2b04      	cmp	r3, #4
 801786c:	d126      	bne.n	80178bc <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 801786e:	687b      	ldr	r3, [r7, #4]
 8017870:	7a5b      	ldrb	r3, [r3, #9]
 8017872:	2b02      	cmp	r3, #2
 8017874:	d113      	bne.n	801789e <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8017876:	68fb      	ldr	r3, [r7, #12]
 8017878:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 801787c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8017880:	d106      	bne.n	8017890 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8017882:	687b      	ldr	r3, [r7, #4]
 8017884:	681b      	ldr	r3, [r3, #0]
 8017886:	2102      	movs	r1, #2
 8017888:	4618      	mov	r0, r3
 801788a:	f004 fc6d 	bl	801c168 <USB_InitFSLSPClkSel>
 801788e:	e011      	b.n	80178b4 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8017890:	687b      	ldr	r3, [r7, #4]
 8017892:	681b      	ldr	r3, [r3, #0]
 8017894:	2101      	movs	r1, #1
 8017896:	4618      	mov	r0, r3
 8017898:	f004 fc66 	bl	801c168 <USB_InitFSLSPClkSel>
 801789c:	e00a      	b.n	80178b4 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 801789e:	687b      	ldr	r3, [r7, #4]
 80178a0:	79db      	ldrb	r3, [r3, #7]
 80178a2:	2b01      	cmp	r3, #1
 80178a4:	d106      	bne.n	80178b4 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 80178a6:	693b      	ldr	r3, [r7, #16]
 80178a8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80178ac:	461a      	mov	r2, r3
 80178ae:	f64e 2360 	movw	r3, #60000	@ 0xea60
 80178b2:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 80178b4:	6878      	ldr	r0, [r7, #4]
 80178b6:	f7fe fb7b 	bl	8015fb0 <HAL_HCD_PortEnabled_Callback>
 80178ba:	e002      	b.n	80178c2 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 80178bc:	6878      	ldr	r0, [r7, #4]
 80178be:	f7fe fb81 	bl	8015fc4 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 80178c2:	68fb      	ldr	r3, [r7, #12]
 80178c4:	f003 0320 	and.w	r3, r3, #32
 80178c8:	2b20      	cmp	r3, #32
 80178ca:	d103      	bne.n	80178d4 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 80178cc:	68bb      	ldr	r3, [r7, #8]
 80178ce:	f043 0320 	orr.w	r3, r3, #32
 80178d2:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 80178d4:	693b      	ldr	r3, [r7, #16]
 80178d6:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80178da:	461a      	mov	r2, r3
 80178dc:	68bb      	ldr	r3, [r7, #8]
 80178de:	6013      	str	r3, [r2, #0]
}
 80178e0:	bf00      	nop
 80178e2:	3718      	adds	r7, #24
 80178e4:	46bd      	mov	sp, r7
 80178e6:	bd80      	pop	{r7, pc}

080178e8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80178e8:	b580      	push	{r7, lr}
 80178ea:	b084      	sub	sp, #16
 80178ec:	af00      	add	r7, sp, #0
 80178ee:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80178f0:	687b      	ldr	r3, [r7, #4]
 80178f2:	2b00      	cmp	r3, #0
 80178f4:	d101      	bne.n	80178fa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80178f6:	2301      	movs	r3, #1
 80178f8:	e12b      	b.n	8017b52 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80178fa:	687b      	ldr	r3, [r7, #4]
 80178fc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8017900:	b2db      	uxtb	r3, r3
 8017902:	2b00      	cmp	r3, #0
 8017904:	d106      	bne.n	8017914 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8017906:	687b      	ldr	r3, [r7, #4]
 8017908:	2200      	movs	r2, #0
 801790a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 801790e:	6878      	ldr	r0, [r7, #4]
 8017910:	f7fa f99e 	bl	8011c50 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8017914:	687b      	ldr	r3, [r7, #4]
 8017916:	2224      	movs	r2, #36	@ 0x24
 8017918:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 801791c:	687b      	ldr	r3, [r7, #4]
 801791e:	681b      	ldr	r3, [r3, #0]
 8017920:	681a      	ldr	r2, [r3, #0]
 8017922:	687b      	ldr	r3, [r7, #4]
 8017924:	681b      	ldr	r3, [r3, #0]
 8017926:	f022 0201 	bic.w	r2, r2, #1
 801792a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 801792c:	687b      	ldr	r3, [r7, #4]
 801792e:	681b      	ldr	r3, [r3, #0]
 8017930:	681a      	ldr	r2, [r3, #0]
 8017932:	687b      	ldr	r3, [r7, #4]
 8017934:	681b      	ldr	r3, [r3, #0]
 8017936:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 801793a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 801793c:	687b      	ldr	r3, [r7, #4]
 801793e:	681b      	ldr	r3, [r3, #0]
 8017940:	681a      	ldr	r2, [r3, #0]
 8017942:	687b      	ldr	r3, [r7, #4]
 8017944:	681b      	ldr	r3, [r3, #0]
 8017946:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 801794a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 801794c:	f002 f854 	bl	80199f8 <HAL_RCC_GetPCLK1Freq>
 8017950:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8017952:	687b      	ldr	r3, [r7, #4]
 8017954:	685b      	ldr	r3, [r3, #4]
 8017956:	4a81      	ldr	r2, [pc, #516]	@ (8017b5c <HAL_I2C_Init+0x274>)
 8017958:	4293      	cmp	r3, r2
 801795a:	d807      	bhi.n	801796c <HAL_I2C_Init+0x84>
 801795c:	68fb      	ldr	r3, [r7, #12]
 801795e:	4a80      	ldr	r2, [pc, #512]	@ (8017b60 <HAL_I2C_Init+0x278>)
 8017960:	4293      	cmp	r3, r2
 8017962:	bf94      	ite	ls
 8017964:	2301      	movls	r3, #1
 8017966:	2300      	movhi	r3, #0
 8017968:	b2db      	uxtb	r3, r3
 801796a:	e006      	b.n	801797a <HAL_I2C_Init+0x92>
 801796c:	68fb      	ldr	r3, [r7, #12]
 801796e:	4a7d      	ldr	r2, [pc, #500]	@ (8017b64 <HAL_I2C_Init+0x27c>)
 8017970:	4293      	cmp	r3, r2
 8017972:	bf94      	ite	ls
 8017974:	2301      	movls	r3, #1
 8017976:	2300      	movhi	r3, #0
 8017978:	b2db      	uxtb	r3, r3
 801797a:	2b00      	cmp	r3, #0
 801797c:	d001      	beq.n	8017982 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 801797e:	2301      	movs	r3, #1
 8017980:	e0e7      	b.n	8017b52 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8017982:	68fb      	ldr	r3, [r7, #12]
 8017984:	4a78      	ldr	r2, [pc, #480]	@ (8017b68 <HAL_I2C_Init+0x280>)
 8017986:	fba2 2303 	umull	r2, r3, r2, r3
 801798a:	0c9b      	lsrs	r3, r3, #18
 801798c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 801798e:	687b      	ldr	r3, [r7, #4]
 8017990:	681b      	ldr	r3, [r3, #0]
 8017992:	685b      	ldr	r3, [r3, #4]
 8017994:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8017998:	687b      	ldr	r3, [r7, #4]
 801799a:	681b      	ldr	r3, [r3, #0]
 801799c:	68ba      	ldr	r2, [r7, #8]
 801799e:	430a      	orrs	r2, r1
 80179a0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80179a2:	687b      	ldr	r3, [r7, #4]
 80179a4:	681b      	ldr	r3, [r3, #0]
 80179a6:	6a1b      	ldr	r3, [r3, #32]
 80179a8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80179ac:	687b      	ldr	r3, [r7, #4]
 80179ae:	685b      	ldr	r3, [r3, #4]
 80179b0:	4a6a      	ldr	r2, [pc, #424]	@ (8017b5c <HAL_I2C_Init+0x274>)
 80179b2:	4293      	cmp	r3, r2
 80179b4:	d802      	bhi.n	80179bc <HAL_I2C_Init+0xd4>
 80179b6:	68bb      	ldr	r3, [r7, #8]
 80179b8:	3301      	adds	r3, #1
 80179ba:	e009      	b.n	80179d0 <HAL_I2C_Init+0xe8>
 80179bc:	68bb      	ldr	r3, [r7, #8]
 80179be:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80179c2:	fb02 f303 	mul.w	r3, r2, r3
 80179c6:	4a69      	ldr	r2, [pc, #420]	@ (8017b6c <HAL_I2C_Init+0x284>)
 80179c8:	fba2 2303 	umull	r2, r3, r2, r3
 80179cc:	099b      	lsrs	r3, r3, #6
 80179ce:	3301      	adds	r3, #1
 80179d0:	687a      	ldr	r2, [r7, #4]
 80179d2:	6812      	ldr	r2, [r2, #0]
 80179d4:	430b      	orrs	r3, r1
 80179d6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80179d8:	687b      	ldr	r3, [r7, #4]
 80179da:	681b      	ldr	r3, [r3, #0]
 80179dc:	69db      	ldr	r3, [r3, #28]
 80179de:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80179e2:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80179e6:	687b      	ldr	r3, [r7, #4]
 80179e8:	685b      	ldr	r3, [r3, #4]
 80179ea:	495c      	ldr	r1, [pc, #368]	@ (8017b5c <HAL_I2C_Init+0x274>)
 80179ec:	428b      	cmp	r3, r1
 80179ee:	d819      	bhi.n	8017a24 <HAL_I2C_Init+0x13c>
 80179f0:	68fb      	ldr	r3, [r7, #12]
 80179f2:	1e59      	subs	r1, r3, #1
 80179f4:	687b      	ldr	r3, [r7, #4]
 80179f6:	685b      	ldr	r3, [r3, #4]
 80179f8:	005b      	lsls	r3, r3, #1
 80179fa:	fbb1 f3f3 	udiv	r3, r1, r3
 80179fe:	1c59      	adds	r1, r3, #1
 8017a00:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8017a04:	400b      	ands	r3, r1
 8017a06:	2b00      	cmp	r3, #0
 8017a08:	d00a      	beq.n	8017a20 <HAL_I2C_Init+0x138>
 8017a0a:	68fb      	ldr	r3, [r7, #12]
 8017a0c:	1e59      	subs	r1, r3, #1
 8017a0e:	687b      	ldr	r3, [r7, #4]
 8017a10:	685b      	ldr	r3, [r3, #4]
 8017a12:	005b      	lsls	r3, r3, #1
 8017a14:	fbb1 f3f3 	udiv	r3, r1, r3
 8017a18:	3301      	adds	r3, #1
 8017a1a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8017a1e:	e051      	b.n	8017ac4 <HAL_I2C_Init+0x1dc>
 8017a20:	2304      	movs	r3, #4
 8017a22:	e04f      	b.n	8017ac4 <HAL_I2C_Init+0x1dc>
 8017a24:	687b      	ldr	r3, [r7, #4]
 8017a26:	689b      	ldr	r3, [r3, #8]
 8017a28:	2b00      	cmp	r3, #0
 8017a2a:	d111      	bne.n	8017a50 <HAL_I2C_Init+0x168>
 8017a2c:	68fb      	ldr	r3, [r7, #12]
 8017a2e:	1e58      	subs	r0, r3, #1
 8017a30:	687b      	ldr	r3, [r7, #4]
 8017a32:	6859      	ldr	r1, [r3, #4]
 8017a34:	460b      	mov	r3, r1
 8017a36:	005b      	lsls	r3, r3, #1
 8017a38:	440b      	add	r3, r1
 8017a3a:	fbb0 f3f3 	udiv	r3, r0, r3
 8017a3e:	3301      	adds	r3, #1
 8017a40:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8017a44:	2b00      	cmp	r3, #0
 8017a46:	bf0c      	ite	eq
 8017a48:	2301      	moveq	r3, #1
 8017a4a:	2300      	movne	r3, #0
 8017a4c:	b2db      	uxtb	r3, r3
 8017a4e:	e012      	b.n	8017a76 <HAL_I2C_Init+0x18e>
 8017a50:	68fb      	ldr	r3, [r7, #12]
 8017a52:	1e58      	subs	r0, r3, #1
 8017a54:	687b      	ldr	r3, [r7, #4]
 8017a56:	6859      	ldr	r1, [r3, #4]
 8017a58:	460b      	mov	r3, r1
 8017a5a:	009b      	lsls	r3, r3, #2
 8017a5c:	440b      	add	r3, r1
 8017a5e:	0099      	lsls	r1, r3, #2
 8017a60:	440b      	add	r3, r1
 8017a62:	fbb0 f3f3 	udiv	r3, r0, r3
 8017a66:	3301      	adds	r3, #1
 8017a68:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8017a6c:	2b00      	cmp	r3, #0
 8017a6e:	bf0c      	ite	eq
 8017a70:	2301      	moveq	r3, #1
 8017a72:	2300      	movne	r3, #0
 8017a74:	b2db      	uxtb	r3, r3
 8017a76:	2b00      	cmp	r3, #0
 8017a78:	d001      	beq.n	8017a7e <HAL_I2C_Init+0x196>
 8017a7a:	2301      	movs	r3, #1
 8017a7c:	e022      	b.n	8017ac4 <HAL_I2C_Init+0x1dc>
 8017a7e:	687b      	ldr	r3, [r7, #4]
 8017a80:	689b      	ldr	r3, [r3, #8]
 8017a82:	2b00      	cmp	r3, #0
 8017a84:	d10e      	bne.n	8017aa4 <HAL_I2C_Init+0x1bc>
 8017a86:	68fb      	ldr	r3, [r7, #12]
 8017a88:	1e58      	subs	r0, r3, #1
 8017a8a:	687b      	ldr	r3, [r7, #4]
 8017a8c:	6859      	ldr	r1, [r3, #4]
 8017a8e:	460b      	mov	r3, r1
 8017a90:	005b      	lsls	r3, r3, #1
 8017a92:	440b      	add	r3, r1
 8017a94:	fbb0 f3f3 	udiv	r3, r0, r3
 8017a98:	3301      	adds	r3, #1
 8017a9a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8017a9e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8017aa2:	e00f      	b.n	8017ac4 <HAL_I2C_Init+0x1dc>
 8017aa4:	68fb      	ldr	r3, [r7, #12]
 8017aa6:	1e58      	subs	r0, r3, #1
 8017aa8:	687b      	ldr	r3, [r7, #4]
 8017aaa:	6859      	ldr	r1, [r3, #4]
 8017aac:	460b      	mov	r3, r1
 8017aae:	009b      	lsls	r3, r3, #2
 8017ab0:	440b      	add	r3, r1
 8017ab2:	0099      	lsls	r1, r3, #2
 8017ab4:	440b      	add	r3, r1
 8017ab6:	fbb0 f3f3 	udiv	r3, r0, r3
 8017aba:	3301      	adds	r3, #1
 8017abc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8017ac0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8017ac4:	6879      	ldr	r1, [r7, #4]
 8017ac6:	6809      	ldr	r1, [r1, #0]
 8017ac8:	4313      	orrs	r3, r2
 8017aca:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8017acc:	687b      	ldr	r3, [r7, #4]
 8017ace:	681b      	ldr	r3, [r3, #0]
 8017ad0:	681b      	ldr	r3, [r3, #0]
 8017ad2:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8017ad6:	687b      	ldr	r3, [r7, #4]
 8017ad8:	69da      	ldr	r2, [r3, #28]
 8017ada:	687b      	ldr	r3, [r7, #4]
 8017adc:	6a1b      	ldr	r3, [r3, #32]
 8017ade:	431a      	orrs	r2, r3
 8017ae0:	687b      	ldr	r3, [r7, #4]
 8017ae2:	681b      	ldr	r3, [r3, #0]
 8017ae4:	430a      	orrs	r2, r1
 8017ae6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8017ae8:	687b      	ldr	r3, [r7, #4]
 8017aea:	681b      	ldr	r3, [r3, #0]
 8017aec:	689b      	ldr	r3, [r3, #8]
 8017aee:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8017af2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8017af6:	687a      	ldr	r2, [r7, #4]
 8017af8:	6911      	ldr	r1, [r2, #16]
 8017afa:	687a      	ldr	r2, [r7, #4]
 8017afc:	68d2      	ldr	r2, [r2, #12]
 8017afe:	4311      	orrs	r1, r2
 8017b00:	687a      	ldr	r2, [r7, #4]
 8017b02:	6812      	ldr	r2, [r2, #0]
 8017b04:	430b      	orrs	r3, r1
 8017b06:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8017b08:	687b      	ldr	r3, [r7, #4]
 8017b0a:	681b      	ldr	r3, [r3, #0]
 8017b0c:	68db      	ldr	r3, [r3, #12]
 8017b0e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8017b12:	687b      	ldr	r3, [r7, #4]
 8017b14:	695a      	ldr	r2, [r3, #20]
 8017b16:	687b      	ldr	r3, [r7, #4]
 8017b18:	699b      	ldr	r3, [r3, #24]
 8017b1a:	431a      	orrs	r2, r3
 8017b1c:	687b      	ldr	r3, [r7, #4]
 8017b1e:	681b      	ldr	r3, [r3, #0]
 8017b20:	430a      	orrs	r2, r1
 8017b22:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8017b24:	687b      	ldr	r3, [r7, #4]
 8017b26:	681b      	ldr	r3, [r3, #0]
 8017b28:	681a      	ldr	r2, [r3, #0]
 8017b2a:	687b      	ldr	r3, [r7, #4]
 8017b2c:	681b      	ldr	r3, [r3, #0]
 8017b2e:	f042 0201 	orr.w	r2, r2, #1
 8017b32:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8017b34:	687b      	ldr	r3, [r7, #4]
 8017b36:	2200      	movs	r2, #0
 8017b38:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8017b3a:	687b      	ldr	r3, [r7, #4]
 8017b3c:	2220      	movs	r2, #32
 8017b3e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8017b42:	687b      	ldr	r3, [r7, #4]
 8017b44:	2200      	movs	r2, #0
 8017b46:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8017b48:	687b      	ldr	r3, [r7, #4]
 8017b4a:	2200      	movs	r2, #0
 8017b4c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8017b50:	2300      	movs	r3, #0
}
 8017b52:	4618      	mov	r0, r3
 8017b54:	3710      	adds	r7, #16
 8017b56:	46bd      	mov	sp, r7
 8017b58:	bd80      	pop	{r7, pc}
 8017b5a:	bf00      	nop
 8017b5c:	000186a0 	.word	0x000186a0
 8017b60:	001e847f 	.word	0x001e847f
 8017b64:	003d08ff 	.word	0x003d08ff
 8017b68:	431bde83 	.word	0x431bde83
 8017b6c:	10624dd3 	.word	0x10624dd3

08017b70 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8017b70:	b580      	push	{r7, lr}
 8017b72:	b082      	sub	sp, #8
 8017b74:	af00      	add	r7, sp, #0
 8017b76:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8017b78:	687b      	ldr	r3, [r7, #4]
 8017b7a:	2b00      	cmp	r3, #0
 8017b7c:	d101      	bne.n	8017b82 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8017b7e:	2301      	movs	r3, #1
 8017b80:	e021      	b.n	8017bc6 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8017b82:	687b      	ldr	r3, [r7, #4]
 8017b84:	2224      	movs	r2, #36	@ 0x24
 8017b86:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8017b8a:	687b      	ldr	r3, [r7, #4]
 8017b8c:	681b      	ldr	r3, [r3, #0]
 8017b8e:	681a      	ldr	r2, [r3, #0]
 8017b90:	687b      	ldr	r3, [r7, #4]
 8017b92:	681b      	ldr	r3, [r3, #0]
 8017b94:	f022 0201 	bic.w	r2, r2, #1
 8017b98:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8017b9a:	6878      	ldr	r0, [r7, #4]
 8017b9c:	f7fa f8c2 	bl	8011d24 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8017ba0:	687b      	ldr	r3, [r7, #4]
 8017ba2:	2200      	movs	r2, #0
 8017ba4:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 8017ba6:	687b      	ldr	r3, [r7, #4]
 8017ba8:	2200      	movs	r2, #0
 8017baa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8017bae:	687b      	ldr	r3, [r7, #4]
 8017bb0:	2200      	movs	r2, #0
 8017bb2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8017bb4:	687b      	ldr	r3, [r7, #4]
 8017bb6:	2200      	movs	r2, #0
 8017bb8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8017bbc:	687b      	ldr	r3, [r7, #4]
 8017bbe:	2200      	movs	r2, #0
 8017bc0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8017bc4:	2300      	movs	r3, #0
}
 8017bc6:	4618      	mov	r0, r3
 8017bc8:	3708      	adds	r7, #8
 8017bca:	46bd      	mov	sp, r7
 8017bcc:	bd80      	pop	{r7, pc}
	...

08017bd0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8017bd0:	b580      	push	{r7, lr}
 8017bd2:	b088      	sub	sp, #32
 8017bd4:	af02      	add	r7, sp, #8
 8017bd6:	60f8      	str	r0, [r7, #12]
 8017bd8:	4608      	mov	r0, r1
 8017bda:	4611      	mov	r1, r2
 8017bdc:	461a      	mov	r2, r3
 8017bde:	4603      	mov	r3, r0
 8017be0:	817b      	strh	r3, [r7, #10]
 8017be2:	460b      	mov	r3, r1
 8017be4:	813b      	strh	r3, [r7, #8]
 8017be6:	4613      	mov	r3, r2
 8017be8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8017bea:	f7fc fef3 	bl	80149d4 <HAL_GetTick>
 8017bee:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8017bf0:	68fb      	ldr	r3, [r7, #12]
 8017bf2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8017bf6:	b2db      	uxtb	r3, r3
 8017bf8:	2b20      	cmp	r3, #32
 8017bfa:	f040 80d9 	bne.w	8017db0 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8017bfe:	697b      	ldr	r3, [r7, #20]
 8017c00:	9300      	str	r3, [sp, #0]
 8017c02:	2319      	movs	r3, #25
 8017c04:	2201      	movs	r2, #1
 8017c06:	496d      	ldr	r1, [pc, #436]	@ (8017dbc <HAL_I2C_Mem_Write+0x1ec>)
 8017c08:	68f8      	ldr	r0, [r7, #12]
 8017c0a:	f000 fc99 	bl	8018540 <I2C_WaitOnFlagUntilTimeout>
 8017c0e:	4603      	mov	r3, r0
 8017c10:	2b00      	cmp	r3, #0
 8017c12:	d001      	beq.n	8017c18 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8017c14:	2302      	movs	r3, #2
 8017c16:	e0cc      	b.n	8017db2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8017c18:	68fb      	ldr	r3, [r7, #12]
 8017c1a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8017c1e:	2b01      	cmp	r3, #1
 8017c20:	d101      	bne.n	8017c26 <HAL_I2C_Mem_Write+0x56>
 8017c22:	2302      	movs	r3, #2
 8017c24:	e0c5      	b.n	8017db2 <HAL_I2C_Mem_Write+0x1e2>
 8017c26:	68fb      	ldr	r3, [r7, #12]
 8017c28:	2201      	movs	r2, #1
 8017c2a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8017c2e:	68fb      	ldr	r3, [r7, #12]
 8017c30:	681b      	ldr	r3, [r3, #0]
 8017c32:	681b      	ldr	r3, [r3, #0]
 8017c34:	f003 0301 	and.w	r3, r3, #1
 8017c38:	2b01      	cmp	r3, #1
 8017c3a:	d007      	beq.n	8017c4c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8017c3c:	68fb      	ldr	r3, [r7, #12]
 8017c3e:	681b      	ldr	r3, [r3, #0]
 8017c40:	681a      	ldr	r2, [r3, #0]
 8017c42:	68fb      	ldr	r3, [r7, #12]
 8017c44:	681b      	ldr	r3, [r3, #0]
 8017c46:	f042 0201 	orr.w	r2, r2, #1
 8017c4a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8017c4c:	68fb      	ldr	r3, [r7, #12]
 8017c4e:	681b      	ldr	r3, [r3, #0]
 8017c50:	681a      	ldr	r2, [r3, #0]
 8017c52:	68fb      	ldr	r3, [r7, #12]
 8017c54:	681b      	ldr	r3, [r3, #0]
 8017c56:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8017c5a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8017c5c:	68fb      	ldr	r3, [r7, #12]
 8017c5e:	2221      	movs	r2, #33	@ 0x21
 8017c60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8017c64:	68fb      	ldr	r3, [r7, #12]
 8017c66:	2240      	movs	r2, #64	@ 0x40
 8017c68:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8017c6c:	68fb      	ldr	r3, [r7, #12]
 8017c6e:	2200      	movs	r2, #0
 8017c70:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8017c72:	68fb      	ldr	r3, [r7, #12]
 8017c74:	6a3a      	ldr	r2, [r7, #32]
 8017c76:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8017c78:	68fb      	ldr	r3, [r7, #12]
 8017c7a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8017c7c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8017c7e:	68fb      	ldr	r3, [r7, #12]
 8017c80:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8017c82:	b29a      	uxth	r2, r3
 8017c84:	68fb      	ldr	r3, [r7, #12]
 8017c86:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8017c88:	68fb      	ldr	r3, [r7, #12]
 8017c8a:	4a4d      	ldr	r2, [pc, #308]	@ (8017dc0 <HAL_I2C_Mem_Write+0x1f0>)
 8017c8c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8017c8e:	88f8      	ldrh	r0, [r7, #6]
 8017c90:	893a      	ldrh	r2, [r7, #8]
 8017c92:	8979      	ldrh	r1, [r7, #10]
 8017c94:	697b      	ldr	r3, [r7, #20]
 8017c96:	9301      	str	r3, [sp, #4]
 8017c98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017c9a:	9300      	str	r3, [sp, #0]
 8017c9c:	4603      	mov	r3, r0
 8017c9e:	68f8      	ldr	r0, [r7, #12]
 8017ca0:	f000 fad0 	bl	8018244 <I2C_RequestMemoryWrite>
 8017ca4:	4603      	mov	r3, r0
 8017ca6:	2b00      	cmp	r3, #0
 8017ca8:	d052      	beq.n	8017d50 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8017caa:	2301      	movs	r3, #1
 8017cac:	e081      	b.n	8017db2 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8017cae:	697a      	ldr	r2, [r7, #20]
 8017cb0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8017cb2:	68f8      	ldr	r0, [r7, #12]
 8017cb4:	f000 fd5e 	bl	8018774 <I2C_WaitOnTXEFlagUntilTimeout>
 8017cb8:	4603      	mov	r3, r0
 8017cba:	2b00      	cmp	r3, #0
 8017cbc:	d00d      	beq.n	8017cda <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8017cbe:	68fb      	ldr	r3, [r7, #12]
 8017cc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8017cc2:	2b04      	cmp	r3, #4
 8017cc4:	d107      	bne.n	8017cd6 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8017cc6:	68fb      	ldr	r3, [r7, #12]
 8017cc8:	681b      	ldr	r3, [r3, #0]
 8017cca:	681a      	ldr	r2, [r3, #0]
 8017ccc:	68fb      	ldr	r3, [r7, #12]
 8017cce:	681b      	ldr	r3, [r3, #0]
 8017cd0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8017cd4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8017cd6:	2301      	movs	r3, #1
 8017cd8:	e06b      	b.n	8017db2 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8017cda:	68fb      	ldr	r3, [r7, #12]
 8017cdc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017cde:	781a      	ldrb	r2, [r3, #0]
 8017ce0:	68fb      	ldr	r3, [r7, #12]
 8017ce2:	681b      	ldr	r3, [r3, #0]
 8017ce4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8017ce6:	68fb      	ldr	r3, [r7, #12]
 8017ce8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017cea:	1c5a      	adds	r2, r3, #1
 8017cec:	68fb      	ldr	r3, [r7, #12]
 8017cee:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8017cf0:	68fb      	ldr	r3, [r7, #12]
 8017cf2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8017cf4:	3b01      	subs	r3, #1
 8017cf6:	b29a      	uxth	r2, r3
 8017cf8:	68fb      	ldr	r3, [r7, #12]
 8017cfa:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8017cfc:	68fb      	ldr	r3, [r7, #12]
 8017cfe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8017d00:	b29b      	uxth	r3, r3
 8017d02:	3b01      	subs	r3, #1
 8017d04:	b29a      	uxth	r2, r3
 8017d06:	68fb      	ldr	r3, [r7, #12]
 8017d08:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8017d0a:	68fb      	ldr	r3, [r7, #12]
 8017d0c:	681b      	ldr	r3, [r3, #0]
 8017d0e:	695b      	ldr	r3, [r3, #20]
 8017d10:	f003 0304 	and.w	r3, r3, #4
 8017d14:	2b04      	cmp	r3, #4
 8017d16:	d11b      	bne.n	8017d50 <HAL_I2C_Mem_Write+0x180>
 8017d18:	68fb      	ldr	r3, [r7, #12]
 8017d1a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8017d1c:	2b00      	cmp	r3, #0
 8017d1e:	d017      	beq.n	8017d50 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8017d20:	68fb      	ldr	r3, [r7, #12]
 8017d22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017d24:	781a      	ldrb	r2, [r3, #0]
 8017d26:	68fb      	ldr	r3, [r7, #12]
 8017d28:	681b      	ldr	r3, [r3, #0]
 8017d2a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8017d2c:	68fb      	ldr	r3, [r7, #12]
 8017d2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017d30:	1c5a      	adds	r2, r3, #1
 8017d32:	68fb      	ldr	r3, [r7, #12]
 8017d34:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8017d36:	68fb      	ldr	r3, [r7, #12]
 8017d38:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8017d3a:	3b01      	subs	r3, #1
 8017d3c:	b29a      	uxth	r2, r3
 8017d3e:	68fb      	ldr	r3, [r7, #12]
 8017d40:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8017d42:	68fb      	ldr	r3, [r7, #12]
 8017d44:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8017d46:	b29b      	uxth	r3, r3
 8017d48:	3b01      	subs	r3, #1
 8017d4a:	b29a      	uxth	r2, r3
 8017d4c:	68fb      	ldr	r3, [r7, #12]
 8017d4e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8017d50:	68fb      	ldr	r3, [r7, #12]
 8017d52:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8017d54:	2b00      	cmp	r3, #0
 8017d56:	d1aa      	bne.n	8017cae <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8017d58:	697a      	ldr	r2, [r7, #20]
 8017d5a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8017d5c:	68f8      	ldr	r0, [r7, #12]
 8017d5e:	f000 fd51 	bl	8018804 <I2C_WaitOnBTFFlagUntilTimeout>
 8017d62:	4603      	mov	r3, r0
 8017d64:	2b00      	cmp	r3, #0
 8017d66:	d00d      	beq.n	8017d84 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8017d68:	68fb      	ldr	r3, [r7, #12]
 8017d6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8017d6c:	2b04      	cmp	r3, #4
 8017d6e:	d107      	bne.n	8017d80 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8017d70:	68fb      	ldr	r3, [r7, #12]
 8017d72:	681b      	ldr	r3, [r3, #0]
 8017d74:	681a      	ldr	r2, [r3, #0]
 8017d76:	68fb      	ldr	r3, [r7, #12]
 8017d78:	681b      	ldr	r3, [r3, #0]
 8017d7a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8017d7e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8017d80:	2301      	movs	r3, #1
 8017d82:	e016      	b.n	8017db2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8017d84:	68fb      	ldr	r3, [r7, #12]
 8017d86:	681b      	ldr	r3, [r3, #0]
 8017d88:	681a      	ldr	r2, [r3, #0]
 8017d8a:	68fb      	ldr	r3, [r7, #12]
 8017d8c:	681b      	ldr	r3, [r3, #0]
 8017d8e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8017d92:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8017d94:	68fb      	ldr	r3, [r7, #12]
 8017d96:	2220      	movs	r2, #32
 8017d98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8017d9c:	68fb      	ldr	r3, [r7, #12]
 8017d9e:	2200      	movs	r2, #0
 8017da0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8017da4:	68fb      	ldr	r3, [r7, #12]
 8017da6:	2200      	movs	r2, #0
 8017da8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8017dac:	2300      	movs	r3, #0
 8017dae:	e000      	b.n	8017db2 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8017db0:	2302      	movs	r3, #2
  }
}
 8017db2:	4618      	mov	r0, r3
 8017db4:	3718      	adds	r7, #24
 8017db6:	46bd      	mov	sp, r7
 8017db8:	bd80      	pop	{r7, pc}
 8017dba:	bf00      	nop
 8017dbc:	00100002 	.word	0x00100002
 8017dc0:	ffff0000 	.word	0xffff0000

08017dc4 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8017dc4:	b580      	push	{r7, lr}
 8017dc6:	b08c      	sub	sp, #48	@ 0x30
 8017dc8:	af02      	add	r7, sp, #8
 8017dca:	60f8      	str	r0, [r7, #12]
 8017dcc:	4608      	mov	r0, r1
 8017dce:	4611      	mov	r1, r2
 8017dd0:	461a      	mov	r2, r3
 8017dd2:	4603      	mov	r3, r0
 8017dd4:	817b      	strh	r3, [r7, #10]
 8017dd6:	460b      	mov	r3, r1
 8017dd8:	813b      	strh	r3, [r7, #8]
 8017dda:	4613      	mov	r3, r2
 8017ddc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8017dde:	f7fc fdf9 	bl	80149d4 <HAL_GetTick>
 8017de2:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8017de4:	68fb      	ldr	r3, [r7, #12]
 8017de6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8017dea:	b2db      	uxtb	r3, r3
 8017dec:	2b20      	cmp	r3, #32
 8017dee:	f040 8214 	bne.w	801821a <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8017df2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017df4:	9300      	str	r3, [sp, #0]
 8017df6:	2319      	movs	r3, #25
 8017df8:	2201      	movs	r2, #1
 8017dfa:	497b      	ldr	r1, [pc, #492]	@ (8017fe8 <HAL_I2C_Mem_Read+0x224>)
 8017dfc:	68f8      	ldr	r0, [r7, #12]
 8017dfe:	f000 fb9f 	bl	8018540 <I2C_WaitOnFlagUntilTimeout>
 8017e02:	4603      	mov	r3, r0
 8017e04:	2b00      	cmp	r3, #0
 8017e06:	d001      	beq.n	8017e0c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8017e08:	2302      	movs	r3, #2
 8017e0a:	e207      	b.n	801821c <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8017e0c:	68fb      	ldr	r3, [r7, #12]
 8017e0e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8017e12:	2b01      	cmp	r3, #1
 8017e14:	d101      	bne.n	8017e1a <HAL_I2C_Mem_Read+0x56>
 8017e16:	2302      	movs	r3, #2
 8017e18:	e200      	b.n	801821c <HAL_I2C_Mem_Read+0x458>
 8017e1a:	68fb      	ldr	r3, [r7, #12]
 8017e1c:	2201      	movs	r2, #1
 8017e1e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8017e22:	68fb      	ldr	r3, [r7, #12]
 8017e24:	681b      	ldr	r3, [r3, #0]
 8017e26:	681b      	ldr	r3, [r3, #0]
 8017e28:	f003 0301 	and.w	r3, r3, #1
 8017e2c:	2b01      	cmp	r3, #1
 8017e2e:	d007      	beq.n	8017e40 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8017e30:	68fb      	ldr	r3, [r7, #12]
 8017e32:	681b      	ldr	r3, [r3, #0]
 8017e34:	681a      	ldr	r2, [r3, #0]
 8017e36:	68fb      	ldr	r3, [r7, #12]
 8017e38:	681b      	ldr	r3, [r3, #0]
 8017e3a:	f042 0201 	orr.w	r2, r2, #1
 8017e3e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8017e40:	68fb      	ldr	r3, [r7, #12]
 8017e42:	681b      	ldr	r3, [r3, #0]
 8017e44:	681a      	ldr	r2, [r3, #0]
 8017e46:	68fb      	ldr	r3, [r7, #12]
 8017e48:	681b      	ldr	r3, [r3, #0]
 8017e4a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8017e4e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8017e50:	68fb      	ldr	r3, [r7, #12]
 8017e52:	2222      	movs	r2, #34	@ 0x22
 8017e54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8017e58:	68fb      	ldr	r3, [r7, #12]
 8017e5a:	2240      	movs	r2, #64	@ 0x40
 8017e5c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8017e60:	68fb      	ldr	r3, [r7, #12]
 8017e62:	2200      	movs	r2, #0
 8017e64:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8017e66:	68fb      	ldr	r3, [r7, #12]
 8017e68:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8017e6a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8017e6c:	68fb      	ldr	r3, [r7, #12]
 8017e6e:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8017e70:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8017e72:	68fb      	ldr	r3, [r7, #12]
 8017e74:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8017e76:	b29a      	uxth	r2, r3
 8017e78:	68fb      	ldr	r3, [r7, #12]
 8017e7a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8017e7c:	68fb      	ldr	r3, [r7, #12]
 8017e7e:	4a5b      	ldr	r2, [pc, #364]	@ (8017fec <HAL_I2C_Mem_Read+0x228>)
 8017e80:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8017e82:	88f8      	ldrh	r0, [r7, #6]
 8017e84:	893a      	ldrh	r2, [r7, #8]
 8017e86:	8979      	ldrh	r1, [r7, #10]
 8017e88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017e8a:	9301      	str	r3, [sp, #4]
 8017e8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017e8e:	9300      	str	r3, [sp, #0]
 8017e90:	4603      	mov	r3, r0
 8017e92:	68f8      	ldr	r0, [r7, #12]
 8017e94:	f000 fa6c 	bl	8018370 <I2C_RequestMemoryRead>
 8017e98:	4603      	mov	r3, r0
 8017e9a:	2b00      	cmp	r3, #0
 8017e9c:	d001      	beq.n	8017ea2 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8017e9e:	2301      	movs	r3, #1
 8017ea0:	e1bc      	b.n	801821c <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8017ea2:	68fb      	ldr	r3, [r7, #12]
 8017ea4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8017ea6:	2b00      	cmp	r3, #0
 8017ea8:	d113      	bne.n	8017ed2 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8017eaa:	2300      	movs	r3, #0
 8017eac:	623b      	str	r3, [r7, #32]
 8017eae:	68fb      	ldr	r3, [r7, #12]
 8017eb0:	681b      	ldr	r3, [r3, #0]
 8017eb2:	695b      	ldr	r3, [r3, #20]
 8017eb4:	623b      	str	r3, [r7, #32]
 8017eb6:	68fb      	ldr	r3, [r7, #12]
 8017eb8:	681b      	ldr	r3, [r3, #0]
 8017eba:	699b      	ldr	r3, [r3, #24]
 8017ebc:	623b      	str	r3, [r7, #32]
 8017ebe:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8017ec0:	68fb      	ldr	r3, [r7, #12]
 8017ec2:	681b      	ldr	r3, [r3, #0]
 8017ec4:	681a      	ldr	r2, [r3, #0]
 8017ec6:	68fb      	ldr	r3, [r7, #12]
 8017ec8:	681b      	ldr	r3, [r3, #0]
 8017eca:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8017ece:	601a      	str	r2, [r3, #0]
 8017ed0:	e190      	b.n	80181f4 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8017ed2:	68fb      	ldr	r3, [r7, #12]
 8017ed4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8017ed6:	2b01      	cmp	r3, #1
 8017ed8:	d11b      	bne.n	8017f12 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8017eda:	68fb      	ldr	r3, [r7, #12]
 8017edc:	681b      	ldr	r3, [r3, #0]
 8017ede:	681a      	ldr	r2, [r3, #0]
 8017ee0:	68fb      	ldr	r3, [r7, #12]
 8017ee2:	681b      	ldr	r3, [r3, #0]
 8017ee4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8017ee8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8017eea:	2300      	movs	r3, #0
 8017eec:	61fb      	str	r3, [r7, #28]
 8017eee:	68fb      	ldr	r3, [r7, #12]
 8017ef0:	681b      	ldr	r3, [r3, #0]
 8017ef2:	695b      	ldr	r3, [r3, #20]
 8017ef4:	61fb      	str	r3, [r7, #28]
 8017ef6:	68fb      	ldr	r3, [r7, #12]
 8017ef8:	681b      	ldr	r3, [r3, #0]
 8017efa:	699b      	ldr	r3, [r3, #24]
 8017efc:	61fb      	str	r3, [r7, #28]
 8017efe:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8017f00:	68fb      	ldr	r3, [r7, #12]
 8017f02:	681b      	ldr	r3, [r3, #0]
 8017f04:	681a      	ldr	r2, [r3, #0]
 8017f06:	68fb      	ldr	r3, [r7, #12]
 8017f08:	681b      	ldr	r3, [r3, #0]
 8017f0a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8017f0e:	601a      	str	r2, [r3, #0]
 8017f10:	e170      	b.n	80181f4 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8017f12:	68fb      	ldr	r3, [r7, #12]
 8017f14:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8017f16:	2b02      	cmp	r3, #2
 8017f18:	d11b      	bne.n	8017f52 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8017f1a:	68fb      	ldr	r3, [r7, #12]
 8017f1c:	681b      	ldr	r3, [r3, #0]
 8017f1e:	681a      	ldr	r2, [r3, #0]
 8017f20:	68fb      	ldr	r3, [r7, #12]
 8017f22:	681b      	ldr	r3, [r3, #0]
 8017f24:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8017f28:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8017f2a:	68fb      	ldr	r3, [r7, #12]
 8017f2c:	681b      	ldr	r3, [r3, #0]
 8017f2e:	681a      	ldr	r2, [r3, #0]
 8017f30:	68fb      	ldr	r3, [r7, #12]
 8017f32:	681b      	ldr	r3, [r3, #0]
 8017f34:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8017f38:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8017f3a:	2300      	movs	r3, #0
 8017f3c:	61bb      	str	r3, [r7, #24]
 8017f3e:	68fb      	ldr	r3, [r7, #12]
 8017f40:	681b      	ldr	r3, [r3, #0]
 8017f42:	695b      	ldr	r3, [r3, #20]
 8017f44:	61bb      	str	r3, [r7, #24]
 8017f46:	68fb      	ldr	r3, [r7, #12]
 8017f48:	681b      	ldr	r3, [r3, #0]
 8017f4a:	699b      	ldr	r3, [r3, #24]
 8017f4c:	61bb      	str	r3, [r7, #24]
 8017f4e:	69bb      	ldr	r3, [r7, #24]
 8017f50:	e150      	b.n	80181f4 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8017f52:	2300      	movs	r3, #0
 8017f54:	617b      	str	r3, [r7, #20]
 8017f56:	68fb      	ldr	r3, [r7, #12]
 8017f58:	681b      	ldr	r3, [r3, #0]
 8017f5a:	695b      	ldr	r3, [r3, #20]
 8017f5c:	617b      	str	r3, [r7, #20]
 8017f5e:	68fb      	ldr	r3, [r7, #12]
 8017f60:	681b      	ldr	r3, [r3, #0]
 8017f62:	699b      	ldr	r3, [r3, #24]
 8017f64:	617b      	str	r3, [r7, #20]
 8017f66:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8017f68:	e144      	b.n	80181f4 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8017f6a:	68fb      	ldr	r3, [r7, #12]
 8017f6c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8017f6e:	2b03      	cmp	r3, #3
 8017f70:	f200 80f1 	bhi.w	8018156 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8017f74:	68fb      	ldr	r3, [r7, #12]
 8017f76:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8017f78:	2b01      	cmp	r3, #1
 8017f7a:	d123      	bne.n	8017fc4 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8017f7c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8017f7e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8017f80:	68f8      	ldr	r0, [r7, #12]
 8017f82:	f000 fc87 	bl	8018894 <I2C_WaitOnRXNEFlagUntilTimeout>
 8017f86:	4603      	mov	r3, r0
 8017f88:	2b00      	cmp	r3, #0
 8017f8a:	d001      	beq.n	8017f90 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8017f8c:	2301      	movs	r3, #1
 8017f8e:	e145      	b.n	801821c <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8017f90:	68fb      	ldr	r3, [r7, #12]
 8017f92:	681b      	ldr	r3, [r3, #0]
 8017f94:	691a      	ldr	r2, [r3, #16]
 8017f96:	68fb      	ldr	r3, [r7, #12]
 8017f98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017f9a:	b2d2      	uxtb	r2, r2
 8017f9c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8017f9e:	68fb      	ldr	r3, [r7, #12]
 8017fa0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017fa2:	1c5a      	adds	r2, r3, #1
 8017fa4:	68fb      	ldr	r3, [r7, #12]
 8017fa6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8017fa8:	68fb      	ldr	r3, [r7, #12]
 8017faa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8017fac:	3b01      	subs	r3, #1
 8017fae:	b29a      	uxth	r2, r3
 8017fb0:	68fb      	ldr	r3, [r7, #12]
 8017fb2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8017fb4:	68fb      	ldr	r3, [r7, #12]
 8017fb6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8017fb8:	b29b      	uxth	r3, r3
 8017fba:	3b01      	subs	r3, #1
 8017fbc:	b29a      	uxth	r2, r3
 8017fbe:	68fb      	ldr	r3, [r7, #12]
 8017fc0:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8017fc2:	e117      	b.n	80181f4 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8017fc4:	68fb      	ldr	r3, [r7, #12]
 8017fc6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8017fc8:	2b02      	cmp	r3, #2
 8017fca:	d14e      	bne.n	801806a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8017fcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017fce:	9300      	str	r3, [sp, #0]
 8017fd0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017fd2:	2200      	movs	r2, #0
 8017fd4:	4906      	ldr	r1, [pc, #24]	@ (8017ff0 <HAL_I2C_Mem_Read+0x22c>)
 8017fd6:	68f8      	ldr	r0, [r7, #12]
 8017fd8:	f000 fab2 	bl	8018540 <I2C_WaitOnFlagUntilTimeout>
 8017fdc:	4603      	mov	r3, r0
 8017fde:	2b00      	cmp	r3, #0
 8017fe0:	d008      	beq.n	8017ff4 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8017fe2:	2301      	movs	r3, #1
 8017fe4:	e11a      	b.n	801821c <HAL_I2C_Mem_Read+0x458>
 8017fe6:	bf00      	nop
 8017fe8:	00100002 	.word	0x00100002
 8017fec:	ffff0000 	.word	0xffff0000
 8017ff0:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8017ff4:	68fb      	ldr	r3, [r7, #12]
 8017ff6:	681b      	ldr	r3, [r3, #0]
 8017ff8:	681a      	ldr	r2, [r3, #0]
 8017ffa:	68fb      	ldr	r3, [r7, #12]
 8017ffc:	681b      	ldr	r3, [r3, #0]
 8017ffe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8018002:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8018004:	68fb      	ldr	r3, [r7, #12]
 8018006:	681b      	ldr	r3, [r3, #0]
 8018008:	691a      	ldr	r2, [r3, #16]
 801800a:	68fb      	ldr	r3, [r7, #12]
 801800c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801800e:	b2d2      	uxtb	r2, r2
 8018010:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8018012:	68fb      	ldr	r3, [r7, #12]
 8018014:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018016:	1c5a      	adds	r2, r3, #1
 8018018:	68fb      	ldr	r3, [r7, #12]
 801801a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 801801c:	68fb      	ldr	r3, [r7, #12]
 801801e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8018020:	3b01      	subs	r3, #1
 8018022:	b29a      	uxth	r2, r3
 8018024:	68fb      	ldr	r3, [r7, #12]
 8018026:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8018028:	68fb      	ldr	r3, [r7, #12]
 801802a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801802c:	b29b      	uxth	r3, r3
 801802e:	3b01      	subs	r3, #1
 8018030:	b29a      	uxth	r2, r3
 8018032:	68fb      	ldr	r3, [r7, #12]
 8018034:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8018036:	68fb      	ldr	r3, [r7, #12]
 8018038:	681b      	ldr	r3, [r3, #0]
 801803a:	691a      	ldr	r2, [r3, #16]
 801803c:	68fb      	ldr	r3, [r7, #12]
 801803e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018040:	b2d2      	uxtb	r2, r2
 8018042:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8018044:	68fb      	ldr	r3, [r7, #12]
 8018046:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018048:	1c5a      	adds	r2, r3, #1
 801804a:	68fb      	ldr	r3, [r7, #12]
 801804c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 801804e:	68fb      	ldr	r3, [r7, #12]
 8018050:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8018052:	3b01      	subs	r3, #1
 8018054:	b29a      	uxth	r2, r3
 8018056:	68fb      	ldr	r3, [r7, #12]
 8018058:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 801805a:	68fb      	ldr	r3, [r7, #12]
 801805c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801805e:	b29b      	uxth	r3, r3
 8018060:	3b01      	subs	r3, #1
 8018062:	b29a      	uxth	r2, r3
 8018064:	68fb      	ldr	r3, [r7, #12]
 8018066:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8018068:	e0c4      	b.n	80181f4 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 801806a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801806c:	9300      	str	r3, [sp, #0]
 801806e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018070:	2200      	movs	r2, #0
 8018072:	496c      	ldr	r1, [pc, #432]	@ (8018224 <HAL_I2C_Mem_Read+0x460>)
 8018074:	68f8      	ldr	r0, [r7, #12]
 8018076:	f000 fa63 	bl	8018540 <I2C_WaitOnFlagUntilTimeout>
 801807a:	4603      	mov	r3, r0
 801807c:	2b00      	cmp	r3, #0
 801807e:	d001      	beq.n	8018084 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8018080:	2301      	movs	r3, #1
 8018082:	e0cb      	b.n	801821c <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8018084:	68fb      	ldr	r3, [r7, #12]
 8018086:	681b      	ldr	r3, [r3, #0]
 8018088:	681a      	ldr	r2, [r3, #0]
 801808a:	68fb      	ldr	r3, [r7, #12]
 801808c:	681b      	ldr	r3, [r3, #0]
 801808e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8018092:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8018094:	68fb      	ldr	r3, [r7, #12]
 8018096:	681b      	ldr	r3, [r3, #0]
 8018098:	691a      	ldr	r2, [r3, #16]
 801809a:	68fb      	ldr	r3, [r7, #12]
 801809c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801809e:	b2d2      	uxtb	r2, r2
 80180a0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80180a2:	68fb      	ldr	r3, [r7, #12]
 80180a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80180a6:	1c5a      	adds	r2, r3, #1
 80180a8:	68fb      	ldr	r3, [r7, #12]
 80180aa:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80180ac:	68fb      	ldr	r3, [r7, #12]
 80180ae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80180b0:	3b01      	subs	r3, #1
 80180b2:	b29a      	uxth	r2, r3
 80180b4:	68fb      	ldr	r3, [r7, #12]
 80180b6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80180b8:	68fb      	ldr	r3, [r7, #12]
 80180ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80180bc:	b29b      	uxth	r3, r3
 80180be:	3b01      	subs	r3, #1
 80180c0:	b29a      	uxth	r2, r3
 80180c2:	68fb      	ldr	r3, [r7, #12]
 80180c4:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80180c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80180c8:	9300      	str	r3, [sp, #0]
 80180ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80180cc:	2200      	movs	r2, #0
 80180ce:	4955      	ldr	r1, [pc, #340]	@ (8018224 <HAL_I2C_Mem_Read+0x460>)
 80180d0:	68f8      	ldr	r0, [r7, #12]
 80180d2:	f000 fa35 	bl	8018540 <I2C_WaitOnFlagUntilTimeout>
 80180d6:	4603      	mov	r3, r0
 80180d8:	2b00      	cmp	r3, #0
 80180da:	d001      	beq.n	80180e0 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80180dc:	2301      	movs	r3, #1
 80180de:	e09d      	b.n	801821c <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80180e0:	68fb      	ldr	r3, [r7, #12]
 80180e2:	681b      	ldr	r3, [r3, #0]
 80180e4:	681a      	ldr	r2, [r3, #0]
 80180e6:	68fb      	ldr	r3, [r7, #12]
 80180e8:	681b      	ldr	r3, [r3, #0]
 80180ea:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80180ee:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80180f0:	68fb      	ldr	r3, [r7, #12]
 80180f2:	681b      	ldr	r3, [r3, #0]
 80180f4:	691a      	ldr	r2, [r3, #16]
 80180f6:	68fb      	ldr	r3, [r7, #12]
 80180f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80180fa:	b2d2      	uxtb	r2, r2
 80180fc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80180fe:	68fb      	ldr	r3, [r7, #12]
 8018100:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018102:	1c5a      	adds	r2, r3, #1
 8018104:	68fb      	ldr	r3, [r7, #12]
 8018106:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8018108:	68fb      	ldr	r3, [r7, #12]
 801810a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801810c:	3b01      	subs	r3, #1
 801810e:	b29a      	uxth	r2, r3
 8018110:	68fb      	ldr	r3, [r7, #12]
 8018112:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8018114:	68fb      	ldr	r3, [r7, #12]
 8018116:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8018118:	b29b      	uxth	r3, r3
 801811a:	3b01      	subs	r3, #1
 801811c:	b29a      	uxth	r2, r3
 801811e:	68fb      	ldr	r3, [r7, #12]
 8018120:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8018122:	68fb      	ldr	r3, [r7, #12]
 8018124:	681b      	ldr	r3, [r3, #0]
 8018126:	691a      	ldr	r2, [r3, #16]
 8018128:	68fb      	ldr	r3, [r7, #12]
 801812a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801812c:	b2d2      	uxtb	r2, r2
 801812e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8018130:	68fb      	ldr	r3, [r7, #12]
 8018132:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018134:	1c5a      	adds	r2, r3, #1
 8018136:	68fb      	ldr	r3, [r7, #12]
 8018138:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 801813a:	68fb      	ldr	r3, [r7, #12]
 801813c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801813e:	3b01      	subs	r3, #1
 8018140:	b29a      	uxth	r2, r3
 8018142:	68fb      	ldr	r3, [r7, #12]
 8018144:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8018146:	68fb      	ldr	r3, [r7, #12]
 8018148:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801814a:	b29b      	uxth	r3, r3
 801814c:	3b01      	subs	r3, #1
 801814e:	b29a      	uxth	r2, r3
 8018150:	68fb      	ldr	r3, [r7, #12]
 8018152:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8018154:	e04e      	b.n	80181f4 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8018156:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8018158:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 801815a:	68f8      	ldr	r0, [r7, #12]
 801815c:	f000 fb9a 	bl	8018894 <I2C_WaitOnRXNEFlagUntilTimeout>
 8018160:	4603      	mov	r3, r0
 8018162:	2b00      	cmp	r3, #0
 8018164:	d001      	beq.n	801816a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8018166:	2301      	movs	r3, #1
 8018168:	e058      	b.n	801821c <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 801816a:	68fb      	ldr	r3, [r7, #12]
 801816c:	681b      	ldr	r3, [r3, #0]
 801816e:	691a      	ldr	r2, [r3, #16]
 8018170:	68fb      	ldr	r3, [r7, #12]
 8018172:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018174:	b2d2      	uxtb	r2, r2
 8018176:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8018178:	68fb      	ldr	r3, [r7, #12]
 801817a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801817c:	1c5a      	adds	r2, r3, #1
 801817e:	68fb      	ldr	r3, [r7, #12]
 8018180:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8018182:	68fb      	ldr	r3, [r7, #12]
 8018184:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8018186:	3b01      	subs	r3, #1
 8018188:	b29a      	uxth	r2, r3
 801818a:	68fb      	ldr	r3, [r7, #12]
 801818c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 801818e:	68fb      	ldr	r3, [r7, #12]
 8018190:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8018192:	b29b      	uxth	r3, r3
 8018194:	3b01      	subs	r3, #1
 8018196:	b29a      	uxth	r2, r3
 8018198:	68fb      	ldr	r3, [r7, #12]
 801819a:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 801819c:	68fb      	ldr	r3, [r7, #12]
 801819e:	681b      	ldr	r3, [r3, #0]
 80181a0:	695b      	ldr	r3, [r3, #20]
 80181a2:	f003 0304 	and.w	r3, r3, #4
 80181a6:	2b04      	cmp	r3, #4
 80181a8:	d124      	bne.n	80181f4 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 80181aa:	68fb      	ldr	r3, [r7, #12]
 80181ac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80181ae:	2b03      	cmp	r3, #3
 80181b0:	d107      	bne.n	80181c2 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80181b2:	68fb      	ldr	r3, [r7, #12]
 80181b4:	681b      	ldr	r3, [r3, #0]
 80181b6:	681a      	ldr	r2, [r3, #0]
 80181b8:	68fb      	ldr	r3, [r7, #12]
 80181ba:	681b      	ldr	r3, [r3, #0]
 80181bc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80181c0:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80181c2:	68fb      	ldr	r3, [r7, #12]
 80181c4:	681b      	ldr	r3, [r3, #0]
 80181c6:	691a      	ldr	r2, [r3, #16]
 80181c8:	68fb      	ldr	r3, [r7, #12]
 80181ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80181cc:	b2d2      	uxtb	r2, r2
 80181ce:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80181d0:	68fb      	ldr	r3, [r7, #12]
 80181d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80181d4:	1c5a      	adds	r2, r3, #1
 80181d6:	68fb      	ldr	r3, [r7, #12]
 80181d8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80181da:	68fb      	ldr	r3, [r7, #12]
 80181dc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80181de:	3b01      	subs	r3, #1
 80181e0:	b29a      	uxth	r2, r3
 80181e2:	68fb      	ldr	r3, [r7, #12]
 80181e4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80181e6:	68fb      	ldr	r3, [r7, #12]
 80181e8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80181ea:	b29b      	uxth	r3, r3
 80181ec:	3b01      	subs	r3, #1
 80181ee:	b29a      	uxth	r2, r3
 80181f0:	68fb      	ldr	r3, [r7, #12]
 80181f2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80181f4:	68fb      	ldr	r3, [r7, #12]
 80181f6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80181f8:	2b00      	cmp	r3, #0
 80181fa:	f47f aeb6 	bne.w	8017f6a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80181fe:	68fb      	ldr	r3, [r7, #12]
 8018200:	2220      	movs	r2, #32
 8018202:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8018206:	68fb      	ldr	r3, [r7, #12]
 8018208:	2200      	movs	r2, #0
 801820a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 801820e:	68fb      	ldr	r3, [r7, #12]
 8018210:	2200      	movs	r2, #0
 8018212:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8018216:	2300      	movs	r3, #0
 8018218:	e000      	b.n	801821c <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 801821a:	2302      	movs	r3, #2
  }
}
 801821c:	4618      	mov	r0, r3
 801821e:	3728      	adds	r7, #40	@ 0x28
 8018220:	46bd      	mov	sp, r7
 8018222:	bd80      	pop	{r7, pc}
 8018224:	00010004 	.word	0x00010004

08018228 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8018228:	b480      	push	{r7}
 801822a:	b083      	sub	sp, #12
 801822c:	af00      	add	r7, sp, #0
 801822e:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8018230:	687b      	ldr	r3, [r7, #4]
 8018232:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8018236:	b2db      	uxtb	r3, r3
}
 8018238:	4618      	mov	r0, r3
 801823a:	370c      	adds	r7, #12
 801823c:	46bd      	mov	sp, r7
 801823e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018242:	4770      	bx	lr

08018244 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8018244:	b580      	push	{r7, lr}
 8018246:	b088      	sub	sp, #32
 8018248:	af02      	add	r7, sp, #8
 801824a:	60f8      	str	r0, [r7, #12]
 801824c:	4608      	mov	r0, r1
 801824e:	4611      	mov	r1, r2
 8018250:	461a      	mov	r2, r3
 8018252:	4603      	mov	r3, r0
 8018254:	817b      	strh	r3, [r7, #10]
 8018256:	460b      	mov	r3, r1
 8018258:	813b      	strh	r3, [r7, #8]
 801825a:	4613      	mov	r3, r2
 801825c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 801825e:	68fb      	ldr	r3, [r7, #12]
 8018260:	681b      	ldr	r3, [r3, #0]
 8018262:	681a      	ldr	r2, [r3, #0]
 8018264:	68fb      	ldr	r3, [r7, #12]
 8018266:	681b      	ldr	r3, [r3, #0]
 8018268:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 801826c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 801826e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018270:	9300      	str	r3, [sp, #0]
 8018272:	6a3b      	ldr	r3, [r7, #32]
 8018274:	2200      	movs	r2, #0
 8018276:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 801827a:	68f8      	ldr	r0, [r7, #12]
 801827c:	f000 f960 	bl	8018540 <I2C_WaitOnFlagUntilTimeout>
 8018280:	4603      	mov	r3, r0
 8018282:	2b00      	cmp	r3, #0
 8018284:	d00d      	beq.n	80182a2 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8018286:	68fb      	ldr	r3, [r7, #12]
 8018288:	681b      	ldr	r3, [r3, #0]
 801828a:	681b      	ldr	r3, [r3, #0]
 801828c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8018290:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8018294:	d103      	bne.n	801829e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8018296:	68fb      	ldr	r3, [r7, #12]
 8018298:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801829c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 801829e:	2303      	movs	r3, #3
 80182a0:	e05f      	b.n	8018362 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80182a2:	897b      	ldrh	r3, [r7, #10]
 80182a4:	b2db      	uxtb	r3, r3
 80182a6:	461a      	mov	r2, r3
 80182a8:	68fb      	ldr	r3, [r7, #12]
 80182aa:	681b      	ldr	r3, [r3, #0]
 80182ac:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80182b0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80182b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80182b4:	6a3a      	ldr	r2, [r7, #32]
 80182b6:	492d      	ldr	r1, [pc, #180]	@ (801836c <I2C_RequestMemoryWrite+0x128>)
 80182b8:	68f8      	ldr	r0, [r7, #12]
 80182ba:	f000 f9bb 	bl	8018634 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80182be:	4603      	mov	r3, r0
 80182c0:	2b00      	cmp	r3, #0
 80182c2:	d001      	beq.n	80182c8 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80182c4:	2301      	movs	r3, #1
 80182c6:	e04c      	b.n	8018362 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80182c8:	2300      	movs	r3, #0
 80182ca:	617b      	str	r3, [r7, #20]
 80182cc:	68fb      	ldr	r3, [r7, #12]
 80182ce:	681b      	ldr	r3, [r3, #0]
 80182d0:	695b      	ldr	r3, [r3, #20]
 80182d2:	617b      	str	r3, [r7, #20]
 80182d4:	68fb      	ldr	r3, [r7, #12]
 80182d6:	681b      	ldr	r3, [r3, #0]
 80182d8:	699b      	ldr	r3, [r3, #24]
 80182da:	617b      	str	r3, [r7, #20]
 80182dc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80182de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80182e0:	6a39      	ldr	r1, [r7, #32]
 80182e2:	68f8      	ldr	r0, [r7, #12]
 80182e4:	f000 fa46 	bl	8018774 <I2C_WaitOnTXEFlagUntilTimeout>
 80182e8:	4603      	mov	r3, r0
 80182ea:	2b00      	cmp	r3, #0
 80182ec:	d00d      	beq.n	801830a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80182ee:	68fb      	ldr	r3, [r7, #12]
 80182f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80182f2:	2b04      	cmp	r3, #4
 80182f4:	d107      	bne.n	8018306 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80182f6:	68fb      	ldr	r3, [r7, #12]
 80182f8:	681b      	ldr	r3, [r3, #0]
 80182fa:	681a      	ldr	r2, [r3, #0]
 80182fc:	68fb      	ldr	r3, [r7, #12]
 80182fe:	681b      	ldr	r3, [r3, #0]
 8018300:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8018304:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8018306:	2301      	movs	r3, #1
 8018308:	e02b      	b.n	8018362 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 801830a:	88fb      	ldrh	r3, [r7, #6]
 801830c:	2b01      	cmp	r3, #1
 801830e:	d105      	bne.n	801831c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8018310:	893b      	ldrh	r3, [r7, #8]
 8018312:	b2da      	uxtb	r2, r3
 8018314:	68fb      	ldr	r3, [r7, #12]
 8018316:	681b      	ldr	r3, [r3, #0]
 8018318:	611a      	str	r2, [r3, #16]
 801831a:	e021      	b.n	8018360 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 801831c:	893b      	ldrh	r3, [r7, #8]
 801831e:	0a1b      	lsrs	r3, r3, #8
 8018320:	b29b      	uxth	r3, r3
 8018322:	b2da      	uxtb	r2, r3
 8018324:	68fb      	ldr	r3, [r7, #12]
 8018326:	681b      	ldr	r3, [r3, #0]
 8018328:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 801832a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801832c:	6a39      	ldr	r1, [r7, #32]
 801832e:	68f8      	ldr	r0, [r7, #12]
 8018330:	f000 fa20 	bl	8018774 <I2C_WaitOnTXEFlagUntilTimeout>
 8018334:	4603      	mov	r3, r0
 8018336:	2b00      	cmp	r3, #0
 8018338:	d00d      	beq.n	8018356 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 801833a:	68fb      	ldr	r3, [r7, #12]
 801833c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801833e:	2b04      	cmp	r3, #4
 8018340:	d107      	bne.n	8018352 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8018342:	68fb      	ldr	r3, [r7, #12]
 8018344:	681b      	ldr	r3, [r3, #0]
 8018346:	681a      	ldr	r2, [r3, #0]
 8018348:	68fb      	ldr	r3, [r7, #12]
 801834a:	681b      	ldr	r3, [r3, #0]
 801834c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8018350:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8018352:	2301      	movs	r3, #1
 8018354:	e005      	b.n	8018362 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8018356:	893b      	ldrh	r3, [r7, #8]
 8018358:	b2da      	uxtb	r2, r3
 801835a:	68fb      	ldr	r3, [r7, #12]
 801835c:	681b      	ldr	r3, [r3, #0]
 801835e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8018360:	2300      	movs	r3, #0
}
 8018362:	4618      	mov	r0, r3
 8018364:	3718      	adds	r7, #24
 8018366:	46bd      	mov	sp, r7
 8018368:	bd80      	pop	{r7, pc}
 801836a:	bf00      	nop
 801836c:	00010002 	.word	0x00010002

08018370 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8018370:	b580      	push	{r7, lr}
 8018372:	b088      	sub	sp, #32
 8018374:	af02      	add	r7, sp, #8
 8018376:	60f8      	str	r0, [r7, #12]
 8018378:	4608      	mov	r0, r1
 801837a:	4611      	mov	r1, r2
 801837c:	461a      	mov	r2, r3
 801837e:	4603      	mov	r3, r0
 8018380:	817b      	strh	r3, [r7, #10]
 8018382:	460b      	mov	r3, r1
 8018384:	813b      	strh	r3, [r7, #8]
 8018386:	4613      	mov	r3, r2
 8018388:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 801838a:	68fb      	ldr	r3, [r7, #12]
 801838c:	681b      	ldr	r3, [r3, #0]
 801838e:	681a      	ldr	r2, [r3, #0]
 8018390:	68fb      	ldr	r3, [r7, #12]
 8018392:	681b      	ldr	r3, [r3, #0]
 8018394:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8018398:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 801839a:	68fb      	ldr	r3, [r7, #12]
 801839c:	681b      	ldr	r3, [r3, #0]
 801839e:	681a      	ldr	r2, [r3, #0]
 80183a0:	68fb      	ldr	r3, [r7, #12]
 80183a2:	681b      	ldr	r3, [r3, #0]
 80183a4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80183a8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80183aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80183ac:	9300      	str	r3, [sp, #0]
 80183ae:	6a3b      	ldr	r3, [r7, #32]
 80183b0:	2200      	movs	r2, #0
 80183b2:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80183b6:	68f8      	ldr	r0, [r7, #12]
 80183b8:	f000 f8c2 	bl	8018540 <I2C_WaitOnFlagUntilTimeout>
 80183bc:	4603      	mov	r3, r0
 80183be:	2b00      	cmp	r3, #0
 80183c0:	d00d      	beq.n	80183de <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80183c2:	68fb      	ldr	r3, [r7, #12]
 80183c4:	681b      	ldr	r3, [r3, #0]
 80183c6:	681b      	ldr	r3, [r3, #0]
 80183c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80183cc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80183d0:	d103      	bne.n	80183da <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80183d2:	68fb      	ldr	r3, [r7, #12]
 80183d4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80183d8:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80183da:	2303      	movs	r3, #3
 80183dc:	e0aa      	b.n	8018534 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80183de:	897b      	ldrh	r3, [r7, #10]
 80183e0:	b2db      	uxtb	r3, r3
 80183e2:	461a      	mov	r2, r3
 80183e4:	68fb      	ldr	r3, [r7, #12]
 80183e6:	681b      	ldr	r3, [r3, #0]
 80183e8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80183ec:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80183ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80183f0:	6a3a      	ldr	r2, [r7, #32]
 80183f2:	4952      	ldr	r1, [pc, #328]	@ (801853c <I2C_RequestMemoryRead+0x1cc>)
 80183f4:	68f8      	ldr	r0, [r7, #12]
 80183f6:	f000 f91d 	bl	8018634 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80183fa:	4603      	mov	r3, r0
 80183fc:	2b00      	cmp	r3, #0
 80183fe:	d001      	beq.n	8018404 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8018400:	2301      	movs	r3, #1
 8018402:	e097      	b.n	8018534 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8018404:	2300      	movs	r3, #0
 8018406:	617b      	str	r3, [r7, #20]
 8018408:	68fb      	ldr	r3, [r7, #12]
 801840a:	681b      	ldr	r3, [r3, #0]
 801840c:	695b      	ldr	r3, [r3, #20]
 801840e:	617b      	str	r3, [r7, #20]
 8018410:	68fb      	ldr	r3, [r7, #12]
 8018412:	681b      	ldr	r3, [r3, #0]
 8018414:	699b      	ldr	r3, [r3, #24]
 8018416:	617b      	str	r3, [r7, #20]
 8018418:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 801841a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801841c:	6a39      	ldr	r1, [r7, #32]
 801841e:	68f8      	ldr	r0, [r7, #12]
 8018420:	f000 f9a8 	bl	8018774 <I2C_WaitOnTXEFlagUntilTimeout>
 8018424:	4603      	mov	r3, r0
 8018426:	2b00      	cmp	r3, #0
 8018428:	d00d      	beq.n	8018446 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 801842a:	68fb      	ldr	r3, [r7, #12]
 801842c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801842e:	2b04      	cmp	r3, #4
 8018430:	d107      	bne.n	8018442 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8018432:	68fb      	ldr	r3, [r7, #12]
 8018434:	681b      	ldr	r3, [r3, #0]
 8018436:	681a      	ldr	r2, [r3, #0]
 8018438:	68fb      	ldr	r3, [r7, #12]
 801843a:	681b      	ldr	r3, [r3, #0]
 801843c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8018440:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8018442:	2301      	movs	r3, #1
 8018444:	e076      	b.n	8018534 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8018446:	88fb      	ldrh	r3, [r7, #6]
 8018448:	2b01      	cmp	r3, #1
 801844a:	d105      	bne.n	8018458 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 801844c:	893b      	ldrh	r3, [r7, #8]
 801844e:	b2da      	uxtb	r2, r3
 8018450:	68fb      	ldr	r3, [r7, #12]
 8018452:	681b      	ldr	r3, [r3, #0]
 8018454:	611a      	str	r2, [r3, #16]
 8018456:	e021      	b.n	801849c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8018458:	893b      	ldrh	r3, [r7, #8]
 801845a:	0a1b      	lsrs	r3, r3, #8
 801845c:	b29b      	uxth	r3, r3
 801845e:	b2da      	uxtb	r2, r3
 8018460:	68fb      	ldr	r3, [r7, #12]
 8018462:	681b      	ldr	r3, [r3, #0]
 8018464:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8018466:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8018468:	6a39      	ldr	r1, [r7, #32]
 801846a:	68f8      	ldr	r0, [r7, #12]
 801846c:	f000 f982 	bl	8018774 <I2C_WaitOnTXEFlagUntilTimeout>
 8018470:	4603      	mov	r3, r0
 8018472:	2b00      	cmp	r3, #0
 8018474:	d00d      	beq.n	8018492 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8018476:	68fb      	ldr	r3, [r7, #12]
 8018478:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801847a:	2b04      	cmp	r3, #4
 801847c:	d107      	bne.n	801848e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 801847e:	68fb      	ldr	r3, [r7, #12]
 8018480:	681b      	ldr	r3, [r3, #0]
 8018482:	681a      	ldr	r2, [r3, #0]
 8018484:	68fb      	ldr	r3, [r7, #12]
 8018486:	681b      	ldr	r3, [r3, #0]
 8018488:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 801848c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 801848e:	2301      	movs	r3, #1
 8018490:	e050      	b.n	8018534 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8018492:	893b      	ldrh	r3, [r7, #8]
 8018494:	b2da      	uxtb	r2, r3
 8018496:	68fb      	ldr	r3, [r7, #12]
 8018498:	681b      	ldr	r3, [r3, #0]
 801849a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 801849c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801849e:	6a39      	ldr	r1, [r7, #32]
 80184a0:	68f8      	ldr	r0, [r7, #12]
 80184a2:	f000 f967 	bl	8018774 <I2C_WaitOnTXEFlagUntilTimeout>
 80184a6:	4603      	mov	r3, r0
 80184a8:	2b00      	cmp	r3, #0
 80184aa:	d00d      	beq.n	80184c8 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80184ac:	68fb      	ldr	r3, [r7, #12]
 80184ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80184b0:	2b04      	cmp	r3, #4
 80184b2:	d107      	bne.n	80184c4 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80184b4:	68fb      	ldr	r3, [r7, #12]
 80184b6:	681b      	ldr	r3, [r3, #0]
 80184b8:	681a      	ldr	r2, [r3, #0]
 80184ba:	68fb      	ldr	r3, [r7, #12]
 80184bc:	681b      	ldr	r3, [r3, #0]
 80184be:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80184c2:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80184c4:	2301      	movs	r3, #1
 80184c6:	e035      	b.n	8018534 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80184c8:	68fb      	ldr	r3, [r7, #12]
 80184ca:	681b      	ldr	r3, [r3, #0]
 80184cc:	681a      	ldr	r2, [r3, #0]
 80184ce:	68fb      	ldr	r3, [r7, #12]
 80184d0:	681b      	ldr	r3, [r3, #0]
 80184d2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80184d6:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80184d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80184da:	9300      	str	r3, [sp, #0]
 80184dc:	6a3b      	ldr	r3, [r7, #32]
 80184de:	2200      	movs	r2, #0
 80184e0:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80184e4:	68f8      	ldr	r0, [r7, #12]
 80184e6:	f000 f82b 	bl	8018540 <I2C_WaitOnFlagUntilTimeout>
 80184ea:	4603      	mov	r3, r0
 80184ec:	2b00      	cmp	r3, #0
 80184ee:	d00d      	beq.n	801850c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80184f0:	68fb      	ldr	r3, [r7, #12]
 80184f2:	681b      	ldr	r3, [r3, #0]
 80184f4:	681b      	ldr	r3, [r3, #0]
 80184f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80184fa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80184fe:	d103      	bne.n	8018508 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8018500:	68fb      	ldr	r3, [r7, #12]
 8018502:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8018506:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8018508:	2303      	movs	r3, #3
 801850a:	e013      	b.n	8018534 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 801850c:	897b      	ldrh	r3, [r7, #10]
 801850e:	b2db      	uxtb	r3, r3
 8018510:	f043 0301 	orr.w	r3, r3, #1
 8018514:	b2da      	uxtb	r2, r3
 8018516:	68fb      	ldr	r3, [r7, #12]
 8018518:	681b      	ldr	r3, [r3, #0]
 801851a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 801851c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801851e:	6a3a      	ldr	r2, [r7, #32]
 8018520:	4906      	ldr	r1, [pc, #24]	@ (801853c <I2C_RequestMemoryRead+0x1cc>)
 8018522:	68f8      	ldr	r0, [r7, #12]
 8018524:	f000 f886 	bl	8018634 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8018528:	4603      	mov	r3, r0
 801852a:	2b00      	cmp	r3, #0
 801852c:	d001      	beq.n	8018532 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 801852e:	2301      	movs	r3, #1
 8018530:	e000      	b.n	8018534 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8018532:	2300      	movs	r3, #0
}
 8018534:	4618      	mov	r0, r3
 8018536:	3718      	adds	r7, #24
 8018538:	46bd      	mov	sp, r7
 801853a:	bd80      	pop	{r7, pc}
 801853c:	00010002 	.word	0x00010002

08018540 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8018540:	b580      	push	{r7, lr}
 8018542:	b084      	sub	sp, #16
 8018544:	af00      	add	r7, sp, #0
 8018546:	60f8      	str	r0, [r7, #12]
 8018548:	60b9      	str	r1, [r7, #8]
 801854a:	603b      	str	r3, [r7, #0]
 801854c:	4613      	mov	r3, r2
 801854e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8018550:	e048      	b.n	80185e4 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8018552:	683b      	ldr	r3, [r7, #0]
 8018554:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018558:	d044      	beq.n	80185e4 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801855a:	f7fc fa3b 	bl	80149d4 <HAL_GetTick>
 801855e:	4602      	mov	r2, r0
 8018560:	69bb      	ldr	r3, [r7, #24]
 8018562:	1ad3      	subs	r3, r2, r3
 8018564:	683a      	ldr	r2, [r7, #0]
 8018566:	429a      	cmp	r2, r3
 8018568:	d302      	bcc.n	8018570 <I2C_WaitOnFlagUntilTimeout+0x30>
 801856a:	683b      	ldr	r3, [r7, #0]
 801856c:	2b00      	cmp	r3, #0
 801856e:	d139      	bne.n	80185e4 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8018570:	68bb      	ldr	r3, [r7, #8]
 8018572:	0c1b      	lsrs	r3, r3, #16
 8018574:	b2db      	uxtb	r3, r3
 8018576:	2b01      	cmp	r3, #1
 8018578:	d10d      	bne.n	8018596 <I2C_WaitOnFlagUntilTimeout+0x56>
 801857a:	68fb      	ldr	r3, [r7, #12]
 801857c:	681b      	ldr	r3, [r3, #0]
 801857e:	695b      	ldr	r3, [r3, #20]
 8018580:	43da      	mvns	r2, r3
 8018582:	68bb      	ldr	r3, [r7, #8]
 8018584:	4013      	ands	r3, r2
 8018586:	b29b      	uxth	r3, r3
 8018588:	2b00      	cmp	r3, #0
 801858a:	bf0c      	ite	eq
 801858c:	2301      	moveq	r3, #1
 801858e:	2300      	movne	r3, #0
 8018590:	b2db      	uxtb	r3, r3
 8018592:	461a      	mov	r2, r3
 8018594:	e00c      	b.n	80185b0 <I2C_WaitOnFlagUntilTimeout+0x70>
 8018596:	68fb      	ldr	r3, [r7, #12]
 8018598:	681b      	ldr	r3, [r3, #0]
 801859a:	699b      	ldr	r3, [r3, #24]
 801859c:	43da      	mvns	r2, r3
 801859e:	68bb      	ldr	r3, [r7, #8]
 80185a0:	4013      	ands	r3, r2
 80185a2:	b29b      	uxth	r3, r3
 80185a4:	2b00      	cmp	r3, #0
 80185a6:	bf0c      	ite	eq
 80185a8:	2301      	moveq	r3, #1
 80185aa:	2300      	movne	r3, #0
 80185ac:	b2db      	uxtb	r3, r3
 80185ae:	461a      	mov	r2, r3
 80185b0:	79fb      	ldrb	r3, [r7, #7]
 80185b2:	429a      	cmp	r2, r3
 80185b4:	d116      	bne.n	80185e4 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80185b6:	68fb      	ldr	r3, [r7, #12]
 80185b8:	2200      	movs	r2, #0
 80185ba:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80185bc:	68fb      	ldr	r3, [r7, #12]
 80185be:	2220      	movs	r2, #32
 80185c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80185c4:	68fb      	ldr	r3, [r7, #12]
 80185c6:	2200      	movs	r2, #0
 80185c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80185cc:	68fb      	ldr	r3, [r7, #12]
 80185ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80185d0:	f043 0220 	orr.w	r2, r3, #32
 80185d4:	68fb      	ldr	r3, [r7, #12]
 80185d6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80185d8:	68fb      	ldr	r3, [r7, #12]
 80185da:	2200      	movs	r2, #0
 80185dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80185e0:	2301      	movs	r3, #1
 80185e2:	e023      	b.n	801862c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80185e4:	68bb      	ldr	r3, [r7, #8]
 80185e6:	0c1b      	lsrs	r3, r3, #16
 80185e8:	b2db      	uxtb	r3, r3
 80185ea:	2b01      	cmp	r3, #1
 80185ec:	d10d      	bne.n	801860a <I2C_WaitOnFlagUntilTimeout+0xca>
 80185ee:	68fb      	ldr	r3, [r7, #12]
 80185f0:	681b      	ldr	r3, [r3, #0]
 80185f2:	695b      	ldr	r3, [r3, #20]
 80185f4:	43da      	mvns	r2, r3
 80185f6:	68bb      	ldr	r3, [r7, #8]
 80185f8:	4013      	ands	r3, r2
 80185fa:	b29b      	uxth	r3, r3
 80185fc:	2b00      	cmp	r3, #0
 80185fe:	bf0c      	ite	eq
 8018600:	2301      	moveq	r3, #1
 8018602:	2300      	movne	r3, #0
 8018604:	b2db      	uxtb	r3, r3
 8018606:	461a      	mov	r2, r3
 8018608:	e00c      	b.n	8018624 <I2C_WaitOnFlagUntilTimeout+0xe4>
 801860a:	68fb      	ldr	r3, [r7, #12]
 801860c:	681b      	ldr	r3, [r3, #0]
 801860e:	699b      	ldr	r3, [r3, #24]
 8018610:	43da      	mvns	r2, r3
 8018612:	68bb      	ldr	r3, [r7, #8]
 8018614:	4013      	ands	r3, r2
 8018616:	b29b      	uxth	r3, r3
 8018618:	2b00      	cmp	r3, #0
 801861a:	bf0c      	ite	eq
 801861c:	2301      	moveq	r3, #1
 801861e:	2300      	movne	r3, #0
 8018620:	b2db      	uxtb	r3, r3
 8018622:	461a      	mov	r2, r3
 8018624:	79fb      	ldrb	r3, [r7, #7]
 8018626:	429a      	cmp	r2, r3
 8018628:	d093      	beq.n	8018552 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 801862a:	2300      	movs	r3, #0
}
 801862c:	4618      	mov	r0, r3
 801862e:	3710      	adds	r7, #16
 8018630:	46bd      	mov	sp, r7
 8018632:	bd80      	pop	{r7, pc}

08018634 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8018634:	b580      	push	{r7, lr}
 8018636:	b084      	sub	sp, #16
 8018638:	af00      	add	r7, sp, #0
 801863a:	60f8      	str	r0, [r7, #12]
 801863c:	60b9      	str	r1, [r7, #8]
 801863e:	607a      	str	r2, [r7, #4]
 8018640:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8018642:	e071      	b.n	8018728 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8018644:	68fb      	ldr	r3, [r7, #12]
 8018646:	681b      	ldr	r3, [r3, #0]
 8018648:	695b      	ldr	r3, [r3, #20]
 801864a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 801864e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8018652:	d123      	bne.n	801869c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8018654:	68fb      	ldr	r3, [r7, #12]
 8018656:	681b      	ldr	r3, [r3, #0]
 8018658:	681a      	ldr	r2, [r3, #0]
 801865a:	68fb      	ldr	r3, [r7, #12]
 801865c:	681b      	ldr	r3, [r3, #0]
 801865e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8018662:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8018664:	68fb      	ldr	r3, [r7, #12]
 8018666:	681b      	ldr	r3, [r3, #0]
 8018668:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 801866c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 801866e:	68fb      	ldr	r3, [r7, #12]
 8018670:	2200      	movs	r2, #0
 8018672:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8018674:	68fb      	ldr	r3, [r7, #12]
 8018676:	2220      	movs	r2, #32
 8018678:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 801867c:	68fb      	ldr	r3, [r7, #12]
 801867e:	2200      	movs	r2, #0
 8018680:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8018684:	68fb      	ldr	r3, [r7, #12]
 8018686:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8018688:	f043 0204 	orr.w	r2, r3, #4
 801868c:	68fb      	ldr	r3, [r7, #12]
 801868e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8018690:	68fb      	ldr	r3, [r7, #12]
 8018692:	2200      	movs	r2, #0
 8018694:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8018698:	2301      	movs	r3, #1
 801869a:	e067      	b.n	801876c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801869c:	687b      	ldr	r3, [r7, #4]
 801869e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80186a2:	d041      	beq.n	8018728 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80186a4:	f7fc f996 	bl	80149d4 <HAL_GetTick>
 80186a8:	4602      	mov	r2, r0
 80186aa:	683b      	ldr	r3, [r7, #0]
 80186ac:	1ad3      	subs	r3, r2, r3
 80186ae:	687a      	ldr	r2, [r7, #4]
 80186b0:	429a      	cmp	r2, r3
 80186b2:	d302      	bcc.n	80186ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80186b4:	687b      	ldr	r3, [r7, #4]
 80186b6:	2b00      	cmp	r3, #0
 80186b8:	d136      	bne.n	8018728 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80186ba:	68bb      	ldr	r3, [r7, #8]
 80186bc:	0c1b      	lsrs	r3, r3, #16
 80186be:	b2db      	uxtb	r3, r3
 80186c0:	2b01      	cmp	r3, #1
 80186c2:	d10c      	bne.n	80186de <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80186c4:	68fb      	ldr	r3, [r7, #12]
 80186c6:	681b      	ldr	r3, [r3, #0]
 80186c8:	695b      	ldr	r3, [r3, #20]
 80186ca:	43da      	mvns	r2, r3
 80186cc:	68bb      	ldr	r3, [r7, #8]
 80186ce:	4013      	ands	r3, r2
 80186d0:	b29b      	uxth	r3, r3
 80186d2:	2b00      	cmp	r3, #0
 80186d4:	bf14      	ite	ne
 80186d6:	2301      	movne	r3, #1
 80186d8:	2300      	moveq	r3, #0
 80186da:	b2db      	uxtb	r3, r3
 80186dc:	e00b      	b.n	80186f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80186de:	68fb      	ldr	r3, [r7, #12]
 80186e0:	681b      	ldr	r3, [r3, #0]
 80186e2:	699b      	ldr	r3, [r3, #24]
 80186e4:	43da      	mvns	r2, r3
 80186e6:	68bb      	ldr	r3, [r7, #8]
 80186e8:	4013      	ands	r3, r2
 80186ea:	b29b      	uxth	r3, r3
 80186ec:	2b00      	cmp	r3, #0
 80186ee:	bf14      	ite	ne
 80186f0:	2301      	movne	r3, #1
 80186f2:	2300      	moveq	r3, #0
 80186f4:	b2db      	uxtb	r3, r3
 80186f6:	2b00      	cmp	r3, #0
 80186f8:	d016      	beq.n	8018728 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80186fa:	68fb      	ldr	r3, [r7, #12]
 80186fc:	2200      	movs	r2, #0
 80186fe:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8018700:	68fb      	ldr	r3, [r7, #12]
 8018702:	2220      	movs	r2, #32
 8018704:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8018708:	68fb      	ldr	r3, [r7, #12]
 801870a:	2200      	movs	r2, #0
 801870c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8018710:	68fb      	ldr	r3, [r7, #12]
 8018712:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8018714:	f043 0220 	orr.w	r2, r3, #32
 8018718:	68fb      	ldr	r3, [r7, #12]
 801871a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 801871c:	68fb      	ldr	r3, [r7, #12]
 801871e:	2200      	movs	r2, #0
 8018720:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8018724:	2301      	movs	r3, #1
 8018726:	e021      	b.n	801876c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8018728:	68bb      	ldr	r3, [r7, #8]
 801872a:	0c1b      	lsrs	r3, r3, #16
 801872c:	b2db      	uxtb	r3, r3
 801872e:	2b01      	cmp	r3, #1
 8018730:	d10c      	bne.n	801874c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8018732:	68fb      	ldr	r3, [r7, #12]
 8018734:	681b      	ldr	r3, [r3, #0]
 8018736:	695b      	ldr	r3, [r3, #20]
 8018738:	43da      	mvns	r2, r3
 801873a:	68bb      	ldr	r3, [r7, #8]
 801873c:	4013      	ands	r3, r2
 801873e:	b29b      	uxth	r3, r3
 8018740:	2b00      	cmp	r3, #0
 8018742:	bf14      	ite	ne
 8018744:	2301      	movne	r3, #1
 8018746:	2300      	moveq	r3, #0
 8018748:	b2db      	uxtb	r3, r3
 801874a:	e00b      	b.n	8018764 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 801874c:	68fb      	ldr	r3, [r7, #12]
 801874e:	681b      	ldr	r3, [r3, #0]
 8018750:	699b      	ldr	r3, [r3, #24]
 8018752:	43da      	mvns	r2, r3
 8018754:	68bb      	ldr	r3, [r7, #8]
 8018756:	4013      	ands	r3, r2
 8018758:	b29b      	uxth	r3, r3
 801875a:	2b00      	cmp	r3, #0
 801875c:	bf14      	ite	ne
 801875e:	2301      	movne	r3, #1
 8018760:	2300      	moveq	r3, #0
 8018762:	b2db      	uxtb	r3, r3
 8018764:	2b00      	cmp	r3, #0
 8018766:	f47f af6d 	bne.w	8018644 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 801876a:	2300      	movs	r3, #0
}
 801876c:	4618      	mov	r0, r3
 801876e:	3710      	adds	r7, #16
 8018770:	46bd      	mov	sp, r7
 8018772:	bd80      	pop	{r7, pc}

08018774 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8018774:	b580      	push	{r7, lr}
 8018776:	b084      	sub	sp, #16
 8018778:	af00      	add	r7, sp, #0
 801877a:	60f8      	str	r0, [r7, #12]
 801877c:	60b9      	str	r1, [r7, #8]
 801877e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8018780:	e034      	b.n	80187ec <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8018782:	68f8      	ldr	r0, [r7, #12]
 8018784:	f000 f8e3 	bl	801894e <I2C_IsAcknowledgeFailed>
 8018788:	4603      	mov	r3, r0
 801878a:	2b00      	cmp	r3, #0
 801878c:	d001      	beq.n	8018792 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 801878e:	2301      	movs	r3, #1
 8018790:	e034      	b.n	80187fc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8018792:	68bb      	ldr	r3, [r7, #8]
 8018794:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018798:	d028      	beq.n	80187ec <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801879a:	f7fc f91b 	bl	80149d4 <HAL_GetTick>
 801879e:	4602      	mov	r2, r0
 80187a0:	687b      	ldr	r3, [r7, #4]
 80187a2:	1ad3      	subs	r3, r2, r3
 80187a4:	68ba      	ldr	r2, [r7, #8]
 80187a6:	429a      	cmp	r2, r3
 80187a8:	d302      	bcc.n	80187b0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80187aa:	68bb      	ldr	r3, [r7, #8]
 80187ac:	2b00      	cmp	r3, #0
 80187ae:	d11d      	bne.n	80187ec <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80187b0:	68fb      	ldr	r3, [r7, #12]
 80187b2:	681b      	ldr	r3, [r3, #0]
 80187b4:	695b      	ldr	r3, [r3, #20]
 80187b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80187ba:	2b80      	cmp	r3, #128	@ 0x80
 80187bc:	d016      	beq.n	80187ec <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80187be:	68fb      	ldr	r3, [r7, #12]
 80187c0:	2200      	movs	r2, #0
 80187c2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80187c4:	68fb      	ldr	r3, [r7, #12]
 80187c6:	2220      	movs	r2, #32
 80187c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80187cc:	68fb      	ldr	r3, [r7, #12]
 80187ce:	2200      	movs	r2, #0
 80187d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80187d4:	68fb      	ldr	r3, [r7, #12]
 80187d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80187d8:	f043 0220 	orr.w	r2, r3, #32
 80187dc:	68fb      	ldr	r3, [r7, #12]
 80187de:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80187e0:	68fb      	ldr	r3, [r7, #12]
 80187e2:	2200      	movs	r2, #0
 80187e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80187e8:	2301      	movs	r3, #1
 80187ea:	e007      	b.n	80187fc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80187ec:	68fb      	ldr	r3, [r7, #12]
 80187ee:	681b      	ldr	r3, [r3, #0]
 80187f0:	695b      	ldr	r3, [r3, #20]
 80187f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80187f6:	2b80      	cmp	r3, #128	@ 0x80
 80187f8:	d1c3      	bne.n	8018782 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80187fa:	2300      	movs	r3, #0
}
 80187fc:	4618      	mov	r0, r3
 80187fe:	3710      	adds	r7, #16
 8018800:	46bd      	mov	sp, r7
 8018802:	bd80      	pop	{r7, pc}

08018804 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8018804:	b580      	push	{r7, lr}
 8018806:	b084      	sub	sp, #16
 8018808:	af00      	add	r7, sp, #0
 801880a:	60f8      	str	r0, [r7, #12]
 801880c:	60b9      	str	r1, [r7, #8]
 801880e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8018810:	e034      	b.n	801887c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8018812:	68f8      	ldr	r0, [r7, #12]
 8018814:	f000 f89b 	bl	801894e <I2C_IsAcknowledgeFailed>
 8018818:	4603      	mov	r3, r0
 801881a:	2b00      	cmp	r3, #0
 801881c:	d001      	beq.n	8018822 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 801881e:	2301      	movs	r3, #1
 8018820:	e034      	b.n	801888c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8018822:	68bb      	ldr	r3, [r7, #8]
 8018824:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018828:	d028      	beq.n	801887c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801882a:	f7fc f8d3 	bl	80149d4 <HAL_GetTick>
 801882e:	4602      	mov	r2, r0
 8018830:	687b      	ldr	r3, [r7, #4]
 8018832:	1ad3      	subs	r3, r2, r3
 8018834:	68ba      	ldr	r2, [r7, #8]
 8018836:	429a      	cmp	r2, r3
 8018838:	d302      	bcc.n	8018840 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 801883a:	68bb      	ldr	r3, [r7, #8]
 801883c:	2b00      	cmp	r3, #0
 801883e:	d11d      	bne.n	801887c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8018840:	68fb      	ldr	r3, [r7, #12]
 8018842:	681b      	ldr	r3, [r3, #0]
 8018844:	695b      	ldr	r3, [r3, #20]
 8018846:	f003 0304 	and.w	r3, r3, #4
 801884a:	2b04      	cmp	r3, #4
 801884c:	d016      	beq.n	801887c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 801884e:	68fb      	ldr	r3, [r7, #12]
 8018850:	2200      	movs	r2, #0
 8018852:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8018854:	68fb      	ldr	r3, [r7, #12]
 8018856:	2220      	movs	r2, #32
 8018858:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 801885c:	68fb      	ldr	r3, [r7, #12]
 801885e:	2200      	movs	r2, #0
 8018860:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8018864:	68fb      	ldr	r3, [r7, #12]
 8018866:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8018868:	f043 0220 	orr.w	r2, r3, #32
 801886c:	68fb      	ldr	r3, [r7, #12]
 801886e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8018870:	68fb      	ldr	r3, [r7, #12]
 8018872:	2200      	movs	r2, #0
 8018874:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8018878:	2301      	movs	r3, #1
 801887a:	e007      	b.n	801888c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 801887c:	68fb      	ldr	r3, [r7, #12]
 801887e:	681b      	ldr	r3, [r3, #0]
 8018880:	695b      	ldr	r3, [r3, #20]
 8018882:	f003 0304 	and.w	r3, r3, #4
 8018886:	2b04      	cmp	r3, #4
 8018888:	d1c3      	bne.n	8018812 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 801888a:	2300      	movs	r3, #0
}
 801888c:	4618      	mov	r0, r3
 801888e:	3710      	adds	r7, #16
 8018890:	46bd      	mov	sp, r7
 8018892:	bd80      	pop	{r7, pc}

08018894 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8018894:	b580      	push	{r7, lr}
 8018896:	b084      	sub	sp, #16
 8018898:	af00      	add	r7, sp, #0
 801889a:	60f8      	str	r0, [r7, #12]
 801889c:	60b9      	str	r1, [r7, #8]
 801889e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80188a0:	e049      	b.n	8018936 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80188a2:	68fb      	ldr	r3, [r7, #12]
 80188a4:	681b      	ldr	r3, [r3, #0]
 80188a6:	695b      	ldr	r3, [r3, #20]
 80188a8:	f003 0310 	and.w	r3, r3, #16
 80188ac:	2b10      	cmp	r3, #16
 80188ae:	d119      	bne.n	80188e4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80188b0:	68fb      	ldr	r3, [r7, #12]
 80188b2:	681b      	ldr	r3, [r3, #0]
 80188b4:	f06f 0210 	mvn.w	r2, #16
 80188b8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80188ba:	68fb      	ldr	r3, [r7, #12]
 80188bc:	2200      	movs	r2, #0
 80188be:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80188c0:	68fb      	ldr	r3, [r7, #12]
 80188c2:	2220      	movs	r2, #32
 80188c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80188c8:	68fb      	ldr	r3, [r7, #12]
 80188ca:	2200      	movs	r2, #0
 80188cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80188d0:	68fb      	ldr	r3, [r7, #12]
 80188d2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80188d4:	68fb      	ldr	r3, [r7, #12]
 80188d6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80188d8:	68fb      	ldr	r3, [r7, #12]
 80188da:	2200      	movs	r2, #0
 80188dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80188e0:	2301      	movs	r3, #1
 80188e2:	e030      	b.n	8018946 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80188e4:	f7fc f876 	bl	80149d4 <HAL_GetTick>
 80188e8:	4602      	mov	r2, r0
 80188ea:	687b      	ldr	r3, [r7, #4]
 80188ec:	1ad3      	subs	r3, r2, r3
 80188ee:	68ba      	ldr	r2, [r7, #8]
 80188f0:	429a      	cmp	r2, r3
 80188f2:	d302      	bcc.n	80188fa <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80188f4:	68bb      	ldr	r3, [r7, #8]
 80188f6:	2b00      	cmp	r3, #0
 80188f8:	d11d      	bne.n	8018936 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80188fa:	68fb      	ldr	r3, [r7, #12]
 80188fc:	681b      	ldr	r3, [r3, #0]
 80188fe:	695b      	ldr	r3, [r3, #20]
 8018900:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8018904:	2b40      	cmp	r3, #64	@ 0x40
 8018906:	d016      	beq.n	8018936 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8018908:	68fb      	ldr	r3, [r7, #12]
 801890a:	2200      	movs	r2, #0
 801890c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 801890e:	68fb      	ldr	r3, [r7, #12]
 8018910:	2220      	movs	r2, #32
 8018912:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8018916:	68fb      	ldr	r3, [r7, #12]
 8018918:	2200      	movs	r2, #0
 801891a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 801891e:	68fb      	ldr	r3, [r7, #12]
 8018920:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8018922:	f043 0220 	orr.w	r2, r3, #32
 8018926:	68fb      	ldr	r3, [r7, #12]
 8018928:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 801892a:	68fb      	ldr	r3, [r7, #12]
 801892c:	2200      	movs	r2, #0
 801892e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8018932:	2301      	movs	r3, #1
 8018934:	e007      	b.n	8018946 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8018936:	68fb      	ldr	r3, [r7, #12]
 8018938:	681b      	ldr	r3, [r3, #0]
 801893a:	695b      	ldr	r3, [r3, #20]
 801893c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8018940:	2b40      	cmp	r3, #64	@ 0x40
 8018942:	d1ae      	bne.n	80188a2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8018944:	2300      	movs	r3, #0
}
 8018946:	4618      	mov	r0, r3
 8018948:	3710      	adds	r7, #16
 801894a:	46bd      	mov	sp, r7
 801894c:	bd80      	pop	{r7, pc}

0801894e <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 801894e:	b480      	push	{r7}
 8018950:	b083      	sub	sp, #12
 8018952:	af00      	add	r7, sp, #0
 8018954:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8018956:	687b      	ldr	r3, [r7, #4]
 8018958:	681b      	ldr	r3, [r3, #0]
 801895a:	695b      	ldr	r3, [r3, #20]
 801895c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8018960:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8018964:	d11b      	bne.n	801899e <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8018966:	687b      	ldr	r3, [r7, #4]
 8018968:	681b      	ldr	r3, [r3, #0]
 801896a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 801896e:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8018970:	687b      	ldr	r3, [r7, #4]
 8018972:	2200      	movs	r2, #0
 8018974:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8018976:	687b      	ldr	r3, [r7, #4]
 8018978:	2220      	movs	r2, #32
 801897a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 801897e:	687b      	ldr	r3, [r7, #4]
 8018980:	2200      	movs	r2, #0
 8018982:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8018986:	687b      	ldr	r3, [r7, #4]
 8018988:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801898a:	f043 0204 	orr.w	r2, r3, #4
 801898e:	687b      	ldr	r3, [r7, #4]
 8018990:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8018992:	687b      	ldr	r3, [r7, #4]
 8018994:	2200      	movs	r2, #0
 8018996:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 801899a:	2301      	movs	r3, #1
 801899c:	e000      	b.n	80189a0 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 801899e:	2300      	movs	r3, #0
}
 80189a0:	4618      	mov	r0, r3
 80189a2:	370c      	adds	r7, #12
 80189a4:	46bd      	mov	sp, r7
 80189a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80189aa:	4770      	bx	lr

080189ac <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80189ac:	b480      	push	{r7}
 80189ae:	b083      	sub	sp, #12
 80189b0:	af00      	add	r7, sp, #0
 80189b2:	6078      	str	r0, [r7, #4]
 80189b4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80189b6:	687b      	ldr	r3, [r7, #4]
 80189b8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80189bc:	b2db      	uxtb	r3, r3
 80189be:	2b20      	cmp	r3, #32
 80189c0:	d129      	bne.n	8018a16 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80189c2:	687b      	ldr	r3, [r7, #4]
 80189c4:	2224      	movs	r2, #36	@ 0x24
 80189c6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80189ca:	687b      	ldr	r3, [r7, #4]
 80189cc:	681b      	ldr	r3, [r3, #0]
 80189ce:	681a      	ldr	r2, [r3, #0]
 80189d0:	687b      	ldr	r3, [r7, #4]
 80189d2:	681b      	ldr	r3, [r3, #0]
 80189d4:	f022 0201 	bic.w	r2, r2, #1
 80189d8:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 80189da:	687b      	ldr	r3, [r7, #4]
 80189dc:	681b      	ldr	r3, [r3, #0]
 80189de:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80189e0:	687b      	ldr	r3, [r7, #4]
 80189e2:	681b      	ldr	r3, [r3, #0]
 80189e4:	f022 0210 	bic.w	r2, r2, #16
 80189e8:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 80189ea:	687b      	ldr	r3, [r7, #4]
 80189ec:	681b      	ldr	r3, [r3, #0]
 80189ee:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80189f0:	687b      	ldr	r3, [r7, #4]
 80189f2:	681b      	ldr	r3, [r3, #0]
 80189f4:	683a      	ldr	r2, [r7, #0]
 80189f6:	430a      	orrs	r2, r1
 80189f8:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 80189fa:	687b      	ldr	r3, [r7, #4]
 80189fc:	681b      	ldr	r3, [r3, #0]
 80189fe:	681a      	ldr	r2, [r3, #0]
 8018a00:	687b      	ldr	r3, [r7, #4]
 8018a02:	681b      	ldr	r3, [r3, #0]
 8018a04:	f042 0201 	orr.w	r2, r2, #1
 8018a08:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8018a0a:	687b      	ldr	r3, [r7, #4]
 8018a0c:	2220      	movs	r2, #32
 8018a0e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 8018a12:	2300      	movs	r3, #0
 8018a14:	e000      	b.n	8018a18 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8018a16:	2302      	movs	r3, #2
  }
}
 8018a18:	4618      	mov	r0, r3
 8018a1a:	370c      	adds	r7, #12
 8018a1c:	46bd      	mov	sp, r7
 8018a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018a22:	4770      	bx	lr

08018a24 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8018a24:	b480      	push	{r7}
 8018a26:	b085      	sub	sp, #20
 8018a28:	af00      	add	r7, sp, #0
 8018a2a:	6078      	str	r0, [r7, #4]
 8018a2c:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8018a2e:	2300      	movs	r3, #0
 8018a30:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8018a32:	687b      	ldr	r3, [r7, #4]
 8018a34:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8018a38:	b2db      	uxtb	r3, r3
 8018a3a:	2b20      	cmp	r3, #32
 8018a3c:	d12a      	bne.n	8018a94 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8018a3e:	687b      	ldr	r3, [r7, #4]
 8018a40:	2224      	movs	r2, #36	@ 0x24
 8018a42:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8018a46:	687b      	ldr	r3, [r7, #4]
 8018a48:	681b      	ldr	r3, [r3, #0]
 8018a4a:	681a      	ldr	r2, [r3, #0]
 8018a4c:	687b      	ldr	r3, [r7, #4]
 8018a4e:	681b      	ldr	r3, [r3, #0]
 8018a50:	f022 0201 	bic.w	r2, r2, #1
 8018a54:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8018a56:	687b      	ldr	r3, [r7, #4]
 8018a58:	681b      	ldr	r3, [r3, #0]
 8018a5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018a5c:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8018a5e:	89fb      	ldrh	r3, [r7, #14]
 8018a60:	f023 030f 	bic.w	r3, r3, #15
 8018a64:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8018a66:	683b      	ldr	r3, [r7, #0]
 8018a68:	b29a      	uxth	r2, r3
 8018a6a:	89fb      	ldrh	r3, [r7, #14]
 8018a6c:	4313      	orrs	r3, r2
 8018a6e:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8018a70:	687b      	ldr	r3, [r7, #4]
 8018a72:	681b      	ldr	r3, [r3, #0]
 8018a74:	89fa      	ldrh	r2, [r7, #14]
 8018a76:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 8018a78:	687b      	ldr	r3, [r7, #4]
 8018a7a:	681b      	ldr	r3, [r3, #0]
 8018a7c:	681a      	ldr	r2, [r3, #0]
 8018a7e:	687b      	ldr	r3, [r7, #4]
 8018a80:	681b      	ldr	r3, [r3, #0]
 8018a82:	f042 0201 	orr.w	r2, r2, #1
 8018a86:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8018a88:	687b      	ldr	r3, [r7, #4]
 8018a8a:	2220      	movs	r2, #32
 8018a8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 8018a90:	2300      	movs	r3, #0
 8018a92:	e000      	b.n	8018a96 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8018a94:	2302      	movs	r3, #2
  }
}
 8018a96:	4618      	mov	r0, r3
 8018a98:	3714      	adds	r7, #20
 8018a9a:	46bd      	mov	sp, r7
 8018a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018aa0:	4770      	bx	lr

08018aa2 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8018aa2:	b580      	push	{r7, lr}
 8018aa4:	b084      	sub	sp, #16
 8018aa6:	af00      	add	r7, sp, #0
 8018aa8:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8018aaa:	687b      	ldr	r3, [r7, #4]
 8018aac:	2b00      	cmp	r3, #0
 8018aae:	d101      	bne.n	8018ab4 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8018ab0:	2301      	movs	r3, #1
 8018ab2:	e08f      	b.n	8018bd4 <HAL_LTDC_Init+0x132>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8018ab4:	687b      	ldr	r3, [r7, #4]
 8018ab6:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 8018aba:	b2db      	uxtb	r3, r3
 8018abc:	2b00      	cmp	r3, #0
 8018abe:	d106      	bne.n	8018ace <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8018ac0:	687b      	ldr	r3, [r7, #4]
 8018ac2:	2200      	movs	r2, #0
 8018ac4:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8018ac8:	6878      	ldr	r0, [r7, #4]
 8018aca:	f7f9 f951 	bl	8011d70 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8018ace:	687b      	ldr	r3, [r7, #4]
 8018ad0:	2202      	movs	r2, #2
 8018ad2:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8018ad6:	687b      	ldr	r3, [r7, #4]
 8018ad8:	681b      	ldr	r3, [r3, #0]
 8018ada:	699a      	ldr	r2, [r3, #24]
 8018adc:	687b      	ldr	r3, [r7, #4]
 8018ade:	681b      	ldr	r3, [r3, #0]
 8018ae0:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 8018ae4:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8018ae6:	687b      	ldr	r3, [r7, #4]
 8018ae8:	681b      	ldr	r3, [r3, #0]
 8018aea:	6999      	ldr	r1, [r3, #24]
 8018aec:	687b      	ldr	r3, [r7, #4]
 8018aee:	685a      	ldr	r2, [r3, #4]
 8018af0:	687b      	ldr	r3, [r7, #4]
 8018af2:	689b      	ldr	r3, [r3, #8]
 8018af4:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8018af6:	687b      	ldr	r3, [r7, #4]
 8018af8:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8018afa:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8018afc:	687b      	ldr	r3, [r7, #4]
 8018afe:	691b      	ldr	r3, [r3, #16]
 8018b00:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8018b02:	687b      	ldr	r3, [r7, #4]
 8018b04:	681b      	ldr	r3, [r3, #0]
 8018b06:	430a      	orrs	r2, r1
 8018b08:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8018b0a:	687b      	ldr	r3, [r7, #4]
 8018b0c:	695b      	ldr	r3, [r3, #20]
 8018b0e:	041b      	lsls	r3, r3, #16
 8018b10:	60fb      	str	r3, [r7, #12]
  WRITE_REG(hltdc->Instance->SSCR, (tmp | hltdc->Init.VerticalSync));
 8018b12:	687b      	ldr	r3, [r7, #4]
 8018b14:	6999      	ldr	r1, [r3, #24]
 8018b16:	687b      	ldr	r3, [r7, #4]
 8018b18:	681b      	ldr	r3, [r3, #0]
 8018b1a:	68fa      	ldr	r2, [r7, #12]
 8018b1c:	430a      	orrs	r2, r1
 8018b1e:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8018b20:	687b      	ldr	r3, [r7, #4]
 8018b22:	69db      	ldr	r3, [r3, #28]
 8018b24:	041b      	lsls	r3, r3, #16
 8018b26:	60fb      	str	r3, [r7, #12]
  WRITE_REG(hltdc->Instance->BPCR, (tmp | hltdc->Init.AccumulatedVBP));
 8018b28:	687b      	ldr	r3, [r7, #4]
 8018b2a:	6a19      	ldr	r1, [r3, #32]
 8018b2c:	687b      	ldr	r3, [r7, #4]
 8018b2e:	681b      	ldr	r3, [r3, #0]
 8018b30:	68fa      	ldr	r2, [r7, #12]
 8018b32:	430a      	orrs	r2, r1
 8018b34:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8018b36:	687b      	ldr	r3, [r7, #4]
 8018b38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018b3a:	041b      	lsls	r3, r3, #16
 8018b3c:	60fb      	str	r3, [r7, #12]
  WRITE_REG(hltdc->Instance->AWCR, (tmp | hltdc->Init.AccumulatedActiveH));
 8018b3e:	687b      	ldr	r3, [r7, #4]
 8018b40:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 8018b42:	687b      	ldr	r3, [r7, #4]
 8018b44:	681b      	ldr	r3, [r3, #0]
 8018b46:	68fa      	ldr	r2, [r7, #12]
 8018b48:	430a      	orrs	r2, r1
 8018b4a:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  tmp = (hltdc->Init.TotalWidth << 16U);
 8018b4c:	687b      	ldr	r3, [r7, #4]
 8018b4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8018b50:	041b      	lsls	r3, r3, #16
 8018b52:	60fb      	str	r3, [r7, #12]
  WRITE_REG(hltdc->Instance->TWCR, (tmp | hltdc->Init.TotalHeigh));
 8018b54:	687b      	ldr	r3, [r7, #4]
 8018b56:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8018b58:	687b      	ldr	r3, [r7, #4]
 8018b5a:	681b      	ldr	r3, [r3, #0]
 8018b5c:	68fa      	ldr	r2, [r7, #12]
 8018b5e:	430a      	orrs	r2, r1
 8018b60:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8018b62:	687b      	ldr	r3, [r7, #4]
 8018b64:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8018b68:	021b      	lsls	r3, r3, #8
 8018b6a:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8018b6c:	687b      	ldr	r3, [r7, #4]
 8018b6e:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8018b72:	041b      	lsls	r3, r3, #16
 8018b74:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8018b76:	687b      	ldr	r3, [r7, #4]
 8018b78:	681b      	ldr	r3, [r3, #0]
 8018b7a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8018b7c:	687b      	ldr	r3, [r7, #4]
 8018b7e:	681b      	ldr	r3, [r3, #0]
 8018b80:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 8018b84:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8018b86:	687b      	ldr	r3, [r7, #4]
 8018b88:	681b      	ldr	r3, [r3, #0]
 8018b8a:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8018b8c:	68ba      	ldr	r2, [r7, #8]
 8018b8e:	68fb      	ldr	r3, [r7, #12]
 8018b90:	4313      	orrs	r3, r2
 8018b92:	687a      	ldr	r2, [r7, #4]
 8018b94:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 8018b98:	431a      	orrs	r2, r3
 8018b9a:	687b      	ldr	r3, [r7, #4]
 8018b9c:	681b      	ldr	r3, [r3, #0]
 8018b9e:	430a      	orrs	r2, r1
 8018ba0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8018ba2:	687b      	ldr	r3, [r7, #4]
 8018ba4:	681b      	ldr	r3, [r3, #0]
 8018ba6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8018ba8:	687b      	ldr	r3, [r7, #4]
 8018baa:	681b      	ldr	r3, [r3, #0]
 8018bac:	f042 0206 	orr.w	r2, r2, #6
 8018bb0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8018bb2:	687b      	ldr	r3, [r7, #4]
 8018bb4:	681b      	ldr	r3, [r3, #0]
 8018bb6:	699a      	ldr	r2, [r3, #24]
 8018bb8:	687b      	ldr	r3, [r7, #4]
 8018bba:	681b      	ldr	r3, [r3, #0]
 8018bbc:	f042 0201 	orr.w	r2, r2, #1
 8018bc0:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8018bc2:	687b      	ldr	r3, [r7, #4]
 8018bc4:	2200      	movs	r2, #0
 8018bc6:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8018bca:	687b      	ldr	r3, [r7, #4]
 8018bcc:	2201      	movs	r2, #1
 8018bce:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
 8018bd2:	2300      	movs	r3, #0
}
 8018bd4:	4618      	mov	r0, r3
 8018bd6:	3710      	adds	r7, #16
 8018bd8:	46bd      	mov	sp, r7
 8018bda:	bd80      	pop	{r7, pc}

08018bdc <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8018bdc:	b580      	push	{r7, lr}
 8018bde:	b084      	sub	sp, #16
 8018be0:	af00      	add	r7, sp, #0
 8018be2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8018be4:	687b      	ldr	r3, [r7, #4]
 8018be6:	681b      	ldr	r3, [r3, #0]
 8018be8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8018bea:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8018bec:	687b      	ldr	r3, [r7, #4]
 8018bee:	681b      	ldr	r3, [r3, #0]
 8018bf0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8018bf2:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8018bf4:	68fb      	ldr	r3, [r7, #12]
 8018bf6:	f003 0304 	and.w	r3, r3, #4
 8018bfa:	2b00      	cmp	r3, #0
 8018bfc:	d023      	beq.n	8018c46 <HAL_LTDC_IRQHandler+0x6a>
 8018bfe:	68bb      	ldr	r3, [r7, #8]
 8018c00:	f003 0304 	and.w	r3, r3, #4
 8018c04:	2b00      	cmp	r3, #0
 8018c06:	d01e      	beq.n	8018c46 <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8018c08:	687b      	ldr	r3, [r7, #4]
 8018c0a:	681b      	ldr	r3, [r3, #0]
 8018c0c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8018c0e:	687b      	ldr	r3, [r7, #4]
 8018c10:	681b      	ldr	r3, [r3, #0]
 8018c12:	f022 0204 	bic.w	r2, r2, #4
 8018c16:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8018c18:	687b      	ldr	r3, [r7, #4]
 8018c1a:	681b      	ldr	r3, [r3, #0]
 8018c1c:	2204      	movs	r2, #4
 8018c1e:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8018c20:	687b      	ldr	r3, [r7, #4]
 8018c22:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8018c26:	f043 0201 	orr.w	r2, r3, #1
 8018c2a:	687b      	ldr	r3, [r7, #4]
 8018c2c:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8018c30:	687b      	ldr	r3, [r7, #4]
 8018c32:	2204      	movs	r2, #4
 8018c34:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8018c38:	687b      	ldr	r3, [r7, #4]
 8018c3a:	2200      	movs	r2, #0
 8018c3c:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8018c40:	6878      	ldr	r0, [r7, #4]
 8018c42:	f000 f86f 	bl	8018d24 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8018c46:	68fb      	ldr	r3, [r7, #12]
 8018c48:	f003 0302 	and.w	r3, r3, #2
 8018c4c:	2b00      	cmp	r3, #0
 8018c4e:	d023      	beq.n	8018c98 <HAL_LTDC_IRQHandler+0xbc>
 8018c50:	68bb      	ldr	r3, [r7, #8]
 8018c52:	f003 0302 	and.w	r3, r3, #2
 8018c56:	2b00      	cmp	r3, #0
 8018c58:	d01e      	beq.n	8018c98 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8018c5a:	687b      	ldr	r3, [r7, #4]
 8018c5c:	681b      	ldr	r3, [r3, #0]
 8018c5e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8018c60:	687b      	ldr	r3, [r7, #4]
 8018c62:	681b      	ldr	r3, [r3, #0]
 8018c64:	f022 0202 	bic.w	r2, r2, #2
 8018c68:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8018c6a:	687b      	ldr	r3, [r7, #4]
 8018c6c:	681b      	ldr	r3, [r3, #0]
 8018c6e:	2202      	movs	r2, #2
 8018c70:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8018c72:	687b      	ldr	r3, [r7, #4]
 8018c74:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8018c78:	f043 0202 	orr.w	r2, r3, #2
 8018c7c:	687b      	ldr	r3, [r7, #4]
 8018c7e:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8018c82:	687b      	ldr	r3, [r7, #4]
 8018c84:	2204      	movs	r2, #4
 8018c86:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8018c8a:	687b      	ldr	r3, [r7, #4]
 8018c8c:	2200      	movs	r2, #0
 8018c8e:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8018c92:	6878      	ldr	r0, [r7, #4]
 8018c94:	f000 f846 	bl	8018d24 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8018c98:	68fb      	ldr	r3, [r7, #12]
 8018c9a:	f003 0301 	and.w	r3, r3, #1
 8018c9e:	2b00      	cmp	r3, #0
 8018ca0:	d01b      	beq.n	8018cda <HAL_LTDC_IRQHandler+0xfe>
 8018ca2:	68bb      	ldr	r3, [r7, #8]
 8018ca4:	f003 0301 	and.w	r3, r3, #1
 8018ca8:	2b00      	cmp	r3, #0
 8018caa:	d016      	beq.n	8018cda <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8018cac:	687b      	ldr	r3, [r7, #4]
 8018cae:	681b      	ldr	r3, [r3, #0]
 8018cb0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8018cb2:	687b      	ldr	r3, [r7, #4]
 8018cb4:	681b      	ldr	r3, [r3, #0]
 8018cb6:	f022 0201 	bic.w	r2, r2, #1
 8018cba:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8018cbc:	687b      	ldr	r3, [r7, #4]
 8018cbe:	681b      	ldr	r3, [r3, #0]
 8018cc0:	2201      	movs	r2, #1
 8018cc2:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8018cc4:	687b      	ldr	r3, [r7, #4]
 8018cc6:	2201      	movs	r2, #1
 8018cc8:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8018ccc:	687b      	ldr	r3, [r7, #4]
 8018cce:	2200      	movs	r2, #0
 8018cd0:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8018cd4:	6878      	ldr	r0, [r7, #4]
 8018cd6:	f000 f82f 	bl	8018d38 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8018cda:	68fb      	ldr	r3, [r7, #12]
 8018cdc:	f003 0308 	and.w	r3, r3, #8
 8018ce0:	2b00      	cmp	r3, #0
 8018ce2:	d01b      	beq.n	8018d1c <HAL_LTDC_IRQHandler+0x140>
 8018ce4:	68bb      	ldr	r3, [r7, #8]
 8018ce6:	f003 0308 	and.w	r3, r3, #8
 8018cea:	2b00      	cmp	r3, #0
 8018cec:	d016      	beq.n	8018d1c <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8018cee:	687b      	ldr	r3, [r7, #4]
 8018cf0:	681b      	ldr	r3, [r3, #0]
 8018cf2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8018cf4:	687b      	ldr	r3, [r7, #4]
 8018cf6:	681b      	ldr	r3, [r3, #0]
 8018cf8:	f022 0208 	bic.w	r2, r2, #8
 8018cfc:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8018cfe:	687b      	ldr	r3, [r7, #4]
 8018d00:	681b      	ldr	r3, [r3, #0]
 8018d02:	2208      	movs	r2, #8
 8018d04:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8018d06:	687b      	ldr	r3, [r7, #4]
 8018d08:	2201      	movs	r2, #1
 8018d0a:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8018d0e:	687b      	ldr	r3, [r7, #4]
 8018d10:	2200      	movs	r2, #0
 8018d12:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 8018d16:	6878      	ldr	r0, [r7, #4]
 8018d18:	f000 f818 	bl	8018d4c <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8018d1c:	bf00      	nop
 8018d1e:	3710      	adds	r7, #16
 8018d20:	46bd      	mov	sp, r7
 8018d22:	bd80      	pop	{r7, pc}

08018d24 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8018d24:	b480      	push	{r7}
 8018d26:	b083      	sub	sp, #12
 8018d28:	af00      	add	r7, sp, #0
 8018d2a:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8018d2c:	bf00      	nop
 8018d2e:	370c      	adds	r7, #12
 8018d30:	46bd      	mov	sp, r7
 8018d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018d36:	4770      	bx	lr

08018d38 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8018d38:	b480      	push	{r7}
 8018d3a:	b083      	sub	sp, #12
 8018d3c:	af00      	add	r7, sp, #0
 8018d3e:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 8018d40:	bf00      	nop
 8018d42:	370c      	adds	r7, #12
 8018d44:	46bd      	mov	sp, r7
 8018d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018d4a:	4770      	bx	lr

08018d4c <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8018d4c:	b480      	push	{r7}
 8018d4e:	b083      	sub	sp, #12
 8018d50:	af00      	add	r7, sp, #0
 8018d52:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8018d54:	bf00      	nop
 8018d56:	370c      	adds	r7, #12
 8018d58:	46bd      	mov	sp, r7
 8018d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018d5e:	4770      	bx	lr

08018d60 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8018d60:	b5b0      	push	{r4, r5, r7, lr}
 8018d62:	b084      	sub	sp, #16
 8018d64:	af00      	add	r7, sp, #0
 8018d66:	60f8      	str	r0, [r7, #12]
 8018d68:	60b9      	str	r1, [r7, #8]
 8018d6a:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8018d6c:	68fb      	ldr	r3, [r7, #12]
 8018d6e:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 8018d72:	2b01      	cmp	r3, #1
 8018d74:	d101      	bne.n	8018d7a <HAL_LTDC_ConfigLayer+0x1a>
 8018d76:	2302      	movs	r3, #2
 8018d78:	e02c      	b.n	8018dd4 <HAL_LTDC_ConfigLayer+0x74>
 8018d7a:	68fb      	ldr	r3, [r7, #12]
 8018d7c:	2201      	movs	r2, #1
 8018d7e:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8018d82:	68fb      	ldr	r3, [r7, #12]
 8018d84:	2202      	movs	r2, #2
 8018d86:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8018d8a:	68fa      	ldr	r2, [r7, #12]
 8018d8c:	687b      	ldr	r3, [r7, #4]
 8018d8e:	2134      	movs	r1, #52	@ 0x34
 8018d90:	fb01 f303 	mul.w	r3, r1, r3
 8018d94:	4413      	add	r3, r2
 8018d96:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8018d9a:	68bb      	ldr	r3, [r7, #8]
 8018d9c:	4614      	mov	r4, r2
 8018d9e:	461d      	mov	r5, r3
 8018da0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8018da2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8018da4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8018da6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8018da8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8018daa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8018dac:	682b      	ldr	r3, [r5, #0]
 8018dae:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8018db0:	687a      	ldr	r2, [r7, #4]
 8018db2:	68b9      	ldr	r1, [r7, #8]
 8018db4:	68f8      	ldr	r0, [r7, #12]
 8018db6:	f000 f83b 	bl	8018e30 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8018dba:	68fb      	ldr	r3, [r7, #12]
 8018dbc:	681b      	ldr	r3, [r3, #0]
 8018dbe:	2201      	movs	r2, #1
 8018dc0:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8018dc2:	68fb      	ldr	r3, [r7, #12]
 8018dc4:	2201      	movs	r2, #1
 8018dc6:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8018dca:	68fb      	ldr	r3, [r7, #12]
 8018dcc:	2200      	movs	r2, #0
 8018dce:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 8018dd2:	2300      	movs	r3, #0
}
 8018dd4:	4618      	mov	r0, r3
 8018dd6:	3710      	adds	r7, #16
 8018dd8:	46bd      	mov	sp, r7
 8018dda:	bdb0      	pop	{r4, r5, r7, pc}

08018ddc <HAL_LTDC_EnableDither>:
  *                the configuration information for the LTDC.
  * @retval  HAL status
  */

HAL_StatusTypeDef HAL_LTDC_EnableDither(LTDC_HandleTypeDef *hltdc)
{
 8018ddc:	b480      	push	{r7}
 8018dde:	b083      	sub	sp, #12
 8018de0:	af00      	add	r7, sp, #0
 8018de2:	6078      	str	r0, [r7, #4]
  /* Process locked */
  __HAL_LOCK(hltdc);
 8018de4:	687b      	ldr	r3, [r7, #4]
 8018de6:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 8018dea:	2b01      	cmp	r3, #1
 8018dec:	d101      	bne.n	8018df2 <HAL_LTDC_EnableDither+0x16>
 8018dee:	2302      	movs	r3, #2
 8018df0:	e016      	b.n	8018e20 <HAL_LTDC_EnableDither+0x44>
 8018df2:	687b      	ldr	r3, [r7, #4]
 8018df4:	2201      	movs	r2, #1
 8018df6:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8018dfa:	687b      	ldr	r3, [r7, #4]
 8018dfc:	2202      	movs	r2, #2
 8018dfe:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Enable Dither by setting DTEN bit */
  LTDC->GCR |= (uint32_t)LTDC_GCR_DEN;
 8018e02:	4b0a      	ldr	r3, [pc, #40]	@ (8018e2c <HAL_LTDC_EnableDither+0x50>)
 8018e04:	699b      	ldr	r3, [r3, #24]
 8018e06:	4a09      	ldr	r2, [pc, #36]	@ (8018e2c <HAL_LTDC_EnableDither+0x50>)
 8018e08:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8018e0c:	6193      	str	r3, [r2, #24]

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8018e0e:	687b      	ldr	r3, [r7, #4]
 8018e10:	2201      	movs	r2, #1
 8018e12:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8018e16:	687b      	ldr	r3, [r7, #4]
 8018e18:	2200      	movs	r2, #0
 8018e1a:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 8018e1e:	2300      	movs	r3, #0
}
 8018e20:	4618      	mov	r0, r3
 8018e22:	370c      	adds	r7, #12
 8018e24:	46bd      	mov	sp, r7
 8018e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018e2a:	4770      	bx	lr
 8018e2c:	40016800 	.word	0x40016800

08018e30 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8018e30:	b480      	push	{r7}
 8018e32:	b089      	sub	sp, #36	@ 0x24
 8018e34:	af00      	add	r7, sp, #0
 8018e36:	60f8      	str	r0, [r7, #12]
 8018e38:	60b9      	str	r1, [r7, #8]
 8018e3a:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8018e3c:	68bb      	ldr	r3, [r7, #8]
 8018e3e:	685a      	ldr	r2, [r3, #4]
 8018e40:	68fb      	ldr	r3, [r7, #12]
 8018e42:	681b      	ldr	r3, [r3, #0]
 8018e44:	68db      	ldr	r3, [r3, #12]
 8018e46:	0c1b      	lsrs	r3, r3, #16
 8018e48:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8018e4c:	4413      	add	r3, r2
 8018e4e:	041b      	lsls	r3, r3, #16
 8018e50:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8018e52:	68fb      	ldr	r3, [r7, #12]
 8018e54:	681b      	ldr	r3, [r3, #0]
 8018e56:	461a      	mov	r2, r3
 8018e58:	687b      	ldr	r3, [r7, #4]
 8018e5a:	01db      	lsls	r3, r3, #7
 8018e5c:	4413      	add	r3, r2
 8018e5e:	3384      	adds	r3, #132	@ 0x84
 8018e60:	685b      	ldr	r3, [r3, #4]
 8018e62:	68fa      	ldr	r2, [r7, #12]
 8018e64:	6812      	ldr	r2, [r2, #0]
 8018e66:	4611      	mov	r1, r2
 8018e68:	687a      	ldr	r2, [r7, #4]
 8018e6a:	01d2      	lsls	r2, r2, #7
 8018e6c:	440a      	add	r2, r1
 8018e6e:	3284      	adds	r2, #132	@ 0x84
 8018e70:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8018e74:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8018e76:	68bb      	ldr	r3, [r7, #8]
 8018e78:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8018e7a:	68fb      	ldr	r3, [r7, #12]
 8018e7c:	681b      	ldr	r3, [r3, #0]
 8018e7e:	68db      	ldr	r3, [r3, #12]
 8018e80:	0c1b      	lsrs	r3, r3, #16
 8018e82:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8018e86:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8018e88:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8018e8a:	68fb      	ldr	r3, [r7, #12]
 8018e8c:	681b      	ldr	r3, [r3, #0]
 8018e8e:	4619      	mov	r1, r3
 8018e90:	687b      	ldr	r3, [r7, #4]
 8018e92:	01db      	lsls	r3, r3, #7
 8018e94:	440b      	add	r3, r1
 8018e96:	3384      	adds	r3, #132	@ 0x84
 8018e98:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8018e9a:	69fb      	ldr	r3, [r7, #28]
 8018e9c:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8018e9e:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8018ea0:	68bb      	ldr	r3, [r7, #8]
 8018ea2:	68da      	ldr	r2, [r3, #12]
 8018ea4:	68fb      	ldr	r3, [r7, #12]
 8018ea6:	681b      	ldr	r3, [r3, #0]
 8018ea8:	68db      	ldr	r3, [r3, #12]
 8018eaa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8018eae:	4413      	add	r3, r2
 8018eb0:	041b      	lsls	r3, r3, #16
 8018eb2:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8018eb4:	68fb      	ldr	r3, [r7, #12]
 8018eb6:	681b      	ldr	r3, [r3, #0]
 8018eb8:	461a      	mov	r2, r3
 8018eba:	687b      	ldr	r3, [r7, #4]
 8018ebc:	01db      	lsls	r3, r3, #7
 8018ebe:	4413      	add	r3, r2
 8018ec0:	3384      	adds	r3, #132	@ 0x84
 8018ec2:	689b      	ldr	r3, [r3, #8]
 8018ec4:	68fa      	ldr	r2, [r7, #12]
 8018ec6:	6812      	ldr	r2, [r2, #0]
 8018ec8:	4611      	mov	r1, r2
 8018eca:	687a      	ldr	r2, [r7, #4]
 8018ecc:	01d2      	lsls	r2, r2, #7
 8018ece:	440a      	add	r2, r1
 8018ed0:	3284      	adds	r2, #132	@ 0x84
 8018ed2:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8018ed6:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8018ed8:	68bb      	ldr	r3, [r7, #8]
 8018eda:	689a      	ldr	r2, [r3, #8]
 8018edc:	68fb      	ldr	r3, [r7, #12]
 8018ede:	681b      	ldr	r3, [r3, #0]
 8018ee0:	68db      	ldr	r3, [r3, #12]
 8018ee2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8018ee6:	4413      	add	r3, r2
 8018ee8:	1c5a      	adds	r2, r3, #1
 8018eea:	68fb      	ldr	r3, [r7, #12]
 8018eec:	681b      	ldr	r3, [r3, #0]
 8018eee:	4619      	mov	r1, r3
 8018ef0:	687b      	ldr	r3, [r7, #4]
 8018ef2:	01db      	lsls	r3, r3, #7
 8018ef4:	440b      	add	r3, r1
 8018ef6:	3384      	adds	r3, #132	@ 0x84
 8018ef8:	4619      	mov	r1, r3
 8018efa:	69fb      	ldr	r3, [r7, #28]
 8018efc:	4313      	orrs	r3, r2
 8018efe:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8018f00:	68fb      	ldr	r3, [r7, #12]
 8018f02:	681b      	ldr	r3, [r3, #0]
 8018f04:	461a      	mov	r2, r3
 8018f06:	687b      	ldr	r3, [r7, #4]
 8018f08:	01db      	lsls	r3, r3, #7
 8018f0a:	4413      	add	r3, r2
 8018f0c:	3384      	adds	r3, #132	@ 0x84
 8018f0e:	691b      	ldr	r3, [r3, #16]
 8018f10:	68fa      	ldr	r2, [r7, #12]
 8018f12:	6812      	ldr	r2, [r2, #0]
 8018f14:	4611      	mov	r1, r2
 8018f16:	687a      	ldr	r2, [r7, #4]
 8018f18:	01d2      	lsls	r2, r2, #7
 8018f1a:	440a      	add	r2, r1
 8018f1c:	3284      	adds	r2, #132	@ 0x84
 8018f1e:	f023 0307 	bic.w	r3, r3, #7
 8018f22:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8018f24:	68fb      	ldr	r3, [r7, #12]
 8018f26:	681b      	ldr	r3, [r3, #0]
 8018f28:	461a      	mov	r2, r3
 8018f2a:	687b      	ldr	r3, [r7, #4]
 8018f2c:	01db      	lsls	r3, r3, #7
 8018f2e:	4413      	add	r3, r2
 8018f30:	3384      	adds	r3, #132	@ 0x84
 8018f32:	461a      	mov	r2, r3
 8018f34:	68bb      	ldr	r3, [r7, #8]
 8018f36:	691b      	ldr	r3, [r3, #16]
 8018f38:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8018f3a:	68bb      	ldr	r3, [r7, #8]
 8018f3c:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8018f40:	021b      	lsls	r3, r3, #8
 8018f42:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8018f44:	68bb      	ldr	r3, [r7, #8]
 8018f46:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8018f4a:	041b      	lsls	r3, r3, #16
 8018f4c:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8018f4e:	68bb      	ldr	r3, [r7, #8]
 8018f50:	699b      	ldr	r3, [r3, #24]
 8018f52:	061b      	lsls	r3, r3, #24
 8018f54:	617b      	str	r3, [r7, #20]
  WRITE_REG(LTDC_LAYER(hltdc, LayerIdx)->DCCR, (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2));
 8018f56:	68bb      	ldr	r3, [r7, #8]
 8018f58:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8018f5c:	461a      	mov	r2, r3
 8018f5e:	69fb      	ldr	r3, [r7, #28]
 8018f60:	431a      	orrs	r2, r3
 8018f62:	69bb      	ldr	r3, [r7, #24]
 8018f64:	431a      	orrs	r2, r3
 8018f66:	68fb      	ldr	r3, [r7, #12]
 8018f68:	681b      	ldr	r3, [r3, #0]
 8018f6a:	4619      	mov	r1, r3
 8018f6c:	687b      	ldr	r3, [r7, #4]
 8018f6e:	01db      	lsls	r3, r3, #7
 8018f70:	440b      	add	r3, r1
 8018f72:	3384      	adds	r3, #132	@ 0x84
 8018f74:	4619      	mov	r1, r3
 8018f76:	697b      	ldr	r3, [r7, #20]
 8018f78:	4313      	orrs	r3, r2
 8018f7a:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8018f7c:	68fb      	ldr	r3, [r7, #12]
 8018f7e:	681b      	ldr	r3, [r3, #0]
 8018f80:	461a      	mov	r2, r3
 8018f82:	687b      	ldr	r3, [r7, #4]
 8018f84:	01db      	lsls	r3, r3, #7
 8018f86:	4413      	add	r3, r2
 8018f88:	3384      	adds	r3, #132	@ 0x84
 8018f8a:	695b      	ldr	r3, [r3, #20]
 8018f8c:	68fa      	ldr	r2, [r7, #12]
 8018f8e:	6812      	ldr	r2, [r2, #0]
 8018f90:	4611      	mov	r1, r2
 8018f92:	687a      	ldr	r2, [r7, #4]
 8018f94:	01d2      	lsls	r2, r2, #7
 8018f96:	440a      	add	r2, r1
 8018f98:	3284      	adds	r2, #132	@ 0x84
 8018f9a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8018f9e:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8018fa0:	68fb      	ldr	r3, [r7, #12]
 8018fa2:	681b      	ldr	r3, [r3, #0]
 8018fa4:	461a      	mov	r2, r3
 8018fa6:	687b      	ldr	r3, [r7, #4]
 8018fa8:	01db      	lsls	r3, r3, #7
 8018faa:	4413      	add	r3, r2
 8018fac:	3384      	adds	r3, #132	@ 0x84
 8018fae:	461a      	mov	r2, r3
 8018fb0:	68bb      	ldr	r3, [r7, #8]
 8018fb2:	695b      	ldr	r3, [r3, #20]
 8018fb4:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8018fb6:	68fb      	ldr	r3, [r7, #12]
 8018fb8:	681b      	ldr	r3, [r3, #0]
 8018fba:	461a      	mov	r2, r3
 8018fbc:	687b      	ldr	r3, [r7, #4]
 8018fbe:	01db      	lsls	r3, r3, #7
 8018fc0:	4413      	add	r3, r2
 8018fc2:	3384      	adds	r3, #132	@ 0x84
 8018fc4:	69db      	ldr	r3, [r3, #28]
 8018fc6:	68fa      	ldr	r2, [r7, #12]
 8018fc8:	6812      	ldr	r2, [r2, #0]
 8018fca:	4611      	mov	r1, r2
 8018fcc:	687a      	ldr	r2, [r7, #4]
 8018fce:	01d2      	lsls	r2, r2, #7
 8018fd0:	440a      	add	r2, r1
 8018fd2:	3284      	adds	r2, #132	@ 0x84
 8018fd4:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8018fd8:	f023 0307 	bic.w	r3, r3, #7
 8018fdc:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8018fde:	68bb      	ldr	r3, [r7, #8]
 8018fe0:	69da      	ldr	r2, [r3, #28]
 8018fe2:	68bb      	ldr	r3, [r7, #8]
 8018fe4:	6a1b      	ldr	r3, [r3, #32]
 8018fe6:	68f9      	ldr	r1, [r7, #12]
 8018fe8:	6809      	ldr	r1, [r1, #0]
 8018fea:	4608      	mov	r0, r1
 8018fec:	6879      	ldr	r1, [r7, #4]
 8018fee:	01c9      	lsls	r1, r1, #7
 8018ff0:	4401      	add	r1, r0
 8018ff2:	3184      	adds	r1, #132	@ 0x84
 8018ff4:	4313      	orrs	r3, r2
 8018ff6:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  WRITE_REG(LTDC_LAYER(hltdc, LayerIdx)->CFBAR, pLayerCfg->FBStartAdress);
 8018ff8:	68fb      	ldr	r3, [r7, #12]
 8018ffa:	681b      	ldr	r3, [r3, #0]
 8018ffc:	461a      	mov	r2, r3
 8018ffe:	687b      	ldr	r3, [r7, #4]
 8019000:	01db      	lsls	r3, r3, #7
 8019002:	4413      	add	r3, r2
 8019004:	3384      	adds	r3, #132	@ 0x84
 8019006:	461a      	mov	r2, r3
 8019008:	68bb      	ldr	r3, [r7, #8]
 801900a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801900c:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 801900e:	68bb      	ldr	r3, [r7, #8]
 8019010:	691b      	ldr	r3, [r3, #16]
 8019012:	2b00      	cmp	r3, #0
 8019014:	d102      	bne.n	801901c <LTDC_SetConfig+0x1ec>
  {
    tmp = 4U;
 8019016:	2304      	movs	r3, #4
 8019018:	61fb      	str	r3, [r7, #28]
 801901a:	e01b      	b.n	8019054 <LTDC_SetConfig+0x224>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 801901c:	68bb      	ldr	r3, [r7, #8]
 801901e:	691b      	ldr	r3, [r3, #16]
 8019020:	2b01      	cmp	r3, #1
 8019022:	d102      	bne.n	801902a <LTDC_SetConfig+0x1fa>
  {
    tmp = 3U;
 8019024:	2303      	movs	r3, #3
 8019026:	61fb      	str	r3, [r7, #28]
 8019028:	e014      	b.n	8019054 <LTDC_SetConfig+0x224>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 801902a:	68bb      	ldr	r3, [r7, #8]
 801902c:	691b      	ldr	r3, [r3, #16]
 801902e:	2b04      	cmp	r3, #4
 8019030:	d00b      	beq.n	801904a <LTDC_SetConfig+0x21a>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8019032:	68bb      	ldr	r3, [r7, #8]
 8019034:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8019036:	2b02      	cmp	r3, #2
 8019038:	d007      	beq.n	801904a <LTDC_SetConfig+0x21a>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 801903a:	68bb      	ldr	r3, [r7, #8]
 801903c:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 801903e:	2b03      	cmp	r3, #3
 8019040:	d003      	beq.n	801904a <LTDC_SetConfig+0x21a>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8019042:	68bb      	ldr	r3, [r7, #8]
 8019044:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8019046:	2b07      	cmp	r3, #7
 8019048:	d102      	bne.n	8019050 <LTDC_SetConfig+0x220>
  {
    tmp = 2U;
 801904a:	2302      	movs	r3, #2
 801904c:	61fb      	str	r3, [r7, #28]
 801904e:	e001      	b.n	8019054 <LTDC_SetConfig+0x224>
  }
  else
  {
    tmp = 1U;
 8019050:	2301      	movs	r3, #1
 8019052:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8019054:	68fb      	ldr	r3, [r7, #12]
 8019056:	681b      	ldr	r3, [r3, #0]
 8019058:	461a      	mov	r2, r3
 801905a:	687b      	ldr	r3, [r7, #4]
 801905c:	01db      	lsls	r3, r3, #7
 801905e:	4413      	add	r3, r2
 8019060:	3384      	adds	r3, #132	@ 0x84
 8019062:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8019064:	68fa      	ldr	r2, [r7, #12]
 8019066:	6812      	ldr	r2, [r2, #0]
 8019068:	4611      	mov	r1, r2
 801906a:	687a      	ldr	r2, [r7, #4]
 801906c:	01d2      	lsls	r2, r2, #7
 801906e:	440a      	add	r2, r1
 8019070:	3284      	adds	r2, #132	@ 0x84
 8019072:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 8019076:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8019078:	68bb      	ldr	r3, [r7, #8]
 801907a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801907c:	69fa      	ldr	r2, [r7, #28]
 801907e:	fb02 f303 	mul.w	r3, r2, r3
 8019082:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8019084:	68bb      	ldr	r3, [r7, #8]
 8019086:	6859      	ldr	r1, [r3, #4]
 8019088:	68bb      	ldr	r3, [r7, #8]
 801908a:	681b      	ldr	r3, [r3, #0]
 801908c:	1acb      	subs	r3, r1, r3
 801908e:	69f9      	ldr	r1, [r7, #28]
 8019090:	fb01 f303 	mul.w	r3, r1, r3
 8019094:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8019096:	68f9      	ldr	r1, [r7, #12]
 8019098:	6809      	ldr	r1, [r1, #0]
 801909a:	4608      	mov	r0, r1
 801909c:	6879      	ldr	r1, [r7, #4]
 801909e:	01c9      	lsls	r1, r1, #7
 80190a0:	4401      	add	r1, r0
 80190a2:	3184      	adds	r1, #132	@ 0x84
 80190a4:	4313      	orrs	r3, r2
 80190a6:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 80190a8:	68fb      	ldr	r3, [r7, #12]
 80190aa:	681b      	ldr	r3, [r3, #0]
 80190ac:	461a      	mov	r2, r3
 80190ae:	687b      	ldr	r3, [r7, #4]
 80190b0:	01db      	lsls	r3, r3, #7
 80190b2:	4413      	add	r3, r2
 80190b4:	3384      	adds	r3, #132	@ 0x84
 80190b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80190b8:	68fa      	ldr	r2, [r7, #12]
 80190ba:	6812      	ldr	r2, [r2, #0]
 80190bc:	4611      	mov	r1, r2
 80190be:	687a      	ldr	r2, [r7, #4]
 80190c0:	01d2      	lsls	r2, r2, #7
 80190c2:	440a      	add	r2, r1
 80190c4:	3284      	adds	r2, #132	@ 0x84
 80190c6:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80190ca:	f023 0307 	bic.w	r3, r3, #7
 80190ce:	6313      	str	r3, [r2, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 80190d0:	68fb      	ldr	r3, [r7, #12]
 80190d2:	681b      	ldr	r3, [r3, #0]
 80190d4:	461a      	mov	r2, r3
 80190d6:	687b      	ldr	r3, [r7, #4]
 80190d8:	01db      	lsls	r3, r3, #7
 80190da:	4413      	add	r3, r2
 80190dc:	3384      	adds	r3, #132	@ 0x84
 80190de:	461a      	mov	r2, r3
 80190e0:	68bb      	ldr	r3, [r7, #8]
 80190e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80190e4:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 80190e6:	68fb      	ldr	r3, [r7, #12]
 80190e8:	681b      	ldr	r3, [r3, #0]
 80190ea:	461a      	mov	r2, r3
 80190ec:	687b      	ldr	r3, [r7, #4]
 80190ee:	01db      	lsls	r3, r3, #7
 80190f0:	4413      	add	r3, r2
 80190f2:	3384      	adds	r3, #132	@ 0x84
 80190f4:	681b      	ldr	r3, [r3, #0]
 80190f6:	68fa      	ldr	r2, [r7, #12]
 80190f8:	6812      	ldr	r2, [r2, #0]
 80190fa:	4611      	mov	r1, r2
 80190fc:	687a      	ldr	r2, [r7, #4]
 80190fe:	01d2      	lsls	r2, r2, #7
 8019100:	440a      	add	r2, r1
 8019102:	3284      	adds	r2, #132	@ 0x84
 8019104:	f043 0301 	orr.w	r3, r3, #1
 8019108:	6013      	str	r3, [r2, #0]
}
 801910a:	bf00      	nop
 801910c:	3724      	adds	r7, #36	@ 0x24
 801910e:	46bd      	mov	sp, r7
 8019110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019114:	4770      	bx	lr
	...

08019118 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8019118:	b580      	push	{r7, lr}
 801911a:	b086      	sub	sp, #24
 801911c:	af00      	add	r7, sp, #0
 801911e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8019120:	687b      	ldr	r3, [r7, #4]
 8019122:	2b00      	cmp	r3, #0
 8019124:	d101      	bne.n	801912a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8019126:	2301      	movs	r3, #1
 8019128:	e267      	b.n	80195fa <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 801912a:	687b      	ldr	r3, [r7, #4]
 801912c:	681b      	ldr	r3, [r3, #0]
 801912e:	f003 0301 	and.w	r3, r3, #1
 8019132:	2b00      	cmp	r3, #0
 8019134:	d075      	beq.n	8019222 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8019136:	4b88      	ldr	r3, [pc, #544]	@ (8019358 <HAL_RCC_OscConfig+0x240>)
 8019138:	689b      	ldr	r3, [r3, #8]
 801913a:	f003 030c 	and.w	r3, r3, #12
 801913e:	2b04      	cmp	r3, #4
 8019140:	d00c      	beq.n	801915c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8019142:	4b85      	ldr	r3, [pc, #532]	@ (8019358 <HAL_RCC_OscConfig+0x240>)
 8019144:	689b      	ldr	r3, [r3, #8]
 8019146:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 801914a:	2b08      	cmp	r3, #8
 801914c:	d112      	bne.n	8019174 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 801914e:	4b82      	ldr	r3, [pc, #520]	@ (8019358 <HAL_RCC_OscConfig+0x240>)
 8019150:	685b      	ldr	r3, [r3, #4]
 8019152:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8019156:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 801915a:	d10b      	bne.n	8019174 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 801915c:	4b7e      	ldr	r3, [pc, #504]	@ (8019358 <HAL_RCC_OscConfig+0x240>)
 801915e:	681b      	ldr	r3, [r3, #0]
 8019160:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8019164:	2b00      	cmp	r3, #0
 8019166:	d05b      	beq.n	8019220 <HAL_RCC_OscConfig+0x108>
 8019168:	687b      	ldr	r3, [r7, #4]
 801916a:	685b      	ldr	r3, [r3, #4]
 801916c:	2b00      	cmp	r3, #0
 801916e:	d157      	bne.n	8019220 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8019170:	2301      	movs	r3, #1
 8019172:	e242      	b.n	80195fa <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8019174:	687b      	ldr	r3, [r7, #4]
 8019176:	685b      	ldr	r3, [r3, #4]
 8019178:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801917c:	d106      	bne.n	801918c <HAL_RCC_OscConfig+0x74>
 801917e:	4b76      	ldr	r3, [pc, #472]	@ (8019358 <HAL_RCC_OscConfig+0x240>)
 8019180:	681b      	ldr	r3, [r3, #0]
 8019182:	4a75      	ldr	r2, [pc, #468]	@ (8019358 <HAL_RCC_OscConfig+0x240>)
 8019184:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8019188:	6013      	str	r3, [r2, #0]
 801918a:	e01d      	b.n	80191c8 <HAL_RCC_OscConfig+0xb0>
 801918c:	687b      	ldr	r3, [r7, #4]
 801918e:	685b      	ldr	r3, [r3, #4]
 8019190:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8019194:	d10c      	bne.n	80191b0 <HAL_RCC_OscConfig+0x98>
 8019196:	4b70      	ldr	r3, [pc, #448]	@ (8019358 <HAL_RCC_OscConfig+0x240>)
 8019198:	681b      	ldr	r3, [r3, #0]
 801919a:	4a6f      	ldr	r2, [pc, #444]	@ (8019358 <HAL_RCC_OscConfig+0x240>)
 801919c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80191a0:	6013      	str	r3, [r2, #0]
 80191a2:	4b6d      	ldr	r3, [pc, #436]	@ (8019358 <HAL_RCC_OscConfig+0x240>)
 80191a4:	681b      	ldr	r3, [r3, #0]
 80191a6:	4a6c      	ldr	r2, [pc, #432]	@ (8019358 <HAL_RCC_OscConfig+0x240>)
 80191a8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80191ac:	6013      	str	r3, [r2, #0]
 80191ae:	e00b      	b.n	80191c8 <HAL_RCC_OscConfig+0xb0>
 80191b0:	4b69      	ldr	r3, [pc, #420]	@ (8019358 <HAL_RCC_OscConfig+0x240>)
 80191b2:	681b      	ldr	r3, [r3, #0]
 80191b4:	4a68      	ldr	r2, [pc, #416]	@ (8019358 <HAL_RCC_OscConfig+0x240>)
 80191b6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80191ba:	6013      	str	r3, [r2, #0]
 80191bc:	4b66      	ldr	r3, [pc, #408]	@ (8019358 <HAL_RCC_OscConfig+0x240>)
 80191be:	681b      	ldr	r3, [r3, #0]
 80191c0:	4a65      	ldr	r2, [pc, #404]	@ (8019358 <HAL_RCC_OscConfig+0x240>)
 80191c2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80191c6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80191c8:	687b      	ldr	r3, [r7, #4]
 80191ca:	685b      	ldr	r3, [r3, #4]
 80191cc:	2b00      	cmp	r3, #0
 80191ce:	d013      	beq.n	80191f8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80191d0:	f7fb fc00 	bl	80149d4 <HAL_GetTick>
 80191d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80191d6:	e008      	b.n	80191ea <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80191d8:	f7fb fbfc 	bl	80149d4 <HAL_GetTick>
 80191dc:	4602      	mov	r2, r0
 80191de:	693b      	ldr	r3, [r7, #16]
 80191e0:	1ad3      	subs	r3, r2, r3
 80191e2:	2b64      	cmp	r3, #100	@ 0x64
 80191e4:	d901      	bls.n	80191ea <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80191e6:	2303      	movs	r3, #3
 80191e8:	e207      	b.n	80195fa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80191ea:	4b5b      	ldr	r3, [pc, #364]	@ (8019358 <HAL_RCC_OscConfig+0x240>)
 80191ec:	681b      	ldr	r3, [r3, #0]
 80191ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80191f2:	2b00      	cmp	r3, #0
 80191f4:	d0f0      	beq.n	80191d8 <HAL_RCC_OscConfig+0xc0>
 80191f6:	e014      	b.n	8019222 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80191f8:	f7fb fbec 	bl	80149d4 <HAL_GetTick>
 80191fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80191fe:	e008      	b.n	8019212 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8019200:	f7fb fbe8 	bl	80149d4 <HAL_GetTick>
 8019204:	4602      	mov	r2, r0
 8019206:	693b      	ldr	r3, [r7, #16]
 8019208:	1ad3      	subs	r3, r2, r3
 801920a:	2b64      	cmp	r3, #100	@ 0x64
 801920c:	d901      	bls.n	8019212 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 801920e:	2303      	movs	r3, #3
 8019210:	e1f3      	b.n	80195fa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8019212:	4b51      	ldr	r3, [pc, #324]	@ (8019358 <HAL_RCC_OscConfig+0x240>)
 8019214:	681b      	ldr	r3, [r3, #0]
 8019216:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 801921a:	2b00      	cmp	r3, #0
 801921c:	d1f0      	bne.n	8019200 <HAL_RCC_OscConfig+0xe8>
 801921e:	e000      	b.n	8019222 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8019220:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8019222:	687b      	ldr	r3, [r7, #4]
 8019224:	681b      	ldr	r3, [r3, #0]
 8019226:	f003 0302 	and.w	r3, r3, #2
 801922a:	2b00      	cmp	r3, #0
 801922c:	d063      	beq.n	80192f6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 801922e:	4b4a      	ldr	r3, [pc, #296]	@ (8019358 <HAL_RCC_OscConfig+0x240>)
 8019230:	689b      	ldr	r3, [r3, #8]
 8019232:	f003 030c 	and.w	r3, r3, #12
 8019236:	2b00      	cmp	r3, #0
 8019238:	d00b      	beq.n	8019252 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 801923a:	4b47      	ldr	r3, [pc, #284]	@ (8019358 <HAL_RCC_OscConfig+0x240>)
 801923c:	689b      	ldr	r3, [r3, #8]
 801923e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8019242:	2b08      	cmp	r3, #8
 8019244:	d11c      	bne.n	8019280 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8019246:	4b44      	ldr	r3, [pc, #272]	@ (8019358 <HAL_RCC_OscConfig+0x240>)
 8019248:	685b      	ldr	r3, [r3, #4]
 801924a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 801924e:	2b00      	cmp	r3, #0
 8019250:	d116      	bne.n	8019280 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8019252:	4b41      	ldr	r3, [pc, #260]	@ (8019358 <HAL_RCC_OscConfig+0x240>)
 8019254:	681b      	ldr	r3, [r3, #0]
 8019256:	f003 0302 	and.w	r3, r3, #2
 801925a:	2b00      	cmp	r3, #0
 801925c:	d005      	beq.n	801926a <HAL_RCC_OscConfig+0x152>
 801925e:	687b      	ldr	r3, [r7, #4]
 8019260:	68db      	ldr	r3, [r3, #12]
 8019262:	2b01      	cmp	r3, #1
 8019264:	d001      	beq.n	801926a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8019266:	2301      	movs	r3, #1
 8019268:	e1c7      	b.n	80195fa <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801926a:	4b3b      	ldr	r3, [pc, #236]	@ (8019358 <HAL_RCC_OscConfig+0x240>)
 801926c:	681b      	ldr	r3, [r3, #0]
 801926e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8019272:	687b      	ldr	r3, [r7, #4]
 8019274:	691b      	ldr	r3, [r3, #16]
 8019276:	00db      	lsls	r3, r3, #3
 8019278:	4937      	ldr	r1, [pc, #220]	@ (8019358 <HAL_RCC_OscConfig+0x240>)
 801927a:	4313      	orrs	r3, r2
 801927c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 801927e:	e03a      	b.n	80192f6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8019280:	687b      	ldr	r3, [r7, #4]
 8019282:	68db      	ldr	r3, [r3, #12]
 8019284:	2b00      	cmp	r3, #0
 8019286:	d020      	beq.n	80192ca <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8019288:	4b34      	ldr	r3, [pc, #208]	@ (801935c <HAL_RCC_OscConfig+0x244>)
 801928a:	2201      	movs	r2, #1
 801928c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801928e:	f7fb fba1 	bl	80149d4 <HAL_GetTick>
 8019292:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8019294:	e008      	b.n	80192a8 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8019296:	f7fb fb9d 	bl	80149d4 <HAL_GetTick>
 801929a:	4602      	mov	r2, r0
 801929c:	693b      	ldr	r3, [r7, #16]
 801929e:	1ad3      	subs	r3, r2, r3
 80192a0:	2b02      	cmp	r3, #2
 80192a2:	d901      	bls.n	80192a8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80192a4:	2303      	movs	r3, #3
 80192a6:	e1a8      	b.n	80195fa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80192a8:	4b2b      	ldr	r3, [pc, #172]	@ (8019358 <HAL_RCC_OscConfig+0x240>)
 80192aa:	681b      	ldr	r3, [r3, #0]
 80192ac:	f003 0302 	and.w	r3, r3, #2
 80192b0:	2b00      	cmp	r3, #0
 80192b2:	d0f0      	beq.n	8019296 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80192b4:	4b28      	ldr	r3, [pc, #160]	@ (8019358 <HAL_RCC_OscConfig+0x240>)
 80192b6:	681b      	ldr	r3, [r3, #0]
 80192b8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80192bc:	687b      	ldr	r3, [r7, #4]
 80192be:	691b      	ldr	r3, [r3, #16]
 80192c0:	00db      	lsls	r3, r3, #3
 80192c2:	4925      	ldr	r1, [pc, #148]	@ (8019358 <HAL_RCC_OscConfig+0x240>)
 80192c4:	4313      	orrs	r3, r2
 80192c6:	600b      	str	r3, [r1, #0]
 80192c8:	e015      	b.n	80192f6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80192ca:	4b24      	ldr	r3, [pc, #144]	@ (801935c <HAL_RCC_OscConfig+0x244>)
 80192cc:	2200      	movs	r2, #0
 80192ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80192d0:	f7fb fb80 	bl	80149d4 <HAL_GetTick>
 80192d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80192d6:	e008      	b.n	80192ea <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80192d8:	f7fb fb7c 	bl	80149d4 <HAL_GetTick>
 80192dc:	4602      	mov	r2, r0
 80192de:	693b      	ldr	r3, [r7, #16]
 80192e0:	1ad3      	subs	r3, r2, r3
 80192e2:	2b02      	cmp	r3, #2
 80192e4:	d901      	bls.n	80192ea <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80192e6:	2303      	movs	r3, #3
 80192e8:	e187      	b.n	80195fa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80192ea:	4b1b      	ldr	r3, [pc, #108]	@ (8019358 <HAL_RCC_OscConfig+0x240>)
 80192ec:	681b      	ldr	r3, [r3, #0]
 80192ee:	f003 0302 	and.w	r3, r3, #2
 80192f2:	2b00      	cmp	r3, #0
 80192f4:	d1f0      	bne.n	80192d8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80192f6:	687b      	ldr	r3, [r7, #4]
 80192f8:	681b      	ldr	r3, [r3, #0]
 80192fa:	f003 0308 	and.w	r3, r3, #8
 80192fe:	2b00      	cmp	r3, #0
 8019300:	d036      	beq.n	8019370 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8019302:	687b      	ldr	r3, [r7, #4]
 8019304:	695b      	ldr	r3, [r3, #20]
 8019306:	2b00      	cmp	r3, #0
 8019308:	d016      	beq.n	8019338 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 801930a:	4b15      	ldr	r3, [pc, #84]	@ (8019360 <HAL_RCC_OscConfig+0x248>)
 801930c:	2201      	movs	r2, #1
 801930e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8019310:	f7fb fb60 	bl	80149d4 <HAL_GetTick>
 8019314:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8019316:	e008      	b.n	801932a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8019318:	f7fb fb5c 	bl	80149d4 <HAL_GetTick>
 801931c:	4602      	mov	r2, r0
 801931e:	693b      	ldr	r3, [r7, #16]
 8019320:	1ad3      	subs	r3, r2, r3
 8019322:	2b02      	cmp	r3, #2
 8019324:	d901      	bls.n	801932a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8019326:	2303      	movs	r3, #3
 8019328:	e167      	b.n	80195fa <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 801932a:	4b0b      	ldr	r3, [pc, #44]	@ (8019358 <HAL_RCC_OscConfig+0x240>)
 801932c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801932e:	f003 0302 	and.w	r3, r3, #2
 8019332:	2b00      	cmp	r3, #0
 8019334:	d0f0      	beq.n	8019318 <HAL_RCC_OscConfig+0x200>
 8019336:	e01b      	b.n	8019370 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8019338:	4b09      	ldr	r3, [pc, #36]	@ (8019360 <HAL_RCC_OscConfig+0x248>)
 801933a:	2200      	movs	r2, #0
 801933c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 801933e:	f7fb fb49 	bl	80149d4 <HAL_GetTick>
 8019342:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8019344:	e00e      	b.n	8019364 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8019346:	f7fb fb45 	bl	80149d4 <HAL_GetTick>
 801934a:	4602      	mov	r2, r0
 801934c:	693b      	ldr	r3, [r7, #16]
 801934e:	1ad3      	subs	r3, r2, r3
 8019350:	2b02      	cmp	r3, #2
 8019352:	d907      	bls.n	8019364 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8019354:	2303      	movs	r3, #3
 8019356:	e150      	b.n	80195fa <HAL_RCC_OscConfig+0x4e2>
 8019358:	40023800 	.word	0x40023800
 801935c:	42470000 	.word	0x42470000
 8019360:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8019364:	4b88      	ldr	r3, [pc, #544]	@ (8019588 <HAL_RCC_OscConfig+0x470>)
 8019366:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8019368:	f003 0302 	and.w	r3, r3, #2
 801936c:	2b00      	cmp	r3, #0
 801936e:	d1ea      	bne.n	8019346 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8019370:	687b      	ldr	r3, [r7, #4]
 8019372:	681b      	ldr	r3, [r3, #0]
 8019374:	f003 0304 	and.w	r3, r3, #4
 8019378:	2b00      	cmp	r3, #0
 801937a:	f000 8097 	beq.w	80194ac <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 801937e:	2300      	movs	r3, #0
 8019380:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8019382:	4b81      	ldr	r3, [pc, #516]	@ (8019588 <HAL_RCC_OscConfig+0x470>)
 8019384:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8019386:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 801938a:	2b00      	cmp	r3, #0
 801938c:	d10f      	bne.n	80193ae <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 801938e:	2300      	movs	r3, #0
 8019390:	60bb      	str	r3, [r7, #8]
 8019392:	4b7d      	ldr	r3, [pc, #500]	@ (8019588 <HAL_RCC_OscConfig+0x470>)
 8019394:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8019396:	4a7c      	ldr	r2, [pc, #496]	@ (8019588 <HAL_RCC_OscConfig+0x470>)
 8019398:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 801939c:	6413      	str	r3, [r2, #64]	@ 0x40
 801939e:	4b7a      	ldr	r3, [pc, #488]	@ (8019588 <HAL_RCC_OscConfig+0x470>)
 80193a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80193a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80193a6:	60bb      	str	r3, [r7, #8]
 80193a8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80193aa:	2301      	movs	r3, #1
 80193ac:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80193ae:	4b77      	ldr	r3, [pc, #476]	@ (801958c <HAL_RCC_OscConfig+0x474>)
 80193b0:	681b      	ldr	r3, [r3, #0]
 80193b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80193b6:	2b00      	cmp	r3, #0
 80193b8:	d118      	bne.n	80193ec <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80193ba:	4b74      	ldr	r3, [pc, #464]	@ (801958c <HAL_RCC_OscConfig+0x474>)
 80193bc:	681b      	ldr	r3, [r3, #0]
 80193be:	4a73      	ldr	r2, [pc, #460]	@ (801958c <HAL_RCC_OscConfig+0x474>)
 80193c0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80193c4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80193c6:	f7fb fb05 	bl	80149d4 <HAL_GetTick>
 80193ca:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80193cc:	e008      	b.n	80193e0 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80193ce:	f7fb fb01 	bl	80149d4 <HAL_GetTick>
 80193d2:	4602      	mov	r2, r0
 80193d4:	693b      	ldr	r3, [r7, #16]
 80193d6:	1ad3      	subs	r3, r2, r3
 80193d8:	2b02      	cmp	r3, #2
 80193da:	d901      	bls.n	80193e0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80193dc:	2303      	movs	r3, #3
 80193de:	e10c      	b.n	80195fa <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80193e0:	4b6a      	ldr	r3, [pc, #424]	@ (801958c <HAL_RCC_OscConfig+0x474>)
 80193e2:	681b      	ldr	r3, [r3, #0]
 80193e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80193e8:	2b00      	cmp	r3, #0
 80193ea:	d0f0      	beq.n	80193ce <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80193ec:	687b      	ldr	r3, [r7, #4]
 80193ee:	689b      	ldr	r3, [r3, #8]
 80193f0:	2b01      	cmp	r3, #1
 80193f2:	d106      	bne.n	8019402 <HAL_RCC_OscConfig+0x2ea>
 80193f4:	4b64      	ldr	r3, [pc, #400]	@ (8019588 <HAL_RCC_OscConfig+0x470>)
 80193f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80193f8:	4a63      	ldr	r2, [pc, #396]	@ (8019588 <HAL_RCC_OscConfig+0x470>)
 80193fa:	f043 0301 	orr.w	r3, r3, #1
 80193fe:	6713      	str	r3, [r2, #112]	@ 0x70
 8019400:	e01c      	b.n	801943c <HAL_RCC_OscConfig+0x324>
 8019402:	687b      	ldr	r3, [r7, #4]
 8019404:	689b      	ldr	r3, [r3, #8]
 8019406:	2b05      	cmp	r3, #5
 8019408:	d10c      	bne.n	8019424 <HAL_RCC_OscConfig+0x30c>
 801940a:	4b5f      	ldr	r3, [pc, #380]	@ (8019588 <HAL_RCC_OscConfig+0x470>)
 801940c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801940e:	4a5e      	ldr	r2, [pc, #376]	@ (8019588 <HAL_RCC_OscConfig+0x470>)
 8019410:	f043 0304 	orr.w	r3, r3, #4
 8019414:	6713      	str	r3, [r2, #112]	@ 0x70
 8019416:	4b5c      	ldr	r3, [pc, #368]	@ (8019588 <HAL_RCC_OscConfig+0x470>)
 8019418:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801941a:	4a5b      	ldr	r2, [pc, #364]	@ (8019588 <HAL_RCC_OscConfig+0x470>)
 801941c:	f043 0301 	orr.w	r3, r3, #1
 8019420:	6713      	str	r3, [r2, #112]	@ 0x70
 8019422:	e00b      	b.n	801943c <HAL_RCC_OscConfig+0x324>
 8019424:	4b58      	ldr	r3, [pc, #352]	@ (8019588 <HAL_RCC_OscConfig+0x470>)
 8019426:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8019428:	4a57      	ldr	r2, [pc, #348]	@ (8019588 <HAL_RCC_OscConfig+0x470>)
 801942a:	f023 0301 	bic.w	r3, r3, #1
 801942e:	6713      	str	r3, [r2, #112]	@ 0x70
 8019430:	4b55      	ldr	r3, [pc, #340]	@ (8019588 <HAL_RCC_OscConfig+0x470>)
 8019432:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8019434:	4a54      	ldr	r2, [pc, #336]	@ (8019588 <HAL_RCC_OscConfig+0x470>)
 8019436:	f023 0304 	bic.w	r3, r3, #4
 801943a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 801943c:	687b      	ldr	r3, [r7, #4]
 801943e:	689b      	ldr	r3, [r3, #8]
 8019440:	2b00      	cmp	r3, #0
 8019442:	d015      	beq.n	8019470 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8019444:	f7fb fac6 	bl	80149d4 <HAL_GetTick>
 8019448:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 801944a:	e00a      	b.n	8019462 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 801944c:	f7fb fac2 	bl	80149d4 <HAL_GetTick>
 8019450:	4602      	mov	r2, r0
 8019452:	693b      	ldr	r3, [r7, #16]
 8019454:	1ad3      	subs	r3, r2, r3
 8019456:	f241 3288 	movw	r2, #5000	@ 0x1388
 801945a:	4293      	cmp	r3, r2
 801945c:	d901      	bls.n	8019462 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 801945e:	2303      	movs	r3, #3
 8019460:	e0cb      	b.n	80195fa <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8019462:	4b49      	ldr	r3, [pc, #292]	@ (8019588 <HAL_RCC_OscConfig+0x470>)
 8019464:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8019466:	f003 0302 	and.w	r3, r3, #2
 801946a:	2b00      	cmp	r3, #0
 801946c:	d0ee      	beq.n	801944c <HAL_RCC_OscConfig+0x334>
 801946e:	e014      	b.n	801949a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8019470:	f7fb fab0 	bl	80149d4 <HAL_GetTick>
 8019474:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8019476:	e00a      	b.n	801948e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8019478:	f7fb faac 	bl	80149d4 <HAL_GetTick>
 801947c:	4602      	mov	r2, r0
 801947e:	693b      	ldr	r3, [r7, #16]
 8019480:	1ad3      	subs	r3, r2, r3
 8019482:	f241 3288 	movw	r2, #5000	@ 0x1388
 8019486:	4293      	cmp	r3, r2
 8019488:	d901      	bls.n	801948e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 801948a:	2303      	movs	r3, #3
 801948c:	e0b5      	b.n	80195fa <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 801948e:	4b3e      	ldr	r3, [pc, #248]	@ (8019588 <HAL_RCC_OscConfig+0x470>)
 8019490:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8019492:	f003 0302 	and.w	r3, r3, #2
 8019496:	2b00      	cmp	r3, #0
 8019498:	d1ee      	bne.n	8019478 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 801949a:	7dfb      	ldrb	r3, [r7, #23]
 801949c:	2b01      	cmp	r3, #1
 801949e:	d105      	bne.n	80194ac <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80194a0:	4b39      	ldr	r3, [pc, #228]	@ (8019588 <HAL_RCC_OscConfig+0x470>)
 80194a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80194a4:	4a38      	ldr	r2, [pc, #224]	@ (8019588 <HAL_RCC_OscConfig+0x470>)
 80194a6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80194aa:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80194ac:	687b      	ldr	r3, [r7, #4]
 80194ae:	699b      	ldr	r3, [r3, #24]
 80194b0:	2b00      	cmp	r3, #0
 80194b2:	f000 80a1 	beq.w	80195f8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80194b6:	4b34      	ldr	r3, [pc, #208]	@ (8019588 <HAL_RCC_OscConfig+0x470>)
 80194b8:	689b      	ldr	r3, [r3, #8]
 80194ba:	f003 030c 	and.w	r3, r3, #12
 80194be:	2b08      	cmp	r3, #8
 80194c0:	d05c      	beq.n	801957c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80194c2:	687b      	ldr	r3, [r7, #4]
 80194c4:	699b      	ldr	r3, [r3, #24]
 80194c6:	2b02      	cmp	r3, #2
 80194c8:	d141      	bne.n	801954e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80194ca:	4b31      	ldr	r3, [pc, #196]	@ (8019590 <HAL_RCC_OscConfig+0x478>)
 80194cc:	2200      	movs	r2, #0
 80194ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80194d0:	f7fb fa80 	bl	80149d4 <HAL_GetTick>
 80194d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80194d6:	e008      	b.n	80194ea <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80194d8:	f7fb fa7c 	bl	80149d4 <HAL_GetTick>
 80194dc:	4602      	mov	r2, r0
 80194de:	693b      	ldr	r3, [r7, #16]
 80194e0:	1ad3      	subs	r3, r2, r3
 80194e2:	2b02      	cmp	r3, #2
 80194e4:	d901      	bls.n	80194ea <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80194e6:	2303      	movs	r3, #3
 80194e8:	e087      	b.n	80195fa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80194ea:	4b27      	ldr	r3, [pc, #156]	@ (8019588 <HAL_RCC_OscConfig+0x470>)
 80194ec:	681b      	ldr	r3, [r3, #0]
 80194ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80194f2:	2b00      	cmp	r3, #0
 80194f4:	d1f0      	bne.n	80194d8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80194f6:	687b      	ldr	r3, [r7, #4]
 80194f8:	69da      	ldr	r2, [r3, #28]
 80194fa:	687b      	ldr	r3, [r7, #4]
 80194fc:	6a1b      	ldr	r3, [r3, #32]
 80194fe:	431a      	orrs	r2, r3
 8019500:	687b      	ldr	r3, [r7, #4]
 8019502:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8019504:	019b      	lsls	r3, r3, #6
 8019506:	431a      	orrs	r2, r3
 8019508:	687b      	ldr	r3, [r7, #4]
 801950a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801950c:	085b      	lsrs	r3, r3, #1
 801950e:	3b01      	subs	r3, #1
 8019510:	041b      	lsls	r3, r3, #16
 8019512:	431a      	orrs	r2, r3
 8019514:	687b      	ldr	r3, [r7, #4]
 8019516:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8019518:	061b      	lsls	r3, r3, #24
 801951a:	491b      	ldr	r1, [pc, #108]	@ (8019588 <HAL_RCC_OscConfig+0x470>)
 801951c:	4313      	orrs	r3, r2
 801951e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8019520:	4b1b      	ldr	r3, [pc, #108]	@ (8019590 <HAL_RCC_OscConfig+0x478>)
 8019522:	2201      	movs	r2, #1
 8019524:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8019526:	f7fb fa55 	bl	80149d4 <HAL_GetTick>
 801952a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 801952c:	e008      	b.n	8019540 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 801952e:	f7fb fa51 	bl	80149d4 <HAL_GetTick>
 8019532:	4602      	mov	r2, r0
 8019534:	693b      	ldr	r3, [r7, #16]
 8019536:	1ad3      	subs	r3, r2, r3
 8019538:	2b02      	cmp	r3, #2
 801953a:	d901      	bls.n	8019540 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 801953c:	2303      	movs	r3, #3
 801953e:	e05c      	b.n	80195fa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8019540:	4b11      	ldr	r3, [pc, #68]	@ (8019588 <HAL_RCC_OscConfig+0x470>)
 8019542:	681b      	ldr	r3, [r3, #0]
 8019544:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8019548:	2b00      	cmp	r3, #0
 801954a:	d0f0      	beq.n	801952e <HAL_RCC_OscConfig+0x416>
 801954c:	e054      	b.n	80195f8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 801954e:	4b10      	ldr	r3, [pc, #64]	@ (8019590 <HAL_RCC_OscConfig+0x478>)
 8019550:	2200      	movs	r2, #0
 8019552:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8019554:	f7fb fa3e 	bl	80149d4 <HAL_GetTick>
 8019558:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 801955a:	e008      	b.n	801956e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 801955c:	f7fb fa3a 	bl	80149d4 <HAL_GetTick>
 8019560:	4602      	mov	r2, r0
 8019562:	693b      	ldr	r3, [r7, #16]
 8019564:	1ad3      	subs	r3, r2, r3
 8019566:	2b02      	cmp	r3, #2
 8019568:	d901      	bls.n	801956e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 801956a:	2303      	movs	r3, #3
 801956c:	e045      	b.n	80195fa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 801956e:	4b06      	ldr	r3, [pc, #24]	@ (8019588 <HAL_RCC_OscConfig+0x470>)
 8019570:	681b      	ldr	r3, [r3, #0]
 8019572:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8019576:	2b00      	cmp	r3, #0
 8019578:	d1f0      	bne.n	801955c <HAL_RCC_OscConfig+0x444>
 801957a:	e03d      	b.n	80195f8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 801957c:	687b      	ldr	r3, [r7, #4]
 801957e:	699b      	ldr	r3, [r3, #24]
 8019580:	2b01      	cmp	r3, #1
 8019582:	d107      	bne.n	8019594 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8019584:	2301      	movs	r3, #1
 8019586:	e038      	b.n	80195fa <HAL_RCC_OscConfig+0x4e2>
 8019588:	40023800 	.word	0x40023800
 801958c:	40007000 	.word	0x40007000
 8019590:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8019594:	4b1b      	ldr	r3, [pc, #108]	@ (8019604 <HAL_RCC_OscConfig+0x4ec>)
 8019596:	685b      	ldr	r3, [r3, #4]
 8019598:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 801959a:	687b      	ldr	r3, [r7, #4]
 801959c:	699b      	ldr	r3, [r3, #24]
 801959e:	2b01      	cmp	r3, #1
 80195a0:	d028      	beq.n	80195f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80195a2:	68fb      	ldr	r3, [r7, #12]
 80195a4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80195a8:	687b      	ldr	r3, [r7, #4]
 80195aa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80195ac:	429a      	cmp	r2, r3
 80195ae:	d121      	bne.n	80195f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80195b0:	68fb      	ldr	r3, [r7, #12]
 80195b2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80195b6:	687b      	ldr	r3, [r7, #4]
 80195b8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80195ba:	429a      	cmp	r2, r3
 80195bc:	d11a      	bne.n	80195f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80195be:	68fa      	ldr	r2, [r7, #12]
 80195c0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80195c4:	4013      	ands	r3, r2
 80195c6:	687a      	ldr	r2, [r7, #4]
 80195c8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80195ca:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80195cc:	4293      	cmp	r3, r2
 80195ce:	d111      	bne.n	80195f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80195d0:	68fb      	ldr	r3, [r7, #12]
 80195d2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80195d6:	687b      	ldr	r3, [r7, #4]
 80195d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80195da:	085b      	lsrs	r3, r3, #1
 80195dc:	3b01      	subs	r3, #1
 80195de:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80195e0:	429a      	cmp	r2, r3
 80195e2:	d107      	bne.n	80195f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80195e4:	68fb      	ldr	r3, [r7, #12]
 80195e6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80195ea:	687b      	ldr	r3, [r7, #4]
 80195ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80195ee:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80195f0:	429a      	cmp	r2, r3
 80195f2:	d001      	beq.n	80195f8 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80195f4:	2301      	movs	r3, #1
 80195f6:	e000      	b.n	80195fa <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80195f8:	2300      	movs	r3, #0
}
 80195fa:	4618      	mov	r0, r3
 80195fc:	3718      	adds	r7, #24
 80195fe:	46bd      	mov	sp, r7
 8019600:	bd80      	pop	{r7, pc}
 8019602:	bf00      	nop
 8019604:	40023800 	.word	0x40023800

08019608 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8019608:	b580      	push	{r7, lr}
 801960a:	b084      	sub	sp, #16
 801960c:	af00      	add	r7, sp, #0
 801960e:	6078      	str	r0, [r7, #4]
 8019610:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8019612:	687b      	ldr	r3, [r7, #4]
 8019614:	2b00      	cmp	r3, #0
 8019616:	d101      	bne.n	801961c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8019618:	2301      	movs	r3, #1
 801961a:	e0cc      	b.n	80197b6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 801961c:	4b68      	ldr	r3, [pc, #416]	@ (80197c0 <HAL_RCC_ClockConfig+0x1b8>)
 801961e:	681b      	ldr	r3, [r3, #0]
 8019620:	f003 030f 	and.w	r3, r3, #15
 8019624:	683a      	ldr	r2, [r7, #0]
 8019626:	429a      	cmp	r2, r3
 8019628:	d90c      	bls.n	8019644 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801962a:	4b65      	ldr	r3, [pc, #404]	@ (80197c0 <HAL_RCC_ClockConfig+0x1b8>)
 801962c:	683a      	ldr	r2, [r7, #0]
 801962e:	b2d2      	uxtb	r2, r2
 8019630:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8019632:	4b63      	ldr	r3, [pc, #396]	@ (80197c0 <HAL_RCC_ClockConfig+0x1b8>)
 8019634:	681b      	ldr	r3, [r3, #0]
 8019636:	f003 030f 	and.w	r3, r3, #15
 801963a:	683a      	ldr	r2, [r7, #0]
 801963c:	429a      	cmp	r2, r3
 801963e:	d001      	beq.n	8019644 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8019640:	2301      	movs	r3, #1
 8019642:	e0b8      	b.n	80197b6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8019644:	687b      	ldr	r3, [r7, #4]
 8019646:	681b      	ldr	r3, [r3, #0]
 8019648:	f003 0302 	and.w	r3, r3, #2
 801964c:	2b00      	cmp	r3, #0
 801964e:	d020      	beq.n	8019692 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8019650:	687b      	ldr	r3, [r7, #4]
 8019652:	681b      	ldr	r3, [r3, #0]
 8019654:	f003 0304 	and.w	r3, r3, #4
 8019658:	2b00      	cmp	r3, #0
 801965a:	d005      	beq.n	8019668 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 801965c:	4b59      	ldr	r3, [pc, #356]	@ (80197c4 <HAL_RCC_ClockConfig+0x1bc>)
 801965e:	689b      	ldr	r3, [r3, #8]
 8019660:	4a58      	ldr	r2, [pc, #352]	@ (80197c4 <HAL_RCC_ClockConfig+0x1bc>)
 8019662:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8019666:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8019668:	687b      	ldr	r3, [r7, #4]
 801966a:	681b      	ldr	r3, [r3, #0]
 801966c:	f003 0308 	and.w	r3, r3, #8
 8019670:	2b00      	cmp	r3, #0
 8019672:	d005      	beq.n	8019680 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8019674:	4b53      	ldr	r3, [pc, #332]	@ (80197c4 <HAL_RCC_ClockConfig+0x1bc>)
 8019676:	689b      	ldr	r3, [r3, #8]
 8019678:	4a52      	ldr	r2, [pc, #328]	@ (80197c4 <HAL_RCC_ClockConfig+0x1bc>)
 801967a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 801967e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8019680:	4b50      	ldr	r3, [pc, #320]	@ (80197c4 <HAL_RCC_ClockConfig+0x1bc>)
 8019682:	689b      	ldr	r3, [r3, #8]
 8019684:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8019688:	687b      	ldr	r3, [r7, #4]
 801968a:	689b      	ldr	r3, [r3, #8]
 801968c:	494d      	ldr	r1, [pc, #308]	@ (80197c4 <HAL_RCC_ClockConfig+0x1bc>)
 801968e:	4313      	orrs	r3, r2
 8019690:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8019692:	687b      	ldr	r3, [r7, #4]
 8019694:	681b      	ldr	r3, [r3, #0]
 8019696:	f003 0301 	and.w	r3, r3, #1
 801969a:	2b00      	cmp	r3, #0
 801969c:	d044      	beq.n	8019728 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 801969e:	687b      	ldr	r3, [r7, #4]
 80196a0:	685b      	ldr	r3, [r3, #4]
 80196a2:	2b01      	cmp	r3, #1
 80196a4:	d107      	bne.n	80196b6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80196a6:	4b47      	ldr	r3, [pc, #284]	@ (80197c4 <HAL_RCC_ClockConfig+0x1bc>)
 80196a8:	681b      	ldr	r3, [r3, #0]
 80196aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80196ae:	2b00      	cmp	r3, #0
 80196b0:	d119      	bne.n	80196e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80196b2:	2301      	movs	r3, #1
 80196b4:	e07f      	b.n	80197b6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80196b6:	687b      	ldr	r3, [r7, #4]
 80196b8:	685b      	ldr	r3, [r3, #4]
 80196ba:	2b02      	cmp	r3, #2
 80196bc:	d003      	beq.n	80196c6 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80196be:	687b      	ldr	r3, [r7, #4]
 80196c0:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80196c2:	2b03      	cmp	r3, #3
 80196c4:	d107      	bne.n	80196d6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80196c6:	4b3f      	ldr	r3, [pc, #252]	@ (80197c4 <HAL_RCC_ClockConfig+0x1bc>)
 80196c8:	681b      	ldr	r3, [r3, #0]
 80196ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80196ce:	2b00      	cmp	r3, #0
 80196d0:	d109      	bne.n	80196e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80196d2:	2301      	movs	r3, #1
 80196d4:	e06f      	b.n	80197b6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80196d6:	4b3b      	ldr	r3, [pc, #236]	@ (80197c4 <HAL_RCC_ClockConfig+0x1bc>)
 80196d8:	681b      	ldr	r3, [r3, #0]
 80196da:	f003 0302 	and.w	r3, r3, #2
 80196de:	2b00      	cmp	r3, #0
 80196e0:	d101      	bne.n	80196e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80196e2:	2301      	movs	r3, #1
 80196e4:	e067      	b.n	80197b6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80196e6:	4b37      	ldr	r3, [pc, #220]	@ (80197c4 <HAL_RCC_ClockConfig+0x1bc>)
 80196e8:	689b      	ldr	r3, [r3, #8]
 80196ea:	f023 0203 	bic.w	r2, r3, #3
 80196ee:	687b      	ldr	r3, [r7, #4]
 80196f0:	685b      	ldr	r3, [r3, #4]
 80196f2:	4934      	ldr	r1, [pc, #208]	@ (80197c4 <HAL_RCC_ClockConfig+0x1bc>)
 80196f4:	4313      	orrs	r3, r2
 80196f6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80196f8:	f7fb f96c 	bl	80149d4 <HAL_GetTick>
 80196fc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80196fe:	e00a      	b.n	8019716 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8019700:	f7fb f968 	bl	80149d4 <HAL_GetTick>
 8019704:	4602      	mov	r2, r0
 8019706:	68fb      	ldr	r3, [r7, #12]
 8019708:	1ad3      	subs	r3, r2, r3
 801970a:	f241 3288 	movw	r2, #5000	@ 0x1388
 801970e:	4293      	cmp	r3, r2
 8019710:	d901      	bls.n	8019716 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8019712:	2303      	movs	r3, #3
 8019714:	e04f      	b.n	80197b6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8019716:	4b2b      	ldr	r3, [pc, #172]	@ (80197c4 <HAL_RCC_ClockConfig+0x1bc>)
 8019718:	689b      	ldr	r3, [r3, #8]
 801971a:	f003 020c 	and.w	r2, r3, #12
 801971e:	687b      	ldr	r3, [r7, #4]
 8019720:	685b      	ldr	r3, [r3, #4]
 8019722:	009b      	lsls	r3, r3, #2
 8019724:	429a      	cmp	r2, r3
 8019726:	d1eb      	bne.n	8019700 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8019728:	4b25      	ldr	r3, [pc, #148]	@ (80197c0 <HAL_RCC_ClockConfig+0x1b8>)
 801972a:	681b      	ldr	r3, [r3, #0]
 801972c:	f003 030f 	and.w	r3, r3, #15
 8019730:	683a      	ldr	r2, [r7, #0]
 8019732:	429a      	cmp	r2, r3
 8019734:	d20c      	bcs.n	8019750 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8019736:	4b22      	ldr	r3, [pc, #136]	@ (80197c0 <HAL_RCC_ClockConfig+0x1b8>)
 8019738:	683a      	ldr	r2, [r7, #0]
 801973a:	b2d2      	uxtb	r2, r2
 801973c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 801973e:	4b20      	ldr	r3, [pc, #128]	@ (80197c0 <HAL_RCC_ClockConfig+0x1b8>)
 8019740:	681b      	ldr	r3, [r3, #0]
 8019742:	f003 030f 	and.w	r3, r3, #15
 8019746:	683a      	ldr	r2, [r7, #0]
 8019748:	429a      	cmp	r2, r3
 801974a:	d001      	beq.n	8019750 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 801974c:	2301      	movs	r3, #1
 801974e:	e032      	b.n	80197b6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8019750:	687b      	ldr	r3, [r7, #4]
 8019752:	681b      	ldr	r3, [r3, #0]
 8019754:	f003 0304 	and.w	r3, r3, #4
 8019758:	2b00      	cmp	r3, #0
 801975a:	d008      	beq.n	801976e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 801975c:	4b19      	ldr	r3, [pc, #100]	@ (80197c4 <HAL_RCC_ClockConfig+0x1bc>)
 801975e:	689b      	ldr	r3, [r3, #8]
 8019760:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8019764:	687b      	ldr	r3, [r7, #4]
 8019766:	68db      	ldr	r3, [r3, #12]
 8019768:	4916      	ldr	r1, [pc, #88]	@ (80197c4 <HAL_RCC_ClockConfig+0x1bc>)
 801976a:	4313      	orrs	r3, r2
 801976c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 801976e:	687b      	ldr	r3, [r7, #4]
 8019770:	681b      	ldr	r3, [r3, #0]
 8019772:	f003 0308 	and.w	r3, r3, #8
 8019776:	2b00      	cmp	r3, #0
 8019778:	d009      	beq.n	801978e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 801977a:	4b12      	ldr	r3, [pc, #72]	@ (80197c4 <HAL_RCC_ClockConfig+0x1bc>)
 801977c:	689b      	ldr	r3, [r3, #8]
 801977e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8019782:	687b      	ldr	r3, [r7, #4]
 8019784:	691b      	ldr	r3, [r3, #16]
 8019786:	00db      	lsls	r3, r3, #3
 8019788:	490e      	ldr	r1, [pc, #56]	@ (80197c4 <HAL_RCC_ClockConfig+0x1bc>)
 801978a:	4313      	orrs	r3, r2
 801978c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 801978e:	f000 f821 	bl	80197d4 <HAL_RCC_GetSysClockFreq>
 8019792:	4602      	mov	r2, r0
 8019794:	4b0b      	ldr	r3, [pc, #44]	@ (80197c4 <HAL_RCC_ClockConfig+0x1bc>)
 8019796:	689b      	ldr	r3, [r3, #8]
 8019798:	091b      	lsrs	r3, r3, #4
 801979a:	f003 030f 	and.w	r3, r3, #15
 801979e:	490a      	ldr	r1, [pc, #40]	@ (80197c8 <HAL_RCC_ClockConfig+0x1c0>)
 80197a0:	5ccb      	ldrb	r3, [r1, r3]
 80197a2:	fa22 f303 	lsr.w	r3, r2, r3
 80197a6:	4a09      	ldr	r2, [pc, #36]	@ (80197cc <HAL_RCC_ClockConfig+0x1c4>)
 80197a8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80197aa:	4b09      	ldr	r3, [pc, #36]	@ (80197d0 <HAL_RCC_ClockConfig+0x1c8>)
 80197ac:	681b      	ldr	r3, [r3, #0]
 80197ae:	4618      	mov	r0, r3
 80197b0:	f7f8 fdd8 	bl	8012364 <HAL_InitTick>

  return HAL_OK;
 80197b4:	2300      	movs	r3, #0
}
 80197b6:	4618      	mov	r0, r3
 80197b8:	3710      	adds	r7, #16
 80197ba:	46bd      	mov	sp, r7
 80197bc:	bd80      	pop	{r7, pc}
 80197be:	bf00      	nop
 80197c0:	40023c00 	.word	0x40023c00
 80197c4:	40023800 	.word	0x40023800
 80197c8:	080364d8 	.word	0x080364d8
 80197cc:	20000004 	.word	0x20000004
 80197d0:	20000084 	.word	0x20000084

080197d4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80197d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80197d8:	b094      	sub	sp, #80	@ 0x50
 80197da:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80197dc:	2300      	movs	r3, #0
 80197de:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80197e0:	2300      	movs	r3, #0
 80197e2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80197e4:	2300      	movs	r3, #0
 80197e6:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80197e8:	2300      	movs	r3, #0
 80197ea:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80197ec:	4b79      	ldr	r3, [pc, #484]	@ (80199d4 <HAL_RCC_GetSysClockFreq+0x200>)
 80197ee:	689b      	ldr	r3, [r3, #8]
 80197f0:	f003 030c 	and.w	r3, r3, #12
 80197f4:	2b08      	cmp	r3, #8
 80197f6:	d00d      	beq.n	8019814 <HAL_RCC_GetSysClockFreq+0x40>
 80197f8:	2b08      	cmp	r3, #8
 80197fa:	f200 80e1 	bhi.w	80199c0 <HAL_RCC_GetSysClockFreq+0x1ec>
 80197fe:	2b00      	cmp	r3, #0
 8019800:	d002      	beq.n	8019808 <HAL_RCC_GetSysClockFreq+0x34>
 8019802:	2b04      	cmp	r3, #4
 8019804:	d003      	beq.n	801980e <HAL_RCC_GetSysClockFreq+0x3a>
 8019806:	e0db      	b.n	80199c0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8019808:	4b73      	ldr	r3, [pc, #460]	@ (80199d8 <HAL_RCC_GetSysClockFreq+0x204>)
 801980a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 801980c:	e0db      	b.n	80199c6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 801980e:	4b73      	ldr	r3, [pc, #460]	@ (80199dc <HAL_RCC_GetSysClockFreq+0x208>)
 8019810:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8019812:	e0d8      	b.n	80199c6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8019814:	4b6f      	ldr	r3, [pc, #444]	@ (80199d4 <HAL_RCC_GetSysClockFreq+0x200>)
 8019816:	685b      	ldr	r3, [r3, #4]
 8019818:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801981c:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 801981e:	4b6d      	ldr	r3, [pc, #436]	@ (80199d4 <HAL_RCC_GetSysClockFreq+0x200>)
 8019820:	685b      	ldr	r3, [r3, #4]
 8019822:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8019826:	2b00      	cmp	r3, #0
 8019828:	d063      	beq.n	80198f2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 801982a:	4b6a      	ldr	r3, [pc, #424]	@ (80199d4 <HAL_RCC_GetSysClockFreq+0x200>)
 801982c:	685b      	ldr	r3, [r3, #4]
 801982e:	099b      	lsrs	r3, r3, #6
 8019830:	2200      	movs	r2, #0
 8019832:	63bb      	str	r3, [r7, #56]	@ 0x38
 8019834:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8019836:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019838:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801983c:	633b      	str	r3, [r7, #48]	@ 0x30
 801983e:	2300      	movs	r3, #0
 8019840:	637b      	str	r3, [r7, #52]	@ 0x34
 8019842:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8019846:	4622      	mov	r2, r4
 8019848:	462b      	mov	r3, r5
 801984a:	f04f 0000 	mov.w	r0, #0
 801984e:	f04f 0100 	mov.w	r1, #0
 8019852:	0159      	lsls	r1, r3, #5
 8019854:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8019858:	0150      	lsls	r0, r2, #5
 801985a:	4602      	mov	r2, r0
 801985c:	460b      	mov	r3, r1
 801985e:	4621      	mov	r1, r4
 8019860:	1a51      	subs	r1, r2, r1
 8019862:	6139      	str	r1, [r7, #16]
 8019864:	4629      	mov	r1, r5
 8019866:	eb63 0301 	sbc.w	r3, r3, r1
 801986a:	617b      	str	r3, [r7, #20]
 801986c:	f04f 0200 	mov.w	r2, #0
 8019870:	f04f 0300 	mov.w	r3, #0
 8019874:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8019878:	4659      	mov	r1, fp
 801987a:	018b      	lsls	r3, r1, #6
 801987c:	4651      	mov	r1, sl
 801987e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8019882:	4651      	mov	r1, sl
 8019884:	018a      	lsls	r2, r1, #6
 8019886:	4651      	mov	r1, sl
 8019888:	ebb2 0801 	subs.w	r8, r2, r1
 801988c:	4659      	mov	r1, fp
 801988e:	eb63 0901 	sbc.w	r9, r3, r1
 8019892:	f04f 0200 	mov.w	r2, #0
 8019896:	f04f 0300 	mov.w	r3, #0
 801989a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 801989e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80198a2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80198a6:	4690      	mov	r8, r2
 80198a8:	4699      	mov	r9, r3
 80198aa:	4623      	mov	r3, r4
 80198ac:	eb18 0303 	adds.w	r3, r8, r3
 80198b0:	60bb      	str	r3, [r7, #8]
 80198b2:	462b      	mov	r3, r5
 80198b4:	eb49 0303 	adc.w	r3, r9, r3
 80198b8:	60fb      	str	r3, [r7, #12]
 80198ba:	f04f 0200 	mov.w	r2, #0
 80198be:	f04f 0300 	mov.w	r3, #0
 80198c2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80198c6:	4629      	mov	r1, r5
 80198c8:	024b      	lsls	r3, r1, #9
 80198ca:	4621      	mov	r1, r4
 80198cc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80198d0:	4621      	mov	r1, r4
 80198d2:	024a      	lsls	r2, r1, #9
 80198d4:	4610      	mov	r0, r2
 80198d6:	4619      	mov	r1, r3
 80198d8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80198da:	2200      	movs	r2, #0
 80198dc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80198de:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80198e0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80198e4:	f7f7 f898 	bl	8010a18 <__aeabi_uldivmod>
 80198e8:	4602      	mov	r2, r0
 80198ea:	460b      	mov	r3, r1
 80198ec:	4613      	mov	r3, r2
 80198ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80198f0:	e058      	b.n	80199a4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80198f2:	4b38      	ldr	r3, [pc, #224]	@ (80199d4 <HAL_RCC_GetSysClockFreq+0x200>)
 80198f4:	685b      	ldr	r3, [r3, #4]
 80198f6:	099b      	lsrs	r3, r3, #6
 80198f8:	2200      	movs	r2, #0
 80198fa:	4618      	mov	r0, r3
 80198fc:	4611      	mov	r1, r2
 80198fe:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8019902:	623b      	str	r3, [r7, #32]
 8019904:	2300      	movs	r3, #0
 8019906:	627b      	str	r3, [r7, #36]	@ 0x24
 8019908:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 801990c:	4642      	mov	r2, r8
 801990e:	464b      	mov	r3, r9
 8019910:	f04f 0000 	mov.w	r0, #0
 8019914:	f04f 0100 	mov.w	r1, #0
 8019918:	0159      	lsls	r1, r3, #5
 801991a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 801991e:	0150      	lsls	r0, r2, #5
 8019920:	4602      	mov	r2, r0
 8019922:	460b      	mov	r3, r1
 8019924:	4641      	mov	r1, r8
 8019926:	ebb2 0a01 	subs.w	sl, r2, r1
 801992a:	4649      	mov	r1, r9
 801992c:	eb63 0b01 	sbc.w	fp, r3, r1
 8019930:	f04f 0200 	mov.w	r2, #0
 8019934:	f04f 0300 	mov.w	r3, #0
 8019938:	ea4f 138b 	mov.w	r3, fp, lsl #6
 801993c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8019940:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8019944:	ebb2 040a 	subs.w	r4, r2, sl
 8019948:	eb63 050b 	sbc.w	r5, r3, fp
 801994c:	f04f 0200 	mov.w	r2, #0
 8019950:	f04f 0300 	mov.w	r3, #0
 8019954:	00eb      	lsls	r3, r5, #3
 8019956:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 801995a:	00e2      	lsls	r2, r4, #3
 801995c:	4614      	mov	r4, r2
 801995e:	461d      	mov	r5, r3
 8019960:	4643      	mov	r3, r8
 8019962:	18e3      	adds	r3, r4, r3
 8019964:	603b      	str	r3, [r7, #0]
 8019966:	464b      	mov	r3, r9
 8019968:	eb45 0303 	adc.w	r3, r5, r3
 801996c:	607b      	str	r3, [r7, #4]
 801996e:	f04f 0200 	mov.w	r2, #0
 8019972:	f04f 0300 	mov.w	r3, #0
 8019976:	e9d7 4500 	ldrd	r4, r5, [r7]
 801997a:	4629      	mov	r1, r5
 801997c:	028b      	lsls	r3, r1, #10
 801997e:	4621      	mov	r1, r4
 8019980:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8019984:	4621      	mov	r1, r4
 8019986:	028a      	lsls	r2, r1, #10
 8019988:	4610      	mov	r0, r2
 801998a:	4619      	mov	r1, r3
 801998c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801998e:	2200      	movs	r2, #0
 8019990:	61bb      	str	r3, [r7, #24]
 8019992:	61fa      	str	r2, [r7, #28]
 8019994:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8019998:	f7f7 f83e 	bl	8010a18 <__aeabi_uldivmod>
 801999c:	4602      	mov	r2, r0
 801999e:	460b      	mov	r3, r1
 80199a0:	4613      	mov	r3, r2
 80199a2:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80199a4:	4b0b      	ldr	r3, [pc, #44]	@ (80199d4 <HAL_RCC_GetSysClockFreq+0x200>)
 80199a6:	685b      	ldr	r3, [r3, #4]
 80199a8:	0c1b      	lsrs	r3, r3, #16
 80199aa:	f003 0303 	and.w	r3, r3, #3
 80199ae:	3301      	adds	r3, #1
 80199b0:	005b      	lsls	r3, r3, #1
 80199b2:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80199b4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80199b6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80199b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80199bc:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80199be:	e002      	b.n	80199c6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80199c0:	4b05      	ldr	r3, [pc, #20]	@ (80199d8 <HAL_RCC_GetSysClockFreq+0x204>)
 80199c2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80199c4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80199c6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80199c8:	4618      	mov	r0, r3
 80199ca:	3750      	adds	r7, #80	@ 0x50
 80199cc:	46bd      	mov	sp, r7
 80199ce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80199d2:	bf00      	nop
 80199d4:	40023800 	.word	0x40023800
 80199d8:	00f42400 	.word	0x00f42400
 80199dc:	007a1200 	.word	0x007a1200

080199e0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80199e0:	b480      	push	{r7}
 80199e2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80199e4:	4b03      	ldr	r3, [pc, #12]	@ (80199f4 <HAL_RCC_GetHCLKFreq+0x14>)
 80199e6:	681b      	ldr	r3, [r3, #0]
}
 80199e8:	4618      	mov	r0, r3
 80199ea:	46bd      	mov	sp, r7
 80199ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80199f0:	4770      	bx	lr
 80199f2:	bf00      	nop
 80199f4:	20000004 	.word	0x20000004

080199f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80199f8:	b580      	push	{r7, lr}
 80199fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80199fc:	f7ff fff0 	bl	80199e0 <HAL_RCC_GetHCLKFreq>
 8019a00:	4602      	mov	r2, r0
 8019a02:	4b05      	ldr	r3, [pc, #20]	@ (8019a18 <HAL_RCC_GetPCLK1Freq+0x20>)
 8019a04:	689b      	ldr	r3, [r3, #8]
 8019a06:	0a9b      	lsrs	r3, r3, #10
 8019a08:	f003 0307 	and.w	r3, r3, #7
 8019a0c:	4903      	ldr	r1, [pc, #12]	@ (8019a1c <HAL_RCC_GetPCLK1Freq+0x24>)
 8019a0e:	5ccb      	ldrb	r3, [r1, r3]
 8019a10:	fa22 f303 	lsr.w	r3, r2, r3
}
 8019a14:	4618      	mov	r0, r3
 8019a16:	bd80      	pop	{r7, pc}
 8019a18:	40023800 	.word	0x40023800
 8019a1c:	080364e8 	.word	0x080364e8

08019a20 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8019a20:	b580      	push	{r7, lr}
 8019a22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8019a24:	f7ff ffdc 	bl	80199e0 <HAL_RCC_GetHCLKFreq>
 8019a28:	4602      	mov	r2, r0
 8019a2a:	4b05      	ldr	r3, [pc, #20]	@ (8019a40 <HAL_RCC_GetPCLK2Freq+0x20>)
 8019a2c:	689b      	ldr	r3, [r3, #8]
 8019a2e:	0b5b      	lsrs	r3, r3, #13
 8019a30:	f003 0307 	and.w	r3, r3, #7
 8019a34:	4903      	ldr	r1, [pc, #12]	@ (8019a44 <HAL_RCC_GetPCLK2Freq+0x24>)
 8019a36:	5ccb      	ldrb	r3, [r1, r3]
 8019a38:	fa22 f303 	lsr.w	r3, r2, r3
}
 8019a3c:	4618      	mov	r0, r3
 8019a3e:	bd80      	pop	{r7, pc}
 8019a40:	40023800 	.word	0x40023800
 8019a44:	080364e8 	.word	0x080364e8

08019a48 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8019a48:	b480      	push	{r7}
 8019a4a:	b083      	sub	sp, #12
 8019a4c:	af00      	add	r7, sp, #0
 8019a4e:	6078      	str	r0, [r7, #4]
 8019a50:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8019a52:	687b      	ldr	r3, [r7, #4]
 8019a54:	220f      	movs	r2, #15
 8019a56:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8019a58:	4b12      	ldr	r3, [pc, #72]	@ (8019aa4 <HAL_RCC_GetClockConfig+0x5c>)
 8019a5a:	689b      	ldr	r3, [r3, #8]
 8019a5c:	f003 0203 	and.w	r2, r3, #3
 8019a60:	687b      	ldr	r3, [r7, #4]
 8019a62:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8019a64:	4b0f      	ldr	r3, [pc, #60]	@ (8019aa4 <HAL_RCC_GetClockConfig+0x5c>)
 8019a66:	689b      	ldr	r3, [r3, #8]
 8019a68:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8019a6c:	687b      	ldr	r3, [r7, #4]
 8019a6e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8019a70:	4b0c      	ldr	r3, [pc, #48]	@ (8019aa4 <HAL_RCC_GetClockConfig+0x5c>)
 8019a72:	689b      	ldr	r3, [r3, #8]
 8019a74:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8019a78:	687b      	ldr	r3, [r7, #4]
 8019a7a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8019a7c:	4b09      	ldr	r3, [pc, #36]	@ (8019aa4 <HAL_RCC_GetClockConfig+0x5c>)
 8019a7e:	689b      	ldr	r3, [r3, #8]
 8019a80:	08db      	lsrs	r3, r3, #3
 8019a82:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8019a86:	687b      	ldr	r3, [r7, #4]
 8019a88:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8019a8a:	4b07      	ldr	r3, [pc, #28]	@ (8019aa8 <HAL_RCC_GetClockConfig+0x60>)
 8019a8c:	681b      	ldr	r3, [r3, #0]
 8019a8e:	f003 020f 	and.w	r2, r3, #15
 8019a92:	683b      	ldr	r3, [r7, #0]
 8019a94:	601a      	str	r2, [r3, #0]
}
 8019a96:	bf00      	nop
 8019a98:	370c      	adds	r7, #12
 8019a9a:	46bd      	mov	sp, r7
 8019a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019aa0:	4770      	bx	lr
 8019aa2:	bf00      	nop
 8019aa4:	40023800 	.word	0x40023800
 8019aa8:	40023c00 	.word	0x40023c00

08019aac <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8019aac:	b580      	push	{r7, lr}
 8019aae:	b086      	sub	sp, #24
 8019ab0:	af00      	add	r7, sp, #0
 8019ab2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8019ab4:	2300      	movs	r3, #0
 8019ab6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8019ab8:	2300      	movs	r3, #0
 8019aba:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8019abc:	687b      	ldr	r3, [r7, #4]
 8019abe:	681b      	ldr	r3, [r3, #0]
 8019ac0:	f003 0301 	and.w	r3, r3, #1
 8019ac4:	2b00      	cmp	r3, #0
 8019ac6:	d10b      	bne.n	8019ae0 <HAL_RCCEx_PeriphCLKConfig+0x34>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8019ac8:	687b      	ldr	r3, [r7, #4]
 8019aca:	681b      	ldr	r3, [r3, #0]
 8019acc:	f003 0302 	and.w	r3, r3, #2
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8019ad0:	2b00      	cmp	r3, #0
 8019ad2:	d105      	bne.n	8019ae0 <HAL_RCCEx_PeriphCLKConfig+0x34>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8019ad4:	687b      	ldr	r3, [r7, #4]
 8019ad6:	681b      	ldr	r3, [r3, #0]
 8019ad8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8019adc:	2b00      	cmp	r3, #0
 8019ade:	d075      	beq.n	8019bcc <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8019ae0:	4b91      	ldr	r3, [pc, #580]	@ (8019d28 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8019ae2:	2200      	movs	r2, #0
 8019ae4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8019ae6:	f7fa ff75 	bl	80149d4 <HAL_GetTick>
 8019aea:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8019aec:	e008      	b.n	8019b00 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8019aee:	f7fa ff71 	bl	80149d4 <HAL_GetTick>
 8019af2:	4602      	mov	r2, r0
 8019af4:	697b      	ldr	r3, [r7, #20]
 8019af6:	1ad3      	subs	r3, r2, r3
 8019af8:	2b02      	cmp	r3, #2
 8019afa:	d901      	bls.n	8019b00 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8019afc:	2303      	movs	r3, #3
 8019afe:	e189      	b.n	8019e14 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8019b00:	4b8a      	ldr	r3, [pc, #552]	@ (8019d2c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8019b02:	681b      	ldr	r3, [r3, #0]
 8019b04:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8019b08:	2b00      	cmp	r3, #0
 8019b0a:	d1f0      	bne.n	8019aee <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8019b0c:	687b      	ldr	r3, [r7, #4]
 8019b0e:	681b      	ldr	r3, [r3, #0]
 8019b10:	f003 0301 	and.w	r3, r3, #1
 8019b14:	2b00      	cmp	r3, #0
 8019b16:	d009      	beq.n	8019b2c <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8019b18:	687b      	ldr	r3, [r7, #4]
 8019b1a:	685b      	ldr	r3, [r3, #4]
 8019b1c:	019a      	lsls	r2, r3, #6
 8019b1e:	687b      	ldr	r3, [r7, #4]
 8019b20:	689b      	ldr	r3, [r3, #8]
 8019b22:	071b      	lsls	r3, r3, #28
 8019b24:	4981      	ldr	r1, [pc, #516]	@ (8019d2c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8019b26:	4313      	orrs	r3, r2
 8019b28:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8019b2c:	687b      	ldr	r3, [r7, #4]
 8019b2e:	681b      	ldr	r3, [r3, #0]
 8019b30:	f003 0302 	and.w	r3, r3, #2
 8019b34:	2b00      	cmp	r3, #0
 8019b36:	d01f      	beq.n	8019b78 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8019b38:	4b7c      	ldr	r3, [pc, #496]	@ (8019d2c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8019b3a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8019b3e:	0f1b      	lsrs	r3, r3, #28
 8019b40:	f003 0307 	and.w	r3, r3, #7
 8019b44:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8019b46:	687b      	ldr	r3, [r7, #4]
 8019b48:	685b      	ldr	r3, [r3, #4]
 8019b4a:	019a      	lsls	r2, r3, #6
 8019b4c:	687b      	ldr	r3, [r7, #4]
 8019b4e:	68db      	ldr	r3, [r3, #12]
 8019b50:	061b      	lsls	r3, r3, #24
 8019b52:	431a      	orrs	r2, r3
 8019b54:	693b      	ldr	r3, [r7, #16]
 8019b56:	071b      	lsls	r3, r3, #28
 8019b58:	4974      	ldr	r1, [pc, #464]	@ (8019d2c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8019b5a:	4313      	orrs	r3, r2
 8019b5c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8019b60:	4b72      	ldr	r3, [pc, #456]	@ (8019d2c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8019b62:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8019b66:	f023 021f 	bic.w	r2, r3, #31
 8019b6a:	687b      	ldr	r3, [r7, #4]
 8019b6c:	69db      	ldr	r3, [r3, #28]
 8019b6e:	3b01      	subs	r3, #1
 8019b70:	496e      	ldr	r1, [pc, #440]	@ (8019d2c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8019b72:	4313      	orrs	r3, r2
 8019b74:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8019b78:	687b      	ldr	r3, [r7, #4]
 8019b7a:	681b      	ldr	r3, [r3, #0]
 8019b7c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8019b80:	2b00      	cmp	r3, #0
 8019b82:	d00d      	beq.n	8019ba0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ,
 8019b84:	687b      	ldr	r3, [r7, #4]
 8019b86:	685b      	ldr	r3, [r3, #4]
 8019b88:	019a      	lsls	r2, r3, #6
 8019b8a:	687b      	ldr	r3, [r7, #4]
 8019b8c:	68db      	ldr	r3, [r3, #12]
 8019b8e:	061b      	lsls	r3, r3, #24
 8019b90:	431a      	orrs	r2, r3
 8019b92:	687b      	ldr	r3, [r7, #4]
 8019b94:	689b      	ldr	r3, [r3, #8]
 8019b96:	071b      	lsls	r3, r3, #28
 8019b98:	4964      	ldr	r1, [pc, #400]	@ (8019d2c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8019b9a:	4313      	orrs	r3, r2
 8019b9c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                                     PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8019ba0:	4b61      	ldr	r3, [pc, #388]	@ (8019d28 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8019ba2:	2201      	movs	r2, #1
 8019ba4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8019ba6:	f7fa ff15 	bl	80149d4 <HAL_GetTick>
 8019baa:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8019bac:	e008      	b.n	8019bc0 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8019bae:	f7fa ff11 	bl	80149d4 <HAL_GetTick>
 8019bb2:	4602      	mov	r2, r0
 8019bb4:	697b      	ldr	r3, [r7, #20]
 8019bb6:	1ad3      	subs	r3, r2, r3
 8019bb8:	2b02      	cmp	r3, #2
 8019bba:	d901      	bls.n	8019bc0 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8019bbc:	2303      	movs	r3, #3
 8019bbe:	e129      	b.n	8019e14 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8019bc0:	4b5a      	ldr	r3, [pc, #360]	@ (8019d2c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8019bc2:	681b      	ldr	r3, [r3, #0]
 8019bc4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8019bc8:	2b00      	cmp	r3, #0
 8019bca:	d0f0      	beq.n	8019bae <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8019bcc:	687b      	ldr	r3, [r7, #4]
 8019bce:	681b      	ldr	r3, [r3, #0]
 8019bd0:	f003 0304 	and.w	r3, r3, #4
 8019bd4:	2b00      	cmp	r3, #0
 8019bd6:	d105      	bne.n	8019be4 <HAL_RCCEx_PeriphCLKConfig+0x138>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8019bd8:	687b      	ldr	r3, [r7, #4]
 8019bda:	681b      	ldr	r3, [r3, #0]
 8019bdc:	f003 0308 	and.w	r3, r3, #8
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8019be0:	2b00      	cmp	r3, #0
 8019be2:	d079      	beq.n	8019cd8 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8019be4:	4b52      	ldr	r3, [pc, #328]	@ (8019d30 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8019be6:	2200      	movs	r2, #0
 8019be8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8019bea:	f7fa fef3 	bl	80149d4 <HAL_GetTick>
 8019bee:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8019bf0:	e008      	b.n	8019c04 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8019bf2:	f7fa feef 	bl	80149d4 <HAL_GetTick>
 8019bf6:	4602      	mov	r2, r0
 8019bf8:	697b      	ldr	r3, [r7, #20]
 8019bfa:	1ad3      	subs	r3, r2, r3
 8019bfc:	2b02      	cmp	r3, #2
 8019bfe:	d901      	bls.n	8019c04 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8019c00:	2303      	movs	r3, #3
 8019c02:	e107      	b.n	8019e14 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8019c04:	4b49      	ldr	r3, [pc, #292]	@ (8019d2c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8019c06:	681b      	ldr	r3, [r3, #0]
 8019c08:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8019c0c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8019c10:	d0ef      	beq.n	8019bf2 <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8019c12:	687b      	ldr	r3, [r7, #4]
 8019c14:	681b      	ldr	r3, [r3, #0]
 8019c16:	f003 0304 	and.w	r3, r3, #4
 8019c1a:	2b00      	cmp	r3, #0
 8019c1c:	d020      	beq.n	8019c60 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8019c1e:	4b43      	ldr	r3, [pc, #268]	@ (8019d2c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8019c20:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8019c24:	0f1b      	lsrs	r3, r3, #28
 8019c26:	f003 0307 	and.w	r3, r3, #7
 8019c2a:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8019c2c:	687b      	ldr	r3, [r7, #4]
 8019c2e:	691b      	ldr	r3, [r3, #16]
 8019c30:	019a      	lsls	r2, r3, #6
 8019c32:	687b      	ldr	r3, [r7, #4]
 8019c34:	695b      	ldr	r3, [r3, #20]
 8019c36:	061b      	lsls	r3, r3, #24
 8019c38:	431a      	orrs	r2, r3
 8019c3a:	693b      	ldr	r3, [r7, #16]
 8019c3c:	071b      	lsls	r3, r3, #28
 8019c3e:	493b      	ldr	r1, [pc, #236]	@ (8019d2c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8019c40:	4313      	orrs	r3, r2
 8019c42:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8019c46:	4b39      	ldr	r3, [pc, #228]	@ (8019d2c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8019c48:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8019c4c:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8019c50:	687b      	ldr	r3, [r7, #4]
 8019c52:	6a1b      	ldr	r3, [r3, #32]
 8019c54:	3b01      	subs	r3, #1
 8019c56:	021b      	lsls	r3, r3, #8
 8019c58:	4934      	ldr	r1, [pc, #208]	@ (8019d2c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8019c5a:	4313      	orrs	r3, r2
 8019c5c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8019c60:	687b      	ldr	r3, [r7, #4]
 8019c62:	681b      	ldr	r3, [r3, #0]
 8019c64:	f003 0308 	and.w	r3, r3, #8
 8019c68:	2b00      	cmp	r3, #0
 8019c6a:	d01e      	beq.n	8019caa <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8019c6c:	4b2f      	ldr	r3, [pc, #188]	@ (8019d2c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8019c6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8019c72:	0e1b      	lsrs	r3, r3, #24
 8019c74:	f003 030f 	and.w	r3, r3, #15
 8019c78:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8019c7a:	687b      	ldr	r3, [r7, #4]
 8019c7c:	691b      	ldr	r3, [r3, #16]
 8019c7e:	019a      	lsls	r2, r3, #6
 8019c80:	693b      	ldr	r3, [r7, #16]
 8019c82:	061b      	lsls	r3, r3, #24
 8019c84:	431a      	orrs	r2, r3
 8019c86:	687b      	ldr	r3, [r7, #4]
 8019c88:	699b      	ldr	r3, [r3, #24]
 8019c8a:	071b      	lsls	r3, r3, #28
 8019c8c:	4927      	ldr	r1, [pc, #156]	@ (8019d2c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8019c8e:	4313      	orrs	r3, r2
 8019c90:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8019c94:	4b25      	ldr	r3, [pc, #148]	@ (8019d2c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8019c96:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8019c9a:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8019c9e:	687b      	ldr	r3, [r7, #4]
 8019ca0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8019ca2:	4922      	ldr	r1, [pc, #136]	@ (8019d2c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8019ca4:	4313      	orrs	r3, r2
 8019ca6:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8019caa:	4b21      	ldr	r3, [pc, #132]	@ (8019d30 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8019cac:	2201      	movs	r2, #1
 8019cae:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8019cb0:	f7fa fe90 	bl	80149d4 <HAL_GetTick>
 8019cb4:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8019cb6:	e008      	b.n	8019cca <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8019cb8:	f7fa fe8c 	bl	80149d4 <HAL_GetTick>
 8019cbc:	4602      	mov	r2, r0
 8019cbe:	697b      	ldr	r3, [r7, #20]
 8019cc0:	1ad3      	subs	r3, r2, r3
 8019cc2:	2b02      	cmp	r3, #2
 8019cc4:	d901      	bls.n	8019cca <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8019cc6:	2303      	movs	r3, #3
 8019cc8:	e0a4      	b.n	8019e14 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8019cca:	4b18      	ldr	r3, [pc, #96]	@ (8019d2c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8019ccc:	681b      	ldr	r3, [r3, #0]
 8019cce:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8019cd2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8019cd6:	d1ef      	bne.n	8019cb8 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8019cd8:	687b      	ldr	r3, [r7, #4]
 8019cda:	681b      	ldr	r3, [r3, #0]
 8019cdc:	f003 0320 	and.w	r3, r3, #32
 8019ce0:	2b00      	cmp	r3, #0
 8019ce2:	f000 808b 	beq.w	8019dfc <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8019ce6:	2300      	movs	r3, #0
 8019ce8:	60fb      	str	r3, [r7, #12]
 8019cea:	4b10      	ldr	r3, [pc, #64]	@ (8019d2c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8019cec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8019cee:	4a0f      	ldr	r2, [pc, #60]	@ (8019d2c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8019cf0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8019cf4:	6413      	str	r3, [r2, #64]	@ 0x40
 8019cf6:	4b0d      	ldr	r3, [pc, #52]	@ (8019d2c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8019cf8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8019cfa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8019cfe:	60fb      	str	r3, [r7, #12]
 8019d00:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8019d02:	4b0c      	ldr	r3, [pc, #48]	@ (8019d34 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8019d04:	681b      	ldr	r3, [r3, #0]
 8019d06:	4a0b      	ldr	r2, [pc, #44]	@ (8019d34 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8019d08:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8019d0c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8019d0e:	f7fa fe61 	bl	80149d4 <HAL_GetTick>
 8019d12:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8019d14:	e010      	b.n	8019d38 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8019d16:	f7fa fe5d 	bl	80149d4 <HAL_GetTick>
 8019d1a:	4602      	mov	r2, r0
 8019d1c:	697b      	ldr	r3, [r7, #20]
 8019d1e:	1ad3      	subs	r3, r2, r3
 8019d20:	2b02      	cmp	r3, #2
 8019d22:	d909      	bls.n	8019d38 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 8019d24:	2303      	movs	r3, #3
 8019d26:	e075      	b.n	8019e14 <HAL_RCCEx_PeriphCLKConfig+0x368>
 8019d28:	42470068 	.word	0x42470068
 8019d2c:	40023800 	.word	0x40023800
 8019d30:	42470070 	.word	0x42470070
 8019d34:	40007000 	.word	0x40007000
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8019d38:	4b38      	ldr	r3, [pc, #224]	@ (8019e1c <HAL_RCCEx_PeriphCLKConfig+0x370>)
 8019d3a:	681b      	ldr	r3, [r3, #0]
 8019d3c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8019d40:	2b00      	cmp	r3, #0
 8019d42:	d0e8      	beq.n	8019d16 <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8019d44:	4b36      	ldr	r3, [pc, #216]	@ (8019e20 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8019d46:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8019d48:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8019d4c:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8019d4e:	693b      	ldr	r3, [r7, #16]
 8019d50:	2b00      	cmp	r3, #0
 8019d52:	d02f      	beq.n	8019db4 <HAL_RCCEx_PeriphCLKConfig+0x308>
 8019d54:	687b      	ldr	r3, [r7, #4]
 8019d56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8019d58:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8019d5c:	693a      	ldr	r2, [r7, #16]
 8019d5e:	429a      	cmp	r2, r3
 8019d60:	d028      	beq.n	8019db4 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8019d62:	4b2f      	ldr	r3, [pc, #188]	@ (8019e20 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8019d64:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8019d66:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8019d6a:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8019d6c:	4b2d      	ldr	r3, [pc, #180]	@ (8019e24 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8019d6e:	2201      	movs	r2, #1
 8019d70:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8019d72:	4b2c      	ldr	r3, [pc, #176]	@ (8019e24 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8019d74:	2200      	movs	r2, #0
 8019d76:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8019d78:	4a29      	ldr	r2, [pc, #164]	@ (8019e20 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8019d7a:	693b      	ldr	r3, [r7, #16]
 8019d7c:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8019d7e:	4b28      	ldr	r3, [pc, #160]	@ (8019e20 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8019d80:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8019d82:	f003 0301 	and.w	r3, r3, #1
 8019d86:	2b01      	cmp	r3, #1
 8019d88:	d114      	bne.n	8019db4 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8019d8a:	f7fa fe23 	bl	80149d4 <HAL_GetTick>
 8019d8e:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8019d90:	e00a      	b.n	8019da8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8019d92:	f7fa fe1f 	bl	80149d4 <HAL_GetTick>
 8019d96:	4602      	mov	r2, r0
 8019d98:	697b      	ldr	r3, [r7, #20]
 8019d9a:	1ad3      	subs	r3, r2, r3
 8019d9c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8019da0:	4293      	cmp	r3, r2
 8019da2:	d901      	bls.n	8019da8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 8019da4:	2303      	movs	r3, #3
 8019da6:	e035      	b.n	8019e14 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8019da8:	4b1d      	ldr	r3, [pc, #116]	@ (8019e20 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8019daa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8019dac:	f003 0302 	and.w	r3, r3, #2
 8019db0:	2b00      	cmp	r3, #0
 8019db2:	d0ee      	beq.n	8019d92 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8019db4:	687b      	ldr	r3, [r7, #4]
 8019db6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8019db8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8019dbc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8019dc0:	d10d      	bne.n	8019dde <HAL_RCCEx_PeriphCLKConfig+0x332>
 8019dc2:	4b17      	ldr	r3, [pc, #92]	@ (8019e20 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8019dc4:	689b      	ldr	r3, [r3, #8]
 8019dc6:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8019dca:	687b      	ldr	r3, [r7, #4]
 8019dcc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8019dce:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8019dd2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8019dd6:	4912      	ldr	r1, [pc, #72]	@ (8019e20 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8019dd8:	4313      	orrs	r3, r2
 8019dda:	608b      	str	r3, [r1, #8]
 8019ddc:	e005      	b.n	8019dea <HAL_RCCEx_PeriphCLKConfig+0x33e>
 8019dde:	4b10      	ldr	r3, [pc, #64]	@ (8019e20 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8019de0:	689b      	ldr	r3, [r3, #8]
 8019de2:	4a0f      	ldr	r2, [pc, #60]	@ (8019e20 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8019de4:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8019de8:	6093      	str	r3, [r2, #8]
 8019dea:	4b0d      	ldr	r3, [pc, #52]	@ (8019e20 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8019dec:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8019dee:	687b      	ldr	r3, [r7, #4]
 8019df0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8019df2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8019df6:	490a      	ldr	r1, [pc, #40]	@ (8019e20 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8019df8:	4313      	orrs	r3, r2
 8019dfa:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8019dfc:	687b      	ldr	r3, [r7, #4]
 8019dfe:	681b      	ldr	r3, [r3, #0]
 8019e00:	f003 0310 	and.w	r3, r3, #16
 8019e04:	2b00      	cmp	r3, #0
 8019e06:	d004      	beq.n	8019e12 <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8019e08:	687b      	ldr	r3, [r7, #4]
 8019e0a:	f893 202c 	ldrb.w	r2, [r3, #44]	@ 0x2c
 8019e0e:	4b06      	ldr	r3, [pc, #24]	@ (8019e28 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8019e10:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8019e12:	2300      	movs	r3, #0
}
 8019e14:	4618      	mov	r0, r3
 8019e16:	3718      	adds	r7, #24
 8019e18:	46bd      	mov	sp, r7
 8019e1a:	bd80      	pop	{r7, pc}
 8019e1c:	40007000 	.word	0x40007000
 8019e20:	40023800 	.word	0x40023800
 8019e24:	42470e40 	.word	0x42470e40
 8019e28:	424711e0 	.word	0x424711e0

08019e2c <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 8019e2c:	b580      	push	{r7, lr}
 8019e2e:	b082      	sub	sp, #8
 8019e30:	af00      	add	r7, sp, #0
 8019e32:	6078      	str	r0, [r7, #4]
 8019e34:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 8019e36:	687b      	ldr	r3, [r7, #4]
 8019e38:	2b00      	cmp	r3, #0
 8019e3a:	d101      	bne.n	8019e40 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8019e3c:	2301      	movs	r3, #1
 8019e3e:	e025      	b.n	8019e8c <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 8019e40:	687b      	ldr	r3, [r7, #4]
 8019e42:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8019e46:	b2db      	uxtb	r3, r3
 8019e48:	2b00      	cmp	r3, #0
 8019e4a:	d106      	bne.n	8019e5a <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8019e4c:	687b      	ldr	r3, [r7, #4]
 8019e4e:	2200      	movs	r2, #0
 8019e50:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8019e54:	6878      	ldr	r0, [r7, #4]
 8019e56:	f7f8 fa7b 	bl	8012350 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8019e5a:	687b      	ldr	r3, [r7, #4]
 8019e5c:	2202      	movs	r2, #2
 8019e5e:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8019e62:	687b      	ldr	r3, [r7, #4]
 8019e64:	681a      	ldr	r2, [r3, #0]
 8019e66:	687b      	ldr	r3, [r7, #4]
 8019e68:	3304      	adds	r3, #4
 8019e6a:	4619      	mov	r1, r3
 8019e6c:	4610      	mov	r0, r2
 8019e6e:	f001 fda9 	bl	801b9c4 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 8019e72:	687b      	ldr	r3, [r7, #4]
 8019e74:	6818      	ldr	r0, [r3, #0]
 8019e76:	687b      	ldr	r3, [r7, #4]
 8019e78:	685b      	ldr	r3, [r3, #4]
 8019e7a:	461a      	mov	r2, r3
 8019e7c:	6839      	ldr	r1, [r7, #0]
 8019e7e:	f001 fdfe 	bl	801ba7e <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8019e82:	687b      	ldr	r3, [r7, #4]
 8019e84:	2201      	movs	r2, #1
 8019e86:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 8019e8a:	2300      	movs	r3, #0
}
 8019e8c:	4618      	mov	r0, r3
 8019e8e:	3708      	adds	r7, #8
 8019e90:	46bd      	mov	sp, r7
 8019e92:	bd80      	pop	{r7, pc}

08019e94 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 8019e94:	b580      	push	{r7, lr}
 8019e96:	b086      	sub	sp, #24
 8019e98:	af00      	add	r7, sp, #0
 8019e9a:	60f8      	str	r0, [r7, #12]
 8019e9c:	60b9      	str	r1, [r7, #8]
 8019e9e:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 8019ea0:	68fb      	ldr	r3, [r7, #12]
 8019ea2:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8019ea6:	75fb      	strb	r3, [r7, #23]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 8019ea8:	7dfb      	ldrb	r3, [r7, #23]
 8019eaa:	2b02      	cmp	r3, #2
 8019eac:	d101      	bne.n	8019eb2 <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
 8019eae:	2302      	movs	r3, #2
 8019eb0:	e021      	b.n	8019ef6 <HAL_SDRAM_SendCommand+0x62>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 8019eb2:	7dfb      	ldrb	r3, [r7, #23]
 8019eb4:	2b01      	cmp	r3, #1
 8019eb6:	d002      	beq.n	8019ebe <HAL_SDRAM_SendCommand+0x2a>
 8019eb8:	7dfb      	ldrb	r3, [r7, #23]
 8019eba:	2b05      	cmp	r3, #5
 8019ebc:	d118      	bne.n	8019ef0 <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8019ebe:	68fb      	ldr	r3, [r7, #12]
 8019ec0:	2202      	movs	r2, #2
 8019ec2:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8019ec6:	68fb      	ldr	r3, [r7, #12]
 8019ec8:	681b      	ldr	r3, [r3, #0]
 8019eca:	687a      	ldr	r2, [r7, #4]
 8019ecc:	68b9      	ldr	r1, [r7, #8]
 8019ece:	4618      	mov	r0, r3
 8019ed0:	f001 fe3e 	bl	801bb50 <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8019ed4:	68bb      	ldr	r3, [r7, #8]
 8019ed6:	681b      	ldr	r3, [r3, #0]
 8019ed8:	2b02      	cmp	r3, #2
 8019eda:	d104      	bne.n	8019ee6 <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8019edc:	68fb      	ldr	r3, [r7, #12]
 8019ede:	2205      	movs	r2, #5
 8019ee0:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8019ee4:	e006      	b.n	8019ef4 <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 8019ee6:	68fb      	ldr	r3, [r7, #12]
 8019ee8:	2201      	movs	r2, #1
 8019eea:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8019eee:	e001      	b.n	8019ef4 <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
 8019ef0:	2301      	movs	r3, #1
 8019ef2:	e000      	b.n	8019ef6 <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
 8019ef4:	2300      	movs	r3, #0
}
 8019ef6:	4618      	mov	r0, r3
 8019ef8:	3718      	adds	r7, #24
 8019efa:	46bd      	mov	sp, r7
 8019efc:	bd80      	pop	{r7, pc}

08019efe <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 8019efe:	b580      	push	{r7, lr}
 8019f00:	b082      	sub	sp, #8
 8019f02:	af00      	add	r7, sp, #0
 8019f04:	6078      	str	r0, [r7, #4]
 8019f06:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 8019f08:	687b      	ldr	r3, [r7, #4]
 8019f0a:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8019f0e:	b2db      	uxtb	r3, r3
 8019f10:	2b02      	cmp	r3, #2
 8019f12:	d101      	bne.n	8019f18 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 8019f14:	2302      	movs	r3, #2
 8019f16:	e016      	b.n	8019f46 <HAL_SDRAM_ProgramRefreshRate+0x48>
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 8019f18:	687b      	ldr	r3, [r7, #4]
 8019f1a:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8019f1e:	b2db      	uxtb	r3, r3
 8019f20:	2b01      	cmp	r3, #1
 8019f22:	d10f      	bne.n	8019f44 <HAL_SDRAM_ProgramRefreshRate+0x46>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8019f24:	687b      	ldr	r3, [r7, #4]
 8019f26:	2202      	movs	r2, #2
 8019f28:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 8019f2c:	687b      	ldr	r3, [r7, #4]
 8019f2e:	681b      	ldr	r3, [r3, #0]
 8019f30:	6839      	ldr	r1, [r7, #0]
 8019f32:	4618      	mov	r0, r3
 8019f34:	f001 fe49 	bl	801bbca <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
 8019f38:	687b      	ldr	r3, [r7, #4]
 8019f3a:	2201      	movs	r2, #1
 8019f3c:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 8019f40:	2300      	movs	r3, #0
 8019f42:	e000      	b.n	8019f46 <HAL_SDRAM_ProgramRefreshRate+0x48>
    return HAL_ERROR;
 8019f44:	2301      	movs	r3, #1
}
 8019f46:	4618      	mov	r0, r3
 8019f48:	3708      	adds	r7, #8
 8019f4a:	46bd      	mov	sp, r7
 8019f4c:	bd80      	pop	{r7, pc}

08019f4e <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8019f4e:	b580      	push	{r7, lr}
 8019f50:	b082      	sub	sp, #8
 8019f52:	af00      	add	r7, sp, #0
 8019f54:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8019f56:	687b      	ldr	r3, [r7, #4]
 8019f58:	2b00      	cmp	r3, #0
 8019f5a:	d101      	bne.n	8019f60 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8019f5c:	2301      	movs	r3, #1
 8019f5e:	e07b      	b.n	801a058 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8019f60:	687b      	ldr	r3, [r7, #4]
 8019f62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8019f64:	2b00      	cmp	r3, #0
 8019f66:	d108      	bne.n	8019f7a <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8019f68:	687b      	ldr	r3, [r7, #4]
 8019f6a:	685b      	ldr	r3, [r3, #4]
 8019f6c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8019f70:	d009      	beq.n	8019f86 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8019f72:	687b      	ldr	r3, [r7, #4]
 8019f74:	2200      	movs	r2, #0
 8019f76:	61da      	str	r2, [r3, #28]
 8019f78:	e005      	b.n	8019f86 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8019f7a:	687b      	ldr	r3, [r7, #4]
 8019f7c:	2200      	movs	r2, #0
 8019f7e:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8019f80:	687b      	ldr	r3, [r7, #4]
 8019f82:	2200      	movs	r2, #0
 8019f84:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8019f86:	687b      	ldr	r3, [r7, #4]
 8019f88:	2200      	movs	r2, #0
 8019f8a:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8019f8c:	687b      	ldr	r3, [r7, #4]
 8019f8e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8019f92:	b2db      	uxtb	r3, r3
 8019f94:	2b00      	cmp	r3, #0
 8019f96:	d106      	bne.n	8019fa6 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8019f98:	687b      	ldr	r3, [r7, #4]
 8019f9a:	2200      	movs	r2, #0
 8019f9c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8019fa0:	6878      	ldr	r0, [r7, #4]
 8019fa2:	f7f8 f815 	bl	8011fd0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8019fa6:	687b      	ldr	r3, [r7, #4]
 8019fa8:	2202      	movs	r2, #2
 8019faa:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8019fae:	687b      	ldr	r3, [r7, #4]
 8019fb0:	681b      	ldr	r3, [r3, #0]
 8019fb2:	681a      	ldr	r2, [r3, #0]
 8019fb4:	687b      	ldr	r3, [r7, #4]
 8019fb6:	681b      	ldr	r3, [r3, #0]
 8019fb8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8019fbc:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8019fbe:	687b      	ldr	r3, [r7, #4]
 8019fc0:	685b      	ldr	r3, [r3, #4]
 8019fc2:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8019fc6:	687b      	ldr	r3, [r7, #4]
 8019fc8:	689b      	ldr	r3, [r3, #8]
 8019fca:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8019fce:	431a      	orrs	r2, r3
 8019fd0:	687b      	ldr	r3, [r7, #4]
 8019fd2:	68db      	ldr	r3, [r3, #12]
 8019fd4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8019fd8:	431a      	orrs	r2, r3
 8019fda:	687b      	ldr	r3, [r7, #4]
 8019fdc:	691b      	ldr	r3, [r3, #16]
 8019fde:	f003 0302 	and.w	r3, r3, #2
 8019fe2:	431a      	orrs	r2, r3
 8019fe4:	687b      	ldr	r3, [r7, #4]
 8019fe6:	695b      	ldr	r3, [r3, #20]
 8019fe8:	f003 0301 	and.w	r3, r3, #1
 8019fec:	431a      	orrs	r2, r3
 8019fee:	687b      	ldr	r3, [r7, #4]
 8019ff0:	699b      	ldr	r3, [r3, #24]
 8019ff2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8019ff6:	431a      	orrs	r2, r3
 8019ff8:	687b      	ldr	r3, [r7, #4]
 8019ffa:	69db      	ldr	r3, [r3, #28]
 8019ffc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 801a000:	431a      	orrs	r2, r3
 801a002:	687b      	ldr	r3, [r7, #4]
 801a004:	6a1b      	ldr	r3, [r3, #32]
 801a006:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801a00a:	ea42 0103 	orr.w	r1, r2, r3
 801a00e:	687b      	ldr	r3, [r7, #4]
 801a010:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801a012:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 801a016:	687b      	ldr	r3, [r7, #4]
 801a018:	681b      	ldr	r3, [r3, #0]
 801a01a:	430a      	orrs	r2, r1
 801a01c:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 801a01e:	687b      	ldr	r3, [r7, #4]
 801a020:	699b      	ldr	r3, [r3, #24]
 801a022:	0c1b      	lsrs	r3, r3, #16
 801a024:	f003 0104 	and.w	r1, r3, #4
 801a028:	687b      	ldr	r3, [r7, #4]
 801a02a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801a02c:	f003 0210 	and.w	r2, r3, #16
 801a030:	687b      	ldr	r3, [r7, #4]
 801a032:	681b      	ldr	r3, [r3, #0]
 801a034:	430a      	orrs	r2, r1
 801a036:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 801a038:	687b      	ldr	r3, [r7, #4]
 801a03a:	681b      	ldr	r3, [r3, #0]
 801a03c:	69da      	ldr	r2, [r3, #28]
 801a03e:	687b      	ldr	r3, [r7, #4]
 801a040:	681b      	ldr	r3, [r3, #0]
 801a042:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 801a046:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 801a048:	687b      	ldr	r3, [r7, #4]
 801a04a:	2200      	movs	r2, #0
 801a04c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 801a04e:	687b      	ldr	r3, [r7, #4]
 801a050:	2201      	movs	r2, #1
 801a052:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 801a056:	2300      	movs	r3, #0
}
 801a058:	4618      	mov	r0, r3
 801a05a:	3708      	adds	r7, #8
 801a05c:	46bd      	mov	sp, r7
 801a05e:	bd80      	pop	{r7, pc}

0801a060 <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 801a060:	b580      	push	{r7, lr}
 801a062:	b082      	sub	sp, #8
 801a064:	af00      	add	r7, sp, #0
 801a066:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 801a068:	687b      	ldr	r3, [r7, #4]
 801a06a:	2b00      	cmp	r3, #0
 801a06c:	d101      	bne.n	801a072 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 801a06e:	2301      	movs	r3, #1
 801a070:	e01a      	b.n	801a0a8 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 801a072:	687b      	ldr	r3, [r7, #4]
 801a074:	2202      	movs	r2, #2
 801a076:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 801a07a:	687b      	ldr	r3, [r7, #4]
 801a07c:	681b      	ldr	r3, [r3, #0]
 801a07e:	681a      	ldr	r2, [r3, #0]
 801a080:	687b      	ldr	r3, [r7, #4]
 801a082:	681b      	ldr	r3, [r3, #0]
 801a084:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 801a088:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 801a08a:	6878      	ldr	r0, [r7, #4]
 801a08c:	f7f7 ffe8 	bl	8012060 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 801a090:	687b      	ldr	r3, [r7, #4]
 801a092:	2200      	movs	r2, #0
 801a094:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 801a096:	687b      	ldr	r3, [r7, #4]
 801a098:	2200      	movs	r2, #0
 801a09a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 801a09e:	687b      	ldr	r3, [r7, #4]
 801a0a0:	2200      	movs	r2, #0
 801a0a2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 801a0a6:	2300      	movs	r3, #0
}
 801a0a8:	4618      	mov	r0, r3
 801a0aa:	3708      	adds	r7, #8
 801a0ac:	46bd      	mov	sp, r7
 801a0ae:	bd80      	pop	{r7, pc}

0801a0b0 <HAL_SPI_Transmit>:
  * @param  Size amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 801a0b0:	b580      	push	{r7, lr}
 801a0b2:	b088      	sub	sp, #32
 801a0b4:	af00      	add	r7, sp, #0
 801a0b6:	60f8      	str	r0, [r7, #12]
 801a0b8:	60b9      	str	r1, [r7, #8]
 801a0ba:	603b      	str	r3, [r7, #0]
 801a0bc:	4613      	mov	r3, r2
 801a0be:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 801a0c0:	f7fa fc88 	bl	80149d4 <HAL_GetTick>
 801a0c4:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 801a0c6:	88fb      	ldrh	r3, [r7, #6]
 801a0c8:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 801a0ca:	68fb      	ldr	r3, [r7, #12]
 801a0cc:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 801a0d0:	b2db      	uxtb	r3, r3
 801a0d2:	2b01      	cmp	r3, #1
 801a0d4:	d001      	beq.n	801a0da <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 801a0d6:	2302      	movs	r3, #2
 801a0d8:	e12a      	b.n	801a330 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 801a0da:	68bb      	ldr	r3, [r7, #8]
 801a0dc:	2b00      	cmp	r3, #0
 801a0de:	d002      	beq.n	801a0e6 <HAL_SPI_Transmit+0x36>
 801a0e0:	88fb      	ldrh	r3, [r7, #6]
 801a0e2:	2b00      	cmp	r3, #0
 801a0e4:	d101      	bne.n	801a0ea <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 801a0e6:	2301      	movs	r3, #1
 801a0e8:	e122      	b.n	801a330 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 801a0ea:	68fb      	ldr	r3, [r7, #12]
 801a0ec:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 801a0f0:	2b01      	cmp	r3, #1
 801a0f2:	d101      	bne.n	801a0f8 <HAL_SPI_Transmit+0x48>
 801a0f4:	2302      	movs	r3, #2
 801a0f6:	e11b      	b.n	801a330 <HAL_SPI_Transmit+0x280>
 801a0f8:	68fb      	ldr	r3, [r7, #12]
 801a0fa:	2201      	movs	r2, #1
 801a0fc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 801a100:	68fb      	ldr	r3, [r7, #12]
 801a102:	2203      	movs	r2, #3
 801a104:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 801a108:	68fb      	ldr	r3, [r7, #12]
 801a10a:	2200      	movs	r2, #0
 801a10c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 801a10e:	68fb      	ldr	r3, [r7, #12]
 801a110:	68ba      	ldr	r2, [r7, #8]
 801a112:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 801a114:	68fb      	ldr	r3, [r7, #12]
 801a116:	88fa      	ldrh	r2, [r7, #6]
 801a118:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 801a11a:	68fb      	ldr	r3, [r7, #12]
 801a11c:	88fa      	ldrh	r2, [r7, #6]
 801a11e:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 801a120:	68fb      	ldr	r3, [r7, #12]
 801a122:	2200      	movs	r2, #0
 801a124:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 801a126:	68fb      	ldr	r3, [r7, #12]
 801a128:	2200      	movs	r2, #0
 801a12a:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 801a12c:	68fb      	ldr	r3, [r7, #12]
 801a12e:	2200      	movs	r2, #0
 801a130:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 801a132:	68fb      	ldr	r3, [r7, #12]
 801a134:	2200      	movs	r2, #0
 801a136:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 801a138:	68fb      	ldr	r3, [r7, #12]
 801a13a:	2200      	movs	r2, #0
 801a13c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801a13e:	68fb      	ldr	r3, [r7, #12]
 801a140:	689b      	ldr	r3, [r3, #8]
 801a142:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 801a146:	d10f      	bne.n	801a168 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 801a148:	68fb      	ldr	r3, [r7, #12]
 801a14a:	681b      	ldr	r3, [r3, #0]
 801a14c:	681a      	ldr	r2, [r3, #0]
 801a14e:	68fb      	ldr	r3, [r7, #12]
 801a150:	681b      	ldr	r3, [r3, #0]
 801a152:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 801a156:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 801a158:	68fb      	ldr	r3, [r7, #12]
 801a15a:	681b      	ldr	r3, [r3, #0]
 801a15c:	681a      	ldr	r2, [r3, #0]
 801a15e:	68fb      	ldr	r3, [r7, #12]
 801a160:	681b      	ldr	r3, [r3, #0]
 801a162:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 801a166:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 801a168:	68fb      	ldr	r3, [r7, #12]
 801a16a:	681b      	ldr	r3, [r3, #0]
 801a16c:	681b      	ldr	r3, [r3, #0]
 801a16e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801a172:	2b40      	cmp	r3, #64	@ 0x40
 801a174:	d007      	beq.n	801a186 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 801a176:	68fb      	ldr	r3, [r7, #12]
 801a178:	681b      	ldr	r3, [r3, #0]
 801a17a:	681a      	ldr	r2, [r3, #0]
 801a17c:	68fb      	ldr	r3, [r7, #12]
 801a17e:	681b      	ldr	r3, [r3, #0]
 801a180:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 801a184:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 801a186:	68fb      	ldr	r3, [r7, #12]
 801a188:	68db      	ldr	r3, [r3, #12]
 801a18a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 801a18e:	d152      	bne.n	801a236 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 801a190:	68fb      	ldr	r3, [r7, #12]
 801a192:	685b      	ldr	r3, [r3, #4]
 801a194:	2b00      	cmp	r3, #0
 801a196:	d002      	beq.n	801a19e <HAL_SPI_Transmit+0xee>
 801a198:	8b7b      	ldrh	r3, [r7, #26]
 801a19a:	2b01      	cmp	r3, #1
 801a19c:	d145      	bne.n	801a22a <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 801a19e:	68fb      	ldr	r3, [r7, #12]
 801a1a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801a1a2:	881a      	ldrh	r2, [r3, #0]
 801a1a4:	68fb      	ldr	r3, [r7, #12]
 801a1a6:	681b      	ldr	r3, [r3, #0]
 801a1a8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 801a1aa:	68fb      	ldr	r3, [r7, #12]
 801a1ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801a1ae:	1c9a      	adds	r2, r3, #2
 801a1b0:	68fb      	ldr	r3, [r7, #12]
 801a1b2:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 801a1b4:	68fb      	ldr	r3, [r7, #12]
 801a1b6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 801a1b8:	b29b      	uxth	r3, r3
 801a1ba:	3b01      	subs	r3, #1
 801a1bc:	b29a      	uxth	r2, r3
 801a1be:	68fb      	ldr	r3, [r7, #12]
 801a1c0:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 801a1c2:	e032      	b.n	801a22a <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 801a1c4:	68fb      	ldr	r3, [r7, #12]
 801a1c6:	681b      	ldr	r3, [r3, #0]
 801a1c8:	689b      	ldr	r3, [r3, #8]
 801a1ca:	f003 0302 	and.w	r3, r3, #2
 801a1ce:	2b02      	cmp	r3, #2
 801a1d0:	d112      	bne.n	801a1f8 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 801a1d2:	68fb      	ldr	r3, [r7, #12]
 801a1d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801a1d6:	881a      	ldrh	r2, [r3, #0]
 801a1d8:	68fb      	ldr	r3, [r7, #12]
 801a1da:	681b      	ldr	r3, [r3, #0]
 801a1dc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 801a1de:	68fb      	ldr	r3, [r7, #12]
 801a1e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801a1e2:	1c9a      	adds	r2, r3, #2
 801a1e4:	68fb      	ldr	r3, [r7, #12]
 801a1e6:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 801a1e8:	68fb      	ldr	r3, [r7, #12]
 801a1ea:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 801a1ec:	b29b      	uxth	r3, r3
 801a1ee:	3b01      	subs	r3, #1
 801a1f0:	b29a      	uxth	r2, r3
 801a1f2:	68fb      	ldr	r3, [r7, #12]
 801a1f4:	86da      	strh	r2, [r3, #54]	@ 0x36
 801a1f6:	e018      	b.n	801a22a <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 801a1f8:	f7fa fbec 	bl	80149d4 <HAL_GetTick>
 801a1fc:	4602      	mov	r2, r0
 801a1fe:	69fb      	ldr	r3, [r7, #28]
 801a200:	1ad3      	subs	r3, r2, r3
 801a202:	683a      	ldr	r2, [r7, #0]
 801a204:	429a      	cmp	r2, r3
 801a206:	d803      	bhi.n	801a210 <HAL_SPI_Transmit+0x160>
 801a208:	683b      	ldr	r3, [r7, #0]
 801a20a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801a20e:	d102      	bne.n	801a216 <HAL_SPI_Transmit+0x166>
 801a210:	683b      	ldr	r3, [r7, #0]
 801a212:	2b00      	cmp	r3, #0
 801a214:	d109      	bne.n	801a22a <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 801a216:	68fb      	ldr	r3, [r7, #12]
 801a218:	2201      	movs	r2, #1
 801a21a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 801a21e:	68fb      	ldr	r3, [r7, #12]
 801a220:	2200      	movs	r2, #0
 801a222:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 801a226:	2303      	movs	r3, #3
 801a228:	e082      	b.n	801a330 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 801a22a:	68fb      	ldr	r3, [r7, #12]
 801a22c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 801a22e:	b29b      	uxth	r3, r3
 801a230:	2b00      	cmp	r3, #0
 801a232:	d1c7      	bne.n	801a1c4 <HAL_SPI_Transmit+0x114>
 801a234:	e053      	b.n	801a2de <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 801a236:	68fb      	ldr	r3, [r7, #12]
 801a238:	685b      	ldr	r3, [r3, #4]
 801a23a:	2b00      	cmp	r3, #0
 801a23c:	d002      	beq.n	801a244 <HAL_SPI_Transmit+0x194>
 801a23e:	8b7b      	ldrh	r3, [r7, #26]
 801a240:	2b01      	cmp	r3, #1
 801a242:	d147      	bne.n	801a2d4 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 801a244:	68fb      	ldr	r3, [r7, #12]
 801a246:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 801a248:	68fb      	ldr	r3, [r7, #12]
 801a24a:	681b      	ldr	r3, [r3, #0]
 801a24c:	330c      	adds	r3, #12
 801a24e:	7812      	ldrb	r2, [r2, #0]
 801a250:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 801a252:	68fb      	ldr	r3, [r7, #12]
 801a254:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801a256:	1c5a      	adds	r2, r3, #1
 801a258:	68fb      	ldr	r3, [r7, #12]
 801a25a:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 801a25c:	68fb      	ldr	r3, [r7, #12]
 801a25e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 801a260:	b29b      	uxth	r3, r3
 801a262:	3b01      	subs	r3, #1
 801a264:	b29a      	uxth	r2, r3
 801a266:	68fb      	ldr	r3, [r7, #12]
 801a268:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 801a26a:	e033      	b.n	801a2d4 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 801a26c:	68fb      	ldr	r3, [r7, #12]
 801a26e:	681b      	ldr	r3, [r3, #0]
 801a270:	689b      	ldr	r3, [r3, #8]
 801a272:	f003 0302 	and.w	r3, r3, #2
 801a276:	2b02      	cmp	r3, #2
 801a278:	d113      	bne.n	801a2a2 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 801a27a:	68fb      	ldr	r3, [r7, #12]
 801a27c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 801a27e:	68fb      	ldr	r3, [r7, #12]
 801a280:	681b      	ldr	r3, [r3, #0]
 801a282:	330c      	adds	r3, #12
 801a284:	7812      	ldrb	r2, [r2, #0]
 801a286:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 801a288:	68fb      	ldr	r3, [r7, #12]
 801a28a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801a28c:	1c5a      	adds	r2, r3, #1
 801a28e:	68fb      	ldr	r3, [r7, #12]
 801a290:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 801a292:	68fb      	ldr	r3, [r7, #12]
 801a294:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 801a296:	b29b      	uxth	r3, r3
 801a298:	3b01      	subs	r3, #1
 801a29a:	b29a      	uxth	r2, r3
 801a29c:	68fb      	ldr	r3, [r7, #12]
 801a29e:	86da      	strh	r2, [r3, #54]	@ 0x36
 801a2a0:	e018      	b.n	801a2d4 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 801a2a2:	f7fa fb97 	bl	80149d4 <HAL_GetTick>
 801a2a6:	4602      	mov	r2, r0
 801a2a8:	69fb      	ldr	r3, [r7, #28]
 801a2aa:	1ad3      	subs	r3, r2, r3
 801a2ac:	683a      	ldr	r2, [r7, #0]
 801a2ae:	429a      	cmp	r2, r3
 801a2b0:	d803      	bhi.n	801a2ba <HAL_SPI_Transmit+0x20a>
 801a2b2:	683b      	ldr	r3, [r7, #0]
 801a2b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 801a2b8:	d102      	bne.n	801a2c0 <HAL_SPI_Transmit+0x210>
 801a2ba:	683b      	ldr	r3, [r7, #0]
 801a2bc:	2b00      	cmp	r3, #0
 801a2be:	d109      	bne.n	801a2d4 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 801a2c0:	68fb      	ldr	r3, [r7, #12]
 801a2c2:	2201      	movs	r2, #1
 801a2c4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 801a2c8:	68fb      	ldr	r3, [r7, #12]
 801a2ca:	2200      	movs	r2, #0
 801a2cc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 801a2d0:	2303      	movs	r3, #3
 801a2d2:	e02d      	b.n	801a330 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 801a2d4:	68fb      	ldr	r3, [r7, #12]
 801a2d6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 801a2d8:	b29b      	uxth	r3, r3
 801a2da:	2b00      	cmp	r3, #0
 801a2dc:	d1c6      	bne.n	801a26c <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 801a2de:	69fa      	ldr	r2, [r7, #28]
 801a2e0:	6839      	ldr	r1, [r7, #0]
 801a2e2:	68f8      	ldr	r0, [r7, #12]
 801a2e4:	f000 fbe6 	bl	801aab4 <SPI_EndRxTxTransaction>
 801a2e8:	4603      	mov	r3, r0
 801a2ea:	2b00      	cmp	r3, #0
 801a2ec:	d002      	beq.n	801a2f4 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 801a2ee:	68fb      	ldr	r3, [r7, #12]
 801a2f0:	2220      	movs	r2, #32
 801a2f2:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 801a2f4:	68fb      	ldr	r3, [r7, #12]
 801a2f6:	689b      	ldr	r3, [r3, #8]
 801a2f8:	2b00      	cmp	r3, #0
 801a2fa:	d10a      	bne.n	801a312 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 801a2fc:	2300      	movs	r3, #0
 801a2fe:	617b      	str	r3, [r7, #20]
 801a300:	68fb      	ldr	r3, [r7, #12]
 801a302:	681b      	ldr	r3, [r3, #0]
 801a304:	68db      	ldr	r3, [r3, #12]
 801a306:	617b      	str	r3, [r7, #20]
 801a308:	68fb      	ldr	r3, [r7, #12]
 801a30a:	681b      	ldr	r3, [r3, #0]
 801a30c:	689b      	ldr	r3, [r3, #8]
 801a30e:	617b      	str	r3, [r7, #20]
 801a310:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 801a312:	68fb      	ldr	r3, [r7, #12]
 801a314:	2201      	movs	r2, #1
 801a316:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 801a31a:	68fb      	ldr	r3, [r7, #12]
 801a31c:	2200      	movs	r2, #0
 801a31e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 801a322:	68fb      	ldr	r3, [r7, #12]
 801a324:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801a326:	2b00      	cmp	r3, #0
 801a328:	d001      	beq.n	801a32e <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 801a32a:	2301      	movs	r3, #1
 801a32c:	e000      	b.n	801a330 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 801a32e:	2300      	movs	r3, #0
  }
}
 801a330:	4618      	mov	r0, r3
 801a332:	3720      	adds	r7, #32
 801a334:	46bd      	mov	sp, r7
 801a336:	bd80      	pop	{r7, pc}

0801a338 <HAL_SPI_Receive>:
  * @note   In master mode, if the direction is set to SPI_DIRECTION_2LINES
  *         the receive buffer is written to data register (DR) to generate
  *         clock pulses and receive data
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 801a338:	b580      	push	{r7, lr}
 801a33a:	b088      	sub	sp, #32
 801a33c:	af02      	add	r7, sp, #8
 801a33e:	60f8      	str	r0, [r7, #12]
 801a340:	60b9      	str	r1, [r7, #8]
 801a342:	603b      	str	r3, [r7, #0]
 801a344:	4613      	mov	r3, r2
 801a346:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 801a348:	68fb      	ldr	r3, [r7, #12]
 801a34a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 801a34e:	b2db      	uxtb	r3, r3
 801a350:	2b01      	cmp	r3, #1
 801a352:	d001      	beq.n	801a358 <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 801a354:	2302      	movs	r3, #2
 801a356:	e104      	b.n	801a562 <HAL_SPI_Receive+0x22a>
  }

  if ((pData == NULL) || (Size == 0U))
 801a358:	68bb      	ldr	r3, [r7, #8]
 801a35a:	2b00      	cmp	r3, #0
 801a35c:	d002      	beq.n	801a364 <HAL_SPI_Receive+0x2c>
 801a35e:	88fb      	ldrh	r3, [r7, #6]
 801a360:	2b00      	cmp	r3, #0
 801a362:	d101      	bne.n	801a368 <HAL_SPI_Receive+0x30>
  {
    return HAL_ERROR;
 801a364:	2301      	movs	r3, #1
 801a366:	e0fc      	b.n	801a562 <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 801a368:	68fb      	ldr	r3, [r7, #12]
 801a36a:	685b      	ldr	r3, [r3, #4]
 801a36c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 801a370:	d112      	bne.n	801a398 <HAL_SPI_Receive+0x60>
 801a372:	68fb      	ldr	r3, [r7, #12]
 801a374:	689b      	ldr	r3, [r3, #8]
 801a376:	2b00      	cmp	r3, #0
 801a378:	d10e      	bne.n	801a398 <HAL_SPI_Receive+0x60>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 801a37a:	68fb      	ldr	r3, [r7, #12]
 801a37c:	2204      	movs	r2, #4
 801a37e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 801a382:	88fa      	ldrh	r2, [r7, #6]
 801a384:	683b      	ldr	r3, [r7, #0]
 801a386:	9300      	str	r3, [sp, #0]
 801a388:	4613      	mov	r3, r2
 801a38a:	68ba      	ldr	r2, [r7, #8]
 801a38c:	68b9      	ldr	r1, [r7, #8]
 801a38e:	68f8      	ldr	r0, [r7, #12]
 801a390:	f000 f8eb 	bl	801a56a <HAL_SPI_TransmitReceive>
 801a394:	4603      	mov	r3, r0
 801a396:	e0e4      	b.n	801a562 <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 801a398:	f7fa fb1c 	bl	80149d4 <HAL_GetTick>
 801a39c:	6178      	str	r0, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hspi);
 801a39e:	68fb      	ldr	r3, [r7, #12]
 801a3a0:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 801a3a4:	2b01      	cmp	r3, #1
 801a3a6:	d101      	bne.n	801a3ac <HAL_SPI_Receive+0x74>
 801a3a8:	2302      	movs	r3, #2
 801a3aa:	e0da      	b.n	801a562 <HAL_SPI_Receive+0x22a>
 801a3ac:	68fb      	ldr	r3, [r7, #12]
 801a3ae:	2201      	movs	r2, #1
 801a3b0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 801a3b4:	68fb      	ldr	r3, [r7, #12]
 801a3b6:	2204      	movs	r2, #4
 801a3b8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 801a3bc:	68fb      	ldr	r3, [r7, #12]
 801a3be:	2200      	movs	r2, #0
 801a3c0:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 801a3c2:	68fb      	ldr	r3, [r7, #12]
 801a3c4:	68ba      	ldr	r2, [r7, #8]
 801a3c6:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 801a3c8:	68fb      	ldr	r3, [r7, #12]
 801a3ca:	88fa      	ldrh	r2, [r7, #6]
 801a3cc:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 801a3ce:	68fb      	ldr	r3, [r7, #12]
 801a3d0:	88fa      	ldrh	r2, [r7, #6]
 801a3d2:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 801a3d4:	68fb      	ldr	r3, [r7, #12]
 801a3d6:	2200      	movs	r2, #0
 801a3d8:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 801a3da:	68fb      	ldr	r3, [r7, #12]
 801a3dc:	2200      	movs	r2, #0
 801a3de:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 801a3e0:	68fb      	ldr	r3, [r7, #12]
 801a3e2:	2200      	movs	r2, #0
 801a3e4:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 801a3e6:	68fb      	ldr	r3, [r7, #12]
 801a3e8:	2200      	movs	r2, #0
 801a3ea:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 801a3ec:	68fb      	ldr	r3, [r7, #12]
 801a3ee:	2200      	movs	r2, #0
 801a3f0:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801a3f2:	68fb      	ldr	r3, [r7, #12]
 801a3f4:	689b      	ldr	r3, [r3, #8]
 801a3f6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 801a3fa:	d10f      	bne.n	801a41c <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 801a3fc:	68fb      	ldr	r3, [r7, #12]
 801a3fe:	681b      	ldr	r3, [r3, #0]
 801a400:	681a      	ldr	r2, [r3, #0]
 801a402:	68fb      	ldr	r3, [r7, #12]
 801a404:	681b      	ldr	r3, [r3, #0]
 801a406:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 801a40a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 801a40c:	68fb      	ldr	r3, [r7, #12]
 801a40e:	681b      	ldr	r3, [r3, #0]
 801a410:	681a      	ldr	r2, [r3, #0]
 801a412:	68fb      	ldr	r3, [r7, #12]
 801a414:	681b      	ldr	r3, [r3, #0]
 801a416:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 801a41a:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 801a41c:	68fb      	ldr	r3, [r7, #12]
 801a41e:	681b      	ldr	r3, [r3, #0]
 801a420:	681b      	ldr	r3, [r3, #0]
 801a422:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801a426:	2b40      	cmp	r3, #64	@ 0x40
 801a428:	d007      	beq.n	801a43a <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 801a42a:	68fb      	ldr	r3, [r7, #12]
 801a42c:	681b      	ldr	r3, [r3, #0]
 801a42e:	681a      	ldr	r2, [r3, #0]
 801a430:	68fb      	ldr	r3, [r7, #12]
 801a432:	681b      	ldr	r3, [r3, #0]
 801a434:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 801a438:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 801a43a:	68fb      	ldr	r3, [r7, #12]
 801a43c:	68db      	ldr	r3, [r3, #12]
 801a43e:	2b00      	cmp	r3, #0
 801a440:	d170      	bne.n	801a524 <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 801a442:	e035      	b.n	801a4b0 <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 801a444:	68fb      	ldr	r3, [r7, #12]
 801a446:	681b      	ldr	r3, [r3, #0]
 801a448:	689b      	ldr	r3, [r3, #8]
 801a44a:	f003 0301 	and.w	r3, r3, #1
 801a44e:	2b01      	cmp	r3, #1
 801a450:	d115      	bne.n	801a47e <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 801a452:	68fb      	ldr	r3, [r7, #12]
 801a454:	681b      	ldr	r3, [r3, #0]
 801a456:	f103 020c 	add.w	r2, r3, #12
 801a45a:	68fb      	ldr	r3, [r7, #12]
 801a45c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801a45e:	7812      	ldrb	r2, [r2, #0]
 801a460:	b2d2      	uxtb	r2, r2
 801a462:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 801a464:	68fb      	ldr	r3, [r7, #12]
 801a466:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801a468:	1c5a      	adds	r2, r3, #1
 801a46a:	68fb      	ldr	r3, [r7, #12]
 801a46c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 801a46e:	68fb      	ldr	r3, [r7, #12]
 801a470:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 801a472:	b29b      	uxth	r3, r3
 801a474:	3b01      	subs	r3, #1
 801a476:	b29a      	uxth	r2, r3
 801a478:	68fb      	ldr	r3, [r7, #12]
 801a47a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 801a47c:	e018      	b.n	801a4b0 <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 801a47e:	f7fa faa9 	bl	80149d4 <HAL_GetTick>
 801a482:	4602      	mov	r2, r0
 801a484:	697b      	ldr	r3, [r7, #20]
 801a486:	1ad3      	subs	r3, r2, r3
 801a488:	683a      	ldr	r2, [r7, #0]
 801a48a:	429a      	cmp	r2, r3
 801a48c:	d803      	bhi.n	801a496 <HAL_SPI_Receive+0x15e>
 801a48e:	683b      	ldr	r3, [r7, #0]
 801a490:	f1b3 3fff 	cmp.w	r3, #4294967295
 801a494:	d102      	bne.n	801a49c <HAL_SPI_Receive+0x164>
 801a496:	683b      	ldr	r3, [r7, #0]
 801a498:	2b00      	cmp	r3, #0
 801a49a:	d109      	bne.n	801a4b0 <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 801a49c:	68fb      	ldr	r3, [r7, #12]
 801a49e:	2201      	movs	r2, #1
 801a4a0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 801a4a4:	68fb      	ldr	r3, [r7, #12]
 801a4a6:	2200      	movs	r2, #0
 801a4a8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 801a4ac:	2303      	movs	r3, #3
 801a4ae:	e058      	b.n	801a562 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 801a4b0:	68fb      	ldr	r3, [r7, #12]
 801a4b2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 801a4b4:	b29b      	uxth	r3, r3
 801a4b6:	2b00      	cmp	r3, #0
 801a4b8:	d1c4      	bne.n	801a444 <HAL_SPI_Receive+0x10c>
 801a4ba:	e038      	b.n	801a52e <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 801a4bc:	68fb      	ldr	r3, [r7, #12]
 801a4be:	681b      	ldr	r3, [r3, #0]
 801a4c0:	689b      	ldr	r3, [r3, #8]
 801a4c2:	f003 0301 	and.w	r3, r3, #1
 801a4c6:	2b01      	cmp	r3, #1
 801a4c8:	d113      	bne.n	801a4f2 <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 801a4ca:	68fb      	ldr	r3, [r7, #12]
 801a4cc:	681b      	ldr	r3, [r3, #0]
 801a4ce:	68da      	ldr	r2, [r3, #12]
 801a4d0:	68fb      	ldr	r3, [r7, #12]
 801a4d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801a4d4:	b292      	uxth	r2, r2
 801a4d6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 801a4d8:	68fb      	ldr	r3, [r7, #12]
 801a4da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801a4dc:	1c9a      	adds	r2, r3, #2
 801a4de:	68fb      	ldr	r3, [r7, #12]
 801a4e0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 801a4e2:	68fb      	ldr	r3, [r7, #12]
 801a4e4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 801a4e6:	b29b      	uxth	r3, r3
 801a4e8:	3b01      	subs	r3, #1
 801a4ea:	b29a      	uxth	r2, r3
 801a4ec:	68fb      	ldr	r3, [r7, #12]
 801a4ee:	87da      	strh	r2, [r3, #62]	@ 0x3e
 801a4f0:	e018      	b.n	801a524 <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 801a4f2:	f7fa fa6f 	bl	80149d4 <HAL_GetTick>
 801a4f6:	4602      	mov	r2, r0
 801a4f8:	697b      	ldr	r3, [r7, #20]
 801a4fa:	1ad3      	subs	r3, r2, r3
 801a4fc:	683a      	ldr	r2, [r7, #0]
 801a4fe:	429a      	cmp	r2, r3
 801a500:	d803      	bhi.n	801a50a <HAL_SPI_Receive+0x1d2>
 801a502:	683b      	ldr	r3, [r7, #0]
 801a504:	f1b3 3fff 	cmp.w	r3, #4294967295
 801a508:	d102      	bne.n	801a510 <HAL_SPI_Receive+0x1d8>
 801a50a:	683b      	ldr	r3, [r7, #0]
 801a50c:	2b00      	cmp	r3, #0
 801a50e:	d109      	bne.n	801a524 <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 801a510:	68fb      	ldr	r3, [r7, #12]
 801a512:	2201      	movs	r2, #1
 801a514:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 801a518:	68fb      	ldr	r3, [r7, #12]
 801a51a:	2200      	movs	r2, #0
 801a51c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 801a520:	2303      	movs	r3, #3
 801a522:	e01e      	b.n	801a562 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 801a524:	68fb      	ldr	r3, [r7, #12]
 801a526:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 801a528:	b29b      	uxth	r3, r3
 801a52a:	2b00      	cmp	r3, #0
 801a52c:	d1c6      	bne.n	801a4bc <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 801a52e:	697a      	ldr	r2, [r7, #20]
 801a530:	6839      	ldr	r1, [r7, #0]
 801a532:	68f8      	ldr	r0, [r7, #12]
 801a534:	f000 fa58 	bl	801a9e8 <SPI_EndRxTransaction>
 801a538:	4603      	mov	r3, r0
 801a53a:	2b00      	cmp	r3, #0
 801a53c:	d002      	beq.n	801a544 <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 801a53e:	68fb      	ldr	r3, [r7, #12]
 801a540:	2220      	movs	r2, #32
 801a542:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 801a544:	68fb      	ldr	r3, [r7, #12]
 801a546:	2201      	movs	r2, #1
 801a548:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 801a54c:	68fb      	ldr	r3, [r7, #12]
 801a54e:	2200      	movs	r2, #0
 801a550:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 801a554:	68fb      	ldr	r3, [r7, #12]
 801a556:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801a558:	2b00      	cmp	r3, #0
 801a55a:	d001      	beq.n	801a560 <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 801a55c:	2301      	movs	r3, #1
 801a55e:	e000      	b.n	801a562 <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 801a560:	2300      	movs	r3, #0
  }
}
 801a562:	4618      	mov	r0, r3
 801a564:	3718      	adds	r7, #24
 801a566:	46bd      	mov	sp, r7
 801a568:	bd80      	pop	{r7, pc}

0801a56a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 801a56a:	b580      	push	{r7, lr}
 801a56c:	b08a      	sub	sp, #40	@ 0x28
 801a56e:	af00      	add	r7, sp, #0
 801a570:	60f8      	str	r0, [r7, #12]
 801a572:	60b9      	str	r1, [r7, #8]
 801a574:	607a      	str	r2, [r7, #4]
 801a576:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 801a578:	2301      	movs	r3, #1
 801a57a:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 801a57c:	f7fa fa2a 	bl	80149d4 <HAL_GetTick>
 801a580:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 801a582:	68fb      	ldr	r3, [r7, #12]
 801a584:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 801a588:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 801a58a:	68fb      	ldr	r3, [r7, #12]
 801a58c:	685b      	ldr	r3, [r3, #4]
 801a58e:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 801a590:	887b      	ldrh	r3, [r7, #2]
 801a592:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 801a594:	7ffb      	ldrb	r3, [r7, #31]
 801a596:	2b01      	cmp	r3, #1
 801a598:	d00c      	beq.n	801a5b4 <HAL_SPI_TransmitReceive+0x4a>
 801a59a:	69bb      	ldr	r3, [r7, #24]
 801a59c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 801a5a0:	d106      	bne.n	801a5b0 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 801a5a2:	68fb      	ldr	r3, [r7, #12]
 801a5a4:	689b      	ldr	r3, [r3, #8]
 801a5a6:	2b00      	cmp	r3, #0
 801a5a8:	d102      	bne.n	801a5b0 <HAL_SPI_TransmitReceive+0x46>
 801a5aa:	7ffb      	ldrb	r3, [r7, #31]
 801a5ac:	2b04      	cmp	r3, #4
 801a5ae:	d001      	beq.n	801a5b4 <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 801a5b0:	2302      	movs	r3, #2
 801a5b2:	e17f      	b.n	801a8b4 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 801a5b4:	68bb      	ldr	r3, [r7, #8]
 801a5b6:	2b00      	cmp	r3, #0
 801a5b8:	d005      	beq.n	801a5c6 <HAL_SPI_TransmitReceive+0x5c>
 801a5ba:	687b      	ldr	r3, [r7, #4]
 801a5bc:	2b00      	cmp	r3, #0
 801a5be:	d002      	beq.n	801a5c6 <HAL_SPI_TransmitReceive+0x5c>
 801a5c0:	887b      	ldrh	r3, [r7, #2]
 801a5c2:	2b00      	cmp	r3, #0
 801a5c4:	d101      	bne.n	801a5ca <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 801a5c6:	2301      	movs	r3, #1
 801a5c8:	e174      	b.n	801a8b4 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 801a5ca:	68fb      	ldr	r3, [r7, #12]
 801a5cc:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 801a5d0:	2b01      	cmp	r3, #1
 801a5d2:	d101      	bne.n	801a5d8 <HAL_SPI_TransmitReceive+0x6e>
 801a5d4:	2302      	movs	r3, #2
 801a5d6:	e16d      	b.n	801a8b4 <HAL_SPI_TransmitReceive+0x34a>
 801a5d8:	68fb      	ldr	r3, [r7, #12]
 801a5da:	2201      	movs	r2, #1
 801a5dc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 801a5e0:	68fb      	ldr	r3, [r7, #12]
 801a5e2:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 801a5e6:	b2db      	uxtb	r3, r3
 801a5e8:	2b04      	cmp	r3, #4
 801a5ea:	d003      	beq.n	801a5f4 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 801a5ec:	68fb      	ldr	r3, [r7, #12]
 801a5ee:	2205      	movs	r2, #5
 801a5f0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 801a5f4:	68fb      	ldr	r3, [r7, #12]
 801a5f6:	2200      	movs	r2, #0
 801a5f8:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 801a5fa:	68fb      	ldr	r3, [r7, #12]
 801a5fc:	687a      	ldr	r2, [r7, #4]
 801a5fe:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 801a600:	68fb      	ldr	r3, [r7, #12]
 801a602:	887a      	ldrh	r2, [r7, #2]
 801a604:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 801a606:	68fb      	ldr	r3, [r7, #12]
 801a608:	887a      	ldrh	r2, [r7, #2]
 801a60a:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 801a60c:	68fb      	ldr	r3, [r7, #12]
 801a60e:	68ba      	ldr	r2, [r7, #8]
 801a610:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 801a612:	68fb      	ldr	r3, [r7, #12]
 801a614:	887a      	ldrh	r2, [r7, #2]
 801a616:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 801a618:	68fb      	ldr	r3, [r7, #12]
 801a61a:	887a      	ldrh	r2, [r7, #2]
 801a61c:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 801a61e:	68fb      	ldr	r3, [r7, #12]
 801a620:	2200      	movs	r2, #0
 801a622:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 801a624:	68fb      	ldr	r3, [r7, #12]
 801a626:	2200      	movs	r2, #0
 801a628:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 801a62a:	68fb      	ldr	r3, [r7, #12]
 801a62c:	681b      	ldr	r3, [r3, #0]
 801a62e:	681b      	ldr	r3, [r3, #0]
 801a630:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801a634:	2b40      	cmp	r3, #64	@ 0x40
 801a636:	d007      	beq.n	801a648 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 801a638:	68fb      	ldr	r3, [r7, #12]
 801a63a:	681b      	ldr	r3, [r3, #0]
 801a63c:	681a      	ldr	r2, [r3, #0]
 801a63e:	68fb      	ldr	r3, [r7, #12]
 801a640:	681b      	ldr	r3, [r3, #0]
 801a642:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 801a646:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 801a648:	68fb      	ldr	r3, [r7, #12]
 801a64a:	68db      	ldr	r3, [r3, #12]
 801a64c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 801a650:	d17e      	bne.n	801a750 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 801a652:	68fb      	ldr	r3, [r7, #12]
 801a654:	685b      	ldr	r3, [r3, #4]
 801a656:	2b00      	cmp	r3, #0
 801a658:	d002      	beq.n	801a660 <HAL_SPI_TransmitReceive+0xf6>
 801a65a:	8afb      	ldrh	r3, [r7, #22]
 801a65c:	2b01      	cmp	r3, #1
 801a65e:	d16c      	bne.n	801a73a <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 801a660:	68fb      	ldr	r3, [r7, #12]
 801a662:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801a664:	881a      	ldrh	r2, [r3, #0]
 801a666:	68fb      	ldr	r3, [r7, #12]
 801a668:	681b      	ldr	r3, [r3, #0]
 801a66a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 801a66c:	68fb      	ldr	r3, [r7, #12]
 801a66e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801a670:	1c9a      	adds	r2, r3, #2
 801a672:	68fb      	ldr	r3, [r7, #12]
 801a674:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 801a676:	68fb      	ldr	r3, [r7, #12]
 801a678:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 801a67a:	b29b      	uxth	r3, r3
 801a67c:	3b01      	subs	r3, #1
 801a67e:	b29a      	uxth	r2, r3
 801a680:	68fb      	ldr	r3, [r7, #12]
 801a682:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 801a684:	e059      	b.n	801a73a <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 801a686:	68fb      	ldr	r3, [r7, #12]
 801a688:	681b      	ldr	r3, [r3, #0]
 801a68a:	689b      	ldr	r3, [r3, #8]
 801a68c:	f003 0302 	and.w	r3, r3, #2
 801a690:	2b02      	cmp	r3, #2
 801a692:	d11b      	bne.n	801a6cc <HAL_SPI_TransmitReceive+0x162>
 801a694:	68fb      	ldr	r3, [r7, #12]
 801a696:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 801a698:	b29b      	uxth	r3, r3
 801a69a:	2b00      	cmp	r3, #0
 801a69c:	d016      	beq.n	801a6cc <HAL_SPI_TransmitReceive+0x162>
 801a69e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a6a0:	2b01      	cmp	r3, #1
 801a6a2:	d113      	bne.n	801a6cc <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 801a6a4:	68fb      	ldr	r3, [r7, #12]
 801a6a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801a6a8:	881a      	ldrh	r2, [r3, #0]
 801a6aa:	68fb      	ldr	r3, [r7, #12]
 801a6ac:	681b      	ldr	r3, [r3, #0]
 801a6ae:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 801a6b0:	68fb      	ldr	r3, [r7, #12]
 801a6b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801a6b4:	1c9a      	adds	r2, r3, #2
 801a6b6:	68fb      	ldr	r3, [r7, #12]
 801a6b8:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 801a6ba:	68fb      	ldr	r3, [r7, #12]
 801a6bc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 801a6be:	b29b      	uxth	r3, r3
 801a6c0:	3b01      	subs	r3, #1
 801a6c2:	b29a      	uxth	r2, r3
 801a6c4:	68fb      	ldr	r3, [r7, #12]
 801a6c6:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 801a6c8:	2300      	movs	r3, #0
 801a6ca:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 801a6cc:	68fb      	ldr	r3, [r7, #12]
 801a6ce:	681b      	ldr	r3, [r3, #0]
 801a6d0:	689b      	ldr	r3, [r3, #8]
 801a6d2:	f003 0301 	and.w	r3, r3, #1
 801a6d6:	2b01      	cmp	r3, #1
 801a6d8:	d119      	bne.n	801a70e <HAL_SPI_TransmitReceive+0x1a4>
 801a6da:	68fb      	ldr	r3, [r7, #12]
 801a6dc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 801a6de:	b29b      	uxth	r3, r3
 801a6e0:	2b00      	cmp	r3, #0
 801a6e2:	d014      	beq.n	801a70e <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 801a6e4:	68fb      	ldr	r3, [r7, #12]
 801a6e6:	681b      	ldr	r3, [r3, #0]
 801a6e8:	68da      	ldr	r2, [r3, #12]
 801a6ea:	68fb      	ldr	r3, [r7, #12]
 801a6ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801a6ee:	b292      	uxth	r2, r2
 801a6f0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 801a6f2:	68fb      	ldr	r3, [r7, #12]
 801a6f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801a6f6:	1c9a      	adds	r2, r3, #2
 801a6f8:	68fb      	ldr	r3, [r7, #12]
 801a6fa:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 801a6fc:	68fb      	ldr	r3, [r7, #12]
 801a6fe:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 801a700:	b29b      	uxth	r3, r3
 801a702:	3b01      	subs	r3, #1
 801a704:	b29a      	uxth	r2, r3
 801a706:	68fb      	ldr	r3, [r7, #12]
 801a708:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 801a70a:	2301      	movs	r3, #1
 801a70c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 801a70e:	f7fa f961 	bl	80149d4 <HAL_GetTick>
 801a712:	4602      	mov	r2, r0
 801a714:	6a3b      	ldr	r3, [r7, #32]
 801a716:	1ad3      	subs	r3, r2, r3
 801a718:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801a71a:	429a      	cmp	r2, r3
 801a71c:	d80d      	bhi.n	801a73a <HAL_SPI_TransmitReceive+0x1d0>
 801a71e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a720:	f1b3 3fff 	cmp.w	r3, #4294967295
 801a724:	d009      	beq.n	801a73a <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 801a726:	68fb      	ldr	r3, [r7, #12]
 801a728:	2201      	movs	r2, #1
 801a72a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 801a72e:	68fb      	ldr	r3, [r7, #12]
 801a730:	2200      	movs	r2, #0
 801a732:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 801a736:	2303      	movs	r3, #3
 801a738:	e0bc      	b.n	801a8b4 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 801a73a:	68fb      	ldr	r3, [r7, #12]
 801a73c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 801a73e:	b29b      	uxth	r3, r3
 801a740:	2b00      	cmp	r3, #0
 801a742:	d1a0      	bne.n	801a686 <HAL_SPI_TransmitReceive+0x11c>
 801a744:	68fb      	ldr	r3, [r7, #12]
 801a746:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 801a748:	b29b      	uxth	r3, r3
 801a74a:	2b00      	cmp	r3, #0
 801a74c:	d19b      	bne.n	801a686 <HAL_SPI_TransmitReceive+0x11c>
 801a74e:	e082      	b.n	801a856 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 801a750:	68fb      	ldr	r3, [r7, #12]
 801a752:	685b      	ldr	r3, [r3, #4]
 801a754:	2b00      	cmp	r3, #0
 801a756:	d002      	beq.n	801a75e <HAL_SPI_TransmitReceive+0x1f4>
 801a758:	8afb      	ldrh	r3, [r7, #22]
 801a75a:	2b01      	cmp	r3, #1
 801a75c:	d171      	bne.n	801a842 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 801a75e:	68fb      	ldr	r3, [r7, #12]
 801a760:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 801a762:	68fb      	ldr	r3, [r7, #12]
 801a764:	681b      	ldr	r3, [r3, #0]
 801a766:	330c      	adds	r3, #12
 801a768:	7812      	ldrb	r2, [r2, #0]
 801a76a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 801a76c:	68fb      	ldr	r3, [r7, #12]
 801a76e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801a770:	1c5a      	adds	r2, r3, #1
 801a772:	68fb      	ldr	r3, [r7, #12]
 801a774:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 801a776:	68fb      	ldr	r3, [r7, #12]
 801a778:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 801a77a:	b29b      	uxth	r3, r3
 801a77c:	3b01      	subs	r3, #1
 801a77e:	b29a      	uxth	r2, r3
 801a780:	68fb      	ldr	r3, [r7, #12]
 801a782:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 801a784:	e05d      	b.n	801a842 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 801a786:	68fb      	ldr	r3, [r7, #12]
 801a788:	681b      	ldr	r3, [r3, #0]
 801a78a:	689b      	ldr	r3, [r3, #8]
 801a78c:	f003 0302 	and.w	r3, r3, #2
 801a790:	2b02      	cmp	r3, #2
 801a792:	d11c      	bne.n	801a7ce <HAL_SPI_TransmitReceive+0x264>
 801a794:	68fb      	ldr	r3, [r7, #12]
 801a796:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 801a798:	b29b      	uxth	r3, r3
 801a79a:	2b00      	cmp	r3, #0
 801a79c:	d017      	beq.n	801a7ce <HAL_SPI_TransmitReceive+0x264>
 801a79e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a7a0:	2b01      	cmp	r3, #1
 801a7a2:	d114      	bne.n	801a7ce <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 801a7a4:	68fb      	ldr	r3, [r7, #12]
 801a7a6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 801a7a8:	68fb      	ldr	r3, [r7, #12]
 801a7aa:	681b      	ldr	r3, [r3, #0]
 801a7ac:	330c      	adds	r3, #12
 801a7ae:	7812      	ldrb	r2, [r2, #0]
 801a7b0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 801a7b2:	68fb      	ldr	r3, [r7, #12]
 801a7b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801a7b6:	1c5a      	adds	r2, r3, #1
 801a7b8:	68fb      	ldr	r3, [r7, #12]
 801a7ba:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 801a7bc:	68fb      	ldr	r3, [r7, #12]
 801a7be:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 801a7c0:	b29b      	uxth	r3, r3
 801a7c2:	3b01      	subs	r3, #1
 801a7c4:	b29a      	uxth	r2, r3
 801a7c6:	68fb      	ldr	r3, [r7, #12]
 801a7c8:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 801a7ca:	2300      	movs	r3, #0
 801a7cc:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 801a7ce:	68fb      	ldr	r3, [r7, #12]
 801a7d0:	681b      	ldr	r3, [r3, #0]
 801a7d2:	689b      	ldr	r3, [r3, #8]
 801a7d4:	f003 0301 	and.w	r3, r3, #1
 801a7d8:	2b01      	cmp	r3, #1
 801a7da:	d119      	bne.n	801a810 <HAL_SPI_TransmitReceive+0x2a6>
 801a7dc:	68fb      	ldr	r3, [r7, #12]
 801a7de:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 801a7e0:	b29b      	uxth	r3, r3
 801a7e2:	2b00      	cmp	r3, #0
 801a7e4:	d014      	beq.n	801a810 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 801a7e6:	68fb      	ldr	r3, [r7, #12]
 801a7e8:	681b      	ldr	r3, [r3, #0]
 801a7ea:	68da      	ldr	r2, [r3, #12]
 801a7ec:	68fb      	ldr	r3, [r7, #12]
 801a7ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801a7f0:	b2d2      	uxtb	r2, r2
 801a7f2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 801a7f4:	68fb      	ldr	r3, [r7, #12]
 801a7f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801a7f8:	1c5a      	adds	r2, r3, #1
 801a7fa:	68fb      	ldr	r3, [r7, #12]
 801a7fc:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 801a7fe:	68fb      	ldr	r3, [r7, #12]
 801a800:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 801a802:	b29b      	uxth	r3, r3
 801a804:	3b01      	subs	r3, #1
 801a806:	b29a      	uxth	r2, r3
 801a808:	68fb      	ldr	r3, [r7, #12]
 801a80a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 801a80c:	2301      	movs	r3, #1
 801a80e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 801a810:	f7fa f8e0 	bl	80149d4 <HAL_GetTick>
 801a814:	4602      	mov	r2, r0
 801a816:	6a3b      	ldr	r3, [r7, #32]
 801a818:	1ad3      	subs	r3, r2, r3
 801a81a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801a81c:	429a      	cmp	r2, r3
 801a81e:	d803      	bhi.n	801a828 <HAL_SPI_TransmitReceive+0x2be>
 801a820:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a822:	f1b3 3fff 	cmp.w	r3, #4294967295
 801a826:	d102      	bne.n	801a82e <HAL_SPI_TransmitReceive+0x2c4>
 801a828:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a82a:	2b00      	cmp	r3, #0
 801a82c:	d109      	bne.n	801a842 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 801a82e:	68fb      	ldr	r3, [r7, #12]
 801a830:	2201      	movs	r2, #1
 801a832:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 801a836:	68fb      	ldr	r3, [r7, #12]
 801a838:	2200      	movs	r2, #0
 801a83a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 801a83e:	2303      	movs	r3, #3
 801a840:	e038      	b.n	801a8b4 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 801a842:	68fb      	ldr	r3, [r7, #12]
 801a844:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 801a846:	b29b      	uxth	r3, r3
 801a848:	2b00      	cmp	r3, #0
 801a84a:	d19c      	bne.n	801a786 <HAL_SPI_TransmitReceive+0x21c>
 801a84c:	68fb      	ldr	r3, [r7, #12]
 801a84e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 801a850:	b29b      	uxth	r3, r3
 801a852:	2b00      	cmp	r3, #0
 801a854:	d197      	bne.n	801a786 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 801a856:	6a3a      	ldr	r2, [r7, #32]
 801a858:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 801a85a:	68f8      	ldr	r0, [r7, #12]
 801a85c:	f000 f92a 	bl	801aab4 <SPI_EndRxTxTransaction>
 801a860:	4603      	mov	r3, r0
 801a862:	2b00      	cmp	r3, #0
 801a864:	d008      	beq.n	801a878 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 801a866:	68fb      	ldr	r3, [r7, #12]
 801a868:	2220      	movs	r2, #32
 801a86a:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 801a86c:	68fb      	ldr	r3, [r7, #12]
 801a86e:	2200      	movs	r2, #0
 801a870:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 801a874:	2301      	movs	r3, #1
 801a876:	e01d      	b.n	801a8b4 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 801a878:	68fb      	ldr	r3, [r7, #12]
 801a87a:	689b      	ldr	r3, [r3, #8]
 801a87c:	2b00      	cmp	r3, #0
 801a87e:	d10a      	bne.n	801a896 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 801a880:	2300      	movs	r3, #0
 801a882:	613b      	str	r3, [r7, #16]
 801a884:	68fb      	ldr	r3, [r7, #12]
 801a886:	681b      	ldr	r3, [r3, #0]
 801a888:	68db      	ldr	r3, [r3, #12]
 801a88a:	613b      	str	r3, [r7, #16]
 801a88c:	68fb      	ldr	r3, [r7, #12]
 801a88e:	681b      	ldr	r3, [r3, #0]
 801a890:	689b      	ldr	r3, [r3, #8]
 801a892:	613b      	str	r3, [r7, #16]
 801a894:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 801a896:	68fb      	ldr	r3, [r7, #12]
 801a898:	2201      	movs	r2, #1
 801a89a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 801a89e:	68fb      	ldr	r3, [r7, #12]
 801a8a0:	2200      	movs	r2, #0
 801a8a2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 801a8a6:	68fb      	ldr	r3, [r7, #12]
 801a8a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801a8aa:	2b00      	cmp	r3, #0
 801a8ac:	d001      	beq.n	801a8b2 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 801a8ae:	2301      	movs	r3, #1
 801a8b0:	e000      	b.n	801a8b4 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 801a8b2:	2300      	movs	r3, #0
  }
}
 801a8b4:	4618      	mov	r0, r3
 801a8b6:	3728      	adds	r7, #40	@ 0x28
 801a8b8:	46bd      	mov	sp, r7
 801a8ba:	bd80      	pop	{r7, pc}

0801a8bc <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
 801a8bc:	b480      	push	{r7}
 801a8be:	b083      	sub	sp, #12
 801a8c0:	af00      	add	r7, sp, #0
 801a8c2:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 801a8c4:	687b      	ldr	r3, [r7, #4]
 801a8c6:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 801a8ca:	b2db      	uxtb	r3, r3
}
 801a8cc:	4618      	mov	r0, r3
 801a8ce:	370c      	adds	r7, #12
 801a8d0:	46bd      	mov	sp, r7
 801a8d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a8d6:	4770      	bx	lr

0801a8d8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 801a8d8:	b580      	push	{r7, lr}
 801a8da:	b088      	sub	sp, #32
 801a8dc:	af00      	add	r7, sp, #0
 801a8de:	60f8      	str	r0, [r7, #12]
 801a8e0:	60b9      	str	r1, [r7, #8]
 801a8e2:	603b      	str	r3, [r7, #0]
 801a8e4:	4613      	mov	r3, r2
 801a8e6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 801a8e8:	f7fa f874 	bl	80149d4 <HAL_GetTick>
 801a8ec:	4602      	mov	r2, r0
 801a8ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a8f0:	1a9b      	subs	r3, r3, r2
 801a8f2:	683a      	ldr	r2, [r7, #0]
 801a8f4:	4413      	add	r3, r2
 801a8f6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 801a8f8:	f7fa f86c 	bl	80149d4 <HAL_GetTick>
 801a8fc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 801a8fe:	4b39      	ldr	r3, [pc, #228]	@ (801a9e4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 801a900:	681b      	ldr	r3, [r3, #0]
 801a902:	015b      	lsls	r3, r3, #5
 801a904:	0d1b      	lsrs	r3, r3, #20
 801a906:	69fa      	ldr	r2, [r7, #28]
 801a908:	fb02 f303 	mul.w	r3, r2, r3
 801a90c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 801a90e:	e055      	b.n	801a9bc <SPI_WaitFlagStateUntilTimeout+0xe4>
  {
    if (Timeout != HAL_MAX_DELAY)
 801a910:	683b      	ldr	r3, [r7, #0]
 801a912:	f1b3 3fff 	cmp.w	r3, #4294967295
 801a916:	d051      	beq.n	801a9bc <SPI_WaitFlagStateUntilTimeout+0xe4>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 801a918:	f7fa f85c 	bl	80149d4 <HAL_GetTick>
 801a91c:	4602      	mov	r2, r0
 801a91e:	69bb      	ldr	r3, [r7, #24]
 801a920:	1ad3      	subs	r3, r2, r3
 801a922:	69fa      	ldr	r2, [r7, #28]
 801a924:	429a      	cmp	r2, r3
 801a926:	d902      	bls.n	801a92e <SPI_WaitFlagStateUntilTimeout+0x56>
 801a928:	69fb      	ldr	r3, [r7, #28]
 801a92a:	2b00      	cmp	r3, #0
 801a92c:	d13d      	bne.n	801a9aa <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 801a92e:	68fb      	ldr	r3, [r7, #12]
 801a930:	681b      	ldr	r3, [r3, #0]
 801a932:	685a      	ldr	r2, [r3, #4]
 801a934:	68fb      	ldr	r3, [r7, #12]
 801a936:	681b      	ldr	r3, [r3, #0]
 801a938:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 801a93c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801a93e:	68fb      	ldr	r3, [r7, #12]
 801a940:	685b      	ldr	r3, [r3, #4]
 801a942:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 801a946:	d111      	bne.n	801a96c <SPI_WaitFlagStateUntilTimeout+0x94>
 801a948:	68fb      	ldr	r3, [r7, #12]
 801a94a:	689b      	ldr	r3, [r3, #8]
 801a94c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 801a950:	d004      	beq.n	801a95c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 801a952:	68fb      	ldr	r3, [r7, #12]
 801a954:	689b      	ldr	r3, [r3, #8]
 801a956:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 801a95a:	d107      	bne.n	801a96c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 801a95c:	68fb      	ldr	r3, [r7, #12]
 801a95e:	681b      	ldr	r3, [r3, #0]
 801a960:	681a      	ldr	r2, [r3, #0]
 801a962:	68fb      	ldr	r3, [r7, #12]
 801a964:	681b      	ldr	r3, [r3, #0]
 801a966:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 801a96a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 801a96c:	68fb      	ldr	r3, [r7, #12]
 801a96e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801a970:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 801a974:	d10f      	bne.n	801a996 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 801a976:	68fb      	ldr	r3, [r7, #12]
 801a978:	681b      	ldr	r3, [r3, #0]
 801a97a:	681a      	ldr	r2, [r3, #0]
 801a97c:	68fb      	ldr	r3, [r7, #12]
 801a97e:	681b      	ldr	r3, [r3, #0]
 801a980:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 801a984:	601a      	str	r2, [r3, #0]
 801a986:	68fb      	ldr	r3, [r7, #12]
 801a988:	681b      	ldr	r3, [r3, #0]
 801a98a:	681a      	ldr	r2, [r3, #0]
 801a98c:	68fb      	ldr	r3, [r7, #12]
 801a98e:	681b      	ldr	r3, [r3, #0]
 801a990:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 801a994:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 801a996:	68fb      	ldr	r3, [r7, #12]
 801a998:	2201      	movs	r2, #1
 801a99a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 801a99e:	68fb      	ldr	r3, [r7, #12]
 801a9a0:	2200      	movs	r2, #0
 801a9a2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 801a9a6:	2303      	movs	r3, #3
 801a9a8:	e018      	b.n	801a9dc <SPI_WaitFlagStateUntilTimeout+0x104>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 801a9aa:	697b      	ldr	r3, [r7, #20]
 801a9ac:	2b00      	cmp	r3, #0
 801a9ae:	d102      	bne.n	801a9b6 <SPI_WaitFlagStateUntilTimeout+0xde>
      {
        tmp_timeout = 0U;
 801a9b0:	2300      	movs	r3, #0
 801a9b2:	61fb      	str	r3, [r7, #28]
 801a9b4:	e002      	b.n	801a9bc <SPI_WaitFlagStateUntilTimeout+0xe4>
      }
      else
      {
        count--;
 801a9b6:	697b      	ldr	r3, [r7, #20]
 801a9b8:	3b01      	subs	r3, #1
 801a9ba:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 801a9bc:	68fb      	ldr	r3, [r7, #12]
 801a9be:	681b      	ldr	r3, [r3, #0]
 801a9c0:	689a      	ldr	r2, [r3, #8]
 801a9c2:	68bb      	ldr	r3, [r7, #8]
 801a9c4:	4013      	ands	r3, r2
 801a9c6:	68ba      	ldr	r2, [r7, #8]
 801a9c8:	429a      	cmp	r2, r3
 801a9ca:	bf0c      	ite	eq
 801a9cc:	2301      	moveq	r3, #1
 801a9ce:	2300      	movne	r3, #0
 801a9d0:	b2db      	uxtb	r3, r3
 801a9d2:	461a      	mov	r2, r3
 801a9d4:	79fb      	ldrb	r3, [r7, #7]
 801a9d6:	429a      	cmp	r2, r3
 801a9d8:	d19a      	bne.n	801a910 <SPI_WaitFlagStateUntilTimeout+0x38>
      }
    }
  }

  return HAL_OK;
 801a9da:	2300      	movs	r3, #0
}
 801a9dc:	4618      	mov	r0, r3
 801a9de:	3720      	adds	r7, #32
 801a9e0:	46bd      	mov	sp, r7
 801a9e2:	bd80      	pop	{r7, pc}
 801a9e4:	20000004 	.word	0x20000004

0801a9e8 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 801a9e8:	b580      	push	{r7, lr}
 801a9ea:	b086      	sub	sp, #24
 801a9ec:	af02      	add	r7, sp, #8
 801a9ee:	60f8      	str	r0, [r7, #12]
 801a9f0:	60b9      	str	r1, [r7, #8]
 801a9f2:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801a9f4:	68fb      	ldr	r3, [r7, #12]
 801a9f6:	685b      	ldr	r3, [r3, #4]
 801a9f8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 801a9fc:	d111      	bne.n	801aa22 <SPI_EndRxTransaction+0x3a>
 801a9fe:	68fb      	ldr	r3, [r7, #12]
 801aa00:	689b      	ldr	r3, [r3, #8]
 801aa02:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 801aa06:	d004      	beq.n	801aa12 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 801aa08:	68fb      	ldr	r3, [r7, #12]
 801aa0a:	689b      	ldr	r3, [r3, #8]
 801aa0c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 801aa10:	d107      	bne.n	801aa22 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 801aa12:	68fb      	ldr	r3, [r7, #12]
 801aa14:	681b      	ldr	r3, [r3, #0]
 801aa16:	681a      	ldr	r2, [r3, #0]
 801aa18:	68fb      	ldr	r3, [r7, #12]
 801aa1a:	681b      	ldr	r3, [r3, #0]
 801aa1c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 801aa20:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 801aa22:	68fb      	ldr	r3, [r7, #12]
 801aa24:	685b      	ldr	r3, [r3, #4]
 801aa26:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 801aa2a:	d12a      	bne.n	801aa82 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 801aa2c:	68fb      	ldr	r3, [r7, #12]
 801aa2e:	689b      	ldr	r3, [r3, #8]
 801aa30:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 801aa34:	d012      	beq.n	801aa5c <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 801aa36:	687b      	ldr	r3, [r7, #4]
 801aa38:	9300      	str	r3, [sp, #0]
 801aa3a:	68bb      	ldr	r3, [r7, #8]
 801aa3c:	2200      	movs	r2, #0
 801aa3e:	2180      	movs	r1, #128	@ 0x80
 801aa40:	68f8      	ldr	r0, [r7, #12]
 801aa42:	f7ff ff49 	bl	801a8d8 <SPI_WaitFlagStateUntilTimeout>
 801aa46:	4603      	mov	r3, r0
 801aa48:	2b00      	cmp	r3, #0
 801aa4a:	d02d      	beq.n	801aaa8 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 801aa4c:	68fb      	ldr	r3, [r7, #12]
 801aa4e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801aa50:	f043 0220 	orr.w	r2, r3, #32
 801aa54:	68fb      	ldr	r3, [r7, #12]
 801aa56:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 801aa58:	2303      	movs	r3, #3
 801aa5a:	e026      	b.n	801aaaa <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 801aa5c:	687b      	ldr	r3, [r7, #4]
 801aa5e:	9300      	str	r3, [sp, #0]
 801aa60:	68bb      	ldr	r3, [r7, #8]
 801aa62:	2200      	movs	r2, #0
 801aa64:	2101      	movs	r1, #1
 801aa66:	68f8      	ldr	r0, [r7, #12]
 801aa68:	f7ff ff36 	bl	801a8d8 <SPI_WaitFlagStateUntilTimeout>
 801aa6c:	4603      	mov	r3, r0
 801aa6e:	2b00      	cmp	r3, #0
 801aa70:	d01a      	beq.n	801aaa8 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 801aa72:	68fb      	ldr	r3, [r7, #12]
 801aa74:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801aa76:	f043 0220 	orr.w	r2, r3, #32
 801aa7a:	68fb      	ldr	r3, [r7, #12]
 801aa7c:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 801aa7e:	2303      	movs	r3, #3
 801aa80:	e013      	b.n	801aaaa <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 801aa82:	687b      	ldr	r3, [r7, #4]
 801aa84:	9300      	str	r3, [sp, #0]
 801aa86:	68bb      	ldr	r3, [r7, #8]
 801aa88:	2200      	movs	r2, #0
 801aa8a:	2101      	movs	r1, #1
 801aa8c:	68f8      	ldr	r0, [r7, #12]
 801aa8e:	f7ff ff23 	bl	801a8d8 <SPI_WaitFlagStateUntilTimeout>
 801aa92:	4603      	mov	r3, r0
 801aa94:	2b00      	cmp	r3, #0
 801aa96:	d007      	beq.n	801aaa8 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 801aa98:	68fb      	ldr	r3, [r7, #12]
 801aa9a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801aa9c:	f043 0220 	orr.w	r2, r3, #32
 801aaa0:	68fb      	ldr	r3, [r7, #12]
 801aaa2:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 801aaa4:	2303      	movs	r3, #3
 801aaa6:	e000      	b.n	801aaaa <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 801aaa8:	2300      	movs	r3, #0
}
 801aaaa:	4618      	mov	r0, r3
 801aaac:	3710      	adds	r7, #16
 801aaae:	46bd      	mov	sp, r7
 801aab0:	bd80      	pop	{r7, pc}
	...

0801aab4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 801aab4:	b580      	push	{r7, lr}
 801aab6:	b088      	sub	sp, #32
 801aab8:	af02      	add	r7, sp, #8
 801aaba:	60f8      	str	r0, [r7, #12]
 801aabc:	60b9      	str	r1, [r7, #8]
 801aabe:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 801aac0:	687b      	ldr	r3, [r7, #4]
 801aac2:	9300      	str	r3, [sp, #0]
 801aac4:	68bb      	ldr	r3, [r7, #8]
 801aac6:	2201      	movs	r2, #1
 801aac8:	2102      	movs	r1, #2
 801aaca:	68f8      	ldr	r0, [r7, #12]
 801aacc:	f7ff ff04 	bl	801a8d8 <SPI_WaitFlagStateUntilTimeout>
 801aad0:	4603      	mov	r3, r0
 801aad2:	2b00      	cmp	r3, #0
 801aad4:	d007      	beq.n	801aae6 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 801aad6:	68fb      	ldr	r3, [r7, #12]
 801aad8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801aada:	f043 0220 	orr.w	r2, r3, #32
 801aade:	68fb      	ldr	r3, [r7, #12]
 801aae0:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 801aae2:	2303      	movs	r3, #3
 801aae4:	e032      	b.n	801ab4c <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in us */
  count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 801aae6:	4b1b      	ldr	r3, [pc, #108]	@ (801ab54 <SPI_EndRxTxTransaction+0xa0>)
 801aae8:	681b      	ldr	r3, [r3, #0]
 801aaea:	4a1b      	ldr	r2, [pc, #108]	@ (801ab58 <SPI_EndRxTxTransaction+0xa4>)
 801aaec:	fba2 2303 	umull	r2, r3, r2, r3
 801aaf0:	0d5b      	lsrs	r3, r3, #21
 801aaf2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 801aaf6:	fb02 f303 	mul.w	r3, r2, r3
 801aafa:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 801aafc:	68fb      	ldr	r3, [r7, #12]
 801aafe:	685b      	ldr	r3, [r3, #4]
 801ab00:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 801ab04:	d112      	bne.n	801ab2c <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 801ab06:	687b      	ldr	r3, [r7, #4]
 801ab08:	9300      	str	r3, [sp, #0]
 801ab0a:	68bb      	ldr	r3, [r7, #8]
 801ab0c:	2200      	movs	r2, #0
 801ab0e:	2180      	movs	r1, #128	@ 0x80
 801ab10:	68f8      	ldr	r0, [r7, #12]
 801ab12:	f7ff fee1 	bl	801a8d8 <SPI_WaitFlagStateUntilTimeout>
 801ab16:	4603      	mov	r3, r0
 801ab18:	2b00      	cmp	r3, #0
 801ab1a:	d016      	beq.n	801ab4a <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 801ab1c:	68fb      	ldr	r3, [r7, #12]
 801ab1e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801ab20:	f043 0220 	orr.w	r2, r3, #32
 801ab24:	68fb      	ldr	r3, [r7, #12]
 801ab26:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 801ab28:	2303      	movs	r3, #3
 801ab2a:	e00f      	b.n	801ab4c <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 801ab2c:	697b      	ldr	r3, [r7, #20]
 801ab2e:	2b00      	cmp	r3, #0
 801ab30:	d00a      	beq.n	801ab48 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 801ab32:	697b      	ldr	r3, [r7, #20]
 801ab34:	3b01      	subs	r3, #1
 801ab36:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 801ab38:	68fb      	ldr	r3, [r7, #12]
 801ab3a:	681b      	ldr	r3, [r3, #0]
 801ab3c:	689b      	ldr	r3, [r3, #8]
 801ab3e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801ab42:	2b80      	cmp	r3, #128	@ 0x80
 801ab44:	d0f2      	beq.n	801ab2c <SPI_EndRxTxTransaction+0x78>
 801ab46:	e000      	b.n	801ab4a <SPI_EndRxTxTransaction+0x96>
        break;
 801ab48:	bf00      	nop
  }

  return HAL_OK;
 801ab4a:	2300      	movs	r3, #0
}
 801ab4c:	4618      	mov	r0, r3
 801ab4e:	3718      	adds	r7, #24
 801ab50:	46bd      	mov	sp, r7
 801ab52:	bd80      	pop	{r7, pc}
 801ab54:	20000004 	.word	0x20000004
 801ab58:	165e9f81 	.word	0x165e9f81

0801ab5c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 801ab5c:	b580      	push	{r7, lr}
 801ab5e:	b082      	sub	sp, #8
 801ab60:	af00      	add	r7, sp, #0
 801ab62:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 801ab64:	687b      	ldr	r3, [r7, #4]
 801ab66:	2b00      	cmp	r3, #0
 801ab68:	d101      	bne.n	801ab6e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 801ab6a:	2301      	movs	r3, #1
 801ab6c:	e041      	b.n	801abf2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 801ab6e:	687b      	ldr	r3, [r7, #4]
 801ab70:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 801ab74:	b2db      	uxtb	r3, r3
 801ab76:	2b00      	cmp	r3, #0
 801ab78:	d106      	bne.n	801ab88 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 801ab7a:	687b      	ldr	r3, [r7, #4]
 801ab7c:	2200      	movs	r2, #0
 801ab7e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 801ab82:	6878      	ldr	r0, [r7, #4]
 801ab84:	f7f7 fa8a 	bl	801209c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801ab88:	687b      	ldr	r3, [r7, #4]
 801ab8a:	2202      	movs	r2, #2
 801ab8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 801ab90:	687b      	ldr	r3, [r7, #4]
 801ab92:	681a      	ldr	r2, [r3, #0]
 801ab94:	687b      	ldr	r3, [r7, #4]
 801ab96:	3304      	adds	r3, #4
 801ab98:	4619      	mov	r1, r3
 801ab9a:	4610      	mov	r0, r2
 801ab9c:	f000 fa7e 	bl	801b09c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 801aba0:	687b      	ldr	r3, [r7, #4]
 801aba2:	2201      	movs	r2, #1
 801aba4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801aba8:	687b      	ldr	r3, [r7, #4]
 801abaa:	2201      	movs	r2, #1
 801abac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 801abb0:	687b      	ldr	r3, [r7, #4]
 801abb2:	2201      	movs	r2, #1
 801abb4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 801abb8:	687b      	ldr	r3, [r7, #4]
 801abba:	2201      	movs	r2, #1
 801abbc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 801abc0:	687b      	ldr	r3, [r7, #4]
 801abc2:	2201      	movs	r2, #1
 801abc4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801abc8:	687b      	ldr	r3, [r7, #4]
 801abca:	2201      	movs	r2, #1
 801abcc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 801abd0:	687b      	ldr	r3, [r7, #4]
 801abd2:	2201      	movs	r2, #1
 801abd4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 801abd8:	687b      	ldr	r3, [r7, #4]
 801abda:	2201      	movs	r2, #1
 801abdc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 801abe0:	687b      	ldr	r3, [r7, #4]
 801abe2:	2201      	movs	r2, #1
 801abe4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 801abe8:	687b      	ldr	r3, [r7, #4]
 801abea:	2201      	movs	r2, #1
 801abec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 801abf0:	2300      	movs	r3, #0
}
 801abf2:	4618      	mov	r0, r3
 801abf4:	3708      	adds	r7, #8
 801abf6:	46bd      	mov	sp, r7
 801abf8:	bd80      	pop	{r7, pc}
	...

0801abfc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 801abfc:	b480      	push	{r7}
 801abfe:	b085      	sub	sp, #20
 801ac00:	af00      	add	r7, sp, #0
 801ac02:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 801ac04:	687b      	ldr	r3, [r7, #4]
 801ac06:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 801ac0a:	b2db      	uxtb	r3, r3
 801ac0c:	2b01      	cmp	r3, #1
 801ac0e:	d001      	beq.n	801ac14 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 801ac10:	2301      	movs	r3, #1
 801ac12:	e04e      	b.n	801acb2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801ac14:	687b      	ldr	r3, [r7, #4]
 801ac16:	2202      	movs	r2, #2
 801ac18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 801ac1c:	687b      	ldr	r3, [r7, #4]
 801ac1e:	681b      	ldr	r3, [r3, #0]
 801ac20:	68da      	ldr	r2, [r3, #12]
 801ac22:	687b      	ldr	r3, [r7, #4]
 801ac24:	681b      	ldr	r3, [r3, #0]
 801ac26:	f042 0201 	orr.w	r2, r2, #1
 801ac2a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801ac2c:	687b      	ldr	r3, [r7, #4]
 801ac2e:	681b      	ldr	r3, [r3, #0]
 801ac30:	4a23      	ldr	r2, [pc, #140]	@ (801acc0 <HAL_TIM_Base_Start_IT+0xc4>)
 801ac32:	4293      	cmp	r3, r2
 801ac34:	d022      	beq.n	801ac7c <HAL_TIM_Base_Start_IT+0x80>
 801ac36:	687b      	ldr	r3, [r7, #4]
 801ac38:	681b      	ldr	r3, [r3, #0]
 801ac3a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801ac3e:	d01d      	beq.n	801ac7c <HAL_TIM_Base_Start_IT+0x80>
 801ac40:	687b      	ldr	r3, [r7, #4]
 801ac42:	681b      	ldr	r3, [r3, #0]
 801ac44:	4a1f      	ldr	r2, [pc, #124]	@ (801acc4 <HAL_TIM_Base_Start_IT+0xc8>)
 801ac46:	4293      	cmp	r3, r2
 801ac48:	d018      	beq.n	801ac7c <HAL_TIM_Base_Start_IT+0x80>
 801ac4a:	687b      	ldr	r3, [r7, #4]
 801ac4c:	681b      	ldr	r3, [r3, #0]
 801ac4e:	4a1e      	ldr	r2, [pc, #120]	@ (801acc8 <HAL_TIM_Base_Start_IT+0xcc>)
 801ac50:	4293      	cmp	r3, r2
 801ac52:	d013      	beq.n	801ac7c <HAL_TIM_Base_Start_IT+0x80>
 801ac54:	687b      	ldr	r3, [r7, #4]
 801ac56:	681b      	ldr	r3, [r3, #0]
 801ac58:	4a1c      	ldr	r2, [pc, #112]	@ (801accc <HAL_TIM_Base_Start_IT+0xd0>)
 801ac5a:	4293      	cmp	r3, r2
 801ac5c:	d00e      	beq.n	801ac7c <HAL_TIM_Base_Start_IT+0x80>
 801ac5e:	687b      	ldr	r3, [r7, #4]
 801ac60:	681b      	ldr	r3, [r3, #0]
 801ac62:	4a1b      	ldr	r2, [pc, #108]	@ (801acd0 <HAL_TIM_Base_Start_IT+0xd4>)
 801ac64:	4293      	cmp	r3, r2
 801ac66:	d009      	beq.n	801ac7c <HAL_TIM_Base_Start_IT+0x80>
 801ac68:	687b      	ldr	r3, [r7, #4]
 801ac6a:	681b      	ldr	r3, [r3, #0]
 801ac6c:	4a19      	ldr	r2, [pc, #100]	@ (801acd4 <HAL_TIM_Base_Start_IT+0xd8>)
 801ac6e:	4293      	cmp	r3, r2
 801ac70:	d004      	beq.n	801ac7c <HAL_TIM_Base_Start_IT+0x80>
 801ac72:	687b      	ldr	r3, [r7, #4]
 801ac74:	681b      	ldr	r3, [r3, #0]
 801ac76:	4a18      	ldr	r2, [pc, #96]	@ (801acd8 <HAL_TIM_Base_Start_IT+0xdc>)
 801ac78:	4293      	cmp	r3, r2
 801ac7a:	d111      	bne.n	801aca0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 801ac7c:	687b      	ldr	r3, [r7, #4]
 801ac7e:	681b      	ldr	r3, [r3, #0]
 801ac80:	689b      	ldr	r3, [r3, #8]
 801ac82:	f003 0307 	and.w	r3, r3, #7
 801ac86:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801ac88:	68fb      	ldr	r3, [r7, #12]
 801ac8a:	2b06      	cmp	r3, #6
 801ac8c:	d010      	beq.n	801acb0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 801ac8e:	687b      	ldr	r3, [r7, #4]
 801ac90:	681b      	ldr	r3, [r3, #0]
 801ac92:	681a      	ldr	r2, [r3, #0]
 801ac94:	687b      	ldr	r3, [r7, #4]
 801ac96:	681b      	ldr	r3, [r3, #0]
 801ac98:	f042 0201 	orr.w	r2, r2, #1
 801ac9c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801ac9e:	e007      	b.n	801acb0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 801aca0:	687b      	ldr	r3, [r7, #4]
 801aca2:	681b      	ldr	r3, [r3, #0]
 801aca4:	681a      	ldr	r2, [r3, #0]
 801aca6:	687b      	ldr	r3, [r7, #4]
 801aca8:	681b      	ldr	r3, [r3, #0]
 801acaa:	f042 0201 	orr.w	r2, r2, #1
 801acae:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 801acb0:	2300      	movs	r3, #0
}
 801acb2:	4618      	mov	r0, r3
 801acb4:	3714      	adds	r7, #20
 801acb6:	46bd      	mov	sp, r7
 801acb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801acbc:	4770      	bx	lr
 801acbe:	bf00      	nop
 801acc0:	40010000 	.word	0x40010000
 801acc4:	40000400 	.word	0x40000400
 801acc8:	40000800 	.word	0x40000800
 801accc:	40000c00 	.word	0x40000c00
 801acd0:	40010400 	.word	0x40010400
 801acd4:	40014000 	.word	0x40014000
 801acd8:	40001800 	.word	0x40001800

0801acdc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 801acdc:	b580      	push	{r7, lr}
 801acde:	b084      	sub	sp, #16
 801ace0:	af00      	add	r7, sp, #0
 801ace2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 801ace4:	687b      	ldr	r3, [r7, #4]
 801ace6:	681b      	ldr	r3, [r3, #0]
 801ace8:	68db      	ldr	r3, [r3, #12]
 801acea:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 801acec:	687b      	ldr	r3, [r7, #4]
 801acee:	681b      	ldr	r3, [r3, #0]
 801acf0:	691b      	ldr	r3, [r3, #16]
 801acf2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 801acf4:	68bb      	ldr	r3, [r7, #8]
 801acf6:	f003 0302 	and.w	r3, r3, #2
 801acfa:	2b00      	cmp	r3, #0
 801acfc:	d020      	beq.n	801ad40 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 801acfe:	68fb      	ldr	r3, [r7, #12]
 801ad00:	f003 0302 	and.w	r3, r3, #2
 801ad04:	2b00      	cmp	r3, #0
 801ad06:	d01b      	beq.n	801ad40 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 801ad08:	687b      	ldr	r3, [r7, #4]
 801ad0a:	681b      	ldr	r3, [r3, #0]
 801ad0c:	f06f 0202 	mvn.w	r2, #2
 801ad10:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 801ad12:	687b      	ldr	r3, [r7, #4]
 801ad14:	2201      	movs	r2, #1
 801ad16:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 801ad18:	687b      	ldr	r3, [r7, #4]
 801ad1a:	681b      	ldr	r3, [r3, #0]
 801ad1c:	699b      	ldr	r3, [r3, #24]
 801ad1e:	f003 0303 	and.w	r3, r3, #3
 801ad22:	2b00      	cmp	r3, #0
 801ad24:	d003      	beq.n	801ad2e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 801ad26:	6878      	ldr	r0, [r7, #4]
 801ad28:	f000 f999 	bl	801b05e <HAL_TIM_IC_CaptureCallback>
 801ad2c:	e005      	b.n	801ad3a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 801ad2e:	6878      	ldr	r0, [r7, #4]
 801ad30:	f000 f98b 	bl	801b04a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 801ad34:	6878      	ldr	r0, [r7, #4]
 801ad36:	f000 f99c 	bl	801b072 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801ad3a:	687b      	ldr	r3, [r7, #4]
 801ad3c:	2200      	movs	r2, #0
 801ad3e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 801ad40:	68bb      	ldr	r3, [r7, #8]
 801ad42:	f003 0304 	and.w	r3, r3, #4
 801ad46:	2b00      	cmp	r3, #0
 801ad48:	d020      	beq.n	801ad8c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 801ad4a:	68fb      	ldr	r3, [r7, #12]
 801ad4c:	f003 0304 	and.w	r3, r3, #4
 801ad50:	2b00      	cmp	r3, #0
 801ad52:	d01b      	beq.n	801ad8c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 801ad54:	687b      	ldr	r3, [r7, #4]
 801ad56:	681b      	ldr	r3, [r3, #0]
 801ad58:	f06f 0204 	mvn.w	r2, #4
 801ad5c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 801ad5e:	687b      	ldr	r3, [r7, #4]
 801ad60:	2202      	movs	r2, #2
 801ad62:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 801ad64:	687b      	ldr	r3, [r7, #4]
 801ad66:	681b      	ldr	r3, [r3, #0]
 801ad68:	699b      	ldr	r3, [r3, #24]
 801ad6a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 801ad6e:	2b00      	cmp	r3, #0
 801ad70:	d003      	beq.n	801ad7a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801ad72:	6878      	ldr	r0, [r7, #4]
 801ad74:	f000 f973 	bl	801b05e <HAL_TIM_IC_CaptureCallback>
 801ad78:	e005      	b.n	801ad86 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801ad7a:	6878      	ldr	r0, [r7, #4]
 801ad7c:	f000 f965 	bl	801b04a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 801ad80:	6878      	ldr	r0, [r7, #4]
 801ad82:	f000 f976 	bl	801b072 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801ad86:	687b      	ldr	r3, [r7, #4]
 801ad88:	2200      	movs	r2, #0
 801ad8a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 801ad8c:	68bb      	ldr	r3, [r7, #8]
 801ad8e:	f003 0308 	and.w	r3, r3, #8
 801ad92:	2b00      	cmp	r3, #0
 801ad94:	d020      	beq.n	801add8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 801ad96:	68fb      	ldr	r3, [r7, #12]
 801ad98:	f003 0308 	and.w	r3, r3, #8
 801ad9c:	2b00      	cmp	r3, #0
 801ad9e:	d01b      	beq.n	801add8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 801ada0:	687b      	ldr	r3, [r7, #4]
 801ada2:	681b      	ldr	r3, [r3, #0]
 801ada4:	f06f 0208 	mvn.w	r2, #8
 801ada8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 801adaa:	687b      	ldr	r3, [r7, #4]
 801adac:	2204      	movs	r2, #4
 801adae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 801adb0:	687b      	ldr	r3, [r7, #4]
 801adb2:	681b      	ldr	r3, [r3, #0]
 801adb4:	69db      	ldr	r3, [r3, #28]
 801adb6:	f003 0303 	and.w	r3, r3, #3
 801adba:	2b00      	cmp	r3, #0
 801adbc:	d003      	beq.n	801adc6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801adbe:	6878      	ldr	r0, [r7, #4]
 801adc0:	f000 f94d 	bl	801b05e <HAL_TIM_IC_CaptureCallback>
 801adc4:	e005      	b.n	801add2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801adc6:	6878      	ldr	r0, [r7, #4]
 801adc8:	f000 f93f 	bl	801b04a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 801adcc:	6878      	ldr	r0, [r7, #4]
 801adce:	f000 f950 	bl	801b072 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801add2:	687b      	ldr	r3, [r7, #4]
 801add4:	2200      	movs	r2, #0
 801add6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 801add8:	68bb      	ldr	r3, [r7, #8]
 801adda:	f003 0310 	and.w	r3, r3, #16
 801adde:	2b00      	cmp	r3, #0
 801ade0:	d020      	beq.n	801ae24 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 801ade2:	68fb      	ldr	r3, [r7, #12]
 801ade4:	f003 0310 	and.w	r3, r3, #16
 801ade8:	2b00      	cmp	r3, #0
 801adea:	d01b      	beq.n	801ae24 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 801adec:	687b      	ldr	r3, [r7, #4]
 801adee:	681b      	ldr	r3, [r3, #0]
 801adf0:	f06f 0210 	mvn.w	r2, #16
 801adf4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 801adf6:	687b      	ldr	r3, [r7, #4]
 801adf8:	2208      	movs	r2, #8
 801adfa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 801adfc:	687b      	ldr	r3, [r7, #4]
 801adfe:	681b      	ldr	r3, [r3, #0]
 801ae00:	69db      	ldr	r3, [r3, #28]
 801ae02:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 801ae06:	2b00      	cmp	r3, #0
 801ae08:	d003      	beq.n	801ae12 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801ae0a:	6878      	ldr	r0, [r7, #4]
 801ae0c:	f000 f927 	bl	801b05e <HAL_TIM_IC_CaptureCallback>
 801ae10:	e005      	b.n	801ae1e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801ae12:	6878      	ldr	r0, [r7, #4]
 801ae14:	f000 f919 	bl	801b04a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 801ae18:	6878      	ldr	r0, [r7, #4]
 801ae1a:	f000 f92a 	bl	801b072 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801ae1e:	687b      	ldr	r3, [r7, #4]
 801ae20:	2200      	movs	r2, #0
 801ae22:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 801ae24:	68bb      	ldr	r3, [r7, #8]
 801ae26:	f003 0301 	and.w	r3, r3, #1
 801ae2a:	2b00      	cmp	r3, #0
 801ae2c:	d00c      	beq.n	801ae48 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 801ae2e:	68fb      	ldr	r3, [r7, #12]
 801ae30:	f003 0301 	and.w	r3, r3, #1
 801ae34:	2b00      	cmp	r3, #0
 801ae36:	d007      	beq.n	801ae48 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 801ae38:	687b      	ldr	r3, [r7, #4]
 801ae3a:	681b      	ldr	r3, [r3, #0]
 801ae3c:	f06f 0201 	mvn.w	r2, #1
 801ae40:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 801ae42:	6878      	ldr	r0, [r7, #4]
 801ae44:	f7f6 fe7a 	bl	8011b3c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 801ae48:	68bb      	ldr	r3, [r7, #8]
 801ae4a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801ae4e:	2b00      	cmp	r3, #0
 801ae50:	d00c      	beq.n	801ae6c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 801ae52:	68fb      	ldr	r3, [r7, #12]
 801ae54:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801ae58:	2b00      	cmp	r3, #0
 801ae5a:	d007      	beq.n	801ae6c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 801ae5c:	687b      	ldr	r3, [r7, #4]
 801ae5e:	681b      	ldr	r3, [r3, #0]
 801ae60:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 801ae64:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 801ae66:	6878      	ldr	r0, [r7, #4]
 801ae68:	f000 fade 	bl	801b428 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 801ae6c:	68bb      	ldr	r3, [r7, #8]
 801ae6e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801ae72:	2b00      	cmp	r3, #0
 801ae74:	d00c      	beq.n	801ae90 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 801ae76:	68fb      	ldr	r3, [r7, #12]
 801ae78:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801ae7c:	2b00      	cmp	r3, #0
 801ae7e:	d007      	beq.n	801ae90 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 801ae80:	687b      	ldr	r3, [r7, #4]
 801ae82:	681b      	ldr	r3, [r3, #0]
 801ae84:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 801ae88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 801ae8a:	6878      	ldr	r0, [r7, #4]
 801ae8c:	f000 f8fb 	bl	801b086 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 801ae90:	68bb      	ldr	r3, [r7, #8]
 801ae92:	f003 0320 	and.w	r3, r3, #32
 801ae96:	2b00      	cmp	r3, #0
 801ae98:	d00c      	beq.n	801aeb4 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 801ae9a:	68fb      	ldr	r3, [r7, #12]
 801ae9c:	f003 0320 	and.w	r3, r3, #32
 801aea0:	2b00      	cmp	r3, #0
 801aea2:	d007      	beq.n	801aeb4 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 801aea4:	687b      	ldr	r3, [r7, #4]
 801aea6:	681b      	ldr	r3, [r3, #0]
 801aea8:	f06f 0220 	mvn.w	r2, #32
 801aeac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 801aeae:	6878      	ldr	r0, [r7, #4]
 801aeb0:	f000 fab0 	bl	801b414 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 801aeb4:	bf00      	nop
 801aeb6:	3710      	adds	r7, #16
 801aeb8:	46bd      	mov	sp, r7
 801aeba:	bd80      	pop	{r7, pc}

0801aebc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 801aebc:	b580      	push	{r7, lr}
 801aebe:	b084      	sub	sp, #16
 801aec0:	af00      	add	r7, sp, #0
 801aec2:	6078      	str	r0, [r7, #4]
 801aec4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 801aec6:	2300      	movs	r3, #0
 801aec8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 801aeca:	687b      	ldr	r3, [r7, #4]
 801aecc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 801aed0:	2b01      	cmp	r3, #1
 801aed2:	d101      	bne.n	801aed8 <HAL_TIM_ConfigClockSource+0x1c>
 801aed4:	2302      	movs	r3, #2
 801aed6:	e0b4      	b.n	801b042 <HAL_TIM_ConfigClockSource+0x186>
 801aed8:	687b      	ldr	r3, [r7, #4]
 801aeda:	2201      	movs	r2, #1
 801aedc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 801aee0:	687b      	ldr	r3, [r7, #4]
 801aee2:	2202      	movs	r2, #2
 801aee4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 801aee8:	687b      	ldr	r3, [r7, #4]
 801aeea:	681b      	ldr	r3, [r3, #0]
 801aeec:	689b      	ldr	r3, [r3, #8]
 801aeee:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 801aef0:	68bb      	ldr	r3, [r7, #8]
 801aef2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 801aef6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 801aef8:	68bb      	ldr	r3, [r7, #8]
 801aefa:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 801aefe:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 801af00:	687b      	ldr	r3, [r7, #4]
 801af02:	681b      	ldr	r3, [r3, #0]
 801af04:	68ba      	ldr	r2, [r7, #8]
 801af06:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 801af08:	683b      	ldr	r3, [r7, #0]
 801af0a:	681b      	ldr	r3, [r3, #0]
 801af0c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 801af10:	d03e      	beq.n	801af90 <HAL_TIM_ConfigClockSource+0xd4>
 801af12:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 801af16:	f200 8087 	bhi.w	801b028 <HAL_TIM_ConfigClockSource+0x16c>
 801af1a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801af1e:	f000 8086 	beq.w	801b02e <HAL_TIM_ConfigClockSource+0x172>
 801af22:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801af26:	d87f      	bhi.n	801b028 <HAL_TIM_ConfigClockSource+0x16c>
 801af28:	2b70      	cmp	r3, #112	@ 0x70
 801af2a:	d01a      	beq.n	801af62 <HAL_TIM_ConfigClockSource+0xa6>
 801af2c:	2b70      	cmp	r3, #112	@ 0x70
 801af2e:	d87b      	bhi.n	801b028 <HAL_TIM_ConfigClockSource+0x16c>
 801af30:	2b60      	cmp	r3, #96	@ 0x60
 801af32:	d050      	beq.n	801afd6 <HAL_TIM_ConfigClockSource+0x11a>
 801af34:	2b60      	cmp	r3, #96	@ 0x60
 801af36:	d877      	bhi.n	801b028 <HAL_TIM_ConfigClockSource+0x16c>
 801af38:	2b50      	cmp	r3, #80	@ 0x50
 801af3a:	d03c      	beq.n	801afb6 <HAL_TIM_ConfigClockSource+0xfa>
 801af3c:	2b50      	cmp	r3, #80	@ 0x50
 801af3e:	d873      	bhi.n	801b028 <HAL_TIM_ConfigClockSource+0x16c>
 801af40:	2b40      	cmp	r3, #64	@ 0x40
 801af42:	d058      	beq.n	801aff6 <HAL_TIM_ConfigClockSource+0x13a>
 801af44:	2b40      	cmp	r3, #64	@ 0x40
 801af46:	d86f      	bhi.n	801b028 <HAL_TIM_ConfigClockSource+0x16c>
 801af48:	2b30      	cmp	r3, #48	@ 0x30
 801af4a:	d064      	beq.n	801b016 <HAL_TIM_ConfigClockSource+0x15a>
 801af4c:	2b30      	cmp	r3, #48	@ 0x30
 801af4e:	d86b      	bhi.n	801b028 <HAL_TIM_ConfigClockSource+0x16c>
 801af50:	2b20      	cmp	r3, #32
 801af52:	d060      	beq.n	801b016 <HAL_TIM_ConfigClockSource+0x15a>
 801af54:	2b20      	cmp	r3, #32
 801af56:	d867      	bhi.n	801b028 <HAL_TIM_ConfigClockSource+0x16c>
 801af58:	2b00      	cmp	r3, #0
 801af5a:	d05c      	beq.n	801b016 <HAL_TIM_ConfigClockSource+0x15a>
 801af5c:	2b10      	cmp	r3, #16
 801af5e:	d05a      	beq.n	801b016 <HAL_TIM_ConfigClockSource+0x15a>
 801af60:	e062      	b.n	801b028 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 801af62:	687b      	ldr	r3, [r7, #4]
 801af64:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 801af66:	683b      	ldr	r3, [r7, #0]
 801af68:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 801af6a:	683b      	ldr	r3, [r7, #0]
 801af6c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 801af6e:	683b      	ldr	r3, [r7, #0]
 801af70:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 801af72:	f000 f9b3 	bl	801b2dc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 801af76:	687b      	ldr	r3, [r7, #4]
 801af78:	681b      	ldr	r3, [r3, #0]
 801af7a:	689b      	ldr	r3, [r3, #8]
 801af7c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 801af7e:	68bb      	ldr	r3, [r7, #8]
 801af80:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 801af84:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 801af86:	687b      	ldr	r3, [r7, #4]
 801af88:	681b      	ldr	r3, [r3, #0]
 801af8a:	68ba      	ldr	r2, [r7, #8]
 801af8c:	609a      	str	r2, [r3, #8]
      break;
 801af8e:	e04f      	b.n	801b030 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 801af90:	687b      	ldr	r3, [r7, #4]
 801af92:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 801af94:	683b      	ldr	r3, [r7, #0]
 801af96:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 801af98:	683b      	ldr	r3, [r7, #0]
 801af9a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 801af9c:	683b      	ldr	r3, [r7, #0]
 801af9e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 801afa0:	f000 f99c 	bl	801b2dc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 801afa4:	687b      	ldr	r3, [r7, #4]
 801afa6:	681b      	ldr	r3, [r3, #0]
 801afa8:	689a      	ldr	r2, [r3, #8]
 801afaa:	687b      	ldr	r3, [r7, #4]
 801afac:	681b      	ldr	r3, [r3, #0]
 801afae:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 801afb2:	609a      	str	r2, [r3, #8]
      break;
 801afb4:	e03c      	b.n	801b030 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 801afb6:	687b      	ldr	r3, [r7, #4]
 801afb8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 801afba:	683b      	ldr	r3, [r7, #0]
 801afbc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 801afbe:	683b      	ldr	r3, [r7, #0]
 801afc0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 801afc2:	461a      	mov	r2, r3
 801afc4:	f000 f910 	bl	801b1e8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 801afc8:	687b      	ldr	r3, [r7, #4]
 801afca:	681b      	ldr	r3, [r3, #0]
 801afcc:	2150      	movs	r1, #80	@ 0x50
 801afce:	4618      	mov	r0, r3
 801afd0:	f000 f969 	bl	801b2a6 <TIM_ITRx_SetConfig>
      break;
 801afd4:	e02c      	b.n	801b030 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 801afd6:	687b      	ldr	r3, [r7, #4]
 801afd8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 801afda:	683b      	ldr	r3, [r7, #0]
 801afdc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 801afde:	683b      	ldr	r3, [r7, #0]
 801afe0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 801afe2:	461a      	mov	r2, r3
 801afe4:	f000 f92f 	bl	801b246 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 801afe8:	687b      	ldr	r3, [r7, #4]
 801afea:	681b      	ldr	r3, [r3, #0]
 801afec:	2160      	movs	r1, #96	@ 0x60
 801afee:	4618      	mov	r0, r3
 801aff0:	f000 f959 	bl	801b2a6 <TIM_ITRx_SetConfig>
      break;
 801aff4:	e01c      	b.n	801b030 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 801aff6:	687b      	ldr	r3, [r7, #4]
 801aff8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 801affa:	683b      	ldr	r3, [r7, #0]
 801affc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 801affe:	683b      	ldr	r3, [r7, #0]
 801b000:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 801b002:	461a      	mov	r2, r3
 801b004:	f000 f8f0 	bl	801b1e8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 801b008:	687b      	ldr	r3, [r7, #4]
 801b00a:	681b      	ldr	r3, [r3, #0]
 801b00c:	2140      	movs	r1, #64	@ 0x40
 801b00e:	4618      	mov	r0, r3
 801b010:	f000 f949 	bl	801b2a6 <TIM_ITRx_SetConfig>
      break;
 801b014:	e00c      	b.n	801b030 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 801b016:	687b      	ldr	r3, [r7, #4]
 801b018:	681a      	ldr	r2, [r3, #0]
 801b01a:	683b      	ldr	r3, [r7, #0]
 801b01c:	681b      	ldr	r3, [r3, #0]
 801b01e:	4619      	mov	r1, r3
 801b020:	4610      	mov	r0, r2
 801b022:	f000 f940 	bl	801b2a6 <TIM_ITRx_SetConfig>
      break;
 801b026:	e003      	b.n	801b030 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 801b028:	2301      	movs	r3, #1
 801b02a:	73fb      	strb	r3, [r7, #15]
      break;
 801b02c:	e000      	b.n	801b030 <HAL_TIM_ConfigClockSource+0x174>
      break;
 801b02e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 801b030:	687b      	ldr	r3, [r7, #4]
 801b032:	2201      	movs	r2, #1
 801b034:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 801b038:	687b      	ldr	r3, [r7, #4]
 801b03a:	2200      	movs	r2, #0
 801b03c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 801b040:	7bfb      	ldrb	r3, [r7, #15]
}
 801b042:	4618      	mov	r0, r3
 801b044:	3710      	adds	r7, #16
 801b046:	46bd      	mov	sp, r7
 801b048:	bd80      	pop	{r7, pc}

0801b04a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 801b04a:	b480      	push	{r7}
 801b04c:	b083      	sub	sp, #12
 801b04e:	af00      	add	r7, sp, #0
 801b050:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 801b052:	bf00      	nop
 801b054:	370c      	adds	r7, #12
 801b056:	46bd      	mov	sp, r7
 801b058:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b05c:	4770      	bx	lr

0801b05e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 801b05e:	b480      	push	{r7}
 801b060:	b083      	sub	sp, #12
 801b062:	af00      	add	r7, sp, #0
 801b064:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 801b066:	bf00      	nop
 801b068:	370c      	adds	r7, #12
 801b06a:	46bd      	mov	sp, r7
 801b06c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b070:	4770      	bx	lr

0801b072 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 801b072:	b480      	push	{r7}
 801b074:	b083      	sub	sp, #12
 801b076:	af00      	add	r7, sp, #0
 801b078:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 801b07a:	bf00      	nop
 801b07c:	370c      	adds	r7, #12
 801b07e:	46bd      	mov	sp, r7
 801b080:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b084:	4770      	bx	lr

0801b086 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 801b086:	b480      	push	{r7}
 801b088:	b083      	sub	sp, #12
 801b08a:	af00      	add	r7, sp, #0
 801b08c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 801b08e:	bf00      	nop
 801b090:	370c      	adds	r7, #12
 801b092:	46bd      	mov	sp, r7
 801b094:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b098:	4770      	bx	lr
	...

0801b09c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 801b09c:	b480      	push	{r7}
 801b09e:	b085      	sub	sp, #20
 801b0a0:	af00      	add	r7, sp, #0
 801b0a2:	6078      	str	r0, [r7, #4]
 801b0a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 801b0a6:	687b      	ldr	r3, [r7, #4]
 801b0a8:	681b      	ldr	r3, [r3, #0]
 801b0aa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 801b0ac:	687b      	ldr	r3, [r7, #4]
 801b0ae:	4a43      	ldr	r2, [pc, #268]	@ (801b1bc <TIM_Base_SetConfig+0x120>)
 801b0b0:	4293      	cmp	r3, r2
 801b0b2:	d013      	beq.n	801b0dc <TIM_Base_SetConfig+0x40>
 801b0b4:	687b      	ldr	r3, [r7, #4]
 801b0b6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801b0ba:	d00f      	beq.n	801b0dc <TIM_Base_SetConfig+0x40>
 801b0bc:	687b      	ldr	r3, [r7, #4]
 801b0be:	4a40      	ldr	r2, [pc, #256]	@ (801b1c0 <TIM_Base_SetConfig+0x124>)
 801b0c0:	4293      	cmp	r3, r2
 801b0c2:	d00b      	beq.n	801b0dc <TIM_Base_SetConfig+0x40>
 801b0c4:	687b      	ldr	r3, [r7, #4]
 801b0c6:	4a3f      	ldr	r2, [pc, #252]	@ (801b1c4 <TIM_Base_SetConfig+0x128>)
 801b0c8:	4293      	cmp	r3, r2
 801b0ca:	d007      	beq.n	801b0dc <TIM_Base_SetConfig+0x40>
 801b0cc:	687b      	ldr	r3, [r7, #4]
 801b0ce:	4a3e      	ldr	r2, [pc, #248]	@ (801b1c8 <TIM_Base_SetConfig+0x12c>)
 801b0d0:	4293      	cmp	r3, r2
 801b0d2:	d003      	beq.n	801b0dc <TIM_Base_SetConfig+0x40>
 801b0d4:	687b      	ldr	r3, [r7, #4]
 801b0d6:	4a3d      	ldr	r2, [pc, #244]	@ (801b1cc <TIM_Base_SetConfig+0x130>)
 801b0d8:	4293      	cmp	r3, r2
 801b0da:	d108      	bne.n	801b0ee <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 801b0dc:	68fb      	ldr	r3, [r7, #12]
 801b0de:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 801b0e2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 801b0e4:	683b      	ldr	r3, [r7, #0]
 801b0e6:	685b      	ldr	r3, [r3, #4]
 801b0e8:	68fa      	ldr	r2, [r7, #12]
 801b0ea:	4313      	orrs	r3, r2
 801b0ec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 801b0ee:	687b      	ldr	r3, [r7, #4]
 801b0f0:	4a32      	ldr	r2, [pc, #200]	@ (801b1bc <TIM_Base_SetConfig+0x120>)
 801b0f2:	4293      	cmp	r3, r2
 801b0f4:	d02b      	beq.n	801b14e <TIM_Base_SetConfig+0xb2>
 801b0f6:	687b      	ldr	r3, [r7, #4]
 801b0f8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801b0fc:	d027      	beq.n	801b14e <TIM_Base_SetConfig+0xb2>
 801b0fe:	687b      	ldr	r3, [r7, #4]
 801b100:	4a2f      	ldr	r2, [pc, #188]	@ (801b1c0 <TIM_Base_SetConfig+0x124>)
 801b102:	4293      	cmp	r3, r2
 801b104:	d023      	beq.n	801b14e <TIM_Base_SetConfig+0xb2>
 801b106:	687b      	ldr	r3, [r7, #4]
 801b108:	4a2e      	ldr	r2, [pc, #184]	@ (801b1c4 <TIM_Base_SetConfig+0x128>)
 801b10a:	4293      	cmp	r3, r2
 801b10c:	d01f      	beq.n	801b14e <TIM_Base_SetConfig+0xb2>
 801b10e:	687b      	ldr	r3, [r7, #4]
 801b110:	4a2d      	ldr	r2, [pc, #180]	@ (801b1c8 <TIM_Base_SetConfig+0x12c>)
 801b112:	4293      	cmp	r3, r2
 801b114:	d01b      	beq.n	801b14e <TIM_Base_SetConfig+0xb2>
 801b116:	687b      	ldr	r3, [r7, #4]
 801b118:	4a2c      	ldr	r2, [pc, #176]	@ (801b1cc <TIM_Base_SetConfig+0x130>)
 801b11a:	4293      	cmp	r3, r2
 801b11c:	d017      	beq.n	801b14e <TIM_Base_SetConfig+0xb2>
 801b11e:	687b      	ldr	r3, [r7, #4]
 801b120:	4a2b      	ldr	r2, [pc, #172]	@ (801b1d0 <TIM_Base_SetConfig+0x134>)
 801b122:	4293      	cmp	r3, r2
 801b124:	d013      	beq.n	801b14e <TIM_Base_SetConfig+0xb2>
 801b126:	687b      	ldr	r3, [r7, #4]
 801b128:	4a2a      	ldr	r2, [pc, #168]	@ (801b1d4 <TIM_Base_SetConfig+0x138>)
 801b12a:	4293      	cmp	r3, r2
 801b12c:	d00f      	beq.n	801b14e <TIM_Base_SetConfig+0xb2>
 801b12e:	687b      	ldr	r3, [r7, #4]
 801b130:	4a29      	ldr	r2, [pc, #164]	@ (801b1d8 <TIM_Base_SetConfig+0x13c>)
 801b132:	4293      	cmp	r3, r2
 801b134:	d00b      	beq.n	801b14e <TIM_Base_SetConfig+0xb2>
 801b136:	687b      	ldr	r3, [r7, #4]
 801b138:	4a28      	ldr	r2, [pc, #160]	@ (801b1dc <TIM_Base_SetConfig+0x140>)
 801b13a:	4293      	cmp	r3, r2
 801b13c:	d007      	beq.n	801b14e <TIM_Base_SetConfig+0xb2>
 801b13e:	687b      	ldr	r3, [r7, #4]
 801b140:	4a27      	ldr	r2, [pc, #156]	@ (801b1e0 <TIM_Base_SetConfig+0x144>)
 801b142:	4293      	cmp	r3, r2
 801b144:	d003      	beq.n	801b14e <TIM_Base_SetConfig+0xb2>
 801b146:	687b      	ldr	r3, [r7, #4]
 801b148:	4a26      	ldr	r2, [pc, #152]	@ (801b1e4 <TIM_Base_SetConfig+0x148>)
 801b14a:	4293      	cmp	r3, r2
 801b14c:	d108      	bne.n	801b160 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 801b14e:	68fb      	ldr	r3, [r7, #12]
 801b150:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 801b154:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 801b156:	683b      	ldr	r3, [r7, #0]
 801b158:	68db      	ldr	r3, [r3, #12]
 801b15a:	68fa      	ldr	r2, [r7, #12]
 801b15c:	4313      	orrs	r3, r2
 801b15e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 801b160:	68fb      	ldr	r3, [r7, #12]
 801b162:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 801b166:	683b      	ldr	r3, [r7, #0]
 801b168:	695b      	ldr	r3, [r3, #20]
 801b16a:	4313      	orrs	r3, r2
 801b16c:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 801b16e:	683b      	ldr	r3, [r7, #0]
 801b170:	689a      	ldr	r2, [r3, #8]
 801b172:	687b      	ldr	r3, [r7, #4]
 801b174:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 801b176:	683b      	ldr	r3, [r7, #0]
 801b178:	681a      	ldr	r2, [r3, #0]
 801b17a:	687b      	ldr	r3, [r7, #4]
 801b17c:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 801b17e:	687b      	ldr	r3, [r7, #4]
 801b180:	4a0e      	ldr	r2, [pc, #56]	@ (801b1bc <TIM_Base_SetConfig+0x120>)
 801b182:	4293      	cmp	r3, r2
 801b184:	d003      	beq.n	801b18e <TIM_Base_SetConfig+0xf2>
 801b186:	687b      	ldr	r3, [r7, #4]
 801b188:	4a10      	ldr	r2, [pc, #64]	@ (801b1cc <TIM_Base_SetConfig+0x130>)
 801b18a:	4293      	cmp	r3, r2
 801b18c:	d103      	bne.n	801b196 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 801b18e:	683b      	ldr	r3, [r7, #0]
 801b190:	691a      	ldr	r2, [r3, #16]
 801b192:	687b      	ldr	r3, [r7, #4]
 801b194:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 801b196:	687b      	ldr	r3, [r7, #4]
 801b198:	681b      	ldr	r3, [r3, #0]
 801b19a:	f043 0204 	orr.w	r2, r3, #4
 801b19e:	687b      	ldr	r3, [r7, #4]
 801b1a0:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 801b1a2:	687b      	ldr	r3, [r7, #4]
 801b1a4:	2201      	movs	r2, #1
 801b1a6:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 801b1a8:	687b      	ldr	r3, [r7, #4]
 801b1aa:	68fa      	ldr	r2, [r7, #12]
 801b1ac:	601a      	str	r2, [r3, #0]
}
 801b1ae:	bf00      	nop
 801b1b0:	3714      	adds	r7, #20
 801b1b2:	46bd      	mov	sp, r7
 801b1b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b1b8:	4770      	bx	lr
 801b1ba:	bf00      	nop
 801b1bc:	40010000 	.word	0x40010000
 801b1c0:	40000400 	.word	0x40000400
 801b1c4:	40000800 	.word	0x40000800
 801b1c8:	40000c00 	.word	0x40000c00
 801b1cc:	40010400 	.word	0x40010400
 801b1d0:	40014000 	.word	0x40014000
 801b1d4:	40014400 	.word	0x40014400
 801b1d8:	40014800 	.word	0x40014800
 801b1dc:	40001800 	.word	0x40001800
 801b1e0:	40001c00 	.word	0x40001c00
 801b1e4:	40002000 	.word	0x40002000

0801b1e8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 801b1e8:	b480      	push	{r7}
 801b1ea:	b087      	sub	sp, #28
 801b1ec:	af00      	add	r7, sp, #0
 801b1ee:	60f8      	str	r0, [r7, #12]
 801b1f0:	60b9      	str	r1, [r7, #8]
 801b1f2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 801b1f4:	68fb      	ldr	r3, [r7, #12]
 801b1f6:	6a1b      	ldr	r3, [r3, #32]
 801b1f8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 801b1fa:	68fb      	ldr	r3, [r7, #12]
 801b1fc:	6a1b      	ldr	r3, [r3, #32]
 801b1fe:	f023 0201 	bic.w	r2, r3, #1
 801b202:	68fb      	ldr	r3, [r7, #12]
 801b204:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 801b206:	68fb      	ldr	r3, [r7, #12]
 801b208:	699b      	ldr	r3, [r3, #24]
 801b20a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 801b20c:	693b      	ldr	r3, [r7, #16]
 801b20e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 801b212:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 801b214:	687b      	ldr	r3, [r7, #4]
 801b216:	011b      	lsls	r3, r3, #4
 801b218:	693a      	ldr	r2, [r7, #16]
 801b21a:	4313      	orrs	r3, r2
 801b21c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 801b21e:	697b      	ldr	r3, [r7, #20]
 801b220:	f023 030a 	bic.w	r3, r3, #10
 801b224:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 801b226:	697a      	ldr	r2, [r7, #20]
 801b228:	68bb      	ldr	r3, [r7, #8]
 801b22a:	4313      	orrs	r3, r2
 801b22c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 801b22e:	68fb      	ldr	r3, [r7, #12]
 801b230:	693a      	ldr	r2, [r7, #16]
 801b232:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 801b234:	68fb      	ldr	r3, [r7, #12]
 801b236:	697a      	ldr	r2, [r7, #20]
 801b238:	621a      	str	r2, [r3, #32]
}
 801b23a:	bf00      	nop
 801b23c:	371c      	adds	r7, #28
 801b23e:	46bd      	mov	sp, r7
 801b240:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b244:	4770      	bx	lr

0801b246 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 801b246:	b480      	push	{r7}
 801b248:	b087      	sub	sp, #28
 801b24a:	af00      	add	r7, sp, #0
 801b24c:	60f8      	str	r0, [r7, #12]
 801b24e:	60b9      	str	r1, [r7, #8]
 801b250:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 801b252:	68fb      	ldr	r3, [r7, #12]
 801b254:	6a1b      	ldr	r3, [r3, #32]
 801b256:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 801b258:	68fb      	ldr	r3, [r7, #12]
 801b25a:	6a1b      	ldr	r3, [r3, #32]
 801b25c:	f023 0210 	bic.w	r2, r3, #16
 801b260:	68fb      	ldr	r3, [r7, #12]
 801b262:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 801b264:	68fb      	ldr	r3, [r7, #12]
 801b266:	699b      	ldr	r3, [r3, #24]
 801b268:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 801b26a:	693b      	ldr	r3, [r7, #16]
 801b26c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 801b270:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 801b272:	687b      	ldr	r3, [r7, #4]
 801b274:	031b      	lsls	r3, r3, #12
 801b276:	693a      	ldr	r2, [r7, #16]
 801b278:	4313      	orrs	r3, r2
 801b27a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 801b27c:	697b      	ldr	r3, [r7, #20]
 801b27e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 801b282:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 801b284:	68bb      	ldr	r3, [r7, #8]
 801b286:	011b      	lsls	r3, r3, #4
 801b288:	697a      	ldr	r2, [r7, #20]
 801b28a:	4313      	orrs	r3, r2
 801b28c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 801b28e:	68fb      	ldr	r3, [r7, #12]
 801b290:	693a      	ldr	r2, [r7, #16]
 801b292:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 801b294:	68fb      	ldr	r3, [r7, #12]
 801b296:	697a      	ldr	r2, [r7, #20]
 801b298:	621a      	str	r2, [r3, #32]
}
 801b29a:	bf00      	nop
 801b29c:	371c      	adds	r7, #28
 801b29e:	46bd      	mov	sp, r7
 801b2a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b2a4:	4770      	bx	lr

0801b2a6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 801b2a6:	b480      	push	{r7}
 801b2a8:	b085      	sub	sp, #20
 801b2aa:	af00      	add	r7, sp, #0
 801b2ac:	6078      	str	r0, [r7, #4]
 801b2ae:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 801b2b0:	687b      	ldr	r3, [r7, #4]
 801b2b2:	689b      	ldr	r3, [r3, #8]
 801b2b4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 801b2b6:	68fb      	ldr	r3, [r7, #12]
 801b2b8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 801b2bc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 801b2be:	683a      	ldr	r2, [r7, #0]
 801b2c0:	68fb      	ldr	r3, [r7, #12]
 801b2c2:	4313      	orrs	r3, r2
 801b2c4:	f043 0307 	orr.w	r3, r3, #7
 801b2c8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 801b2ca:	687b      	ldr	r3, [r7, #4]
 801b2cc:	68fa      	ldr	r2, [r7, #12]
 801b2ce:	609a      	str	r2, [r3, #8]
}
 801b2d0:	bf00      	nop
 801b2d2:	3714      	adds	r7, #20
 801b2d4:	46bd      	mov	sp, r7
 801b2d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b2da:	4770      	bx	lr

0801b2dc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 801b2dc:	b480      	push	{r7}
 801b2de:	b087      	sub	sp, #28
 801b2e0:	af00      	add	r7, sp, #0
 801b2e2:	60f8      	str	r0, [r7, #12]
 801b2e4:	60b9      	str	r1, [r7, #8]
 801b2e6:	607a      	str	r2, [r7, #4]
 801b2e8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 801b2ea:	68fb      	ldr	r3, [r7, #12]
 801b2ec:	689b      	ldr	r3, [r3, #8]
 801b2ee:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 801b2f0:	697b      	ldr	r3, [r7, #20]
 801b2f2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 801b2f6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 801b2f8:	683b      	ldr	r3, [r7, #0]
 801b2fa:	021a      	lsls	r2, r3, #8
 801b2fc:	687b      	ldr	r3, [r7, #4]
 801b2fe:	431a      	orrs	r2, r3
 801b300:	68bb      	ldr	r3, [r7, #8]
 801b302:	4313      	orrs	r3, r2
 801b304:	697a      	ldr	r2, [r7, #20]
 801b306:	4313      	orrs	r3, r2
 801b308:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 801b30a:	68fb      	ldr	r3, [r7, #12]
 801b30c:	697a      	ldr	r2, [r7, #20]
 801b30e:	609a      	str	r2, [r3, #8]
}
 801b310:	bf00      	nop
 801b312:	371c      	adds	r7, #28
 801b314:	46bd      	mov	sp, r7
 801b316:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b31a:	4770      	bx	lr

0801b31c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 801b31c:	b480      	push	{r7}
 801b31e:	b085      	sub	sp, #20
 801b320:	af00      	add	r7, sp, #0
 801b322:	6078      	str	r0, [r7, #4]
 801b324:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 801b326:	687b      	ldr	r3, [r7, #4]
 801b328:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 801b32c:	2b01      	cmp	r3, #1
 801b32e:	d101      	bne.n	801b334 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 801b330:	2302      	movs	r3, #2
 801b332:	e05a      	b.n	801b3ea <HAL_TIMEx_MasterConfigSynchronization+0xce>
 801b334:	687b      	ldr	r3, [r7, #4]
 801b336:	2201      	movs	r2, #1
 801b338:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 801b33c:	687b      	ldr	r3, [r7, #4]
 801b33e:	2202      	movs	r2, #2
 801b340:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 801b344:	687b      	ldr	r3, [r7, #4]
 801b346:	681b      	ldr	r3, [r3, #0]
 801b348:	685b      	ldr	r3, [r3, #4]
 801b34a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 801b34c:	687b      	ldr	r3, [r7, #4]
 801b34e:	681b      	ldr	r3, [r3, #0]
 801b350:	689b      	ldr	r3, [r3, #8]
 801b352:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 801b354:	68fb      	ldr	r3, [r7, #12]
 801b356:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 801b35a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 801b35c:	683b      	ldr	r3, [r7, #0]
 801b35e:	681b      	ldr	r3, [r3, #0]
 801b360:	68fa      	ldr	r2, [r7, #12]
 801b362:	4313      	orrs	r3, r2
 801b364:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 801b366:	687b      	ldr	r3, [r7, #4]
 801b368:	681b      	ldr	r3, [r3, #0]
 801b36a:	68fa      	ldr	r2, [r7, #12]
 801b36c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801b36e:	687b      	ldr	r3, [r7, #4]
 801b370:	681b      	ldr	r3, [r3, #0]
 801b372:	4a21      	ldr	r2, [pc, #132]	@ (801b3f8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 801b374:	4293      	cmp	r3, r2
 801b376:	d022      	beq.n	801b3be <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 801b378:	687b      	ldr	r3, [r7, #4]
 801b37a:	681b      	ldr	r3, [r3, #0]
 801b37c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801b380:	d01d      	beq.n	801b3be <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 801b382:	687b      	ldr	r3, [r7, #4]
 801b384:	681b      	ldr	r3, [r3, #0]
 801b386:	4a1d      	ldr	r2, [pc, #116]	@ (801b3fc <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 801b388:	4293      	cmp	r3, r2
 801b38a:	d018      	beq.n	801b3be <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 801b38c:	687b      	ldr	r3, [r7, #4]
 801b38e:	681b      	ldr	r3, [r3, #0]
 801b390:	4a1b      	ldr	r2, [pc, #108]	@ (801b400 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 801b392:	4293      	cmp	r3, r2
 801b394:	d013      	beq.n	801b3be <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 801b396:	687b      	ldr	r3, [r7, #4]
 801b398:	681b      	ldr	r3, [r3, #0]
 801b39a:	4a1a      	ldr	r2, [pc, #104]	@ (801b404 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 801b39c:	4293      	cmp	r3, r2
 801b39e:	d00e      	beq.n	801b3be <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 801b3a0:	687b      	ldr	r3, [r7, #4]
 801b3a2:	681b      	ldr	r3, [r3, #0]
 801b3a4:	4a18      	ldr	r2, [pc, #96]	@ (801b408 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 801b3a6:	4293      	cmp	r3, r2
 801b3a8:	d009      	beq.n	801b3be <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 801b3aa:	687b      	ldr	r3, [r7, #4]
 801b3ac:	681b      	ldr	r3, [r3, #0]
 801b3ae:	4a17      	ldr	r2, [pc, #92]	@ (801b40c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 801b3b0:	4293      	cmp	r3, r2
 801b3b2:	d004      	beq.n	801b3be <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 801b3b4:	687b      	ldr	r3, [r7, #4]
 801b3b6:	681b      	ldr	r3, [r3, #0]
 801b3b8:	4a15      	ldr	r2, [pc, #84]	@ (801b410 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 801b3ba:	4293      	cmp	r3, r2
 801b3bc:	d10c      	bne.n	801b3d8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 801b3be:	68bb      	ldr	r3, [r7, #8]
 801b3c0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 801b3c4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 801b3c6:	683b      	ldr	r3, [r7, #0]
 801b3c8:	685b      	ldr	r3, [r3, #4]
 801b3ca:	68ba      	ldr	r2, [r7, #8]
 801b3cc:	4313      	orrs	r3, r2
 801b3ce:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 801b3d0:	687b      	ldr	r3, [r7, #4]
 801b3d2:	681b      	ldr	r3, [r3, #0]
 801b3d4:	68ba      	ldr	r2, [r7, #8]
 801b3d6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 801b3d8:	687b      	ldr	r3, [r7, #4]
 801b3da:	2201      	movs	r2, #1
 801b3dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 801b3e0:	687b      	ldr	r3, [r7, #4]
 801b3e2:	2200      	movs	r2, #0
 801b3e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 801b3e8:	2300      	movs	r3, #0
}
 801b3ea:	4618      	mov	r0, r3
 801b3ec:	3714      	adds	r7, #20
 801b3ee:	46bd      	mov	sp, r7
 801b3f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b3f4:	4770      	bx	lr
 801b3f6:	bf00      	nop
 801b3f8:	40010000 	.word	0x40010000
 801b3fc:	40000400 	.word	0x40000400
 801b400:	40000800 	.word	0x40000800
 801b404:	40000c00 	.word	0x40000c00
 801b408:	40010400 	.word	0x40010400
 801b40c:	40014000 	.word	0x40014000
 801b410:	40001800 	.word	0x40001800

0801b414 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 801b414:	b480      	push	{r7}
 801b416:	b083      	sub	sp, #12
 801b418:	af00      	add	r7, sp, #0
 801b41a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 801b41c:	bf00      	nop
 801b41e:	370c      	adds	r7, #12
 801b420:	46bd      	mov	sp, r7
 801b422:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b426:	4770      	bx	lr

0801b428 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 801b428:	b480      	push	{r7}
 801b42a:	b083      	sub	sp, #12
 801b42c:	af00      	add	r7, sp, #0
 801b42e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 801b430:	bf00      	nop
 801b432:	370c      	adds	r7, #12
 801b434:	46bd      	mov	sp, r7
 801b436:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b43a:	4770      	bx	lr

0801b43c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 801b43c:	b580      	push	{r7, lr}
 801b43e:	b082      	sub	sp, #8
 801b440:	af00      	add	r7, sp, #0
 801b442:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 801b444:	687b      	ldr	r3, [r7, #4]
 801b446:	2b00      	cmp	r3, #0
 801b448:	d101      	bne.n	801b44e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 801b44a:	2301      	movs	r3, #1
 801b44c:	e042      	b.n	801b4d4 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 801b44e:	687b      	ldr	r3, [r7, #4]
 801b450:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 801b454:	b2db      	uxtb	r3, r3
 801b456:	2b00      	cmp	r3, #0
 801b458:	d106      	bne.n	801b468 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 801b45a:	687b      	ldr	r3, [r7, #4]
 801b45c:	2200      	movs	r2, #0
 801b45e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 801b462:	6878      	ldr	r0, [r7, #4]
 801b464:	f7f6 fe3c 	bl	80120e0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 801b468:	687b      	ldr	r3, [r7, #4]
 801b46a:	2224      	movs	r2, #36	@ 0x24
 801b46c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 801b470:	687b      	ldr	r3, [r7, #4]
 801b472:	681b      	ldr	r3, [r3, #0]
 801b474:	68da      	ldr	r2, [r3, #12]
 801b476:	687b      	ldr	r3, [r7, #4]
 801b478:	681b      	ldr	r3, [r3, #0]
 801b47a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 801b47e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 801b480:	6878      	ldr	r0, [r7, #4]
 801b482:	f000 f82b 	bl	801b4dc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 801b486:	687b      	ldr	r3, [r7, #4]
 801b488:	681b      	ldr	r3, [r3, #0]
 801b48a:	691a      	ldr	r2, [r3, #16]
 801b48c:	687b      	ldr	r3, [r7, #4]
 801b48e:	681b      	ldr	r3, [r3, #0]
 801b490:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 801b494:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 801b496:	687b      	ldr	r3, [r7, #4]
 801b498:	681b      	ldr	r3, [r3, #0]
 801b49a:	695a      	ldr	r2, [r3, #20]
 801b49c:	687b      	ldr	r3, [r7, #4]
 801b49e:	681b      	ldr	r3, [r3, #0]
 801b4a0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 801b4a4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 801b4a6:	687b      	ldr	r3, [r7, #4]
 801b4a8:	681b      	ldr	r3, [r3, #0]
 801b4aa:	68da      	ldr	r2, [r3, #12]
 801b4ac:	687b      	ldr	r3, [r7, #4]
 801b4ae:	681b      	ldr	r3, [r3, #0]
 801b4b0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 801b4b4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801b4b6:	687b      	ldr	r3, [r7, #4]
 801b4b8:	2200      	movs	r2, #0
 801b4ba:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 801b4bc:	687b      	ldr	r3, [r7, #4]
 801b4be:	2220      	movs	r2, #32
 801b4c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 801b4c4:	687b      	ldr	r3, [r7, #4]
 801b4c6:	2220      	movs	r2, #32
 801b4c8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 801b4cc:	687b      	ldr	r3, [r7, #4]
 801b4ce:	2200      	movs	r2, #0
 801b4d0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 801b4d2:	2300      	movs	r3, #0
}
 801b4d4:	4618      	mov	r0, r3
 801b4d6:	3708      	adds	r7, #8
 801b4d8:	46bd      	mov	sp, r7
 801b4da:	bd80      	pop	{r7, pc}

0801b4dc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 801b4dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 801b4e0:	b0c0      	sub	sp, #256	@ 0x100
 801b4e2:	af00      	add	r7, sp, #0
 801b4e4:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 801b4e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 801b4ec:	681b      	ldr	r3, [r3, #0]
 801b4ee:	691b      	ldr	r3, [r3, #16]
 801b4f0:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 801b4f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 801b4f8:	68d9      	ldr	r1, [r3, #12]
 801b4fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 801b4fe:	681a      	ldr	r2, [r3, #0]
 801b500:	ea40 0301 	orr.w	r3, r0, r1
 801b504:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 801b506:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 801b50a:	689a      	ldr	r2, [r3, #8]
 801b50c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 801b510:	691b      	ldr	r3, [r3, #16]
 801b512:	431a      	orrs	r2, r3
 801b514:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 801b518:	695b      	ldr	r3, [r3, #20]
 801b51a:	431a      	orrs	r2, r3
 801b51c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 801b520:	69db      	ldr	r3, [r3, #28]
 801b522:	4313      	orrs	r3, r2
 801b524:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 801b528:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 801b52c:	681b      	ldr	r3, [r3, #0]
 801b52e:	68db      	ldr	r3, [r3, #12]
 801b530:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 801b534:	f021 010c 	bic.w	r1, r1, #12
 801b538:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 801b53c:	681a      	ldr	r2, [r3, #0]
 801b53e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 801b542:	430b      	orrs	r3, r1
 801b544:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 801b546:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 801b54a:	681b      	ldr	r3, [r3, #0]
 801b54c:	695b      	ldr	r3, [r3, #20]
 801b54e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 801b552:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 801b556:	6999      	ldr	r1, [r3, #24]
 801b558:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 801b55c:	681a      	ldr	r2, [r3, #0]
 801b55e:	ea40 0301 	orr.w	r3, r0, r1
 801b562:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 801b564:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 801b568:	681a      	ldr	r2, [r3, #0]
 801b56a:	4b8f      	ldr	r3, [pc, #572]	@ (801b7a8 <UART_SetConfig+0x2cc>)
 801b56c:	429a      	cmp	r2, r3
 801b56e:	d005      	beq.n	801b57c <UART_SetConfig+0xa0>
 801b570:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 801b574:	681a      	ldr	r2, [r3, #0]
 801b576:	4b8d      	ldr	r3, [pc, #564]	@ (801b7ac <UART_SetConfig+0x2d0>)
 801b578:	429a      	cmp	r2, r3
 801b57a:	d104      	bne.n	801b586 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 801b57c:	f7fe fa50 	bl	8019a20 <HAL_RCC_GetPCLK2Freq>
 801b580:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 801b584:	e003      	b.n	801b58e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 801b586:	f7fe fa37 	bl	80199f8 <HAL_RCC_GetPCLK1Freq>
 801b58a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 801b58e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 801b592:	69db      	ldr	r3, [r3, #28]
 801b594:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 801b598:	f040 810c 	bne.w	801b7b4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 801b59c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 801b5a0:	2200      	movs	r2, #0
 801b5a2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 801b5a6:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 801b5aa:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 801b5ae:	4622      	mov	r2, r4
 801b5b0:	462b      	mov	r3, r5
 801b5b2:	1891      	adds	r1, r2, r2
 801b5b4:	65b9      	str	r1, [r7, #88]	@ 0x58
 801b5b6:	415b      	adcs	r3, r3
 801b5b8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801b5ba:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 801b5be:	4621      	mov	r1, r4
 801b5c0:	eb12 0801 	adds.w	r8, r2, r1
 801b5c4:	4629      	mov	r1, r5
 801b5c6:	eb43 0901 	adc.w	r9, r3, r1
 801b5ca:	f04f 0200 	mov.w	r2, #0
 801b5ce:	f04f 0300 	mov.w	r3, #0
 801b5d2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 801b5d6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 801b5da:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 801b5de:	4690      	mov	r8, r2
 801b5e0:	4699      	mov	r9, r3
 801b5e2:	4623      	mov	r3, r4
 801b5e4:	eb18 0303 	adds.w	r3, r8, r3
 801b5e8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 801b5ec:	462b      	mov	r3, r5
 801b5ee:	eb49 0303 	adc.w	r3, r9, r3
 801b5f2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 801b5f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 801b5fa:	685b      	ldr	r3, [r3, #4]
 801b5fc:	2200      	movs	r2, #0
 801b5fe:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 801b602:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 801b606:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 801b60a:	460b      	mov	r3, r1
 801b60c:	18db      	adds	r3, r3, r3
 801b60e:	653b      	str	r3, [r7, #80]	@ 0x50
 801b610:	4613      	mov	r3, r2
 801b612:	eb42 0303 	adc.w	r3, r2, r3
 801b616:	657b      	str	r3, [r7, #84]	@ 0x54
 801b618:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 801b61c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 801b620:	f7f5 f9fa 	bl	8010a18 <__aeabi_uldivmod>
 801b624:	4602      	mov	r2, r0
 801b626:	460b      	mov	r3, r1
 801b628:	4b61      	ldr	r3, [pc, #388]	@ (801b7b0 <UART_SetConfig+0x2d4>)
 801b62a:	fba3 2302 	umull	r2, r3, r3, r2
 801b62e:	095b      	lsrs	r3, r3, #5
 801b630:	011c      	lsls	r4, r3, #4
 801b632:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 801b636:	2200      	movs	r2, #0
 801b638:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 801b63c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 801b640:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 801b644:	4642      	mov	r2, r8
 801b646:	464b      	mov	r3, r9
 801b648:	1891      	adds	r1, r2, r2
 801b64a:	64b9      	str	r1, [r7, #72]	@ 0x48
 801b64c:	415b      	adcs	r3, r3
 801b64e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801b650:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 801b654:	4641      	mov	r1, r8
 801b656:	eb12 0a01 	adds.w	sl, r2, r1
 801b65a:	4649      	mov	r1, r9
 801b65c:	eb43 0b01 	adc.w	fp, r3, r1
 801b660:	f04f 0200 	mov.w	r2, #0
 801b664:	f04f 0300 	mov.w	r3, #0
 801b668:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 801b66c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 801b670:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 801b674:	4692      	mov	sl, r2
 801b676:	469b      	mov	fp, r3
 801b678:	4643      	mov	r3, r8
 801b67a:	eb1a 0303 	adds.w	r3, sl, r3
 801b67e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 801b682:	464b      	mov	r3, r9
 801b684:	eb4b 0303 	adc.w	r3, fp, r3
 801b688:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 801b68c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 801b690:	685b      	ldr	r3, [r3, #4]
 801b692:	2200      	movs	r2, #0
 801b694:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 801b698:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 801b69c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 801b6a0:	460b      	mov	r3, r1
 801b6a2:	18db      	adds	r3, r3, r3
 801b6a4:	643b      	str	r3, [r7, #64]	@ 0x40
 801b6a6:	4613      	mov	r3, r2
 801b6a8:	eb42 0303 	adc.w	r3, r2, r3
 801b6ac:	647b      	str	r3, [r7, #68]	@ 0x44
 801b6ae:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 801b6b2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 801b6b6:	f7f5 f9af 	bl	8010a18 <__aeabi_uldivmod>
 801b6ba:	4602      	mov	r2, r0
 801b6bc:	460b      	mov	r3, r1
 801b6be:	4611      	mov	r1, r2
 801b6c0:	4b3b      	ldr	r3, [pc, #236]	@ (801b7b0 <UART_SetConfig+0x2d4>)
 801b6c2:	fba3 2301 	umull	r2, r3, r3, r1
 801b6c6:	095b      	lsrs	r3, r3, #5
 801b6c8:	2264      	movs	r2, #100	@ 0x64
 801b6ca:	fb02 f303 	mul.w	r3, r2, r3
 801b6ce:	1acb      	subs	r3, r1, r3
 801b6d0:	00db      	lsls	r3, r3, #3
 801b6d2:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 801b6d6:	4b36      	ldr	r3, [pc, #216]	@ (801b7b0 <UART_SetConfig+0x2d4>)
 801b6d8:	fba3 2302 	umull	r2, r3, r3, r2
 801b6dc:	095b      	lsrs	r3, r3, #5
 801b6de:	005b      	lsls	r3, r3, #1
 801b6e0:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 801b6e4:	441c      	add	r4, r3
 801b6e6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 801b6ea:	2200      	movs	r2, #0
 801b6ec:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 801b6f0:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 801b6f4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 801b6f8:	4642      	mov	r2, r8
 801b6fa:	464b      	mov	r3, r9
 801b6fc:	1891      	adds	r1, r2, r2
 801b6fe:	63b9      	str	r1, [r7, #56]	@ 0x38
 801b700:	415b      	adcs	r3, r3
 801b702:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801b704:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 801b708:	4641      	mov	r1, r8
 801b70a:	1851      	adds	r1, r2, r1
 801b70c:	6339      	str	r1, [r7, #48]	@ 0x30
 801b70e:	4649      	mov	r1, r9
 801b710:	414b      	adcs	r3, r1
 801b712:	637b      	str	r3, [r7, #52]	@ 0x34
 801b714:	f04f 0200 	mov.w	r2, #0
 801b718:	f04f 0300 	mov.w	r3, #0
 801b71c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 801b720:	4659      	mov	r1, fp
 801b722:	00cb      	lsls	r3, r1, #3
 801b724:	4651      	mov	r1, sl
 801b726:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 801b72a:	4651      	mov	r1, sl
 801b72c:	00ca      	lsls	r2, r1, #3
 801b72e:	4610      	mov	r0, r2
 801b730:	4619      	mov	r1, r3
 801b732:	4603      	mov	r3, r0
 801b734:	4642      	mov	r2, r8
 801b736:	189b      	adds	r3, r3, r2
 801b738:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 801b73c:	464b      	mov	r3, r9
 801b73e:	460a      	mov	r2, r1
 801b740:	eb42 0303 	adc.w	r3, r2, r3
 801b744:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 801b748:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 801b74c:	685b      	ldr	r3, [r3, #4]
 801b74e:	2200      	movs	r2, #0
 801b750:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 801b754:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 801b758:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 801b75c:	460b      	mov	r3, r1
 801b75e:	18db      	adds	r3, r3, r3
 801b760:	62bb      	str	r3, [r7, #40]	@ 0x28
 801b762:	4613      	mov	r3, r2
 801b764:	eb42 0303 	adc.w	r3, r2, r3
 801b768:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801b76a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 801b76e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 801b772:	f7f5 f951 	bl	8010a18 <__aeabi_uldivmod>
 801b776:	4602      	mov	r2, r0
 801b778:	460b      	mov	r3, r1
 801b77a:	4b0d      	ldr	r3, [pc, #52]	@ (801b7b0 <UART_SetConfig+0x2d4>)
 801b77c:	fba3 1302 	umull	r1, r3, r3, r2
 801b780:	095b      	lsrs	r3, r3, #5
 801b782:	2164      	movs	r1, #100	@ 0x64
 801b784:	fb01 f303 	mul.w	r3, r1, r3
 801b788:	1ad3      	subs	r3, r2, r3
 801b78a:	00db      	lsls	r3, r3, #3
 801b78c:	3332      	adds	r3, #50	@ 0x32
 801b78e:	4a08      	ldr	r2, [pc, #32]	@ (801b7b0 <UART_SetConfig+0x2d4>)
 801b790:	fba2 2303 	umull	r2, r3, r2, r3
 801b794:	095b      	lsrs	r3, r3, #5
 801b796:	f003 0207 	and.w	r2, r3, #7
 801b79a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 801b79e:	681b      	ldr	r3, [r3, #0]
 801b7a0:	4422      	add	r2, r4
 801b7a2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 801b7a4:	e106      	b.n	801b9b4 <UART_SetConfig+0x4d8>
 801b7a6:	bf00      	nop
 801b7a8:	40011000 	.word	0x40011000
 801b7ac:	40011400 	.word	0x40011400
 801b7b0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 801b7b4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 801b7b8:	2200      	movs	r2, #0
 801b7ba:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 801b7be:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 801b7c2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 801b7c6:	4642      	mov	r2, r8
 801b7c8:	464b      	mov	r3, r9
 801b7ca:	1891      	adds	r1, r2, r2
 801b7cc:	6239      	str	r1, [r7, #32]
 801b7ce:	415b      	adcs	r3, r3
 801b7d0:	627b      	str	r3, [r7, #36]	@ 0x24
 801b7d2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 801b7d6:	4641      	mov	r1, r8
 801b7d8:	1854      	adds	r4, r2, r1
 801b7da:	4649      	mov	r1, r9
 801b7dc:	eb43 0501 	adc.w	r5, r3, r1
 801b7e0:	f04f 0200 	mov.w	r2, #0
 801b7e4:	f04f 0300 	mov.w	r3, #0
 801b7e8:	00eb      	lsls	r3, r5, #3
 801b7ea:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 801b7ee:	00e2      	lsls	r2, r4, #3
 801b7f0:	4614      	mov	r4, r2
 801b7f2:	461d      	mov	r5, r3
 801b7f4:	4643      	mov	r3, r8
 801b7f6:	18e3      	adds	r3, r4, r3
 801b7f8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 801b7fc:	464b      	mov	r3, r9
 801b7fe:	eb45 0303 	adc.w	r3, r5, r3
 801b802:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 801b806:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 801b80a:	685b      	ldr	r3, [r3, #4]
 801b80c:	2200      	movs	r2, #0
 801b80e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 801b812:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 801b816:	f04f 0200 	mov.w	r2, #0
 801b81a:	f04f 0300 	mov.w	r3, #0
 801b81e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 801b822:	4629      	mov	r1, r5
 801b824:	008b      	lsls	r3, r1, #2
 801b826:	4621      	mov	r1, r4
 801b828:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 801b82c:	4621      	mov	r1, r4
 801b82e:	008a      	lsls	r2, r1, #2
 801b830:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 801b834:	f7f5 f8f0 	bl	8010a18 <__aeabi_uldivmod>
 801b838:	4602      	mov	r2, r0
 801b83a:	460b      	mov	r3, r1
 801b83c:	4b60      	ldr	r3, [pc, #384]	@ (801b9c0 <UART_SetConfig+0x4e4>)
 801b83e:	fba3 2302 	umull	r2, r3, r3, r2
 801b842:	095b      	lsrs	r3, r3, #5
 801b844:	011c      	lsls	r4, r3, #4
 801b846:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 801b84a:	2200      	movs	r2, #0
 801b84c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 801b850:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 801b854:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 801b858:	4642      	mov	r2, r8
 801b85a:	464b      	mov	r3, r9
 801b85c:	1891      	adds	r1, r2, r2
 801b85e:	61b9      	str	r1, [r7, #24]
 801b860:	415b      	adcs	r3, r3
 801b862:	61fb      	str	r3, [r7, #28]
 801b864:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 801b868:	4641      	mov	r1, r8
 801b86a:	1851      	adds	r1, r2, r1
 801b86c:	6139      	str	r1, [r7, #16]
 801b86e:	4649      	mov	r1, r9
 801b870:	414b      	adcs	r3, r1
 801b872:	617b      	str	r3, [r7, #20]
 801b874:	f04f 0200 	mov.w	r2, #0
 801b878:	f04f 0300 	mov.w	r3, #0
 801b87c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 801b880:	4659      	mov	r1, fp
 801b882:	00cb      	lsls	r3, r1, #3
 801b884:	4651      	mov	r1, sl
 801b886:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 801b88a:	4651      	mov	r1, sl
 801b88c:	00ca      	lsls	r2, r1, #3
 801b88e:	4610      	mov	r0, r2
 801b890:	4619      	mov	r1, r3
 801b892:	4603      	mov	r3, r0
 801b894:	4642      	mov	r2, r8
 801b896:	189b      	adds	r3, r3, r2
 801b898:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 801b89c:	464b      	mov	r3, r9
 801b89e:	460a      	mov	r2, r1
 801b8a0:	eb42 0303 	adc.w	r3, r2, r3
 801b8a4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 801b8a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 801b8ac:	685b      	ldr	r3, [r3, #4]
 801b8ae:	2200      	movs	r2, #0
 801b8b0:	67bb      	str	r3, [r7, #120]	@ 0x78
 801b8b2:	67fa      	str	r2, [r7, #124]	@ 0x7c
 801b8b4:	f04f 0200 	mov.w	r2, #0
 801b8b8:	f04f 0300 	mov.w	r3, #0
 801b8bc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 801b8c0:	4649      	mov	r1, r9
 801b8c2:	008b      	lsls	r3, r1, #2
 801b8c4:	4641      	mov	r1, r8
 801b8c6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 801b8ca:	4641      	mov	r1, r8
 801b8cc:	008a      	lsls	r2, r1, #2
 801b8ce:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 801b8d2:	f7f5 f8a1 	bl	8010a18 <__aeabi_uldivmod>
 801b8d6:	4602      	mov	r2, r0
 801b8d8:	460b      	mov	r3, r1
 801b8da:	4611      	mov	r1, r2
 801b8dc:	4b38      	ldr	r3, [pc, #224]	@ (801b9c0 <UART_SetConfig+0x4e4>)
 801b8de:	fba3 2301 	umull	r2, r3, r3, r1
 801b8e2:	095b      	lsrs	r3, r3, #5
 801b8e4:	2264      	movs	r2, #100	@ 0x64
 801b8e6:	fb02 f303 	mul.w	r3, r2, r3
 801b8ea:	1acb      	subs	r3, r1, r3
 801b8ec:	011b      	lsls	r3, r3, #4
 801b8ee:	3332      	adds	r3, #50	@ 0x32
 801b8f0:	4a33      	ldr	r2, [pc, #204]	@ (801b9c0 <UART_SetConfig+0x4e4>)
 801b8f2:	fba2 2303 	umull	r2, r3, r2, r3
 801b8f6:	095b      	lsrs	r3, r3, #5
 801b8f8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 801b8fc:	441c      	add	r4, r3
 801b8fe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 801b902:	2200      	movs	r2, #0
 801b904:	673b      	str	r3, [r7, #112]	@ 0x70
 801b906:	677a      	str	r2, [r7, #116]	@ 0x74
 801b908:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 801b90c:	4642      	mov	r2, r8
 801b90e:	464b      	mov	r3, r9
 801b910:	1891      	adds	r1, r2, r2
 801b912:	60b9      	str	r1, [r7, #8]
 801b914:	415b      	adcs	r3, r3
 801b916:	60fb      	str	r3, [r7, #12]
 801b918:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 801b91c:	4641      	mov	r1, r8
 801b91e:	1851      	adds	r1, r2, r1
 801b920:	6039      	str	r1, [r7, #0]
 801b922:	4649      	mov	r1, r9
 801b924:	414b      	adcs	r3, r1
 801b926:	607b      	str	r3, [r7, #4]
 801b928:	f04f 0200 	mov.w	r2, #0
 801b92c:	f04f 0300 	mov.w	r3, #0
 801b930:	e9d7 ab00 	ldrd	sl, fp, [r7]
 801b934:	4659      	mov	r1, fp
 801b936:	00cb      	lsls	r3, r1, #3
 801b938:	4651      	mov	r1, sl
 801b93a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 801b93e:	4651      	mov	r1, sl
 801b940:	00ca      	lsls	r2, r1, #3
 801b942:	4610      	mov	r0, r2
 801b944:	4619      	mov	r1, r3
 801b946:	4603      	mov	r3, r0
 801b948:	4642      	mov	r2, r8
 801b94a:	189b      	adds	r3, r3, r2
 801b94c:	66bb      	str	r3, [r7, #104]	@ 0x68
 801b94e:	464b      	mov	r3, r9
 801b950:	460a      	mov	r2, r1
 801b952:	eb42 0303 	adc.w	r3, r2, r3
 801b956:	66fb      	str	r3, [r7, #108]	@ 0x6c
 801b958:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 801b95c:	685b      	ldr	r3, [r3, #4]
 801b95e:	2200      	movs	r2, #0
 801b960:	663b      	str	r3, [r7, #96]	@ 0x60
 801b962:	667a      	str	r2, [r7, #100]	@ 0x64
 801b964:	f04f 0200 	mov.w	r2, #0
 801b968:	f04f 0300 	mov.w	r3, #0
 801b96c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 801b970:	4649      	mov	r1, r9
 801b972:	008b      	lsls	r3, r1, #2
 801b974:	4641      	mov	r1, r8
 801b976:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 801b97a:	4641      	mov	r1, r8
 801b97c:	008a      	lsls	r2, r1, #2
 801b97e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 801b982:	f7f5 f849 	bl	8010a18 <__aeabi_uldivmod>
 801b986:	4602      	mov	r2, r0
 801b988:	460b      	mov	r3, r1
 801b98a:	4b0d      	ldr	r3, [pc, #52]	@ (801b9c0 <UART_SetConfig+0x4e4>)
 801b98c:	fba3 1302 	umull	r1, r3, r3, r2
 801b990:	095b      	lsrs	r3, r3, #5
 801b992:	2164      	movs	r1, #100	@ 0x64
 801b994:	fb01 f303 	mul.w	r3, r1, r3
 801b998:	1ad3      	subs	r3, r2, r3
 801b99a:	011b      	lsls	r3, r3, #4
 801b99c:	3332      	adds	r3, #50	@ 0x32
 801b99e:	4a08      	ldr	r2, [pc, #32]	@ (801b9c0 <UART_SetConfig+0x4e4>)
 801b9a0:	fba2 2303 	umull	r2, r3, r2, r3
 801b9a4:	095b      	lsrs	r3, r3, #5
 801b9a6:	f003 020f 	and.w	r2, r3, #15
 801b9aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 801b9ae:	681b      	ldr	r3, [r3, #0]
 801b9b0:	4422      	add	r2, r4
 801b9b2:	609a      	str	r2, [r3, #8]
}
 801b9b4:	bf00      	nop
 801b9b6:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 801b9ba:	46bd      	mov	sp, r7
 801b9bc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 801b9c0:	51eb851f 	.word	0x51eb851f

0801b9c4 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, const FMC_SDRAM_InitTypeDef *Init)
{
 801b9c4:	b480      	push	{r7}
 801b9c6:	b083      	sub	sp, #12
 801b9c8:	af00      	add	r7, sp, #0
 801b9ca:	6078      	str	r0, [r7, #4]
 801b9cc:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 801b9ce:	683b      	ldr	r3, [r7, #0]
 801b9d0:	681b      	ldr	r3, [r3, #0]
 801b9d2:	2b00      	cmp	r3, #0
 801b9d4:	d123      	bne.n	801ba1e <FMC_SDRAM_Init+0x5a>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 801b9d6:	687b      	ldr	r3, [r7, #4]
 801b9d8:	681b      	ldr	r3, [r3, #0]
 801b9da:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 801b9de:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 801b9e2:	683a      	ldr	r2, [r7, #0]
 801b9e4:	6851      	ldr	r1, [r2, #4]
 801b9e6:	683a      	ldr	r2, [r7, #0]
 801b9e8:	6892      	ldr	r2, [r2, #8]
 801b9ea:	4311      	orrs	r1, r2
 801b9ec:	683a      	ldr	r2, [r7, #0]
 801b9ee:	68d2      	ldr	r2, [r2, #12]
 801b9f0:	4311      	orrs	r1, r2
 801b9f2:	683a      	ldr	r2, [r7, #0]
 801b9f4:	6912      	ldr	r2, [r2, #16]
 801b9f6:	4311      	orrs	r1, r2
 801b9f8:	683a      	ldr	r2, [r7, #0]
 801b9fa:	6952      	ldr	r2, [r2, #20]
 801b9fc:	4311      	orrs	r1, r2
 801b9fe:	683a      	ldr	r2, [r7, #0]
 801ba00:	6992      	ldr	r2, [r2, #24]
 801ba02:	4311      	orrs	r1, r2
 801ba04:	683a      	ldr	r2, [r7, #0]
 801ba06:	69d2      	ldr	r2, [r2, #28]
 801ba08:	4311      	orrs	r1, r2
 801ba0a:	683a      	ldr	r2, [r7, #0]
 801ba0c:	6a12      	ldr	r2, [r2, #32]
 801ba0e:	4311      	orrs	r1, r2
 801ba10:	683a      	ldr	r2, [r7, #0]
 801ba12:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 801ba14:	430a      	orrs	r2, r1
 801ba16:	431a      	orrs	r2, r3
 801ba18:	687b      	ldr	r3, [r7, #4]
 801ba1a:	601a      	str	r2, [r3, #0]
 801ba1c:	e028      	b.n	801ba70 <FMC_SDRAM_Init+0xac>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 801ba1e:	687b      	ldr	r3, [r7, #4]
 801ba20:	681b      	ldr	r3, [r3, #0]
 801ba22:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 801ba26:	683b      	ldr	r3, [r7, #0]
 801ba28:	69d9      	ldr	r1, [r3, #28]
 801ba2a:	683b      	ldr	r3, [r7, #0]
 801ba2c:	6a1b      	ldr	r3, [r3, #32]
 801ba2e:	4319      	orrs	r1, r3
 801ba30:	683b      	ldr	r3, [r7, #0]
 801ba32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801ba34:	430b      	orrs	r3, r1
 801ba36:	431a      	orrs	r2, r3
 801ba38:	687b      	ldr	r3, [r7, #4]
 801ba3a:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 801ba3c:	687b      	ldr	r3, [r7, #4]
 801ba3e:	685b      	ldr	r3, [r3, #4]
 801ba40:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 801ba44:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 801ba48:	683a      	ldr	r2, [r7, #0]
 801ba4a:	6851      	ldr	r1, [r2, #4]
 801ba4c:	683a      	ldr	r2, [r7, #0]
 801ba4e:	6892      	ldr	r2, [r2, #8]
 801ba50:	4311      	orrs	r1, r2
 801ba52:	683a      	ldr	r2, [r7, #0]
 801ba54:	68d2      	ldr	r2, [r2, #12]
 801ba56:	4311      	orrs	r1, r2
 801ba58:	683a      	ldr	r2, [r7, #0]
 801ba5a:	6912      	ldr	r2, [r2, #16]
 801ba5c:	4311      	orrs	r1, r2
 801ba5e:	683a      	ldr	r2, [r7, #0]
 801ba60:	6952      	ldr	r2, [r2, #20]
 801ba62:	4311      	orrs	r1, r2
 801ba64:	683a      	ldr	r2, [r7, #0]
 801ba66:	6992      	ldr	r2, [r2, #24]
 801ba68:	430a      	orrs	r2, r1
 801ba6a:	431a      	orrs	r2, r3
 801ba6c:	687b      	ldr	r3, [r7, #4]
 801ba6e:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 801ba70:	2300      	movs	r3, #0
}
 801ba72:	4618      	mov	r0, r3
 801ba74:	370c      	adds	r7, #12
 801ba76:	46bd      	mov	sp, r7
 801ba78:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ba7c:	4770      	bx	lr

0801ba7e <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        const FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 801ba7e:	b480      	push	{r7}
 801ba80:	b085      	sub	sp, #20
 801ba82:	af00      	add	r7, sp, #0
 801ba84:	60f8      	str	r0, [r7, #12]
 801ba86:	60b9      	str	r1, [r7, #8]
 801ba88:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 801ba8a:	687b      	ldr	r3, [r7, #4]
 801ba8c:	2b00      	cmp	r3, #0
 801ba8e:	d128      	bne.n	801bae2 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 801ba90:	68fb      	ldr	r3, [r7, #12]
 801ba92:	689b      	ldr	r3, [r3, #8]
 801ba94:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 801ba98:	68bb      	ldr	r3, [r7, #8]
 801ba9a:	681b      	ldr	r3, [r3, #0]
 801ba9c:	1e59      	subs	r1, r3, #1
 801ba9e:	68bb      	ldr	r3, [r7, #8]
 801baa0:	685b      	ldr	r3, [r3, #4]
 801baa2:	3b01      	subs	r3, #1
 801baa4:	011b      	lsls	r3, r3, #4
 801baa6:	4319      	orrs	r1, r3
 801baa8:	68bb      	ldr	r3, [r7, #8]
 801baaa:	689b      	ldr	r3, [r3, #8]
 801baac:	3b01      	subs	r3, #1
 801baae:	021b      	lsls	r3, r3, #8
 801bab0:	4319      	orrs	r1, r3
 801bab2:	68bb      	ldr	r3, [r7, #8]
 801bab4:	68db      	ldr	r3, [r3, #12]
 801bab6:	3b01      	subs	r3, #1
 801bab8:	031b      	lsls	r3, r3, #12
 801baba:	4319      	orrs	r1, r3
 801babc:	68bb      	ldr	r3, [r7, #8]
 801babe:	691b      	ldr	r3, [r3, #16]
 801bac0:	3b01      	subs	r3, #1
 801bac2:	041b      	lsls	r3, r3, #16
 801bac4:	4319      	orrs	r1, r3
 801bac6:	68bb      	ldr	r3, [r7, #8]
 801bac8:	695b      	ldr	r3, [r3, #20]
 801baca:	3b01      	subs	r3, #1
 801bacc:	051b      	lsls	r3, r3, #20
 801bace:	4319      	orrs	r1, r3
 801bad0:	68bb      	ldr	r3, [r7, #8]
 801bad2:	699b      	ldr	r3, [r3, #24]
 801bad4:	3b01      	subs	r3, #1
 801bad6:	061b      	lsls	r3, r3, #24
 801bad8:	430b      	orrs	r3, r1
 801bada:	431a      	orrs	r2, r3
 801badc:	68fb      	ldr	r3, [r7, #12]
 801bade:	609a      	str	r2, [r3, #8]
 801bae0:	e02f      	b.n	801bb42 <FMC_SDRAM_Timing_Init+0xc4>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 801bae2:	68fb      	ldr	r3, [r7, #12]
 801bae4:	689b      	ldr	r3, [r3, #8]
 801bae6:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 801baea:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 801baee:	68ba      	ldr	r2, [r7, #8]
 801baf0:	68d2      	ldr	r2, [r2, #12]
 801baf2:	3a01      	subs	r2, #1
 801baf4:	0311      	lsls	r1, r2, #12
 801baf6:	68ba      	ldr	r2, [r7, #8]
 801baf8:	6952      	ldr	r2, [r2, #20]
 801bafa:	3a01      	subs	r2, #1
 801bafc:	0512      	lsls	r2, r2, #20
 801bafe:	430a      	orrs	r2, r1
 801bb00:	431a      	orrs	r2, r3
 801bb02:	68fb      	ldr	r3, [r7, #12]
 801bb04:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 801bb06:	68fb      	ldr	r3, [r7, #12]
 801bb08:	68db      	ldr	r3, [r3, #12]
 801bb0a:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 801bb0e:	68bb      	ldr	r3, [r7, #8]
 801bb10:	681b      	ldr	r3, [r3, #0]
 801bb12:	1e59      	subs	r1, r3, #1
 801bb14:	68bb      	ldr	r3, [r7, #8]
 801bb16:	685b      	ldr	r3, [r3, #4]
 801bb18:	3b01      	subs	r3, #1
 801bb1a:	011b      	lsls	r3, r3, #4
 801bb1c:	4319      	orrs	r1, r3
 801bb1e:	68bb      	ldr	r3, [r7, #8]
 801bb20:	689b      	ldr	r3, [r3, #8]
 801bb22:	3b01      	subs	r3, #1
 801bb24:	021b      	lsls	r3, r3, #8
 801bb26:	4319      	orrs	r1, r3
 801bb28:	68bb      	ldr	r3, [r7, #8]
 801bb2a:	691b      	ldr	r3, [r3, #16]
 801bb2c:	3b01      	subs	r3, #1
 801bb2e:	041b      	lsls	r3, r3, #16
 801bb30:	4319      	orrs	r1, r3
 801bb32:	68bb      	ldr	r3, [r7, #8]
 801bb34:	699b      	ldr	r3, [r3, #24]
 801bb36:	3b01      	subs	r3, #1
 801bb38:	061b      	lsls	r3, r3, #24
 801bb3a:	430b      	orrs	r3, r1
 801bb3c:	431a      	orrs	r2, r3
 801bb3e:	68fb      	ldr	r3, [r7, #12]
 801bb40:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 801bb42:	2300      	movs	r3, #0
}
 801bb44:	4618      	mov	r0, r3
 801bb46:	3714      	adds	r7, #20
 801bb48:	46bd      	mov	sp, r7
 801bb4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bb4e:	4770      	bx	lr

0801bb50 <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        const FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 801bb50:	b580      	push	{r7, lr}
 801bb52:	b086      	sub	sp, #24
 801bb54:	af00      	add	r7, sp, #0
 801bb56:	60f8      	str	r0, [r7, #12]
 801bb58:	60b9      	str	r1, [r7, #8]
 801bb5a:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0U;
 801bb5c:	2300      	movs	r3, #0
 801bb5e:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 801bb60:	68fb      	ldr	r3, [r7, #12]
 801bb62:	691b      	ldr	r3, [r3, #16]
 801bb64:	0d9b      	lsrs	r3, r3, #22
 801bb66:	059b      	lsls	r3, r3, #22
 801bb68:	68ba      	ldr	r2, [r7, #8]
 801bb6a:	6811      	ldr	r1, [r2, #0]
 801bb6c:	68ba      	ldr	r2, [r7, #8]
 801bb6e:	6852      	ldr	r2, [r2, #4]
 801bb70:	4311      	orrs	r1, r2
 801bb72:	68ba      	ldr	r2, [r7, #8]
 801bb74:	6892      	ldr	r2, [r2, #8]
 801bb76:	3a01      	subs	r2, #1
 801bb78:	0152      	lsls	r2, r2, #5
 801bb7a:	4311      	orrs	r1, r2
 801bb7c:	68ba      	ldr	r2, [r7, #8]
 801bb7e:	68d2      	ldr	r2, [r2, #12]
 801bb80:	0252      	lsls	r2, r2, #9
 801bb82:	430a      	orrs	r2, r1
 801bb84:	431a      	orrs	r2, r3
 801bb86:	68fb      	ldr	r3, [r7, #12]
 801bb88:	611a      	str	r2, [r3, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Get tick */
  tickstart = HAL_GetTick();
 801bb8a:	f7f8 ff23 	bl	80149d4 <HAL_GetTick>
 801bb8e:	6178      	str	r0, [r7, #20]

  /* wait until command is send */
  while (HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 801bb90:	e010      	b.n	801bbb4 <FMC_SDRAM_SendCommand+0x64>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801bb92:	687b      	ldr	r3, [r7, #4]
 801bb94:	f1b3 3fff 	cmp.w	r3, #4294967295
 801bb98:	d00c      	beq.n	801bbb4 <FMC_SDRAM_SendCommand+0x64>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 801bb9a:	687b      	ldr	r3, [r7, #4]
 801bb9c:	2b00      	cmp	r3, #0
 801bb9e:	d007      	beq.n	801bbb0 <FMC_SDRAM_SendCommand+0x60>
 801bba0:	f7f8 ff18 	bl	80149d4 <HAL_GetTick>
 801bba4:	4602      	mov	r2, r0
 801bba6:	697b      	ldr	r3, [r7, #20]
 801bba8:	1ad3      	subs	r3, r2, r3
 801bbaa:	687a      	ldr	r2, [r7, #4]
 801bbac:	429a      	cmp	r2, r3
 801bbae:	d201      	bcs.n	801bbb4 <FMC_SDRAM_SendCommand+0x64>
      {
        return HAL_TIMEOUT;
 801bbb0:	2303      	movs	r3, #3
 801bbb2:	e006      	b.n	801bbc2 <FMC_SDRAM_SendCommand+0x72>
  while (HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 801bbb4:	68fb      	ldr	r3, [r7, #12]
 801bbb6:	699b      	ldr	r3, [r3, #24]
 801bbb8:	f003 0320 	and.w	r3, r3, #32
 801bbbc:	2b20      	cmp	r3, #32
 801bbbe:	d0e8      	beq.n	801bb92 <FMC_SDRAM_SendCommand+0x42>
      }
    }
  }
  return HAL_OK;
 801bbc0:	2300      	movs	r3, #0
}
 801bbc2:	4618      	mov	r0, r3
 801bbc4:	3718      	adds	r7, #24
 801bbc6:	46bd      	mov	sp, r7
 801bbc8:	bd80      	pop	{r7, pc}

0801bbca <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 801bbca:	b480      	push	{r7}
 801bbcc:	b083      	sub	sp, #12
 801bbce:	af00      	add	r7, sp, #0
 801bbd0:	6078      	str	r0, [r7, #4]
 801bbd2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 801bbd4:	687b      	ldr	r3, [r7, #4]
 801bbd6:	695b      	ldr	r3, [r3, #20]
 801bbd8:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 801bbdc:	f023 033e 	bic.w	r3, r3, #62	@ 0x3e
 801bbe0:	683a      	ldr	r2, [r7, #0]
 801bbe2:	0052      	lsls	r2, r2, #1
 801bbe4:	431a      	orrs	r2, r3
 801bbe6:	687b      	ldr	r3, [r7, #4]
 801bbe8:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 801bbea:	2300      	movs	r3, #0
}
 801bbec:	4618      	mov	r0, r3
 801bbee:	370c      	adds	r7, #12
 801bbf0:	46bd      	mov	sp, r7
 801bbf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bbf6:	4770      	bx	lr

0801bbf8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 801bbf8:	b084      	sub	sp, #16
 801bbfa:	b580      	push	{r7, lr}
 801bbfc:	b084      	sub	sp, #16
 801bbfe:	af00      	add	r7, sp, #0
 801bc00:	6078      	str	r0, [r7, #4]
 801bc02:	f107 001c 	add.w	r0, r7, #28
 801bc06:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 801bc0a:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 801bc0e:	2b01      	cmp	r3, #1
 801bc10:	d123      	bne.n	801bc5a <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 801bc12:	687b      	ldr	r3, [r7, #4]
 801bc14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801bc16:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 801bc1a:	687b      	ldr	r3, [r7, #4]
 801bc1c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 801bc1e:	687b      	ldr	r3, [r7, #4]
 801bc20:	68db      	ldr	r3, [r3, #12]
 801bc22:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 801bc26:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 801bc2a:	687a      	ldr	r2, [r7, #4]
 801bc2c:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 801bc2e:	687b      	ldr	r3, [r7, #4]
 801bc30:	68db      	ldr	r3, [r3, #12]
 801bc32:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 801bc36:	687b      	ldr	r3, [r7, #4]
 801bc38:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 801bc3a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 801bc3e:	2b01      	cmp	r3, #1
 801bc40:	d105      	bne.n	801bc4e <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 801bc42:	687b      	ldr	r3, [r7, #4]
 801bc44:	68db      	ldr	r3, [r3, #12]
 801bc46:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 801bc4a:	687b      	ldr	r3, [r7, #4]
 801bc4c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 801bc4e:	6878      	ldr	r0, [r7, #4]
 801bc50:	f000 f98d 	bl	801bf6e <USB_CoreReset>
 801bc54:	4603      	mov	r3, r0
 801bc56:	73fb      	strb	r3, [r7, #15]
 801bc58:	e01b      	b.n	801bc92 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 801bc5a:	687b      	ldr	r3, [r7, #4]
 801bc5c:	68db      	ldr	r3, [r3, #12]
 801bc5e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 801bc62:	687b      	ldr	r3, [r7, #4]
 801bc64:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 801bc66:	6878      	ldr	r0, [r7, #4]
 801bc68:	f000 f981 	bl	801bf6e <USB_CoreReset>
 801bc6c:	4603      	mov	r3, r0
 801bc6e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 801bc70:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 801bc74:	2b00      	cmp	r3, #0
 801bc76:	d106      	bne.n	801bc86 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 801bc78:	687b      	ldr	r3, [r7, #4]
 801bc7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801bc7c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 801bc80:	687b      	ldr	r3, [r7, #4]
 801bc82:	639a      	str	r2, [r3, #56]	@ 0x38
 801bc84:	e005      	b.n	801bc92 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 801bc86:	687b      	ldr	r3, [r7, #4]
 801bc88:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801bc8a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 801bc8e:	687b      	ldr	r3, [r7, #4]
 801bc90:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 801bc92:	7fbb      	ldrb	r3, [r7, #30]
 801bc94:	2b01      	cmp	r3, #1
 801bc96:	d10b      	bne.n	801bcb0 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 801bc98:	687b      	ldr	r3, [r7, #4]
 801bc9a:	689b      	ldr	r3, [r3, #8]
 801bc9c:	f043 0206 	orr.w	r2, r3, #6
 801bca0:	687b      	ldr	r3, [r7, #4]
 801bca2:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 801bca4:	687b      	ldr	r3, [r7, #4]
 801bca6:	689b      	ldr	r3, [r3, #8]
 801bca8:	f043 0220 	orr.w	r2, r3, #32
 801bcac:	687b      	ldr	r3, [r7, #4]
 801bcae:	609a      	str	r2, [r3, #8]
  }

  return ret;
 801bcb0:	7bfb      	ldrb	r3, [r7, #15]
}
 801bcb2:	4618      	mov	r0, r3
 801bcb4:	3710      	adds	r7, #16
 801bcb6:	46bd      	mov	sp, r7
 801bcb8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 801bcbc:	b004      	add	sp, #16
 801bcbe:	4770      	bx	lr

0801bcc0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 801bcc0:	b480      	push	{r7}
 801bcc2:	b083      	sub	sp, #12
 801bcc4:	af00      	add	r7, sp, #0
 801bcc6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 801bcc8:	687b      	ldr	r3, [r7, #4]
 801bcca:	689b      	ldr	r3, [r3, #8]
 801bccc:	f023 0201 	bic.w	r2, r3, #1
 801bcd0:	687b      	ldr	r3, [r7, #4]
 801bcd2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 801bcd4:	2300      	movs	r3, #0
}
 801bcd6:	4618      	mov	r0, r3
 801bcd8:	370c      	adds	r7, #12
 801bcda:	46bd      	mov	sp, r7
 801bcdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bce0:	4770      	bx	lr

0801bce2 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 801bce2:	b580      	push	{r7, lr}
 801bce4:	b084      	sub	sp, #16
 801bce6:	af00      	add	r7, sp, #0
 801bce8:	6078      	str	r0, [r7, #4]
 801bcea:	460b      	mov	r3, r1
 801bcec:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 801bcee:	2300      	movs	r3, #0
 801bcf0:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 801bcf2:	687b      	ldr	r3, [r7, #4]
 801bcf4:	68db      	ldr	r3, [r3, #12]
 801bcf6:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 801bcfa:	687b      	ldr	r3, [r7, #4]
 801bcfc:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 801bcfe:	78fb      	ldrb	r3, [r7, #3]
 801bd00:	2b01      	cmp	r3, #1
 801bd02:	d115      	bne.n	801bd30 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 801bd04:	687b      	ldr	r3, [r7, #4]
 801bd06:	68db      	ldr	r3, [r3, #12]
 801bd08:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 801bd0c:	687b      	ldr	r3, [r7, #4]
 801bd0e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 801bd10:	200a      	movs	r0, #10
 801bd12:	f7f8 fe6b 	bl	80149ec <HAL_Delay>
      ms += 10U;
 801bd16:	68fb      	ldr	r3, [r7, #12]
 801bd18:	330a      	adds	r3, #10
 801bd1a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 801bd1c:	6878      	ldr	r0, [r7, #4]
 801bd1e:	f000 f918 	bl	801bf52 <USB_GetMode>
 801bd22:	4603      	mov	r3, r0
 801bd24:	2b01      	cmp	r3, #1
 801bd26:	d01e      	beq.n	801bd66 <USB_SetCurrentMode+0x84>
 801bd28:	68fb      	ldr	r3, [r7, #12]
 801bd2a:	2bc7      	cmp	r3, #199	@ 0xc7
 801bd2c:	d9f0      	bls.n	801bd10 <USB_SetCurrentMode+0x2e>
 801bd2e:	e01a      	b.n	801bd66 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 801bd30:	78fb      	ldrb	r3, [r7, #3]
 801bd32:	2b00      	cmp	r3, #0
 801bd34:	d115      	bne.n	801bd62 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 801bd36:	687b      	ldr	r3, [r7, #4]
 801bd38:	68db      	ldr	r3, [r3, #12]
 801bd3a:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 801bd3e:	687b      	ldr	r3, [r7, #4]
 801bd40:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 801bd42:	200a      	movs	r0, #10
 801bd44:	f7f8 fe52 	bl	80149ec <HAL_Delay>
      ms += 10U;
 801bd48:	68fb      	ldr	r3, [r7, #12]
 801bd4a:	330a      	adds	r3, #10
 801bd4c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 801bd4e:	6878      	ldr	r0, [r7, #4]
 801bd50:	f000 f8ff 	bl	801bf52 <USB_GetMode>
 801bd54:	4603      	mov	r3, r0
 801bd56:	2b00      	cmp	r3, #0
 801bd58:	d005      	beq.n	801bd66 <USB_SetCurrentMode+0x84>
 801bd5a:	68fb      	ldr	r3, [r7, #12]
 801bd5c:	2bc7      	cmp	r3, #199	@ 0xc7
 801bd5e:	d9f0      	bls.n	801bd42 <USB_SetCurrentMode+0x60>
 801bd60:	e001      	b.n	801bd66 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 801bd62:	2301      	movs	r3, #1
 801bd64:	e005      	b.n	801bd72 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 801bd66:	68fb      	ldr	r3, [r7, #12]
 801bd68:	2bc8      	cmp	r3, #200	@ 0xc8
 801bd6a:	d101      	bne.n	801bd70 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 801bd6c:	2301      	movs	r3, #1
 801bd6e:	e000      	b.n	801bd72 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 801bd70:	2300      	movs	r3, #0
}
 801bd72:	4618      	mov	r0, r3
 801bd74:	3710      	adds	r7, #16
 801bd76:	46bd      	mov	sp, r7
 801bd78:	bd80      	pop	{r7, pc}

0801bd7a <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 801bd7a:	b480      	push	{r7}
 801bd7c:	b085      	sub	sp, #20
 801bd7e:	af00      	add	r7, sp, #0
 801bd80:	6078      	str	r0, [r7, #4]
 801bd82:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 801bd84:	2300      	movs	r3, #0
 801bd86:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 801bd88:	68fb      	ldr	r3, [r7, #12]
 801bd8a:	3301      	adds	r3, #1
 801bd8c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 801bd8e:	68fb      	ldr	r3, [r7, #12]
 801bd90:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 801bd94:	d901      	bls.n	801bd9a <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 801bd96:	2303      	movs	r3, #3
 801bd98:	e01b      	b.n	801bdd2 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 801bd9a:	687b      	ldr	r3, [r7, #4]
 801bd9c:	691b      	ldr	r3, [r3, #16]
 801bd9e:	2b00      	cmp	r3, #0
 801bda0:	daf2      	bge.n	801bd88 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 801bda2:	2300      	movs	r3, #0
 801bda4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 801bda6:	683b      	ldr	r3, [r7, #0]
 801bda8:	019b      	lsls	r3, r3, #6
 801bdaa:	f043 0220 	orr.w	r2, r3, #32
 801bdae:	687b      	ldr	r3, [r7, #4]
 801bdb0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 801bdb2:	68fb      	ldr	r3, [r7, #12]
 801bdb4:	3301      	adds	r3, #1
 801bdb6:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 801bdb8:	68fb      	ldr	r3, [r7, #12]
 801bdba:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 801bdbe:	d901      	bls.n	801bdc4 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 801bdc0:	2303      	movs	r3, #3
 801bdc2:	e006      	b.n	801bdd2 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 801bdc4:	687b      	ldr	r3, [r7, #4]
 801bdc6:	691b      	ldr	r3, [r3, #16]
 801bdc8:	f003 0320 	and.w	r3, r3, #32
 801bdcc:	2b20      	cmp	r3, #32
 801bdce:	d0f0      	beq.n	801bdb2 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 801bdd0:	2300      	movs	r3, #0
}
 801bdd2:	4618      	mov	r0, r3
 801bdd4:	3714      	adds	r7, #20
 801bdd6:	46bd      	mov	sp, r7
 801bdd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bddc:	4770      	bx	lr

0801bdde <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 801bdde:	b480      	push	{r7}
 801bde0:	b085      	sub	sp, #20
 801bde2:	af00      	add	r7, sp, #0
 801bde4:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 801bde6:	2300      	movs	r3, #0
 801bde8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 801bdea:	68fb      	ldr	r3, [r7, #12]
 801bdec:	3301      	adds	r3, #1
 801bdee:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 801bdf0:	68fb      	ldr	r3, [r7, #12]
 801bdf2:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 801bdf6:	d901      	bls.n	801bdfc <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 801bdf8:	2303      	movs	r3, #3
 801bdfa:	e018      	b.n	801be2e <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 801bdfc:	687b      	ldr	r3, [r7, #4]
 801bdfe:	691b      	ldr	r3, [r3, #16]
 801be00:	2b00      	cmp	r3, #0
 801be02:	daf2      	bge.n	801bdea <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 801be04:	2300      	movs	r3, #0
 801be06:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 801be08:	687b      	ldr	r3, [r7, #4]
 801be0a:	2210      	movs	r2, #16
 801be0c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 801be0e:	68fb      	ldr	r3, [r7, #12]
 801be10:	3301      	adds	r3, #1
 801be12:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 801be14:	68fb      	ldr	r3, [r7, #12]
 801be16:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 801be1a:	d901      	bls.n	801be20 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 801be1c:	2303      	movs	r3, #3
 801be1e:	e006      	b.n	801be2e <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 801be20:	687b      	ldr	r3, [r7, #4]
 801be22:	691b      	ldr	r3, [r3, #16]
 801be24:	f003 0310 	and.w	r3, r3, #16
 801be28:	2b10      	cmp	r3, #16
 801be2a:	d0f0      	beq.n	801be0e <USB_FlushRxFifo+0x30>

  return HAL_OK;
 801be2c:	2300      	movs	r3, #0
}
 801be2e:	4618      	mov	r0, r3
 801be30:	3714      	adds	r7, #20
 801be32:	46bd      	mov	sp, r7
 801be34:	f85d 7b04 	ldr.w	r7, [sp], #4
 801be38:	4770      	bx	lr

0801be3a <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 801be3a:	b480      	push	{r7}
 801be3c:	b08b      	sub	sp, #44	@ 0x2c
 801be3e:	af00      	add	r7, sp, #0
 801be40:	60f8      	str	r0, [r7, #12]
 801be42:	60b9      	str	r1, [r7, #8]
 801be44:	4613      	mov	r3, r2
 801be46:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801be48:	68fb      	ldr	r3, [r7, #12]
 801be4a:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 801be4c:	68bb      	ldr	r3, [r7, #8]
 801be4e:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 801be50:	88fb      	ldrh	r3, [r7, #6]
 801be52:	089b      	lsrs	r3, r3, #2
 801be54:	b29b      	uxth	r3, r3
 801be56:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 801be58:	88fb      	ldrh	r3, [r7, #6]
 801be5a:	f003 0303 	and.w	r3, r3, #3
 801be5e:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 801be60:	2300      	movs	r3, #0
 801be62:	623b      	str	r3, [r7, #32]
 801be64:	e014      	b.n	801be90 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 801be66:	69bb      	ldr	r3, [r7, #24]
 801be68:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801be6c:	681a      	ldr	r2, [r3, #0]
 801be6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801be70:	601a      	str	r2, [r3, #0]
    pDest++;
 801be72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801be74:	3301      	adds	r3, #1
 801be76:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 801be78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801be7a:	3301      	adds	r3, #1
 801be7c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 801be7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801be80:	3301      	adds	r3, #1
 801be82:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 801be84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801be86:	3301      	adds	r3, #1
 801be88:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 801be8a:	6a3b      	ldr	r3, [r7, #32]
 801be8c:	3301      	adds	r3, #1
 801be8e:	623b      	str	r3, [r7, #32]
 801be90:	6a3a      	ldr	r2, [r7, #32]
 801be92:	697b      	ldr	r3, [r7, #20]
 801be94:	429a      	cmp	r2, r3
 801be96:	d3e6      	bcc.n	801be66 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 801be98:	8bfb      	ldrh	r3, [r7, #30]
 801be9a:	2b00      	cmp	r3, #0
 801be9c:	d01e      	beq.n	801bedc <USB_ReadPacket+0xa2>
  {
    i = 0U;
 801be9e:	2300      	movs	r3, #0
 801bea0:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 801bea2:	69bb      	ldr	r3, [r7, #24]
 801bea4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801bea8:	461a      	mov	r2, r3
 801beaa:	f107 0310 	add.w	r3, r7, #16
 801beae:	6812      	ldr	r2, [r2, #0]
 801beb0:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 801beb2:	693a      	ldr	r2, [r7, #16]
 801beb4:	6a3b      	ldr	r3, [r7, #32]
 801beb6:	b2db      	uxtb	r3, r3
 801beb8:	00db      	lsls	r3, r3, #3
 801beba:	fa22 f303 	lsr.w	r3, r2, r3
 801bebe:	b2da      	uxtb	r2, r3
 801bec0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801bec2:	701a      	strb	r2, [r3, #0]
      i++;
 801bec4:	6a3b      	ldr	r3, [r7, #32]
 801bec6:	3301      	adds	r3, #1
 801bec8:	623b      	str	r3, [r7, #32]
      pDest++;
 801beca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801becc:	3301      	adds	r3, #1
 801bece:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 801bed0:	8bfb      	ldrh	r3, [r7, #30]
 801bed2:	3b01      	subs	r3, #1
 801bed4:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 801bed6:	8bfb      	ldrh	r3, [r7, #30]
 801bed8:	2b00      	cmp	r3, #0
 801beda:	d1ea      	bne.n	801beb2 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 801bedc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 801bede:	4618      	mov	r0, r3
 801bee0:	372c      	adds	r7, #44	@ 0x2c
 801bee2:	46bd      	mov	sp, r7
 801bee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bee8:	4770      	bx	lr

0801beea <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 801beea:	b480      	push	{r7}
 801beec:	b085      	sub	sp, #20
 801beee:	af00      	add	r7, sp, #0
 801bef0:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 801bef2:	687b      	ldr	r3, [r7, #4]
 801bef4:	695b      	ldr	r3, [r3, #20]
 801bef6:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 801bef8:	687b      	ldr	r3, [r7, #4]
 801befa:	699b      	ldr	r3, [r3, #24]
 801befc:	68fa      	ldr	r2, [r7, #12]
 801befe:	4013      	ands	r3, r2
 801bf00:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 801bf02:	68fb      	ldr	r3, [r7, #12]
}
 801bf04:	4618      	mov	r0, r3
 801bf06:	3714      	adds	r7, #20
 801bf08:	46bd      	mov	sp, r7
 801bf0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bf0e:	4770      	bx	lr

0801bf10 <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 801bf10:	b480      	push	{r7}
 801bf12:	b085      	sub	sp, #20
 801bf14:	af00      	add	r7, sp, #0
 801bf16:	6078      	str	r0, [r7, #4]
 801bf18:	460b      	mov	r3, r1
 801bf1a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801bf1c:	687b      	ldr	r3, [r7, #4]
 801bf1e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 801bf20:	78fb      	ldrb	r3, [r7, #3]
 801bf22:	015a      	lsls	r2, r3, #5
 801bf24:	68fb      	ldr	r3, [r7, #12]
 801bf26:	4413      	add	r3, r2
 801bf28:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 801bf2c:	689b      	ldr	r3, [r3, #8]
 801bf2e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 801bf30:	78fb      	ldrb	r3, [r7, #3]
 801bf32:	015a      	lsls	r2, r3, #5
 801bf34:	68fb      	ldr	r3, [r7, #12]
 801bf36:	4413      	add	r3, r2
 801bf38:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 801bf3c:	68db      	ldr	r3, [r3, #12]
 801bf3e:	68ba      	ldr	r2, [r7, #8]
 801bf40:	4013      	ands	r3, r2
 801bf42:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 801bf44:	68bb      	ldr	r3, [r7, #8]
}
 801bf46:	4618      	mov	r0, r3
 801bf48:	3714      	adds	r7, #20
 801bf4a:	46bd      	mov	sp, r7
 801bf4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bf50:	4770      	bx	lr

0801bf52 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 801bf52:	b480      	push	{r7}
 801bf54:	b083      	sub	sp, #12
 801bf56:	af00      	add	r7, sp, #0
 801bf58:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 801bf5a:	687b      	ldr	r3, [r7, #4]
 801bf5c:	695b      	ldr	r3, [r3, #20]
 801bf5e:	f003 0301 	and.w	r3, r3, #1
}
 801bf62:	4618      	mov	r0, r3
 801bf64:	370c      	adds	r7, #12
 801bf66:	46bd      	mov	sp, r7
 801bf68:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bf6c:	4770      	bx	lr

0801bf6e <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 801bf6e:	b480      	push	{r7}
 801bf70:	b085      	sub	sp, #20
 801bf72:	af00      	add	r7, sp, #0
 801bf74:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 801bf76:	2300      	movs	r3, #0
 801bf78:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 801bf7a:	68fb      	ldr	r3, [r7, #12]
 801bf7c:	3301      	adds	r3, #1
 801bf7e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 801bf80:	68fb      	ldr	r3, [r7, #12]
 801bf82:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 801bf86:	d901      	bls.n	801bf8c <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 801bf88:	2303      	movs	r3, #3
 801bf8a:	e022      	b.n	801bfd2 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 801bf8c:	687b      	ldr	r3, [r7, #4]
 801bf8e:	691b      	ldr	r3, [r3, #16]
 801bf90:	2b00      	cmp	r3, #0
 801bf92:	daf2      	bge.n	801bf7a <USB_CoreReset+0xc>

  count = 10U;
 801bf94:	230a      	movs	r3, #10
 801bf96:	60fb      	str	r3, [r7, #12]

  /* few cycles before setting core reset */
  while (count > 0U)
 801bf98:	e002      	b.n	801bfa0 <USB_CoreReset+0x32>
  {
    count--;
 801bf9a:	68fb      	ldr	r3, [r7, #12]
 801bf9c:	3b01      	subs	r3, #1
 801bf9e:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 801bfa0:	68fb      	ldr	r3, [r7, #12]
 801bfa2:	2b00      	cmp	r3, #0
 801bfa4:	d1f9      	bne.n	801bf9a <USB_CoreReset+0x2c>
  }

  /* Core Soft Reset */
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 801bfa6:	687b      	ldr	r3, [r7, #4]
 801bfa8:	691b      	ldr	r3, [r3, #16]
 801bfaa:	f043 0201 	orr.w	r2, r3, #1
 801bfae:	687b      	ldr	r3, [r7, #4]
 801bfb0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 801bfb2:	68fb      	ldr	r3, [r7, #12]
 801bfb4:	3301      	adds	r3, #1
 801bfb6:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 801bfb8:	68fb      	ldr	r3, [r7, #12]
 801bfba:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 801bfbe:	d901      	bls.n	801bfc4 <USB_CoreReset+0x56>
    {
      return HAL_TIMEOUT;
 801bfc0:	2303      	movs	r3, #3
 801bfc2:	e006      	b.n	801bfd2 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 801bfc4:	687b      	ldr	r3, [r7, #4]
 801bfc6:	691b      	ldr	r3, [r3, #16]
 801bfc8:	f003 0301 	and.w	r3, r3, #1
 801bfcc:	2b01      	cmp	r3, #1
 801bfce:	d0f0      	beq.n	801bfb2 <USB_CoreReset+0x44>

  return HAL_OK;
 801bfd0:	2300      	movs	r3, #0
}
 801bfd2:	4618      	mov	r0, r3
 801bfd4:	3714      	adds	r7, #20
 801bfd6:	46bd      	mov	sp, r7
 801bfd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bfdc:	4770      	bx	lr
	...

0801bfe0 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 801bfe0:	b084      	sub	sp, #16
 801bfe2:	b580      	push	{r7, lr}
 801bfe4:	b086      	sub	sp, #24
 801bfe6:	af00      	add	r7, sp, #0
 801bfe8:	6078      	str	r0, [r7, #4]
 801bfea:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 801bfee:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 801bff2:	2300      	movs	r3, #0
 801bff4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801bff6:	687b      	ldr	r3, [r7, #4]
 801bff8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 801bffa:	68fb      	ldr	r3, [r7, #12]
 801bffc:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 801c000:	461a      	mov	r2, r3
 801c002:	2300      	movs	r3, #0
 801c004:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 801c006:	687b      	ldr	r3, [r7, #4]
 801c008:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801c00a:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 801c00e:	687b      	ldr	r3, [r7, #4]
 801c010:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 801c012:	687b      	ldr	r3, [r7, #4]
 801c014:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801c016:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 801c01a:	687b      	ldr	r3, [r7, #4]
 801c01c:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 801c01e:	687b      	ldr	r3, [r7, #4]
 801c020:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801c022:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 801c026:	687b      	ldr	r3, [r7, #4]
 801c028:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) ||
          defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) == 0U)
 801c02a:	687b      	ldr	r3, [r7, #4]
 801c02c:	68db      	ldr	r3, [r3, #12]
 801c02e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801c032:	2b00      	cmp	r3, #0
 801c034:	d119      	bne.n	801c06a <USB_HostInit+0x8a>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 801c036:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801c03a:	2b01      	cmp	r3, #1
 801c03c:	d10a      	bne.n	801c054 <USB_HostInit+0x74>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 801c03e:	68fb      	ldr	r3, [r7, #12]
 801c040:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 801c044:	681b      	ldr	r3, [r3, #0]
 801c046:	68fa      	ldr	r2, [r7, #12]
 801c048:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 801c04c:	f043 0304 	orr.w	r3, r3, #4
 801c050:	6013      	str	r3, [r2, #0]
 801c052:	e014      	b.n	801c07e <USB_HostInit+0x9e>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 801c054:	68fb      	ldr	r3, [r7, #12]
 801c056:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 801c05a:	681b      	ldr	r3, [r3, #0]
 801c05c:	68fa      	ldr	r2, [r7, #12]
 801c05e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 801c062:	f023 0304 	bic.w	r3, r3, #4
 801c066:	6013      	str	r3, [r2, #0]
 801c068:	e009      	b.n	801c07e <USB_HostInit+0x9e>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 801c06a:	68fb      	ldr	r3, [r7, #12]
 801c06c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 801c070:	681b      	ldr	r3, [r3, #0]
 801c072:	68fa      	ldr	r2, [r7, #12]
 801c074:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 801c078:	f023 0304 	bic.w	r3, r3, #4
 801c07c:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 801c07e:	2110      	movs	r1, #16
 801c080:	6878      	ldr	r0, [r7, #4]
 801c082:	f7ff fe7a 	bl	801bd7a <USB_FlushTxFifo>
 801c086:	4603      	mov	r3, r0
 801c088:	2b00      	cmp	r3, #0
 801c08a:	d001      	beq.n	801c090 <USB_HostInit+0xb0>
  {
    ret = HAL_ERROR;
 801c08c:	2301      	movs	r3, #1
 801c08e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 801c090:	6878      	ldr	r0, [r7, #4]
 801c092:	f7ff fea4 	bl	801bdde <USB_FlushRxFifo>
 801c096:	4603      	mov	r3, r0
 801c098:	2b00      	cmp	r3, #0
 801c09a:	d001      	beq.n	801c0a0 <USB_HostInit+0xc0>
  {
    ret = HAL_ERROR;
 801c09c:	2301      	movs	r3, #1
 801c09e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 801c0a0:	2300      	movs	r3, #0
 801c0a2:	613b      	str	r3, [r7, #16]
 801c0a4:	e015      	b.n	801c0d2 <USB_HostInit+0xf2>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 801c0a6:	693b      	ldr	r3, [r7, #16]
 801c0a8:	015a      	lsls	r2, r3, #5
 801c0aa:	68fb      	ldr	r3, [r7, #12]
 801c0ac:	4413      	add	r3, r2
 801c0ae:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 801c0b2:	461a      	mov	r2, r3
 801c0b4:	f04f 33ff 	mov.w	r3, #4294967295
 801c0b8:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 801c0ba:	693b      	ldr	r3, [r7, #16]
 801c0bc:	015a      	lsls	r2, r3, #5
 801c0be:	68fb      	ldr	r3, [r7, #12]
 801c0c0:	4413      	add	r3, r2
 801c0c2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 801c0c6:	461a      	mov	r2, r3
 801c0c8:	2300      	movs	r3, #0
 801c0ca:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 801c0cc:	693b      	ldr	r3, [r7, #16]
 801c0ce:	3301      	adds	r3, #1
 801c0d0:	613b      	str	r3, [r7, #16]
 801c0d2:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 801c0d6:	461a      	mov	r2, r3
 801c0d8:	693b      	ldr	r3, [r7, #16]
 801c0da:	4293      	cmp	r3, r2
 801c0dc:	d3e3      	bcc.n	801c0a6 <USB_HostInit+0xc6>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 801c0de:	687b      	ldr	r3, [r7, #4]
 801c0e0:	2200      	movs	r2, #0
 801c0e2:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 801c0e4:	687b      	ldr	r3, [r7, #4]
 801c0e6:	f04f 32ff 	mov.w	r2, #4294967295
 801c0ea:	615a      	str	r2, [r3, #20]
#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 801c0ec:	687b      	ldr	r3, [r7, #4]
 801c0ee:	4a18      	ldr	r2, [pc, #96]	@ (801c150 <USB_HostInit+0x170>)
 801c0f0:	4293      	cmp	r3, r2
 801c0f2:	d10b      	bne.n	801c10c <USB_HostInit+0x12c>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 801c0f4:	687b      	ldr	r3, [r7, #4]
 801c0f6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801c0fa:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 801c0fc:	687b      	ldr	r3, [r7, #4]
 801c0fe:	4a15      	ldr	r2, [pc, #84]	@ (801c154 <USB_HostInit+0x174>)
 801c100:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 801c102:	687b      	ldr	r3, [r7, #4]
 801c104:	4a14      	ldr	r2, [pc, #80]	@ (801c158 <USB_HostInit+0x178>)
 801c106:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
 801c10a:	e009      	b.n	801c120 <USB_HostInit+0x140>
  }
  else
#endif /* defined (USB_OTG_HS) */
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 801c10c:	687b      	ldr	r3, [r7, #4]
 801c10e:	2280      	movs	r2, #128	@ 0x80
 801c110:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 801c112:	687b      	ldr	r3, [r7, #4]
 801c114:	4a11      	ldr	r2, [pc, #68]	@ (801c15c <USB_HostInit+0x17c>)
 801c116:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 801c118:	687b      	ldr	r3, [r7, #4]
 801c11a:	4a11      	ldr	r2, [pc, #68]	@ (801c160 <USB_HostInit+0x180>)
 801c11c:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 801c120:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801c124:	2b00      	cmp	r3, #0
 801c126:	d105      	bne.n	801c134 <USB_HostInit+0x154>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 801c128:	687b      	ldr	r3, [r7, #4]
 801c12a:	699b      	ldr	r3, [r3, #24]
 801c12c:	f043 0210 	orr.w	r2, r3, #16
 801c130:	687b      	ldr	r3, [r7, #4]
 801c132:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 801c134:	687b      	ldr	r3, [r7, #4]
 801c136:	699a      	ldr	r2, [r3, #24]
 801c138:	4b0a      	ldr	r3, [pc, #40]	@ (801c164 <USB_HostInit+0x184>)
 801c13a:	4313      	orrs	r3, r2
 801c13c:	687a      	ldr	r2, [r7, #4]
 801c13e:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 801c140:	7dfb      	ldrb	r3, [r7, #23]
}
 801c142:	4618      	mov	r0, r3
 801c144:	3718      	adds	r7, #24
 801c146:	46bd      	mov	sp, r7
 801c148:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 801c14c:	b004      	add	sp, #16
 801c14e:	4770      	bx	lr
 801c150:	40040000 	.word	0x40040000
 801c154:	01000200 	.word	0x01000200
 801c158:	00e00300 	.word	0x00e00300
 801c15c:	00600080 	.word	0x00600080
 801c160:	004000e0 	.word	0x004000e0
 801c164:	a3200008 	.word	0xa3200008

0801c168 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 801c168:	b480      	push	{r7}
 801c16a:	b085      	sub	sp, #20
 801c16c:	af00      	add	r7, sp, #0
 801c16e:	6078      	str	r0, [r7, #4]
 801c170:	460b      	mov	r3, r1
 801c172:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801c174:	687b      	ldr	r3, [r7, #4]
 801c176:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 801c178:	68fb      	ldr	r3, [r7, #12]
 801c17a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 801c17e:	681b      	ldr	r3, [r3, #0]
 801c180:	68fa      	ldr	r2, [r7, #12]
 801c182:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 801c186:	f023 0303 	bic.w	r3, r3, #3
 801c18a:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 801c18c:	68fb      	ldr	r3, [r7, #12]
 801c18e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 801c192:	681a      	ldr	r2, [r3, #0]
 801c194:	78fb      	ldrb	r3, [r7, #3]
 801c196:	f003 0303 	and.w	r3, r3, #3
 801c19a:	68f9      	ldr	r1, [r7, #12]
 801c19c:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 801c1a0:	4313      	orrs	r3, r2
 801c1a2:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 801c1a4:	78fb      	ldrb	r3, [r7, #3]
 801c1a6:	2b01      	cmp	r3, #1
 801c1a8:	d107      	bne.n	801c1ba <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 801c1aa:	68fb      	ldr	r3, [r7, #12]
 801c1ac:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 801c1b0:	461a      	mov	r2, r3
 801c1b2:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 801c1b6:	6053      	str	r3, [r2, #4]
 801c1b8:	e00c      	b.n	801c1d4 <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 801c1ba:	78fb      	ldrb	r3, [r7, #3]
 801c1bc:	2b02      	cmp	r3, #2
 801c1be:	d107      	bne.n	801c1d0 <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 801c1c0:	68fb      	ldr	r3, [r7, #12]
 801c1c2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 801c1c6:	461a      	mov	r2, r3
 801c1c8:	f241 7370 	movw	r3, #6000	@ 0x1770
 801c1cc:	6053      	str	r3, [r2, #4]
 801c1ce:	e001      	b.n	801c1d4 <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 801c1d0:	2301      	movs	r3, #1
 801c1d2:	e000      	b.n	801c1d6 <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 801c1d4:	2300      	movs	r3, #0
}
 801c1d6:	4618      	mov	r0, r3
 801c1d8:	3714      	adds	r7, #20
 801c1da:	46bd      	mov	sp, r7
 801c1dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c1e0:	4770      	bx	lr

0801c1e2 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 801c1e2:	b480      	push	{r7}
 801c1e4:	b085      	sub	sp, #20
 801c1e6:	af00      	add	r7, sp, #0
 801c1e8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801c1ea:	687b      	ldr	r3, [r7, #4]
 801c1ec:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 801c1ee:	68fb      	ldr	r3, [r7, #12]
 801c1f0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 801c1f4:	695b      	ldr	r3, [r3, #20]
 801c1f6:	b29b      	uxth	r3, r3
}
 801c1f8:	4618      	mov	r0, r3
 801c1fa:	3714      	adds	r7, #20
 801c1fc:	46bd      	mov	sp, r7
 801c1fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c202:	4770      	bx	lr

0801c204 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 801c204:	b480      	push	{r7}
 801c206:	b089      	sub	sp, #36	@ 0x24
 801c208:	af00      	add	r7, sp, #0
 801c20a:	6078      	str	r0, [r7, #4]
 801c20c:	460b      	mov	r3, r1
 801c20e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801c210:	687b      	ldr	r3, [r7, #4]
 801c212:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 801c214:	78fb      	ldrb	r3, [r7, #3]
 801c216:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 801c218:	2300      	movs	r3, #0
 801c21a:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 801c21c:	69bb      	ldr	r3, [r7, #24]
 801c21e:	015a      	lsls	r2, r3, #5
 801c220:	69fb      	ldr	r3, [r7, #28]
 801c222:	4413      	add	r3, r2
 801c224:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 801c228:	681b      	ldr	r3, [r3, #0]
 801c22a:	0c9b      	lsrs	r3, r3, #18
 801c22c:	f003 0303 	and.w	r3, r3, #3
 801c230:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 801c232:	69bb      	ldr	r3, [r7, #24]
 801c234:	015a      	lsls	r2, r3, #5
 801c236:	69fb      	ldr	r3, [r7, #28]
 801c238:	4413      	add	r3, r2
 801c23a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 801c23e:	681b      	ldr	r3, [r3, #0]
 801c240:	0fdb      	lsrs	r3, r3, #31
 801c242:	f003 0301 	and.w	r3, r3, #1
 801c246:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 801c248:	69bb      	ldr	r3, [r7, #24]
 801c24a:	015a      	lsls	r2, r3, #5
 801c24c:	69fb      	ldr	r3, [r7, #28]
 801c24e:	4413      	add	r3, r2
 801c250:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 801c254:	685b      	ldr	r3, [r3, #4]
 801c256:	0fdb      	lsrs	r3, r3, #31
 801c258:	f003 0301 	and.w	r3, r3, #1
 801c25c:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 801c25e:	687b      	ldr	r3, [r7, #4]
 801c260:	689b      	ldr	r3, [r3, #8]
 801c262:	f003 0320 	and.w	r3, r3, #32
 801c266:	2b20      	cmp	r3, #32
 801c268:	d10d      	bne.n	801c286 <USB_HC_Halt+0x82>
 801c26a:	68fb      	ldr	r3, [r7, #12]
 801c26c:	2b00      	cmp	r3, #0
 801c26e:	d10a      	bne.n	801c286 <USB_HC_Halt+0x82>
 801c270:	693b      	ldr	r3, [r7, #16]
 801c272:	2b00      	cmp	r3, #0
 801c274:	d005      	beq.n	801c282 <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 801c276:	697b      	ldr	r3, [r7, #20]
 801c278:	2b01      	cmp	r3, #1
 801c27a:	d002      	beq.n	801c282 <USB_HC_Halt+0x7e>
 801c27c:	697b      	ldr	r3, [r7, #20]
 801c27e:	2b03      	cmp	r3, #3
 801c280:	d101      	bne.n	801c286 <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 801c282:	2300      	movs	r3, #0
 801c284:	e0d8      	b.n	801c438 <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 801c286:	697b      	ldr	r3, [r7, #20]
 801c288:	2b00      	cmp	r3, #0
 801c28a:	d002      	beq.n	801c292 <USB_HC_Halt+0x8e>
 801c28c:	697b      	ldr	r3, [r7, #20]
 801c28e:	2b02      	cmp	r3, #2
 801c290:	d173      	bne.n	801c37a <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 801c292:	69bb      	ldr	r3, [r7, #24]
 801c294:	015a      	lsls	r2, r3, #5
 801c296:	69fb      	ldr	r3, [r7, #28]
 801c298:	4413      	add	r3, r2
 801c29a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 801c29e:	681b      	ldr	r3, [r3, #0]
 801c2a0:	69ba      	ldr	r2, [r7, #24]
 801c2a2:	0151      	lsls	r1, r2, #5
 801c2a4:	69fa      	ldr	r2, [r7, #28]
 801c2a6:	440a      	add	r2, r1
 801c2a8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 801c2ac:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 801c2b0:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 801c2b2:	687b      	ldr	r3, [r7, #4]
 801c2b4:	689b      	ldr	r3, [r3, #8]
 801c2b6:	f003 0320 	and.w	r3, r3, #32
 801c2ba:	2b00      	cmp	r3, #0
 801c2bc:	d14a      	bne.n	801c354 <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 801c2be:	687b      	ldr	r3, [r7, #4]
 801c2c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801c2c2:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 801c2c6:	2b00      	cmp	r3, #0
 801c2c8:	d133      	bne.n	801c332 <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 801c2ca:	69bb      	ldr	r3, [r7, #24]
 801c2cc:	015a      	lsls	r2, r3, #5
 801c2ce:	69fb      	ldr	r3, [r7, #28]
 801c2d0:	4413      	add	r3, r2
 801c2d2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 801c2d6:	681b      	ldr	r3, [r3, #0]
 801c2d8:	69ba      	ldr	r2, [r7, #24]
 801c2da:	0151      	lsls	r1, r2, #5
 801c2dc:	69fa      	ldr	r2, [r7, #28]
 801c2de:	440a      	add	r2, r1
 801c2e0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 801c2e4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801c2e8:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 801c2ea:	69bb      	ldr	r3, [r7, #24]
 801c2ec:	015a      	lsls	r2, r3, #5
 801c2ee:	69fb      	ldr	r3, [r7, #28]
 801c2f0:	4413      	add	r3, r2
 801c2f2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 801c2f6:	681b      	ldr	r3, [r3, #0]
 801c2f8:	69ba      	ldr	r2, [r7, #24]
 801c2fa:	0151      	lsls	r1, r2, #5
 801c2fc:	69fa      	ldr	r2, [r7, #28]
 801c2fe:	440a      	add	r2, r1
 801c300:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 801c304:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 801c308:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 801c30a:	68bb      	ldr	r3, [r7, #8]
 801c30c:	3301      	adds	r3, #1
 801c30e:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 801c310:	68bb      	ldr	r3, [r7, #8]
 801c312:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 801c316:	d82e      	bhi.n	801c376 <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 801c318:	69bb      	ldr	r3, [r7, #24]
 801c31a:	015a      	lsls	r2, r3, #5
 801c31c:	69fb      	ldr	r3, [r7, #28]
 801c31e:	4413      	add	r3, r2
 801c320:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 801c324:	681b      	ldr	r3, [r3, #0]
 801c326:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 801c32a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 801c32e:	d0ec      	beq.n	801c30a <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 801c330:	e081      	b.n	801c436 <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 801c332:	69bb      	ldr	r3, [r7, #24]
 801c334:	015a      	lsls	r2, r3, #5
 801c336:	69fb      	ldr	r3, [r7, #28]
 801c338:	4413      	add	r3, r2
 801c33a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 801c33e:	681b      	ldr	r3, [r3, #0]
 801c340:	69ba      	ldr	r2, [r7, #24]
 801c342:	0151      	lsls	r1, r2, #5
 801c344:	69fa      	ldr	r2, [r7, #28]
 801c346:	440a      	add	r2, r1
 801c348:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 801c34c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 801c350:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 801c352:	e070      	b.n	801c436 <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 801c354:	69bb      	ldr	r3, [r7, #24]
 801c356:	015a      	lsls	r2, r3, #5
 801c358:	69fb      	ldr	r3, [r7, #28]
 801c35a:	4413      	add	r3, r2
 801c35c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 801c360:	681b      	ldr	r3, [r3, #0]
 801c362:	69ba      	ldr	r2, [r7, #24]
 801c364:	0151      	lsls	r1, r2, #5
 801c366:	69fa      	ldr	r2, [r7, #28]
 801c368:	440a      	add	r2, r1
 801c36a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 801c36e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 801c372:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 801c374:	e05f      	b.n	801c436 <USB_HC_Halt+0x232>
            break;
 801c376:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 801c378:	e05d      	b.n	801c436 <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 801c37a:	69bb      	ldr	r3, [r7, #24]
 801c37c:	015a      	lsls	r2, r3, #5
 801c37e:	69fb      	ldr	r3, [r7, #28]
 801c380:	4413      	add	r3, r2
 801c382:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 801c386:	681b      	ldr	r3, [r3, #0]
 801c388:	69ba      	ldr	r2, [r7, #24]
 801c38a:	0151      	lsls	r1, r2, #5
 801c38c:	69fa      	ldr	r2, [r7, #28]
 801c38e:	440a      	add	r2, r1
 801c390:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 801c394:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 801c398:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 801c39a:	69fb      	ldr	r3, [r7, #28]
 801c39c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 801c3a0:	691b      	ldr	r3, [r3, #16]
 801c3a2:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 801c3a6:	2b00      	cmp	r3, #0
 801c3a8:	d133      	bne.n	801c412 <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 801c3aa:	69bb      	ldr	r3, [r7, #24]
 801c3ac:	015a      	lsls	r2, r3, #5
 801c3ae:	69fb      	ldr	r3, [r7, #28]
 801c3b0:	4413      	add	r3, r2
 801c3b2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 801c3b6:	681b      	ldr	r3, [r3, #0]
 801c3b8:	69ba      	ldr	r2, [r7, #24]
 801c3ba:	0151      	lsls	r1, r2, #5
 801c3bc:	69fa      	ldr	r2, [r7, #28]
 801c3be:	440a      	add	r2, r1
 801c3c0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 801c3c4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801c3c8:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 801c3ca:	69bb      	ldr	r3, [r7, #24]
 801c3cc:	015a      	lsls	r2, r3, #5
 801c3ce:	69fb      	ldr	r3, [r7, #28]
 801c3d0:	4413      	add	r3, r2
 801c3d2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 801c3d6:	681b      	ldr	r3, [r3, #0]
 801c3d8:	69ba      	ldr	r2, [r7, #24]
 801c3da:	0151      	lsls	r1, r2, #5
 801c3dc:	69fa      	ldr	r2, [r7, #28]
 801c3de:	440a      	add	r2, r1
 801c3e0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 801c3e4:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 801c3e8:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 801c3ea:	68bb      	ldr	r3, [r7, #8]
 801c3ec:	3301      	adds	r3, #1
 801c3ee:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 801c3f0:	68bb      	ldr	r3, [r7, #8]
 801c3f2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 801c3f6:	d81d      	bhi.n	801c434 <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 801c3f8:	69bb      	ldr	r3, [r7, #24]
 801c3fa:	015a      	lsls	r2, r3, #5
 801c3fc:	69fb      	ldr	r3, [r7, #28]
 801c3fe:	4413      	add	r3, r2
 801c400:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 801c404:	681b      	ldr	r3, [r3, #0]
 801c406:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 801c40a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 801c40e:	d0ec      	beq.n	801c3ea <USB_HC_Halt+0x1e6>
 801c410:	e011      	b.n	801c436 <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 801c412:	69bb      	ldr	r3, [r7, #24]
 801c414:	015a      	lsls	r2, r3, #5
 801c416:	69fb      	ldr	r3, [r7, #28]
 801c418:	4413      	add	r3, r2
 801c41a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 801c41e:	681b      	ldr	r3, [r3, #0]
 801c420:	69ba      	ldr	r2, [r7, #24]
 801c422:	0151      	lsls	r1, r2, #5
 801c424:	69fa      	ldr	r2, [r7, #28]
 801c426:	440a      	add	r2, r1
 801c428:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 801c42c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 801c430:	6013      	str	r3, [r2, #0]
 801c432:	e000      	b.n	801c436 <USB_HC_Halt+0x232>
          break;
 801c434:	bf00      	nop
    }
  }

  return HAL_OK;
 801c436:	2300      	movs	r3, #0
}
 801c438:	4618      	mov	r0, r3
 801c43a:	3724      	adds	r7, #36	@ 0x24
 801c43c:	46bd      	mov	sp, r7
 801c43e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c442:	4770      	bx	lr

0801c444 <ai_log_err>:

static ai_buffer* ai_input;
static ai_buffer* ai_output;

static void ai_log_err(const ai_error err, const char *fct)
{
 801c444:	b580      	push	{r7, lr}
 801c446:	b082      	sub	sp, #8
 801c448:	af00      	add	r7, sp, #0
 801c44a:	6078      	str	r0, [r7, #4]
 801c44c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN log */
  if (fct)
 801c44e:	683b      	ldr	r3, [r7, #0]
 801c450:	2b00      	cmp	r3, #0
 801c452:	d009      	beq.n	801c468 <ai_log_err+0x24>
    printf("TEMPLATE - Error (%s) - type=0x%02x code=0x%02x\r\n", fct,
        err.type, err.code);
 801c454:	793b      	ldrb	r3, [r7, #4]
    printf("TEMPLATE - Error (%s) - type=0x%02x code=0x%02x\r\n", fct,
 801c456:	461a      	mov	r2, r3
        err.type, err.code);
 801c458:	687b      	ldr	r3, [r7, #4]
 801c45a:	f3c3 2317 	ubfx	r3, r3, #8, #24
    printf("TEMPLATE - Error (%s) - type=0x%02x code=0x%02x\r\n", fct,
 801c45e:	6839      	ldr	r1, [r7, #0]
 801c460:	4807      	ldr	r0, [pc, #28]	@ (801c480 <ai_log_err+0x3c>)
 801c462:	f017 fae3 	bl	8033a2c <iprintf>
 801c466:	e009      	b.n	801c47c <ai_log_err+0x38>
  else
    printf("TEMPLATE - Error - type=0x%02x code=0x%02x\r\n", err.type, err.code);
 801c468:	793b      	ldrb	r3, [r7, #4]
 801c46a:	4619      	mov	r1, r3
 801c46c:	687b      	ldr	r3, [r7, #4]
 801c46e:	f3c3 2317 	ubfx	r3, r3, #8, #24
 801c472:	461a      	mov	r2, r3
 801c474:	4803      	ldr	r0, [pc, #12]	@ (801c484 <ai_log_err+0x40>)
 801c476:	f017 fad9 	bl	8033a2c <iprintf>

  do {} while (1);
 801c47a:	bf00      	nop
 801c47c:	bf00      	nop
 801c47e:	e7fd      	b.n	801c47c <ai_log_err+0x38>
 801c480:	080363f8 	.word	0x080363f8
 801c484:	0803642c 	.word	0x0803642c

0801c488 <ai_boostrap>:
  /* USER CODE END log */
}

static int ai_boostrap(ai_handle *act_addr)
{
 801c488:	b580      	push	{r7, lr}
 801c48a:	b086      	sub	sp, #24
 801c48c:	af00      	add	r7, sp, #0
 801c48e:	6078      	str	r0, [r7, #4]
  ai_error err;

  /* Create and initialize an instance of the model */
  err = ai_network_create_and_init(&network, act_addr, NULL);
 801c490:	2200      	movs	r2, #0
 801c492:	6879      	ldr	r1, [r7, #4]
 801c494:	4828      	ldr	r0, [pc, #160]	@ (801c538 <ai_boostrap+0xb0>)
 801c496:	f000 fb8b 	bl	801cbb0 <ai_network_create_and_init>
 801c49a:	4603      	mov	r3, r0
 801c49c:	60fb      	str	r3, [r7, #12]
  if (err.type != AI_ERROR_NONE) {
 801c49e:	7b3b      	ldrb	r3, [r7, #12]
 801c4a0:	2b00      	cmp	r3, #0
 801c4a2:	d006      	beq.n	801c4b2 <ai_boostrap+0x2a>
    ai_log_err(err, "ai_network_create_and_init");
 801c4a4:	4925      	ldr	r1, [pc, #148]	@ (801c53c <ai_boostrap+0xb4>)
 801c4a6:	68f8      	ldr	r0, [r7, #12]
 801c4a8:	f7ff ffcc 	bl	801c444 <ai_log_err>
    return -1;
 801c4ac:	f04f 33ff 	mov.w	r3, #4294967295
 801c4b0:	e03e      	b.n	801c530 <ai_boostrap+0xa8>
  }

  ai_input = ai_network_inputs_get(network, NULL);
 801c4b2:	4b21      	ldr	r3, [pc, #132]	@ (801c538 <ai_boostrap+0xb0>)
 801c4b4:	681b      	ldr	r3, [r3, #0]
 801c4b6:	2100      	movs	r1, #0
 801c4b8:	4618      	mov	r0, r3
 801c4ba:	f000 fbf7 	bl	801ccac <ai_network_inputs_get>
 801c4be:	4603      	mov	r3, r0
 801c4c0:	4a1f      	ldr	r2, [pc, #124]	@ (801c540 <ai_boostrap+0xb8>)
 801c4c2:	6013      	str	r3, [r2, #0]
  ai_output = ai_network_outputs_get(network, NULL);
 801c4c4:	4b1c      	ldr	r3, [pc, #112]	@ (801c538 <ai_boostrap+0xb0>)
 801c4c6:	681b      	ldr	r3, [r3, #0]
 801c4c8:	2100      	movs	r1, #0
 801c4ca:	4618      	mov	r0, r3
 801c4cc:	f000 fc08 	bl	801cce0 <ai_network_outputs_get>
 801c4d0:	4603      	mov	r3, r0
 801c4d2:	4a1c      	ldr	r2, [pc, #112]	@ (801c544 <ai_boostrap+0xbc>)
 801c4d4:	6013      	str	r3, [r2, #0]

#if defined(AI_NETWORK_INPUTS_IN_ACTIVATIONS)
  /*  In the case where "--allocate-inputs" option is used, memory buffer can be
   *  used from the activations buffer. This is not mandatory.
   */
  for (int idx=0; idx < AI_NETWORK_IN_NUM; idx++) {
 801c4d6:	2300      	movs	r3, #0
 801c4d8:	617b      	str	r3, [r7, #20]
 801c4da:	e00f      	b.n	801c4fc <ai_boostrap+0x74>
	data_ins[idx] = ai_input[idx].data;
 801c4dc:	4b18      	ldr	r3, [pc, #96]	@ (801c540 <ai_boostrap+0xb8>)
 801c4de:	6819      	ldr	r1, [r3, #0]
 801c4e0:	697a      	ldr	r2, [r7, #20]
 801c4e2:	4613      	mov	r3, r2
 801c4e4:	00db      	lsls	r3, r3, #3
 801c4e6:	1a9b      	subs	r3, r3, r2
 801c4e8:	009b      	lsls	r3, r3, #2
 801c4ea:	440b      	add	r3, r1
 801c4ec:	685a      	ldr	r2, [r3, #4]
 801c4ee:	4916      	ldr	r1, [pc, #88]	@ (801c548 <ai_boostrap+0xc0>)
 801c4f0:	697b      	ldr	r3, [r7, #20]
 801c4f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  for (int idx=0; idx < AI_NETWORK_IN_NUM; idx++) {
 801c4f6:	697b      	ldr	r3, [r7, #20]
 801c4f8:	3301      	adds	r3, #1
 801c4fa:	617b      	str	r3, [r7, #20]
 801c4fc:	697b      	ldr	r3, [r7, #20]
 801c4fe:	2b00      	cmp	r3, #0
 801c500:	ddec      	ble.n	801c4dc <ai_boostrap+0x54>

#if defined(AI_NETWORK_OUTPUTS_IN_ACTIVATIONS)
  /*  In the case where "--allocate-outputs" option is used, memory buffer can be
   *  used from the activations buffer. This is no mandatory.
   */
  for (int idx=0; idx < AI_NETWORK_OUT_NUM; idx++) {
 801c502:	2300      	movs	r3, #0
 801c504:	613b      	str	r3, [r7, #16]
 801c506:	e00f      	b.n	801c528 <ai_boostrap+0xa0>
	data_outs[idx] = ai_output[idx].data;
 801c508:	4b0e      	ldr	r3, [pc, #56]	@ (801c544 <ai_boostrap+0xbc>)
 801c50a:	6819      	ldr	r1, [r3, #0]
 801c50c:	693a      	ldr	r2, [r7, #16]
 801c50e:	4613      	mov	r3, r2
 801c510:	00db      	lsls	r3, r3, #3
 801c512:	1a9b      	subs	r3, r3, r2
 801c514:	009b      	lsls	r3, r3, #2
 801c516:	440b      	add	r3, r1
 801c518:	685a      	ldr	r2, [r3, #4]
 801c51a:	490c      	ldr	r1, [pc, #48]	@ (801c54c <ai_boostrap+0xc4>)
 801c51c:	693b      	ldr	r3, [r7, #16]
 801c51e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  for (int idx=0; idx < AI_NETWORK_OUT_NUM; idx++) {
 801c522:	693b      	ldr	r3, [r7, #16]
 801c524:	3301      	adds	r3, #1
 801c526:	613b      	str	r3, [r7, #16]
 801c528:	693b      	ldr	r3, [r7, #16]
 801c52a:	2b00      	cmp	r3, #0
 801c52c:	ddec      	ble.n	801c508 <ai_boostrap+0x80>
  for (int idx=0; idx < AI_NETWORK_OUT_NUM; idx++) {
	ai_output[idx].data = data_outs[idx];
  }
#endif

  return 0;
 801c52e:	2300      	movs	r3, #0
}
 801c530:	4618      	mov	r0, r3
 801c532:	3718      	adds	r7, #24
 801c534:	46bd      	mov	sp, r7
 801c536:	bd80      	pop	{r7, pc}
 801c538:	200055a0 	.word	0x200055a0
 801c53c:	0803645c 	.word	0x0803645c
 801c540:	200055a4 	.word	0x200055a4
 801c544:	200055a8 	.word	0x200055a8
 801c548:	20001cfc 	.word	0x20001cfc
 801c54c:	20001d00 	.word	0x20001d00

0801c550 <ai_run>:

static int ai_run(void)
{
 801c550:	b580      	push	{r7, lr}
 801c552:	b082      	sub	sp, #8
 801c554:	af00      	add	r7, sp, #0
  ai_i32 batch;

  batch = ai_network_run(network, ai_input, ai_output);
 801c556:	4b0f      	ldr	r3, [pc, #60]	@ (801c594 <ai_run+0x44>)
 801c558:	681b      	ldr	r3, [r3, #0]
 801c55a:	4a0f      	ldr	r2, [pc, #60]	@ (801c598 <ai_run+0x48>)
 801c55c:	6811      	ldr	r1, [r2, #0]
 801c55e:	4a0f      	ldr	r2, [pc, #60]	@ (801c59c <ai_run+0x4c>)
 801c560:	6812      	ldr	r2, [r2, #0]
 801c562:	4618      	mov	r0, r3
 801c564:	f000 fc12 	bl	801cd8c <ai_network_run>
 801c568:	6078      	str	r0, [r7, #4]
  if (batch != 1) {
 801c56a:	687b      	ldr	r3, [r7, #4]
 801c56c:	2b01      	cmp	r3, #1
 801c56e:	d00c      	beq.n	801c58a <ai_run+0x3a>
    ai_log_err(ai_network_get_error(network),
 801c570:	4b08      	ldr	r3, [pc, #32]	@ (801c594 <ai_run+0x44>)
 801c572:	681b      	ldr	r3, [r3, #0]
 801c574:	4618      	mov	r0, r3
 801c576:	f000 faf9 	bl	801cb6c <ai_network_get_error>
 801c57a:	4603      	mov	r3, r0
 801c57c:	4908      	ldr	r1, [pc, #32]	@ (801c5a0 <ai_run+0x50>)
 801c57e:	4618      	mov	r0, r3
 801c580:	f7ff ff60 	bl	801c444 <ai_log_err>
        "ai_network_run");
    return -1;
 801c584:	f04f 33ff 	mov.w	r3, #4294967295
 801c588:	e000      	b.n	801c58c <ai_run+0x3c>
  }

  return 0;
 801c58a:	2300      	movs	r3, #0
}
 801c58c:	4618      	mov	r0, r3
 801c58e:	3708      	adds	r7, #8
 801c590:	46bd      	mov	sp, r7
 801c592:	bd80      	pop	{r7, pc}
 801c594:	200055a0 	.word	0x200055a0
 801c598:	200055a4 	.word	0x200055a4
 801c59c:	200055a8 	.word	0x200055a8
 801c5a0:	08036478 	.word	0x08036478

0801c5a4 <acquire_and_process_data>:
char ai_predicted_char = '?';
float ai_predicted_confidence = 0.0f;
uint8_t status = 0;

int acquire_and_process_data(ai_i8* data[])
{
 801c5a4:	b580      	push	{r7, lr}
 801c5a6:	f5ad 7d48 	sub.w	sp, sp, #800	@ 0x320
 801c5aa:	af00      	add	r7, sp, #0
 801c5ac:	f507 7348 	add.w	r3, r7, #800	@ 0x320
 801c5b0:	f5a3 7347 	sub.w	r3, r3, #796	@ 0x31c
 801c5b4:	6018      	str	r0, [r3, #0]
	uint8_t temp[784];
	    extract_canvas(temp);
 801c5b6:	f107 030c 	add.w	r3, r7, #12
 801c5ba:	4618      	mov	r0, r3
 801c5bc:	f7f5 f9ca 	bl	8011954 <extract_canvas>

	    // Invert and copy into input buffer
	    for (int i = 0; i < 784; i++) {
 801c5c0:	2300      	movs	r3, #0
 801c5c2:	f8c7 331c 	str.w	r3, [r7, #796]	@ 0x31c
 801c5c6:	e01a      	b.n	801c5fe <acquire_and_process_data+0x5a>
	        data[0][i] = 255 - temp[i];  // black-on-white (if needed)
 801c5c8:	f507 7348 	add.w	r3, r7, #800	@ 0x320
 801c5cc:	f5a3 7245 	sub.w	r2, r3, #788	@ 0x314
 801c5d0:	f8d7 331c 	ldr.w	r3, [r7, #796]	@ 0x31c
 801c5d4:	4413      	add	r3, r2
 801c5d6:	781b      	ldrb	r3, [r3, #0]
 801c5d8:	b259      	sxtb	r1, r3
 801c5da:	f507 7348 	add.w	r3, r7, #800	@ 0x320
 801c5de:	f5a3 7347 	sub.w	r3, r3, #796	@ 0x31c
 801c5e2:	681b      	ldr	r3, [r3, #0]
 801c5e4:	681a      	ldr	r2, [r3, #0]
 801c5e6:	f8d7 331c 	ldr.w	r3, [r7, #796]	@ 0x31c
 801c5ea:	4413      	add	r3, r2
 801c5ec:	460a      	mov	r2, r1
 801c5ee:	43d2      	mvns	r2, r2
 801c5f0:	b252      	sxtb	r2, r2
 801c5f2:	701a      	strb	r2, [r3, #0]
	    for (int i = 0; i < 784; i++) {
 801c5f4:	f8d7 331c 	ldr.w	r3, [r7, #796]	@ 0x31c
 801c5f8:	3301      	adds	r3, #1
 801c5fa:	f8c7 331c 	str.w	r3, [r7, #796]	@ 0x31c
 801c5fe:	f8d7 331c 	ldr.w	r3, [r7, #796]	@ 0x31c
 801c602:	f5b3 7f44 	cmp.w	r3, #784	@ 0x310
 801c606:	dbdf      	blt.n	801c5c8 <acquire_and_process_data+0x24>
	    }
  return 0;
 801c608:	2300      	movs	r3, #0
}
 801c60a:	4618      	mov	r0, r3
 801c60c:	f507 7748 	add.w	r7, r7, #800	@ 0x320
 801c610:	46bd      	mov	sp, r7
 801c612:	bd80      	pop	{r7, pc}

0801c614 <post_process>:

int post_process(ai_i8* data[])
{
 801c614:	b480      	push	{r7}
 801c616:	b087      	sub	sp, #28
 801c618:	af00      	add	r7, sp, #0
 801c61a:	6078      	str	r0, [r7, #4]
	float* output = (float*)data[0];
 801c61c:	687b      	ldr	r3, [r7, #4]
 801c61e:	681b      	ldr	r3, [r3, #0]
 801c620:	60bb      	str	r3, [r7, #8]

	    int max_index = 0;
 801c622:	2300      	movs	r3, #0
 801c624:	617b      	str	r3, [r7, #20]
	    float max_val = output[0];
 801c626:	68bb      	ldr	r3, [r7, #8]
 801c628:	681b      	ldr	r3, [r3, #0]
 801c62a:	613b      	str	r3, [r7, #16]
	    for (int i = 1; i < 36; i++) {
 801c62c:	2301      	movs	r3, #1
 801c62e:	60fb      	str	r3, [r7, #12]
 801c630:	e017      	b.n	801c662 <post_process+0x4e>
	        if (output[i] > max_val) {
 801c632:	68fb      	ldr	r3, [r7, #12]
 801c634:	009b      	lsls	r3, r3, #2
 801c636:	68ba      	ldr	r2, [r7, #8]
 801c638:	4413      	add	r3, r2
 801c63a:	edd3 7a00 	vldr	s15, [r3]
 801c63e:	ed97 7a04 	vldr	s14, [r7, #16]
 801c642:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801c646:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c64a:	d507      	bpl.n	801c65c <post_process+0x48>
	            max_val = output[i];
 801c64c:	68fb      	ldr	r3, [r7, #12]
 801c64e:	009b      	lsls	r3, r3, #2
 801c650:	68ba      	ldr	r2, [r7, #8]
 801c652:	4413      	add	r3, r2
 801c654:	681b      	ldr	r3, [r3, #0]
 801c656:	613b      	str	r3, [r7, #16]
	            max_index = i;
 801c658:	68fb      	ldr	r3, [r7, #12]
 801c65a:	617b      	str	r3, [r7, #20]
	    for (int i = 1; i < 36; i++) {
 801c65c:	68fb      	ldr	r3, [r7, #12]
 801c65e:	3301      	adds	r3, #1
 801c660:	60fb      	str	r3, [r7, #12]
 801c662:	68fb      	ldr	r3, [r7, #12]
 801c664:	2b23      	cmp	r3, #35	@ 0x23
 801c666:	dde4      	ble.n	801c632 <post_process+0x1e>
	        }
	    }

	    // Save globally
	    ai_predicted_confidence = max_val;
 801c668:	4a0b      	ldr	r2, [pc, #44]	@ (801c698 <post_process+0x84>)
 801c66a:	693b      	ldr	r3, [r7, #16]
 801c66c:	6013      	str	r3, [r2, #0]
	    ai_predicted_char = (max_index < 10) ? ('0' + max_index) : ('A' + max_index - 10);
 801c66e:	697b      	ldr	r3, [r7, #20]
 801c670:	2b09      	cmp	r3, #9
 801c672:	dc04      	bgt.n	801c67e <post_process+0x6a>
 801c674:	697b      	ldr	r3, [r7, #20]
 801c676:	b2db      	uxtb	r3, r3
 801c678:	3330      	adds	r3, #48	@ 0x30
 801c67a:	b2db      	uxtb	r3, r3
 801c67c:	e003      	b.n	801c686 <post_process+0x72>
 801c67e:	697b      	ldr	r3, [r7, #20]
 801c680:	b2db      	uxtb	r3, r3
 801c682:	3337      	adds	r3, #55	@ 0x37
 801c684:	b2db      	uxtb	r3, r3
 801c686:	4a05      	ldr	r2, [pc, #20]	@ (801c69c <post_process+0x88>)
 801c688:	7013      	strb	r3, [r2, #0]
  return 0;
 801c68a:	2300      	movs	r3, #0
}
 801c68c:	4618      	mov	r0, r3
 801c68e:	371c      	adds	r7, #28
 801c690:	46bd      	mov	sp, r7
 801c692:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c696:	4770      	bx	lr
 801c698:	200055ac 	.word	0x200055ac
 801c69c:	20000090 	.word	0x20000090

0801c6a0 <MX_X_CUBE_AI_Init>:
/* USER CODE END 2 */

/* Entry points --------------------------------------------------------------*/

void MX_X_CUBE_AI_Init(void)
{
 801c6a0:	b580      	push	{r7, lr}
 801c6a2:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN 5 */
  printf("\r\nTEMPLATE - initialization\r\n");
 801c6a4:	4803      	ldr	r0, [pc, #12]	@ (801c6b4 <MX_X_CUBE_AI_Init+0x14>)
 801c6a6:	f017 fa29 	bl	8033afc <puts>

  ai_boostrap(data_activations0);
 801c6aa:	4803      	ldr	r0, [pc, #12]	@ (801c6b8 <MX_X_CUBE_AI_Init+0x18>)
 801c6ac:	f7ff feec 	bl	801c488 <ai_boostrap>
    /* USER CODE END 5 */
}
 801c6b0:	bf00      	nop
 801c6b2:	bd80      	pop	{r7, pc}
 801c6b4:	08036488 	.word	0x08036488
 801c6b8:	2000008c 	.word	0x2000008c

0801c6bc <MX_X_CUBE_AI_Process>:

void MX_X_CUBE_AI_Process(void)
{
 801c6bc:	b580      	push	{r7, lr}
 801c6be:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN 6 */
	// Step 1: Fill input buffer from canvas
	if (acquire_and_process_data(data_ins) != 0) {
 801c6c0:	4810      	ldr	r0, [pc, #64]	@ (801c704 <MX_X_CUBE_AI_Process+0x48>)
 801c6c2:	f7ff ff6f 	bl	801c5a4 <acquire_and_process_data>
 801c6c6:	4603      	mov	r3, r0
 801c6c8:	2b00      	cmp	r3, #0
 801c6ca:	d003      	beq.n	801c6d4 <MX_X_CUBE_AI_Process+0x18>
		status = 1;
 801c6cc:	4b0e      	ldr	r3, [pc, #56]	@ (801c708 <MX_X_CUBE_AI_Process+0x4c>)
 801c6ce:	2201      	movs	r2, #1
 801c6d0:	701a      	strb	r2, [r3, #0]
		return;
 801c6d2:	e015      	b.n	801c700 <MX_X_CUBE_AI_Process+0x44>
	}

	// Step 2: Run inference
	if (ai_run() != 0) {
 801c6d4:	f7ff ff3c 	bl	801c550 <ai_run>
 801c6d8:	4603      	mov	r3, r0
 801c6da:	2b00      	cmp	r3, #0
 801c6dc:	d003      	beq.n	801c6e6 <MX_X_CUBE_AI_Process+0x2a>
		status = 2;
 801c6de:	4b0a      	ldr	r3, [pc, #40]	@ (801c708 <MX_X_CUBE_AI_Process+0x4c>)
 801c6e0:	2202      	movs	r2, #2
 801c6e2:	701a      	strb	r2, [r3, #0]
		return;
 801c6e4:	e00c      	b.n	801c700 <MX_X_CUBE_AI_Process+0x44>
	}

	// Step 3: Interpret output
	if (post_process(data_outs) != 0) {
 801c6e6:	4809      	ldr	r0, [pc, #36]	@ (801c70c <MX_X_CUBE_AI_Process+0x50>)
 801c6e8:	f7ff ff94 	bl	801c614 <post_process>
 801c6ec:	4603      	mov	r3, r0
 801c6ee:	2b00      	cmp	r3, #0
 801c6f0:	d003      	beq.n	801c6fa <MX_X_CUBE_AI_Process+0x3e>
		status = 3;
 801c6f2:	4b05      	ldr	r3, [pc, #20]	@ (801c708 <MX_X_CUBE_AI_Process+0x4c>)
 801c6f4:	2203      	movs	r2, #3
 801c6f6:	701a      	strb	r2, [r3, #0]
		return;
 801c6f8:	e002      	b.n	801c700 <MX_X_CUBE_AI_Process+0x44>
	}
	status = 0;
 801c6fa:	4b03      	ldr	r3, [pc, #12]	@ (801c708 <MX_X_CUBE_AI_Process+0x4c>)
 801c6fc:	2200      	movs	r2, #0
 801c6fe:	701a      	strb	r2, [r3, #0]
    /* USER CODE END 6 */
}
 801c700:	bd80      	pop	{r7, pc}
 801c702:	bf00      	nop
 801c704:	20001cfc 	.word	0x20001cfc
 801c708:	200055b0 	.word	0x200055b0
 801c70c:	20001d00 	.word	0x20001d00

0801c710 <network_configure_activations>:

/******************************************************************************/
AI_DECLARE_STATIC
ai_bool network_configure_activations(
  ai_network* net_ctx, const ai_network_params* params)
{
 801c710:	b580      	push	{r7, lr}
 801c712:	b082      	sub	sp, #8
 801c714:	af00      	add	r7, sp, #0
 801c716:	6078      	str	r0, [r7, #4]
 801c718:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx)

  if (ai_platform_get_activations_map(g_network_activations_map, 1, params)) {
 801c71a:	683a      	ldr	r2, [r7, #0]
 801c71c:	2101      	movs	r1, #1
 801c71e:	487b      	ldr	r0, [pc, #492]	@ (801c90c <network_configure_activations+0x1fc>)
 801c720:	f000 fc08 	bl	801cf34 <ai_platform_get_activations_map>
 801c724:	4603      	mov	r3, r0
 801c726:	2b00      	cmp	r3, #0
 801c728:	f000 80e6 	beq.w	801c8f8 <network_configure_activations+0x1e8>
    /* Updating activations (byte) offsets */
    
    serving_default_input_10_output_array.data = AI_PTR(g_network_activations_map[0] + 7872);
 801c72c:	4b77      	ldr	r3, [pc, #476]	@ (801c90c <network_configure_activations+0x1fc>)
 801c72e:	681b      	ldr	r3, [r3, #0]
 801c730:	f503 53f6 	add.w	r3, r3, #7872	@ 0x1ec0
 801c734:	4a76      	ldr	r2, [pc, #472]	@ (801c910 <network_configure_activations+0x200>)
 801c736:	6093      	str	r3, [r2, #8]
    serving_default_input_10_output_array.data_start = AI_PTR(g_network_activations_map[0] + 7872);
 801c738:	4b74      	ldr	r3, [pc, #464]	@ (801c90c <network_configure_activations+0x1fc>)
 801c73a:	681b      	ldr	r3, [r3, #0]
 801c73c:	f503 53f6 	add.w	r3, r3, #7872	@ 0x1ec0
 801c740:	4a73      	ldr	r2, [pc, #460]	@ (801c910 <network_configure_activations+0x200>)
 801c742:	60d3      	str	r3, [r2, #12]
    conversion_0_output_array.data = AI_PTR(g_network_activations_map[0] + 7872);
 801c744:	4b71      	ldr	r3, [pc, #452]	@ (801c90c <network_configure_activations+0x1fc>)
 801c746:	681b      	ldr	r3, [r3, #0]
 801c748:	f503 53f6 	add.w	r3, r3, #7872	@ 0x1ec0
 801c74c:	4a71      	ldr	r2, [pc, #452]	@ (801c914 <network_configure_activations+0x204>)
 801c74e:	6093      	str	r3, [r2, #8]
    conversion_0_output_array.data_start = AI_PTR(g_network_activations_map[0] + 7872);
 801c750:	4b6e      	ldr	r3, [pc, #440]	@ (801c90c <network_configure_activations+0x1fc>)
 801c752:	681b      	ldr	r3, [r3, #0]
 801c754:	f503 53f6 	add.w	r3, r3, #7872	@ 0x1ec0
 801c758:	4a6e      	ldr	r2, [pc, #440]	@ (801c914 <network_configure_activations+0x204>)
 801c75a:	60d3      	str	r3, [r2, #12]
    conv2d_1_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 8656);
 801c75c:	4b6b      	ldr	r3, [pc, #428]	@ (801c90c <network_configure_activations+0x1fc>)
 801c75e:	681b      	ldr	r3, [r3, #0]
 801c760:	f503 5307 	add.w	r3, r3, #8640	@ 0x21c0
 801c764:	3310      	adds	r3, #16
 801c766:	4a6c      	ldr	r2, [pc, #432]	@ (801c918 <network_configure_activations+0x208>)
 801c768:	6093      	str	r3, [r2, #8]
    conv2d_1_scratch0_array.data_start = AI_PTR(g_network_activations_map[0] + 8656);
 801c76a:	4b68      	ldr	r3, [pc, #416]	@ (801c90c <network_configure_activations+0x1fc>)
 801c76c:	681b      	ldr	r3, [r3, #0]
 801c76e:	f503 5307 	add.w	r3, r3, #8640	@ 0x21c0
 801c772:	3310      	adds	r3, #16
 801c774:	4a68      	ldr	r2, [pc, #416]	@ (801c918 <network_configure_activations+0x208>)
 801c776:	60d3      	str	r3, [r2, #12]
    conv2d_1_output_array.data = AI_PTR(g_network_activations_map[0] + 5280);
 801c778:	4b64      	ldr	r3, [pc, #400]	@ (801c90c <network_configure_activations+0x1fc>)
 801c77a:	681b      	ldr	r3, [r3, #0]
 801c77c:	f503 53a5 	add.w	r3, r3, #5280	@ 0x14a0
 801c780:	4a66      	ldr	r2, [pc, #408]	@ (801c91c <network_configure_activations+0x20c>)
 801c782:	6093      	str	r3, [r2, #8]
    conv2d_1_output_array.data_start = AI_PTR(g_network_activations_map[0] + 5280);
 801c784:	4b61      	ldr	r3, [pc, #388]	@ (801c90c <network_configure_activations+0x1fc>)
 801c786:	681b      	ldr	r3, [r3, #0]
 801c788:	f503 53a5 	add.w	r3, r3, #5280	@ 0x14a0
 801c78c:	4a63      	ldr	r2, [pc, #396]	@ (801c91c <network_configure_activations+0x20c>)
 801c78e:	60d3      	str	r3, [r2, #12]
    conv2d_2_pad_before_output_array.data = AI_PTR(g_network_activations_map[0] + 4320);
 801c790:	4b5e      	ldr	r3, [pc, #376]	@ (801c90c <network_configure_activations+0x1fc>)
 801c792:	681b      	ldr	r3, [r3, #0]
 801c794:	f503 5387 	add.w	r3, r3, #4320	@ 0x10e0
 801c798:	4a61      	ldr	r2, [pc, #388]	@ (801c920 <network_configure_activations+0x210>)
 801c79a:	6093      	str	r3, [r2, #8]
    conv2d_2_pad_before_output_array.data_start = AI_PTR(g_network_activations_map[0] + 4320);
 801c79c:	4b5b      	ldr	r3, [pc, #364]	@ (801c90c <network_configure_activations+0x1fc>)
 801c79e:	681b      	ldr	r3, [r3, #0]
 801c7a0:	f503 5387 	add.w	r3, r3, #4320	@ 0x10e0
 801c7a4:	4a5e      	ldr	r2, [pc, #376]	@ (801c920 <network_configure_activations+0x210>)
 801c7a6:	60d3      	str	r3, [r2, #12]
    conv2d_2_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 8416);
 801c7a8:	4b58      	ldr	r3, [pc, #352]	@ (801c90c <network_configure_activations+0x1fc>)
 801c7aa:	681b      	ldr	r3, [r3, #0]
 801c7ac:	f503 5303 	add.w	r3, r3, #8384	@ 0x20c0
 801c7b0:	3320      	adds	r3, #32
 801c7b2:	4a5c      	ldr	r2, [pc, #368]	@ (801c924 <network_configure_activations+0x214>)
 801c7b4:	6093      	str	r3, [r2, #8]
    conv2d_2_scratch0_array.data_start = AI_PTR(g_network_activations_map[0] + 8416);
 801c7b6:	4b55      	ldr	r3, [pc, #340]	@ (801c90c <network_configure_activations+0x1fc>)
 801c7b8:	681b      	ldr	r3, [r3, #0]
 801c7ba:	f503 5303 	add.w	r3, r3, #8384	@ 0x20c0
 801c7be:	3320      	adds	r3, #32
 801c7c0:	4a58      	ldr	r2, [pc, #352]	@ (801c924 <network_configure_activations+0x214>)
 801c7c2:	60d3      	str	r3, [r2, #12]
    conv2d_2_output_array.data = AI_PTR(g_network_activations_map[0] + 4096);
 801c7c4:	4b51      	ldr	r3, [pc, #324]	@ (801c90c <network_configure_activations+0x1fc>)
 801c7c6:	681b      	ldr	r3, [r3, #0]
 801c7c8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801c7cc:	4a56      	ldr	r2, [pc, #344]	@ (801c928 <network_configure_activations+0x218>)
 801c7ce:	6093      	str	r3, [r2, #8]
    conv2d_2_output_array.data_start = AI_PTR(g_network_activations_map[0] + 4096);
 801c7d0:	4b4e      	ldr	r3, [pc, #312]	@ (801c90c <network_configure_activations+0x1fc>)
 801c7d2:	681b      	ldr	r3, [r3, #0]
 801c7d4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801c7d8:	4a53      	ldr	r2, [pc, #332]	@ (801c928 <network_configure_activations+0x218>)
 801c7da:	60d3      	str	r3, [r2, #12]
    conv2d_3_pad_before_output_array.data = AI_PTR(g_network_activations_map[0] + 3136);
 801c7dc:	4b4b      	ldr	r3, [pc, #300]	@ (801c90c <network_configure_activations+0x1fc>)
 801c7de:	681b      	ldr	r3, [r3, #0]
 801c7e0:	f503 6344 	add.w	r3, r3, #3136	@ 0xc40
 801c7e4:	4a51      	ldr	r2, [pc, #324]	@ (801c92c <network_configure_activations+0x21c>)
 801c7e6:	6093      	str	r3, [r2, #8]
    conv2d_3_pad_before_output_array.data_start = AI_PTR(g_network_activations_map[0] + 3136);
 801c7e8:	4b48      	ldr	r3, [pc, #288]	@ (801c90c <network_configure_activations+0x1fc>)
 801c7ea:	681b      	ldr	r3, [r3, #0]
 801c7ec:	f503 6344 	add.w	r3, r3, #3136	@ 0xc40
 801c7f0:	4a4e      	ldr	r2, [pc, #312]	@ (801c92c <network_configure_activations+0x21c>)
 801c7f2:	60d3      	str	r3, [r2, #12]
    conv2d_3_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 7232);
 801c7f4:	4b45      	ldr	r3, [pc, #276]	@ (801c90c <network_configure_activations+0x1fc>)
 801c7f6:	681b      	ldr	r3, [r3, #0]
 801c7f8:	f503 53e2 	add.w	r3, r3, #7232	@ 0x1c40
 801c7fc:	4a4c      	ldr	r2, [pc, #304]	@ (801c930 <network_configure_activations+0x220>)
 801c7fe:	6093      	str	r3, [r2, #8]
    conv2d_3_scratch0_array.data_start = AI_PTR(g_network_activations_map[0] + 7232);
 801c800:	4b42      	ldr	r3, [pc, #264]	@ (801c90c <network_configure_activations+0x1fc>)
 801c802:	681b      	ldr	r3, [r3, #0]
 801c804:	f503 53e2 	add.w	r3, r3, #7232	@ 0x1c40
 801c808:	4a49      	ldr	r2, [pc, #292]	@ (801c930 <network_configure_activations+0x220>)
 801c80a:	60d3      	str	r3, [r2, #12]
    conv2d_3_output_array.data = AI_PTR(g_network_activations_map[0] + 0);
 801c80c:	4b3f      	ldr	r3, [pc, #252]	@ (801c90c <network_configure_activations+0x1fc>)
 801c80e:	681b      	ldr	r3, [r3, #0]
 801c810:	4a48      	ldr	r2, [pc, #288]	@ (801c934 <network_configure_activations+0x224>)
 801c812:	6093      	str	r3, [r2, #8]
    conv2d_3_output_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 801c814:	4b3d      	ldr	r3, [pc, #244]	@ (801c90c <network_configure_activations+0x1fc>)
 801c816:	681b      	ldr	r3, [r3, #0]
 801c818:	4a46      	ldr	r2, [pc, #280]	@ (801c934 <network_configure_activations+0x224>)
 801c81a:	60d3      	str	r3, [r2, #12]
    conv2d_4_pad_before_output_array.data = AI_PTR(g_network_activations_map[0] + 6272);
 801c81c:	4b3b      	ldr	r3, [pc, #236]	@ (801c90c <network_configure_activations+0x1fc>)
 801c81e:	681b      	ldr	r3, [r3, #0]
 801c820:	f503 53c4 	add.w	r3, r3, #6272	@ 0x1880
 801c824:	4a44      	ldr	r2, [pc, #272]	@ (801c938 <network_configure_activations+0x228>)
 801c826:	6093      	str	r3, [r2, #8]
    conv2d_4_pad_before_output_array.data_start = AI_PTR(g_network_activations_map[0] + 6272);
 801c828:	4b38      	ldr	r3, [pc, #224]	@ (801c90c <network_configure_activations+0x1fc>)
 801c82a:	681b      	ldr	r3, [r3, #0]
 801c82c:	f503 53c4 	add.w	r3, r3, #6272	@ 0x1880
 801c830:	4a41      	ldr	r2, [pc, #260]	@ (801c938 <network_configure_activations+0x228>)
 801c832:	60d3      	str	r3, [r2, #12]
    conv2d_4_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 801c834:	4b35      	ldr	r3, [pc, #212]	@ (801c90c <network_configure_activations+0x1fc>)
 801c836:	681b      	ldr	r3, [r3, #0]
 801c838:	4a40      	ldr	r2, [pc, #256]	@ (801c93c <network_configure_activations+0x22c>)
 801c83a:	6093      	str	r3, [r2, #8]
    conv2d_4_scratch0_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 801c83c:	4b33      	ldr	r3, [pc, #204]	@ (801c90c <network_configure_activations+0x1fc>)
 801c83e:	681b      	ldr	r3, [r3, #0]
 801c840:	4a3e      	ldr	r2, [pc, #248]	@ (801c93c <network_configure_activations+0x22c>)
 801c842:	60d3      	str	r3, [r2, #12]
    conv2d_4_output_array.data = AI_PTR(g_network_activations_map[0] + 1188);
 801c844:	4b31      	ldr	r3, [pc, #196]	@ (801c90c <network_configure_activations+0x1fc>)
 801c846:	681b      	ldr	r3, [r3, #0]
 801c848:	f203 43a4 	addw	r3, r3, #1188	@ 0x4a4
 801c84c:	4a3c      	ldr	r2, [pc, #240]	@ (801c940 <network_configure_activations+0x230>)
 801c84e:	6093      	str	r3, [r2, #8]
    conv2d_4_output_array.data_start = AI_PTR(g_network_activations_map[0] + 1188);
 801c850:	4b2e      	ldr	r3, [pc, #184]	@ (801c90c <network_configure_activations+0x1fc>)
 801c852:	681b      	ldr	r3, [r3, #0]
 801c854:	f203 43a4 	addw	r3, r3, #1188	@ 0x4a4
 801c858:	4a39      	ldr	r2, [pc, #228]	@ (801c940 <network_configure_activations+0x230>)
 801c85a:	60d3      	str	r3, [r2, #12]
    conv2d_5_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 801c85c:	4b2b      	ldr	r3, [pc, #172]	@ (801c90c <network_configure_activations+0x1fc>)
 801c85e:	681b      	ldr	r3, [r3, #0]
 801c860:	4a38      	ldr	r2, [pc, #224]	@ (801c944 <network_configure_activations+0x234>)
 801c862:	6093      	str	r3, [r2, #8]
    conv2d_5_scratch0_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 801c864:	4b29      	ldr	r3, [pc, #164]	@ (801c90c <network_configure_activations+0x1fc>)
 801c866:	681b      	ldr	r3, [r3, #0]
 801c868:	4a36      	ldr	r2, [pc, #216]	@ (801c944 <network_configure_activations+0x234>)
 801c86a:	60d3      	str	r3, [r2, #12]
    conv2d_5_output_array.data = AI_PTR(g_network_activations_map[0] + 2756);
 801c86c:	4b27      	ldr	r3, [pc, #156]	@ (801c90c <network_configure_activations+0x1fc>)
 801c86e:	681b      	ldr	r3, [r3, #0]
 801c870:	f603 23c4 	addw	r3, r3, #2756	@ 0xac4
 801c874:	4a34      	ldr	r2, [pc, #208]	@ (801c948 <network_configure_activations+0x238>)
 801c876:	6093      	str	r3, [r2, #8]
    conv2d_5_output_array.data_start = AI_PTR(g_network_activations_map[0] + 2756);
 801c878:	4b24      	ldr	r3, [pc, #144]	@ (801c90c <network_configure_activations+0x1fc>)
 801c87a:	681b      	ldr	r3, [r3, #0]
 801c87c:	f603 23c4 	addw	r3, r3, #2756	@ 0xac4
 801c880:	4a31      	ldr	r2, [pc, #196]	@ (801c948 <network_configure_activations+0x238>)
 801c882:	60d3      	str	r3, [r2, #12]
    pool_6_output_array.data = AI_PTR(g_network_activations_map[0] + 0);
 801c884:	4b21      	ldr	r3, [pc, #132]	@ (801c90c <network_configure_activations+0x1fc>)
 801c886:	681b      	ldr	r3, [r3, #0]
 801c888:	4a30      	ldr	r2, [pc, #192]	@ (801c94c <network_configure_activations+0x23c>)
 801c88a:	6093      	str	r3, [r2, #8]
    pool_6_output_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 801c88c:	4b1f      	ldr	r3, [pc, #124]	@ (801c90c <network_configure_activations+0x1fc>)
 801c88e:	681b      	ldr	r3, [r3, #0]
 801c890:	4a2e      	ldr	r2, [pc, #184]	@ (801c94c <network_configure_activations+0x23c>)
 801c892:	60d3      	str	r3, [r2, #12]
    gemm_7_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 64);
 801c894:	4b1d      	ldr	r3, [pc, #116]	@ (801c90c <network_configure_activations+0x1fc>)
 801c896:	681b      	ldr	r3, [r3, #0]
 801c898:	3340      	adds	r3, #64	@ 0x40
 801c89a:	4a2d      	ldr	r2, [pc, #180]	@ (801c950 <network_configure_activations+0x240>)
 801c89c:	6093      	str	r3, [r2, #8]
    gemm_7_scratch0_array.data_start = AI_PTR(g_network_activations_map[0] + 64);
 801c89e:	4b1b      	ldr	r3, [pc, #108]	@ (801c90c <network_configure_activations+0x1fc>)
 801c8a0:	681b      	ldr	r3, [r3, #0]
 801c8a2:	3340      	adds	r3, #64	@ 0x40
 801c8a4:	4a2a      	ldr	r2, [pc, #168]	@ (801c950 <network_configure_activations+0x240>)
 801c8a6:	60d3      	str	r3, [r2, #12]
    gemm_7_output_array.data = AI_PTR(g_network_activations_map[0] + 192);
 801c8a8:	4b18      	ldr	r3, [pc, #96]	@ (801c90c <network_configure_activations+0x1fc>)
 801c8aa:	681b      	ldr	r3, [r3, #0]
 801c8ac:	33c0      	adds	r3, #192	@ 0xc0
 801c8ae:	4a29      	ldr	r2, [pc, #164]	@ (801c954 <network_configure_activations+0x244>)
 801c8b0:	6093      	str	r3, [r2, #8]
    gemm_7_output_array.data_start = AI_PTR(g_network_activations_map[0] + 192);
 801c8b2:	4b16      	ldr	r3, [pc, #88]	@ (801c90c <network_configure_activations+0x1fc>)
 801c8b4:	681b      	ldr	r3, [r3, #0]
 801c8b6:	33c0      	adds	r3, #192	@ 0xc0
 801c8b8:	4a26      	ldr	r2, [pc, #152]	@ (801c954 <network_configure_activations+0x244>)
 801c8ba:	60d3      	str	r3, [r2, #12]
    nl_8_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 801c8bc:	4b13      	ldr	r3, [pc, #76]	@ (801c90c <network_configure_activations+0x1fc>)
 801c8be:	681b      	ldr	r3, [r3, #0]
 801c8c0:	4a25      	ldr	r2, [pc, #148]	@ (801c958 <network_configure_activations+0x248>)
 801c8c2:	6093      	str	r3, [r2, #8]
    nl_8_scratch0_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 801c8c4:	4b11      	ldr	r3, [pc, #68]	@ (801c90c <network_configure_activations+0x1fc>)
 801c8c6:	681b      	ldr	r3, [r3, #0]
 801c8c8:	4a23      	ldr	r2, [pc, #140]	@ (801c958 <network_configure_activations+0x248>)
 801c8ca:	60d3      	str	r3, [r2, #12]
    nl_8_output_array.data = AI_PTR(g_network_activations_map[0] + 124);
 801c8cc:	4b0f      	ldr	r3, [pc, #60]	@ (801c90c <network_configure_activations+0x1fc>)
 801c8ce:	681b      	ldr	r3, [r3, #0]
 801c8d0:	337c      	adds	r3, #124	@ 0x7c
 801c8d2:	4a22      	ldr	r2, [pc, #136]	@ (801c95c <network_configure_activations+0x24c>)
 801c8d4:	6093      	str	r3, [r2, #8]
    nl_8_output_array.data_start = AI_PTR(g_network_activations_map[0] + 124);
 801c8d6:	4b0d      	ldr	r3, [pc, #52]	@ (801c90c <network_configure_activations+0x1fc>)
 801c8d8:	681b      	ldr	r3, [r3, #0]
 801c8da:	337c      	adds	r3, #124	@ 0x7c
 801c8dc:	4a1f      	ldr	r2, [pc, #124]	@ (801c95c <network_configure_activations+0x24c>)
 801c8de:	60d3      	str	r3, [r2, #12]
    conversion_9_output_array.data = AI_PTR(g_network_activations_map[0] + 160);
 801c8e0:	4b0a      	ldr	r3, [pc, #40]	@ (801c90c <network_configure_activations+0x1fc>)
 801c8e2:	681b      	ldr	r3, [r3, #0]
 801c8e4:	33a0      	adds	r3, #160	@ 0xa0
 801c8e6:	4a1e      	ldr	r2, [pc, #120]	@ (801c960 <network_configure_activations+0x250>)
 801c8e8:	6093      	str	r3, [r2, #8]
    conversion_9_output_array.data_start = AI_PTR(g_network_activations_map[0] + 160);
 801c8ea:	4b08      	ldr	r3, [pc, #32]	@ (801c90c <network_configure_activations+0x1fc>)
 801c8ec:	681b      	ldr	r3, [r3, #0]
 801c8ee:	33a0      	adds	r3, #160	@ 0xa0
 801c8f0:	4a1b      	ldr	r2, [pc, #108]	@ (801c960 <network_configure_activations+0x250>)
 801c8f2:	60d3      	str	r3, [r2, #12]
    return true;
 801c8f4:	2301      	movs	r3, #1
 801c8f6:	e005      	b.n	801c904 <network_configure_activations+0x1f4>
  }
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_ACTIVATIONS);
 801c8f8:	2213      	movs	r2, #19
 801c8fa:	2130      	movs	r1, #48	@ 0x30
 801c8fc:	6878      	ldr	r0, [r7, #4]
 801c8fe:	f000 fb9b 	bl	801d038 <ai_platform_network_set_error>
  return false;
 801c902:	2300      	movs	r3, #0
}
 801c904:	4618      	mov	r0, r3
 801c906:	3708      	adds	r7, #8
 801c908:	46bd      	mov	sp, r7
 801c90a:	bd80      	pop	{r7, pc}
 801c90c:	200055b4 	.word	0x200055b4
 801c910:	20000094 	.word	0x20000094
 801c914:	200000a4 	.word	0x200000a4
 801c918:	20000234 	.word	0x20000234
 801c91c:	200000b4 	.word	0x200000b4
 801c920:	200000c4 	.word	0x200000c4
 801c924:	20000244 	.word	0x20000244
 801c928:	200000d4 	.word	0x200000d4
 801c92c:	200000e4 	.word	0x200000e4
 801c930:	20000254 	.word	0x20000254
 801c934:	200000f4 	.word	0x200000f4
 801c938:	20000104 	.word	0x20000104
 801c93c:	20000264 	.word	0x20000264
 801c940:	20000114 	.word	0x20000114
 801c944:	20000274 	.word	0x20000274
 801c948:	20000124 	.word	0x20000124
 801c94c:	20000134 	.word	0x20000134
 801c950:	20000284 	.word	0x20000284
 801c954:	20000144 	.word	0x20000144
 801c958:	20000294 	.word	0x20000294
 801c95c:	20000154 	.word	0x20000154
 801c960:	20000164 	.word	0x20000164

0801c964 <network_configure_weights>:

/******************************************************************************/
AI_DECLARE_STATIC
ai_bool network_configure_weights(
  ai_network* net_ctx, const ai_network_params* params)
{
 801c964:	b580      	push	{r7, lr}
 801c966:	b082      	sub	sp, #8
 801c968:	af00      	add	r7, sp, #0
 801c96a:	6078      	str	r0, [r7, #4]
 801c96c:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx)

  if (ai_platform_get_weights_map(g_network_weights_map, 1, params)) {
 801c96e:	683a      	ldr	r2, [r7, #0]
 801c970:	2101      	movs	r1, #1
 801c972:	4871      	ldr	r0, [pc, #452]	@ (801cb38 <network_configure_weights+0x1d4>)
 801c974:	f000 fa8c 	bl	801ce90 <ai_platform_get_weights_map>
 801c978:	4603      	mov	r3, r0
 801c97a:	2b00      	cmp	r3, #0
 801c97c:	f000 80d2 	beq.w	801cb24 <network_configure_weights+0x1c0>
    /* Updating weights (byte) offsets */
    
    conv2d_1_weights_array.format |= AI_FMT_FLAG_CONST;
 801c980:	4b6e      	ldr	r3, [pc, #440]	@ (801cb3c <network_configure_weights+0x1d8>)
 801c982:	681b      	ldr	r3, [r3, #0]
 801c984:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 801c988:	4a6c      	ldr	r2, [pc, #432]	@ (801cb3c <network_configure_weights+0x1d8>)
 801c98a:	6013      	str	r3, [r2, #0]
    conv2d_1_weights_array.data = AI_PTR(g_network_weights_map[0] + 0);
 801c98c:	4b6a      	ldr	r3, [pc, #424]	@ (801cb38 <network_configure_weights+0x1d4>)
 801c98e:	681b      	ldr	r3, [r3, #0]
 801c990:	4a6a      	ldr	r2, [pc, #424]	@ (801cb3c <network_configure_weights+0x1d8>)
 801c992:	6093      	str	r3, [r2, #8]
    conv2d_1_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 0);
 801c994:	4b68      	ldr	r3, [pc, #416]	@ (801cb38 <network_configure_weights+0x1d4>)
 801c996:	681b      	ldr	r3, [r3, #0]
 801c998:	4a68      	ldr	r2, [pc, #416]	@ (801cb3c <network_configure_weights+0x1d8>)
 801c99a:	60d3      	str	r3, [r2, #12]
    conv2d_1_bias_array.format |= AI_FMT_FLAG_CONST;
 801c99c:	4b68      	ldr	r3, [pc, #416]	@ (801cb40 <network_configure_weights+0x1dc>)
 801c99e:	681b      	ldr	r3, [r3, #0]
 801c9a0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 801c9a4:	4a66      	ldr	r2, [pc, #408]	@ (801cb40 <network_configure_weights+0x1dc>)
 801c9a6:	6013      	str	r3, [r2, #0]
    conv2d_1_bias_array.data = AI_PTR(g_network_weights_map[0] + 144);
 801c9a8:	4b63      	ldr	r3, [pc, #396]	@ (801cb38 <network_configure_weights+0x1d4>)
 801c9aa:	681b      	ldr	r3, [r3, #0]
 801c9ac:	3390      	adds	r3, #144	@ 0x90
 801c9ae:	4a64      	ldr	r2, [pc, #400]	@ (801cb40 <network_configure_weights+0x1dc>)
 801c9b0:	6093      	str	r3, [r2, #8]
    conv2d_1_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 144);
 801c9b2:	4b61      	ldr	r3, [pc, #388]	@ (801cb38 <network_configure_weights+0x1d4>)
 801c9b4:	681b      	ldr	r3, [r3, #0]
 801c9b6:	3390      	adds	r3, #144	@ 0x90
 801c9b8:	4a61      	ldr	r2, [pc, #388]	@ (801cb40 <network_configure_weights+0x1dc>)
 801c9ba:	60d3      	str	r3, [r2, #12]
    conv2d_2_weights_array.format |= AI_FMT_FLAG_CONST;
 801c9bc:	4b61      	ldr	r3, [pc, #388]	@ (801cb44 <network_configure_weights+0x1e0>)
 801c9be:	681b      	ldr	r3, [r3, #0]
 801c9c0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 801c9c4:	4a5f      	ldr	r2, [pc, #380]	@ (801cb44 <network_configure_weights+0x1e0>)
 801c9c6:	6013      	str	r3, [r2, #0]
    conv2d_2_weights_array.data = AI_PTR(g_network_weights_map[0] + 208);
 801c9c8:	4b5b      	ldr	r3, [pc, #364]	@ (801cb38 <network_configure_weights+0x1d4>)
 801c9ca:	681b      	ldr	r3, [r3, #0]
 801c9cc:	33d0      	adds	r3, #208	@ 0xd0
 801c9ce:	4a5d      	ldr	r2, [pc, #372]	@ (801cb44 <network_configure_weights+0x1e0>)
 801c9d0:	6093      	str	r3, [r2, #8]
    conv2d_2_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 208);
 801c9d2:	4b59      	ldr	r3, [pc, #356]	@ (801cb38 <network_configure_weights+0x1d4>)
 801c9d4:	681b      	ldr	r3, [r3, #0]
 801c9d6:	33d0      	adds	r3, #208	@ 0xd0
 801c9d8:	4a5a      	ldr	r2, [pc, #360]	@ (801cb44 <network_configure_weights+0x1e0>)
 801c9da:	60d3      	str	r3, [r2, #12]
    conv2d_2_bias_array.format |= AI_FMT_FLAG_CONST;
 801c9dc:	4b5a      	ldr	r3, [pc, #360]	@ (801cb48 <network_configure_weights+0x1e4>)
 801c9de:	681b      	ldr	r3, [r3, #0]
 801c9e0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 801c9e4:	4a58      	ldr	r2, [pc, #352]	@ (801cb48 <network_configure_weights+0x1e4>)
 801c9e6:	6013      	str	r3, [r2, #0]
    conv2d_2_bias_array.data = AI_PTR(g_network_weights_map[0] + 352);
 801c9e8:	4b53      	ldr	r3, [pc, #332]	@ (801cb38 <network_configure_weights+0x1d4>)
 801c9ea:	681b      	ldr	r3, [r3, #0]
 801c9ec:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 801c9f0:	4a55      	ldr	r2, [pc, #340]	@ (801cb48 <network_configure_weights+0x1e4>)
 801c9f2:	6093      	str	r3, [r2, #8]
    conv2d_2_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 352);
 801c9f4:	4b50      	ldr	r3, [pc, #320]	@ (801cb38 <network_configure_weights+0x1d4>)
 801c9f6:	681b      	ldr	r3, [r3, #0]
 801c9f8:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 801c9fc:	4a52      	ldr	r2, [pc, #328]	@ (801cb48 <network_configure_weights+0x1e4>)
 801c9fe:	60d3      	str	r3, [r2, #12]
    conv2d_3_weights_array.format |= AI_FMT_FLAG_CONST;
 801ca00:	4b52      	ldr	r3, [pc, #328]	@ (801cb4c <network_configure_weights+0x1e8>)
 801ca02:	681b      	ldr	r3, [r3, #0]
 801ca04:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 801ca08:	4a50      	ldr	r2, [pc, #320]	@ (801cb4c <network_configure_weights+0x1e8>)
 801ca0a:	6013      	str	r3, [r2, #0]
    conv2d_3_weights_array.data = AI_PTR(g_network_weights_map[0] + 416);
 801ca0c:	4b4a      	ldr	r3, [pc, #296]	@ (801cb38 <network_configure_weights+0x1d4>)
 801ca0e:	681b      	ldr	r3, [r3, #0]
 801ca10:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 801ca14:	4a4d      	ldr	r2, [pc, #308]	@ (801cb4c <network_configure_weights+0x1e8>)
 801ca16:	6093      	str	r3, [r2, #8]
    conv2d_3_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 416);
 801ca18:	4b47      	ldr	r3, [pc, #284]	@ (801cb38 <network_configure_weights+0x1d4>)
 801ca1a:	681b      	ldr	r3, [r3, #0]
 801ca1c:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 801ca20:	4a4a      	ldr	r2, [pc, #296]	@ (801cb4c <network_configure_weights+0x1e8>)
 801ca22:	60d3      	str	r3, [r2, #12]
    conv2d_3_bias_array.format |= AI_FMT_FLAG_CONST;
 801ca24:	4b4a      	ldr	r3, [pc, #296]	@ (801cb50 <network_configure_weights+0x1ec>)
 801ca26:	681b      	ldr	r3, [r3, #0]
 801ca28:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 801ca2c:	4a48      	ldr	r2, [pc, #288]	@ (801cb50 <network_configure_weights+0x1ec>)
 801ca2e:	6013      	str	r3, [r2, #0]
    conv2d_3_bias_array.data = AI_PTR(g_network_weights_map[0] + 5024);
 801ca30:	4b41      	ldr	r3, [pc, #260]	@ (801cb38 <network_configure_weights+0x1d4>)
 801ca32:	681b      	ldr	r3, [r3, #0]
 801ca34:	f503 539d 	add.w	r3, r3, #5024	@ 0x13a0
 801ca38:	4a45      	ldr	r2, [pc, #276]	@ (801cb50 <network_configure_weights+0x1ec>)
 801ca3a:	6093      	str	r3, [r2, #8]
    conv2d_3_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 5024);
 801ca3c:	4b3e      	ldr	r3, [pc, #248]	@ (801cb38 <network_configure_weights+0x1d4>)
 801ca3e:	681b      	ldr	r3, [r3, #0]
 801ca40:	f503 539d 	add.w	r3, r3, #5024	@ 0x13a0
 801ca44:	4a42      	ldr	r2, [pc, #264]	@ (801cb50 <network_configure_weights+0x1ec>)
 801ca46:	60d3      	str	r3, [r2, #12]
    conv2d_4_weights_array.format |= AI_FMT_FLAG_CONST;
 801ca48:	4b42      	ldr	r3, [pc, #264]	@ (801cb54 <network_configure_weights+0x1f0>)
 801ca4a:	681b      	ldr	r3, [r3, #0]
 801ca4c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 801ca50:	4a40      	ldr	r2, [pc, #256]	@ (801cb54 <network_configure_weights+0x1f0>)
 801ca52:	6013      	str	r3, [r2, #0]
    conv2d_4_weights_array.data = AI_PTR(g_network_weights_map[0] + 5152);
 801ca54:	4b38      	ldr	r3, [pc, #224]	@ (801cb38 <network_configure_weights+0x1d4>)
 801ca56:	681b      	ldr	r3, [r3, #0]
 801ca58:	f503 53a1 	add.w	r3, r3, #5152	@ 0x1420
 801ca5c:	4a3d      	ldr	r2, [pc, #244]	@ (801cb54 <network_configure_weights+0x1f0>)
 801ca5e:	6093      	str	r3, [r2, #8]
    conv2d_4_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 5152);
 801ca60:	4b35      	ldr	r3, [pc, #212]	@ (801cb38 <network_configure_weights+0x1d4>)
 801ca62:	681b      	ldr	r3, [r3, #0]
 801ca64:	f503 53a1 	add.w	r3, r3, #5152	@ 0x1420
 801ca68:	4a3a      	ldr	r2, [pc, #232]	@ (801cb54 <network_configure_weights+0x1f0>)
 801ca6a:	60d3      	str	r3, [r2, #12]
    conv2d_4_bias_array.format |= AI_FMT_FLAG_CONST;
 801ca6c:	4b3a      	ldr	r3, [pc, #232]	@ (801cb58 <network_configure_weights+0x1f4>)
 801ca6e:	681b      	ldr	r3, [r3, #0]
 801ca70:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 801ca74:	4a38      	ldr	r2, [pc, #224]	@ (801cb58 <network_configure_weights+0x1f4>)
 801ca76:	6013      	str	r3, [r2, #0]
    conv2d_4_bias_array.data = AI_PTR(g_network_weights_map[0] + 5440);
 801ca78:	4b2f      	ldr	r3, [pc, #188]	@ (801cb38 <network_configure_weights+0x1d4>)
 801ca7a:	681b      	ldr	r3, [r3, #0]
 801ca7c:	f503 53aa 	add.w	r3, r3, #5440	@ 0x1540
 801ca80:	4a35      	ldr	r2, [pc, #212]	@ (801cb58 <network_configure_weights+0x1f4>)
 801ca82:	6093      	str	r3, [r2, #8]
    conv2d_4_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 5440);
 801ca84:	4b2c      	ldr	r3, [pc, #176]	@ (801cb38 <network_configure_weights+0x1d4>)
 801ca86:	681b      	ldr	r3, [r3, #0]
 801ca88:	f503 53aa 	add.w	r3, r3, #5440	@ 0x1540
 801ca8c:	4a32      	ldr	r2, [pc, #200]	@ (801cb58 <network_configure_weights+0x1f4>)
 801ca8e:	60d3      	str	r3, [r2, #12]
    conv2d_5_weights_array.format |= AI_FMT_FLAG_CONST;
 801ca90:	4b32      	ldr	r3, [pc, #200]	@ (801cb5c <network_configure_weights+0x1f8>)
 801ca92:	681b      	ldr	r3, [r3, #0]
 801ca94:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 801ca98:	4a30      	ldr	r2, [pc, #192]	@ (801cb5c <network_configure_weights+0x1f8>)
 801ca9a:	6013      	str	r3, [r2, #0]
    conv2d_5_weights_array.data = AI_PTR(g_network_weights_map[0] + 5568);
 801ca9c:	4b26      	ldr	r3, [pc, #152]	@ (801cb38 <network_configure_weights+0x1d4>)
 801ca9e:	681b      	ldr	r3, [r3, #0]
 801caa0:	f503 53ae 	add.w	r3, r3, #5568	@ 0x15c0
 801caa4:	4a2d      	ldr	r2, [pc, #180]	@ (801cb5c <network_configure_weights+0x1f8>)
 801caa6:	6093      	str	r3, [r2, #8]
    conv2d_5_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 5568);
 801caa8:	4b23      	ldr	r3, [pc, #140]	@ (801cb38 <network_configure_weights+0x1d4>)
 801caaa:	681b      	ldr	r3, [r3, #0]
 801caac:	f503 53ae 	add.w	r3, r3, #5568	@ 0x15c0
 801cab0:	4a2a      	ldr	r2, [pc, #168]	@ (801cb5c <network_configure_weights+0x1f8>)
 801cab2:	60d3      	str	r3, [r2, #12]
    conv2d_5_bias_array.format |= AI_FMT_FLAG_CONST;
 801cab4:	4b2a      	ldr	r3, [pc, #168]	@ (801cb60 <network_configure_weights+0x1fc>)
 801cab6:	681b      	ldr	r3, [r3, #0]
 801cab8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 801cabc:	4a28      	ldr	r2, [pc, #160]	@ (801cb60 <network_configure_weights+0x1fc>)
 801cabe:	6013      	str	r3, [r2, #0]
    conv2d_5_bias_array.data = AI_PTR(g_network_weights_map[0] + 7616);
 801cac0:	4b1d      	ldr	r3, [pc, #116]	@ (801cb38 <network_configure_weights+0x1d4>)
 801cac2:	681b      	ldr	r3, [r3, #0]
 801cac4:	f503 53ee 	add.w	r3, r3, #7616	@ 0x1dc0
 801cac8:	4a25      	ldr	r2, [pc, #148]	@ (801cb60 <network_configure_weights+0x1fc>)
 801caca:	6093      	str	r3, [r2, #8]
    conv2d_5_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 7616);
 801cacc:	4b1a      	ldr	r3, [pc, #104]	@ (801cb38 <network_configure_weights+0x1d4>)
 801cace:	681b      	ldr	r3, [r3, #0]
 801cad0:	f503 53ee 	add.w	r3, r3, #7616	@ 0x1dc0
 801cad4:	4a22      	ldr	r2, [pc, #136]	@ (801cb60 <network_configure_weights+0x1fc>)
 801cad6:	60d3      	str	r3, [r2, #12]
    gemm_7_weights_array.format |= AI_FMT_FLAG_CONST;
 801cad8:	4b22      	ldr	r3, [pc, #136]	@ (801cb64 <network_configure_weights+0x200>)
 801cada:	681b      	ldr	r3, [r3, #0]
 801cadc:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 801cae0:	4a20      	ldr	r2, [pc, #128]	@ (801cb64 <network_configure_weights+0x200>)
 801cae2:	6013      	str	r3, [r2, #0]
    gemm_7_weights_array.data = AI_PTR(g_network_weights_map[0] + 7872);
 801cae4:	4b14      	ldr	r3, [pc, #80]	@ (801cb38 <network_configure_weights+0x1d4>)
 801cae6:	681b      	ldr	r3, [r3, #0]
 801cae8:	f503 53f6 	add.w	r3, r3, #7872	@ 0x1ec0
 801caec:	4a1d      	ldr	r2, [pc, #116]	@ (801cb64 <network_configure_weights+0x200>)
 801caee:	6093      	str	r3, [r2, #8]
    gemm_7_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 7872);
 801caf0:	4b11      	ldr	r3, [pc, #68]	@ (801cb38 <network_configure_weights+0x1d4>)
 801caf2:	681b      	ldr	r3, [r3, #0]
 801caf4:	f503 53f6 	add.w	r3, r3, #7872	@ 0x1ec0
 801caf8:	4a1a      	ldr	r2, [pc, #104]	@ (801cb64 <network_configure_weights+0x200>)
 801cafa:	60d3      	str	r3, [r2, #12]
    gemm_7_bias_array.format |= AI_FMT_FLAG_CONST;
 801cafc:	4b1a      	ldr	r3, [pc, #104]	@ (801cb68 <network_configure_weights+0x204>)
 801cafe:	681b      	ldr	r3, [r3, #0]
 801cb00:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 801cb04:	4a18      	ldr	r2, [pc, #96]	@ (801cb68 <network_configure_weights+0x204>)
 801cb06:	6013      	str	r3, [r2, #0]
    gemm_7_bias_array.data = AI_PTR(g_network_weights_map[0] + 10176);
 801cb08:	4b0b      	ldr	r3, [pc, #44]	@ (801cb38 <network_configure_weights+0x1d4>)
 801cb0a:	681b      	ldr	r3, [r3, #0]
 801cb0c:	f503 531f 	add.w	r3, r3, #10176	@ 0x27c0
 801cb10:	4a15      	ldr	r2, [pc, #84]	@ (801cb68 <network_configure_weights+0x204>)
 801cb12:	6093      	str	r3, [r2, #8]
    gemm_7_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 10176);
 801cb14:	4b08      	ldr	r3, [pc, #32]	@ (801cb38 <network_configure_weights+0x1d4>)
 801cb16:	681b      	ldr	r3, [r3, #0]
 801cb18:	f503 531f 	add.w	r3, r3, #10176	@ 0x27c0
 801cb1c:	4a12      	ldr	r2, [pc, #72]	@ (801cb68 <network_configure_weights+0x204>)
 801cb1e:	60d3      	str	r3, [r2, #12]
    return true;
 801cb20:	2301      	movs	r3, #1
 801cb22:	e005      	b.n	801cb30 <network_configure_weights+0x1cc>
  }
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_WEIGHTS);
 801cb24:	2212      	movs	r2, #18
 801cb26:	2130      	movs	r1, #48	@ 0x30
 801cb28:	6878      	ldr	r0, [r7, #4]
 801cb2a:	f000 fa85 	bl	801d038 <ai_platform_network_set_error>
  return false;
 801cb2e:	2300      	movs	r3, #0
}
 801cb30:	4618      	mov	r0, r3
 801cb32:	3708      	adds	r7, #8
 801cb34:	46bd      	mov	sp, r7
 801cb36:	bd80      	pop	{r7, pc}
 801cb38:	200055b8 	.word	0x200055b8
 801cb3c:	20000174 	.word	0x20000174
 801cb40:	20000184 	.word	0x20000184
 801cb44:	20000194 	.word	0x20000194
 801cb48:	200001a4 	.word	0x200001a4
 801cb4c:	200001b4 	.word	0x200001b4
 801cb50:	200001c4 	.word	0x200001c4
 801cb54:	200001d4 	.word	0x200001d4
 801cb58:	200001e4 	.word	0x200001e4
 801cb5c:	200001f4 	.word	0x200001f4
 801cb60:	20000204 	.word	0x20000204
 801cb64:	20000214 	.word	0x20000214
 801cb68:	20000224 	.word	0x20000224

0801cb6c <ai_network_get_error>:
}


AI_API_ENTRY
ai_error ai_network_get_error(ai_handle network)
{
 801cb6c:	b580      	push	{r7, lr}
 801cb6e:	b082      	sub	sp, #8
 801cb70:	af00      	add	r7, sp, #0
 801cb72:	6078      	str	r0, [r7, #4]
  return ai_platform_network_get_error(network);
 801cb74:	6878      	ldr	r0, [r7, #4]
 801cb76:	f000 fa53 	bl	801d020 <ai_platform_network_get_error>
 801cb7a:	4603      	mov	r3, r0
}
 801cb7c:	4618      	mov	r0, r3
 801cb7e:	3708      	adds	r7, #8
 801cb80:	46bd      	mov	sp, r7
 801cb82:	bd80      	pop	{r7, pc}

0801cb84 <ai_network_create>:


AI_API_ENTRY
ai_error ai_network_create(
  ai_handle* network, const ai_buffer* network_config)
{
 801cb84:	b580      	push	{r7, lr}
 801cb86:	b084      	sub	sp, #16
 801cb88:	af02      	add	r7, sp, #8
 801cb8a:	6078      	str	r0, [r7, #4]
 801cb8c:	6039      	str	r1, [r7, #0]
  return ai_platform_network_create(
 801cb8e:	2300      	movs	r3, #0
 801cb90:	9301      	str	r3, [sp, #4]
 801cb92:	2305      	movs	r3, #5
 801cb94:	9300      	str	r3, [sp, #0]
 801cb96:	2301      	movs	r3, #1
 801cb98:	4a04      	ldr	r2, [pc, #16]	@ (801cbac <ai_network_create+0x28>)
 801cb9a:	6839      	ldr	r1, [r7, #0]
 801cb9c:	6878      	ldr	r0, [r7, #4]
 801cb9e:	f000 fb39 	bl	801d214 <ai_platform_network_create>
 801cba2:	4603      	mov	r3, r0
    network, network_config, 
    AI_CONTEXT_OBJ(&AI_NET_OBJ_INSTANCE),
    AI_TOOLS_API_VERSION_MAJOR, AI_TOOLS_API_VERSION_MINOR, AI_TOOLS_API_VERSION_MICRO);
}
 801cba4:	4618      	mov	r0, r3
 801cba6:	3708      	adds	r7, #8
 801cba8:	46bd      	mov	sp, r7
 801cbaa:	bd80      	pop	{r7, pc}
 801cbac:	200010f8 	.word	0x200010f8

0801cbb0 <ai_network_create_and_init>:


AI_API_ENTRY
ai_error ai_network_create_and_init(
  ai_handle* network, const ai_handle activations[], const ai_handle weights[])
{
 801cbb0:	b580      	push	{r7, lr}
 801cbb2:	b094      	sub	sp, #80	@ 0x50
 801cbb4:	af00      	add	r7, sp, #0
 801cbb6:	60f8      	str	r0, [r7, #12]
 801cbb8:	60b9      	str	r1, [r7, #8]
 801cbba:	607a      	str	r2, [r7, #4]
  ai_error err;
  ai_network_params params;

  err = ai_network_create(network, AI_NETWORK_DATA_CONFIG);
 801cbbc:	2100      	movs	r1, #0
 801cbbe:	68f8      	ldr	r0, [r7, #12]
 801cbc0:	f7ff ffe0 	bl	801cb84 <ai_network_create>
 801cbc4:	4603      	mov	r3, r0
 801cbc6:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (err.type != AI_ERROR_NONE) {
 801cbc8:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 801cbcc:	2b00      	cmp	r3, #0
 801cbce:	d001      	beq.n	801cbd4 <ai_network_create_and_init+0x24>
    return err;
 801cbd0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801cbd2:	e067      	b.n	801cca4 <ai_network_create_and_init+0xf4>
  }
  
  if (ai_network_data_params_get(&params) != true) {
 801cbd4:	f107 0310 	add.w	r3, r7, #16
 801cbd8:	4618      	mov	r0, r3
 801cbda:	f000 f8e7 	bl	801cdac <ai_network_data_params_get>
 801cbde:	4603      	mov	r3, r0
 801cbe0:	f083 0301 	eor.w	r3, r3, #1
 801cbe4:	b2db      	uxtb	r3, r3
 801cbe6:	2b00      	cmp	r3, #0
 801cbe8:	d008      	beq.n	801cbfc <ai_network_create_and_init+0x4c>
    err = ai_network_get_error(*network);
 801cbea:	68fb      	ldr	r3, [r7, #12]
 801cbec:	681b      	ldr	r3, [r3, #0]
 801cbee:	4618      	mov	r0, r3
 801cbf0:	f7ff ffbc 	bl	801cb6c <ai_network_get_error>
 801cbf4:	4603      	mov	r3, r0
 801cbf6:	64bb      	str	r3, [r7, #72]	@ 0x48
    return err;
 801cbf8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801cbfa:	e053      	b.n	801cca4 <ai_network_create_and_init+0xf4>
  }
#if defined(AI_NETWORK_DATA_ACTIVATIONS_COUNT)
  /* set the addresses of the activations buffers */
  for (ai_u16 idx=0; activations && idx<params.map_activations.size; idx++) {
 801cbfc:	2300      	movs	r3, #0
 801cbfe:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 801cc02:	e012      	b.n	801cc2a <ai_network_create_and_init+0x7a>
    AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&params.map_activations, idx, activations[idx]);
 801cc04:	f8b7 104e 	ldrh.w	r1, [r7, #78]	@ 0x4e
 801cc08:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 801cc0c:	009b      	lsls	r3, r3, #2
 801cc0e:	68ba      	ldr	r2, [r7, #8]
 801cc10:	4413      	add	r3, r2
 801cc12:	681a      	ldr	r2, [r3, #0]
 801cc14:	f107 0310 	add.w	r3, r7, #16
 801cc18:	330c      	adds	r3, #12
 801cc1a:	4618      	mov	r0, r3
 801cc1c:	f000 f92a 	bl	801ce74 <ai_buffer_array_item_set_address>
  for (ai_u16 idx=0; activations && idx<params.map_activations.size; idx++) {
 801cc20:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 801cc24:	3301      	adds	r3, #1
 801cc26:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 801cc2a:	68bb      	ldr	r3, [r7, #8]
 801cc2c:	2b00      	cmp	r3, #0
 801cc2e:	d004      	beq.n	801cc3a <ai_network_create_and_init+0x8a>
 801cc30:	8bfb      	ldrh	r3, [r7, #30]
 801cc32:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 801cc36:	429a      	cmp	r2, r3
 801cc38:	d3e4      	bcc.n	801cc04 <ai_network_create_and_init+0x54>
  }
#endif
#if defined(AI_NETWORK_DATA_WEIGHTS_COUNT)
  /* set the addresses of the weight buffers */
  for (ai_u16 idx=0; weights && idx<params.map_weights.size; idx++) {
 801cc3a:	2300      	movs	r3, #0
 801cc3c:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 801cc40:	e012      	b.n	801cc68 <ai_network_create_and_init+0xb8>
    AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&params.map_weights, idx, weights[idx]);
 801cc42:	f8b7 104c 	ldrh.w	r1, [r7, #76]	@ 0x4c
 801cc46:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 801cc4a:	009b      	lsls	r3, r3, #2
 801cc4c:	687a      	ldr	r2, [r7, #4]
 801cc4e:	4413      	add	r3, r2
 801cc50:	681a      	ldr	r2, [r3, #0]
 801cc52:	f107 0310 	add.w	r3, r7, #16
 801cc56:	3304      	adds	r3, #4
 801cc58:	4618      	mov	r0, r3
 801cc5a:	f000 f90b 	bl	801ce74 <ai_buffer_array_item_set_address>
  for (ai_u16 idx=0; weights && idx<params.map_weights.size; idx++) {
 801cc5e:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 801cc62:	3301      	adds	r3, #1
 801cc64:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 801cc68:	687b      	ldr	r3, [r7, #4]
 801cc6a:	2b00      	cmp	r3, #0
 801cc6c:	d004      	beq.n	801cc78 <ai_network_create_and_init+0xc8>
 801cc6e:	8afb      	ldrh	r3, [r7, #22]
 801cc70:	f8b7 204c 	ldrh.w	r2, [r7, #76]	@ 0x4c
 801cc74:	429a      	cmp	r2, r3
 801cc76:	d3e4      	bcc.n	801cc42 <ai_network_create_and_init+0x92>
  }
#endif
  if (ai_network_init(*network, &params) != true) {
 801cc78:	68fb      	ldr	r3, [r7, #12]
 801cc7a:	681b      	ldr	r3, [r3, #0]
 801cc7c:	f107 0210 	add.w	r2, r7, #16
 801cc80:	4611      	mov	r1, r2
 801cc82:	4618      	mov	r0, r3
 801cc84:	f000 f846 	bl	801cd14 <ai_network_init>
 801cc88:	4603      	mov	r3, r0
 801cc8a:	f083 0301 	eor.w	r3, r3, #1
 801cc8e:	b2db      	uxtb	r3, r3
 801cc90:	2b00      	cmp	r3, #0
 801cc92:	d006      	beq.n	801cca2 <ai_network_create_and_init+0xf2>
    err = ai_network_get_error(*network);
 801cc94:	68fb      	ldr	r3, [r7, #12]
 801cc96:	681b      	ldr	r3, [r3, #0]
 801cc98:	4618      	mov	r0, r3
 801cc9a:	f7ff ff67 	bl	801cb6c <ai_network_get_error>
 801cc9e:	4603      	mov	r3, r0
 801cca0:	64bb      	str	r3, [r7, #72]	@ 0x48
  }
  return err;
 801cca2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 801cca4:	4618      	mov	r0, r3
 801cca6:	3750      	adds	r7, #80	@ 0x50
 801cca8:	46bd      	mov	sp, r7
 801ccaa:	bd80      	pop	{r7, pc}

0801ccac <ai_network_inputs_get>:


AI_API_ENTRY
ai_buffer* ai_network_inputs_get(ai_handle network, ai_u16 *n_buffer)
{
 801ccac:	b580      	push	{r7, lr}
 801ccae:	b082      	sub	sp, #8
 801ccb0:	af00      	add	r7, sp, #0
 801ccb2:	6078      	str	r0, [r7, #4]
 801ccb4:	6039      	str	r1, [r7, #0]
  if (network == AI_HANDLE_NULL) {
 801ccb6:	687b      	ldr	r3, [r7, #4]
 801ccb8:	2b00      	cmp	r3, #0
 801ccba:	d104      	bne.n	801ccc6 <ai_network_inputs_get+0x1a>
    network = (ai_handle)&AI_NET_OBJ_INSTANCE;
 801ccbc:	4b06      	ldr	r3, [pc, #24]	@ (801ccd8 <ai_network_inputs_get+0x2c>)
 801ccbe:	607b      	str	r3, [r7, #4]
    AI_NETWORK_OBJ(network)->magic = AI_MAGIC_CONTEXT_TOKEN;
 801ccc0:	687b      	ldr	r3, [r7, #4]
 801ccc2:	4a06      	ldr	r2, [pc, #24]	@ (801ccdc <ai_network_inputs_get+0x30>)
 801ccc4:	601a      	str	r2, [r3, #0]
  }
  return ai_platform_inputs_get(network, n_buffer);
 801ccc6:	6839      	ldr	r1, [r7, #0]
 801ccc8:	6878      	ldr	r0, [r7, #4]
 801ccca:	f000 f9bb 	bl	801d044 <ai_platform_inputs_get>
 801ccce:	4603      	mov	r3, r0
}
 801ccd0:	4618      	mov	r0, r3
 801ccd2:	3708      	adds	r7, #8
 801ccd4:	46bd      	mov	sp, r7
 801ccd6:	bd80      	pop	{r7, pc}
 801ccd8:	200010f8 	.word	0x200010f8
 801ccdc:	a1c00100 	.word	0xa1c00100

0801cce0 <ai_network_outputs_get>:


AI_API_ENTRY
ai_buffer* ai_network_outputs_get(ai_handle network, ai_u16 *n_buffer)
{
 801cce0:	b580      	push	{r7, lr}
 801cce2:	b082      	sub	sp, #8
 801cce4:	af00      	add	r7, sp, #0
 801cce6:	6078      	str	r0, [r7, #4]
 801cce8:	6039      	str	r1, [r7, #0]
  if (network == AI_HANDLE_NULL) {
 801ccea:	687b      	ldr	r3, [r7, #4]
 801ccec:	2b00      	cmp	r3, #0
 801ccee:	d104      	bne.n	801ccfa <ai_network_outputs_get+0x1a>
    network = (ai_handle)&AI_NET_OBJ_INSTANCE;
 801ccf0:	4b06      	ldr	r3, [pc, #24]	@ (801cd0c <ai_network_outputs_get+0x2c>)
 801ccf2:	607b      	str	r3, [r7, #4]
    AI_NETWORK_OBJ(network)->magic = AI_MAGIC_CONTEXT_TOKEN;
 801ccf4:	687b      	ldr	r3, [r7, #4]
 801ccf6:	4a06      	ldr	r2, [pc, #24]	@ (801cd10 <ai_network_outputs_get+0x30>)
 801ccf8:	601a      	str	r2, [r3, #0]
  }
  return ai_platform_outputs_get(network, n_buffer);
 801ccfa:	6839      	ldr	r1, [r7, #0]
 801ccfc:	6878      	ldr	r0, [r7, #4]
 801ccfe:	f000 fa17 	bl	801d130 <ai_platform_outputs_get>
 801cd02:	4603      	mov	r3, r0
}
 801cd04:	4618      	mov	r0, r3
 801cd06:	3708      	adds	r7, #8
 801cd08:	46bd      	mov	sp, r7
 801cd0a:	bd80      	pop	{r7, pc}
 801cd0c:	200010f8 	.word	0x200010f8
 801cd10:	a1c00100 	.word	0xa1c00100

0801cd14 <ai_network_init>:


AI_API_ENTRY
ai_bool ai_network_init(
  ai_handle network, const ai_network_params* params)
{
 801cd14:	b580      	push	{r7, lr}
 801cd16:	b084      	sub	sp, #16
 801cd18:	af00      	add	r7, sp, #0
 801cd1a:	6078      	str	r0, [r7, #4]
 801cd1c:	6039      	str	r1, [r7, #0]
  ai_network* net_ctx = AI_NETWORK_OBJ(ai_platform_network_init(network, params));
 801cd1e:	6839      	ldr	r1, [r7, #0]
 801cd20:	6878      	ldr	r0, [r7, #4]
 801cd22:	f000 fab9 	bl	801d298 <ai_platform_network_init>
 801cd26:	60f8      	str	r0, [r7, #12]
  ai_bool ok = true;
 801cd28:	2301      	movs	r3, #1
 801cd2a:	72fb      	strb	r3, [r7, #11]

  if (!net_ctx) return false;
 801cd2c:	68fb      	ldr	r3, [r7, #12]
 801cd2e:	2b00      	cmp	r3, #0
 801cd30:	d101      	bne.n	801cd36 <ai_network_init+0x22>
 801cd32:	2300      	movs	r3, #0
 801cd34:	e026      	b.n	801cd84 <ai_network_init+0x70>
  ok &= network_configure_weights(net_ctx, params);
 801cd36:	6839      	ldr	r1, [r7, #0]
 801cd38:	68f8      	ldr	r0, [r7, #12]
 801cd3a:	f7ff fe13 	bl	801c964 <network_configure_weights>
 801cd3e:	4603      	mov	r3, r0
 801cd40:	461a      	mov	r2, r3
 801cd42:	7afb      	ldrb	r3, [r7, #11]
 801cd44:	4013      	ands	r3, r2
 801cd46:	2b00      	cmp	r3, #0
 801cd48:	bf14      	ite	ne
 801cd4a:	2301      	movne	r3, #1
 801cd4c:	2300      	moveq	r3, #0
 801cd4e:	72fb      	strb	r3, [r7, #11]
  ok &= network_configure_activations(net_ctx, params);
 801cd50:	6839      	ldr	r1, [r7, #0]
 801cd52:	68f8      	ldr	r0, [r7, #12]
 801cd54:	f7ff fcdc 	bl	801c710 <network_configure_activations>
 801cd58:	4603      	mov	r3, r0
 801cd5a:	461a      	mov	r2, r3
 801cd5c:	7afb      	ldrb	r3, [r7, #11]
 801cd5e:	4013      	ands	r3, r2
 801cd60:	2b00      	cmp	r3, #0
 801cd62:	bf14      	ite	ne
 801cd64:	2301      	movne	r3, #1
 801cd66:	2300      	moveq	r3, #0
 801cd68:	72fb      	strb	r3, [r7, #11]

  ok &= ai_platform_network_post_init(network);
 801cd6a:	6878      	ldr	r0, [r7, #4]
 801cd6c:	f000 fb2c 	bl	801d3c8 <ai_platform_network_post_init>
 801cd70:	4603      	mov	r3, r0
 801cd72:	461a      	mov	r2, r3
 801cd74:	7afb      	ldrb	r3, [r7, #11]
 801cd76:	4013      	ands	r3, r2
 801cd78:	2b00      	cmp	r3, #0
 801cd7a:	bf14      	ite	ne
 801cd7c:	2301      	movne	r3, #1
 801cd7e:	2300      	moveq	r3, #0
 801cd80:	72fb      	strb	r3, [r7, #11]

  return ok;
 801cd82:	7afb      	ldrb	r3, [r7, #11]
}
 801cd84:	4618      	mov	r0, r3
 801cd86:	3710      	adds	r7, #16
 801cd88:	46bd      	mov	sp, r7
 801cd8a:	bd80      	pop	{r7, pc}

0801cd8c <ai_network_run>:


AI_API_ENTRY
ai_i32 ai_network_run(
  ai_handle network, const ai_buffer* input, ai_buffer* output)
{
 801cd8c:	b580      	push	{r7, lr}
 801cd8e:	b084      	sub	sp, #16
 801cd90:	af00      	add	r7, sp, #0
 801cd92:	60f8      	str	r0, [r7, #12]
 801cd94:	60b9      	str	r1, [r7, #8]
 801cd96:	607a      	str	r2, [r7, #4]
  return ai_platform_network_process(network, input, output);
 801cd98:	687a      	ldr	r2, [r7, #4]
 801cd9a:	68b9      	ldr	r1, [r7, #8]
 801cd9c:	68f8      	ldr	r0, [r7, #12]
 801cd9e:	f000 fb41 	bl	801d424 <ai_platform_network_process>
 801cda2:	4603      	mov	r3, r0
}
 801cda4:	4618      	mov	r0, r3
 801cda6:	3710      	adds	r7, #16
 801cda8:	46bd      	mov	sp, r7
 801cdaa:	bd80      	pop	{r7, pc}

0801cdac <ai_network_data_params_get>:
 * @ingroup network_data
 * @return true if a valid configuration is present, false otherwise
 */
AI_API_ENTRY
ai_bool ai_network_data_params_get(ai_network_params* params)
{
 801cdac:	b580      	push	{r7, lr}
 801cdae:	b086      	sub	sp, #24
 801cdb0:	af00      	add	r7, sp, #0
 801cdb2:	6078      	str	r0, [r7, #4]
  if (!params) return false;
 801cdb4:	687b      	ldr	r3, [r7, #4]
 801cdb6:	2b00      	cmp	r3, #0
 801cdb8:	d101      	bne.n	801cdbe <ai_network_data_params_get+0x12>
 801cdba:	2300      	movs	r3, #0
 801cdbc:	e016      	b.n	801cdec <ai_network_data_params_get+0x40>
  
  const ai_buffer_array map_activations = 
 801cdbe:	4a0d      	ldr	r2, [pc, #52]	@ (801cdf4 <ai_network_data_params_get+0x48>)
 801cdc0:	f107 0310 	add.w	r3, r7, #16
 801cdc4:	e892 0003 	ldmia.w	r2, {r0, r1}
 801cdc8:	e883 0003 	stmia.w	r3, {r0, r1}
    AI_BUFFER_ARRAY_OBJ_INIT(AI_FLAG_NONE, AI_NETWORK_DATA_ACTIVATIONS_COUNT, g_network_data_map_activations);
  
  const ai_buffer_array map_weights = 
 801cdcc:	4a0a      	ldr	r2, [pc, #40]	@ (801cdf8 <ai_network_data_params_get+0x4c>)
 801cdce:	f107 0308 	add.w	r3, r7, #8
 801cdd2:	e892 0003 	ldmia.w	r2, {r0, r1}
 801cdd6:	e883 0003 	stmia.w	r3, {r0, r1}
    AI_BUFFER_ARRAY_OBJ_INIT(AI_FLAG_NONE, AI_NETWORK_DATA_WEIGHTS_COUNT, g_network_data_map_weights);

  return ai_platform_bind_network_params(params, &map_weights, &map_activations);
 801cdda:	f107 0210 	add.w	r2, r7, #16
 801cdde:	f107 0308 	add.w	r3, r7, #8
 801cde2:	4619      	mov	r1, r3
 801cde4:	6878      	ldr	r0, [r7, #4]
 801cde6:	f000 f8f9 	bl	801cfdc <ai_platform_bind_network_params>
 801cdea:	4603      	mov	r3, r0
}
 801cdec:	4618      	mov	r0, r3
 801cdee:	3718      	adds	r7, #24
 801cdf0:	46bd      	mov	sp, r7
 801cdf2:	bd80      	pop	{r7, pc}
 801cdf4:	080364c8 	.word	0x080364c8
 801cdf8:	080364d0 	.word	0x080364d0

0801cdfc <ai_buffer_get_size>:
 801cdfc:	b360      	cbz	r0, 801ce58 <ai_buffer_get_size+0x5c>
 801cdfe:	b430      	push	{r4, r5}
 801ce00:	6803      	ldr	r3, [r0, #0]
 801ce02:	4d16      	ldr	r5, [pc, #88]	@ (801ce5c <ai_buffer_get_size+0x60>)
 801ce04:	6984      	ldr	r4, [r0, #24]
 801ce06:	f023 437e 	bic.w	r3, r3, #4261412864	@ 0xfe000000
 801ce0a:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 801ce0e:	42ab      	cmp	r3, r5
 801ce10:	6862      	ldr	r2, [r4, #4]
 801ce12:	d01b      	beq.n	801ce4c <ai_buffer_get_size+0x50>
 801ce14:	7d03      	ldrb	r3, [r0, #20]
 801ce16:	6941      	ldr	r1, [r0, #20]
 801ce18:	f1a3 0301 	sub.w	r3, r3, #1
 801ce1c:	fab3 f383 	clz	r3, r3
 801ce20:	095b      	lsrs	r3, r3, #5
 801ce22:	ebb3 2f11 	cmp.w	r3, r1, lsr #8
 801ce26:	f3c1 2017 	ubfx	r0, r1, #8, #24
 801ce2a:	da0b      	bge.n	801ce44 <ai_buffer_get_size+0x48>
 801ce2c:	2b01      	cmp	r3, #1
 801ce2e:	d102      	bne.n	801ce36 <ai_buffer_get_size+0x3a>
 801ce30:	2802      	cmp	r0, #2
 801ce32:	d007      	beq.n	801ce44 <ai_buffer_get_size+0x48>
 801ce34:	2302      	movs	r3, #2
 801ce36:	f854 1023 	ldr.w	r1, [r4, r3, lsl #2]
 801ce3a:	3301      	adds	r3, #1
 801ce3c:	4298      	cmp	r0, r3
 801ce3e:	fb01 f202 	mul.w	r2, r1, r2
 801ce42:	d1f3      	bne.n	801ce2c <ai_buffer_get_size+0x30>
 801ce44:	ea22 70e2 	bic.w	r0, r2, r2, asr #31
 801ce48:	bc30      	pop	{r4, r5}
 801ce4a:	4770      	bx	lr
 801ce4c:	2900      	cmp	r1, #0
 801ce4e:	d0e1      	beq.n	801ce14 <ai_buffer_get_size+0x18>
 801ce50:	321f      	adds	r2, #31
 801ce52:	f022 021f 	bic.w	r2, r2, #31
 801ce56:	e7dd      	b.n	801ce14 <ai_buffer_get_size+0x18>
 801ce58:	4770      	bx	lr
 801ce5a:	bf00      	nop
 801ce5c:	000400c0 	.word	0x000400c0

0801ce60 <ai_buffer_array_sane>:
 801ce60:	b138      	cbz	r0, 801ce72 <ai_buffer_array_sane+0x12>
 801ce62:	6843      	ldr	r3, [r0, #4]
 801ce64:	b123      	cbz	r3, 801ce70 <ai_buffer_array_sane+0x10>
 801ce66:	8840      	ldrh	r0, [r0, #2]
 801ce68:	3800      	subs	r0, #0
 801ce6a:	bf18      	it	ne
 801ce6c:	2001      	movne	r0, #1
 801ce6e:	4770      	bx	lr
 801ce70:	4618      	mov	r0, r3
 801ce72:	4770      	bx	lr

0801ce74 <ai_buffer_array_item_set_address>:
 801ce74:	b158      	cbz	r0, 801ce8e <ai_buffer_array_item_set_address+0x1a>
 801ce76:	6843      	ldr	r3, [r0, #4]
 801ce78:	b143      	cbz	r3, 801ce8c <ai_buffer_array_item_set_address+0x18>
 801ce7a:	8840      	ldrh	r0, [r0, #2]
 801ce7c:	b138      	cbz	r0, 801ce8e <ai_buffer_array_item_set_address+0x1a>
 801ce7e:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 801ce82:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 801ce86:	2001      	movs	r0, #1
 801ce88:	605a      	str	r2, [r3, #4]
 801ce8a:	4770      	bx	lr
 801ce8c:	4618      	mov	r0, r3
 801ce8e:	4770      	bx	lr

0801ce90 <ai_platform_get_weights_map>:
 801ce90:	b1f2      	cbz	r2, 801ced0 <ai_platform_get_weights_map+0x40>
 801ce92:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ce94:	4605      	mov	r5, r0
 801ce96:	b1c8      	cbz	r0, 801cecc <ai_platform_get_weights_map+0x3c>
 801ce98:	460c      	mov	r4, r1
 801ce9a:	b1b9      	cbz	r1, 801cecc <ai_platform_get_weights_map+0x3c>
 801ce9c:	4b24      	ldr	r3, [pc, #144]	@ (801cf30 <ai_platform_get_weights_map+0xa0>)
 801ce9e:	6811      	ldr	r1, [r2, #0]
 801cea0:	4299      	cmp	r1, r3
 801cea2:	4616      	mov	r6, r2
 801cea4:	d00b      	beq.n	801cebe <ai_platform_get_weights_map+0x2e>
 801cea6:	6856      	ldr	r6, [r2, #4]
 801cea8:	b186      	cbz	r6, 801cecc <ai_platform_get_weights_map+0x3c>
 801ceaa:	6837      	ldr	r7, [r6, #0]
 801ceac:	429f      	cmp	r7, r3
 801ceae:	d011      	beq.n	801ced4 <ai_platform_get_weights_map+0x44>
 801ceb0:	6006      	str	r6, [r0, #0]
 801ceb2:	f1a4 0001 	sub.w	r0, r4, #1
 801ceb6:	fab0 f080 	clz	r0, r0
 801ceba:	0940      	lsrs	r0, r0, #5
 801cebc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801cebe:	1d10      	adds	r0, r2, #4
 801cec0:	f7ff ffce 	bl	801ce60 <ai_buffer_array_sane>
 801cec4:	b110      	cbz	r0, 801cecc <ai_platform_get_weights_map+0x3c>
 801cec6:	88f3      	ldrh	r3, [r6, #6]
 801cec8:	429c      	cmp	r4, r3
 801ceca:	d01b      	beq.n	801cf04 <ai_platform_get_weights_map+0x74>
 801cecc:	2000      	movs	r0, #0
 801cece:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801ced0:	2000      	movs	r0, #0
 801ced2:	4770      	bx	lr
 801ced4:	4631      	mov	r1, r6
 801ced6:	3804      	subs	r0, #4
 801ced8:	2300      	movs	r3, #0
 801ceda:	e004      	b.n	801cee6 <ai_platform_get_weights_map+0x56>
 801cedc:	3301      	adds	r3, #1
 801cede:	429c      	cmp	r4, r3
 801cee0:	f840 2f04 	str.w	r2, [r0, #4]!
 801cee4:	d005      	beq.n	801cef2 <ai_platform_get_weights_map+0x62>
 801cee6:	f851 2f04 	ldr.w	r2, [r1, #4]!
 801ceea:	42ba      	cmp	r2, r7
 801ceec:	d1f6      	bne.n	801cedc <ai_platform_get_weights_map+0x4c>
 801ceee:	429c      	cmp	r4, r3
 801cef0:	d1ec      	bne.n	801cecc <ai_platform_get_weights_map+0x3c>
 801cef2:	3401      	adds	r4, #1
 801cef4:	4b0e      	ldr	r3, [pc, #56]	@ (801cf30 <ai_platform_get_weights_map+0xa0>)
 801cef6:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 801cefa:	1ac0      	subs	r0, r0, r3
 801cefc:	fab0 f080 	clz	r0, r0
 801cf00:	0940      	lsrs	r0, r0, #5
 801cf02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801cf04:	2100      	movs	r1, #0
 801cf06:	1f28      	subs	r0, r5, #4
 801cf08:	468c      	mov	ip, r1
 801cf0a:	e005      	b.n	801cf18 <ai_platform_get_weights_map+0x88>
 801cf0c:	f10c 0c01 	add.w	ip, ip, #1
 801cf10:	4564      	cmp	r4, ip
 801cf12:	f840 3f04 	str.w	r3, [r0, #4]!
 801cf16:	d005      	beq.n	801cf24 <ai_platform_get_weights_map+0x94>
 801cf18:	68b3      	ldr	r3, [r6, #8]
 801cf1a:	440b      	add	r3, r1
 801cf1c:	311c      	adds	r1, #28
 801cf1e:	685b      	ldr	r3, [r3, #4]
 801cf20:	2b00      	cmp	r3, #0
 801cf22:	d1f3      	bne.n	801cf0c <ai_platform_get_weights_map+0x7c>
 801cf24:	eba4 000c 	sub.w	r0, r4, ip
 801cf28:	fab0 f080 	clz	r0, r0
 801cf2c:	0940      	lsrs	r0, r0, #5
 801cf2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801cf30:	a1facade 	.word	0xa1facade

0801cf34 <ai_platform_get_activations_map>:
 801cf34:	b1fa      	cbz	r2, 801cf76 <ai_platform_get_activations_map+0x42>
 801cf36:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801cf38:	4605      	mov	r5, r0
 801cf3a:	b1d0      	cbz	r0, 801cf72 <ai_platform_get_activations_map+0x3e>
 801cf3c:	460c      	mov	r4, r1
 801cf3e:	b1c1      	cbz	r1, 801cf72 <ai_platform_get_activations_map+0x3e>
 801cf40:	4b25      	ldr	r3, [pc, #148]	@ (801cfd8 <ai_platform_get_activations_map+0xa4>)
 801cf42:	6811      	ldr	r1, [r2, #0]
 801cf44:	4299      	cmp	r1, r3
 801cf46:	4616      	mov	r6, r2
 801cf48:	d00b      	beq.n	801cf62 <ai_platform_get_activations_map+0x2e>
 801cf4a:	6a16      	ldr	r6, [r2, #32]
 801cf4c:	b18e      	cbz	r6, 801cf72 <ai_platform_get_activations_map+0x3e>
 801cf4e:	6837      	ldr	r7, [r6, #0]
 801cf50:	429f      	cmp	r7, r3
 801cf52:	d012      	beq.n	801cf7a <ai_platform_get_activations_map+0x46>
 801cf54:	6006      	str	r6, [r0, #0]
 801cf56:	f1a4 0001 	sub.w	r0, r4, #1
 801cf5a:	fab0 f080 	clz	r0, r0
 801cf5e:	0940      	lsrs	r0, r0, #5
 801cf60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801cf62:	f102 000c 	add.w	r0, r2, #12
 801cf66:	f7ff ff7b 	bl	801ce60 <ai_buffer_array_sane>
 801cf6a:	b110      	cbz	r0, 801cf72 <ai_platform_get_activations_map+0x3e>
 801cf6c:	89f3      	ldrh	r3, [r6, #14]
 801cf6e:	429c      	cmp	r4, r3
 801cf70:	d01b      	beq.n	801cfaa <ai_platform_get_activations_map+0x76>
 801cf72:	2000      	movs	r0, #0
 801cf74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801cf76:	2000      	movs	r0, #0
 801cf78:	4770      	bx	lr
 801cf7a:	4631      	mov	r1, r6
 801cf7c:	3804      	subs	r0, #4
 801cf7e:	2300      	movs	r3, #0
 801cf80:	e004      	b.n	801cf8c <ai_platform_get_activations_map+0x58>
 801cf82:	3301      	adds	r3, #1
 801cf84:	429c      	cmp	r4, r3
 801cf86:	f840 2f04 	str.w	r2, [r0, #4]!
 801cf8a:	d005      	beq.n	801cf98 <ai_platform_get_activations_map+0x64>
 801cf8c:	f851 2f04 	ldr.w	r2, [r1, #4]!
 801cf90:	42ba      	cmp	r2, r7
 801cf92:	d1f6      	bne.n	801cf82 <ai_platform_get_activations_map+0x4e>
 801cf94:	429c      	cmp	r4, r3
 801cf96:	d1ec      	bne.n	801cf72 <ai_platform_get_activations_map+0x3e>
 801cf98:	3401      	adds	r4, #1
 801cf9a:	4b0f      	ldr	r3, [pc, #60]	@ (801cfd8 <ai_platform_get_activations_map+0xa4>)
 801cf9c:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 801cfa0:	1ac0      	subs	r0, r0, r3
 801cfa2:	fab0 f080 	clz	r0, r0
 801cfa6:	0940      	lsrs	r0, r0, #5
 801cfa8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801cfaa:	2100      	movs	r1, #0
 801cfac:	1f28      	subs	r0, r5, #4
 801cfae:	468c      	mov	ip, r1
 801cfb0:	e005      	b.n	801cfbe <ai_platform_get_activations_map+0x8a>
 801cfb2:	f10c 0c01 	add.w	ip, ip, #1
 801cfb6:	4564      	cmp	r4, ip
 801cfb8:	f840 3f04 	str.w	r3, [r0, #4]!
 801cfbc:	d005      	beq.n	801cfca <ai_platform_get_activations_map+0x96>
 801cfbe:	6933      	ldr	r3, [r6, #16]
 801cfc0:	440b      	add	r3, r1
 801cfc2:	311c      	adds	r1, #28
 801cfc4:	685b      	ldr	r3, [r3, #4]
 801cfc6:	2b00      	cmp	r3, #0
 801cfc8:	d1f3      	bne.n	801cfb2 <ai_platform_get_activations_map+0x7e>
 801cfca:	eba4 000c 	sub.w	r0, r4, ip
 801cfce:	fab0 f080 	clz	r0, r0
 801cfd2:	0940      	lsrs	r0, r0, #5
 801cfd4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801cfd6:	bf00      	nop
 801cfd8:	a1facade 	.word	0xa1facade

0801cfdc <ai_platform_bind_network_params>:
 801cfdc:	b1a0      	cbz	r0, 801d008 <ai_platform_bind_network_params+0x2c>
 801cfde:	b1b1      	cbz	r1, 801d00e <ai_platform_bind_network_params+0x32>
 801cfe0:	b1c2      	cbz	r2, 801d014 <ai_platform_bind_network_params+0x38>
 801cfe2:	b410      	push	{r4}
 801cfe4:	4603      	mov	r3, r0
 801cfe6:	4c0d      	ldr	r4, [pc, #52]	@ (801d01c <ai_platform_bind_network_params+0x40>)
 801cfe8:	f843 4b04 	str.w	r4, [r3], #4
 801cfec:	f100 0c0c 	add.w	ip, r0, #12
 801cff0:	c903      	ldmia	r1, {r0, r1}
 801cff2:	e883 0003 	stmia.w	r3, {r0, r1}
 801cff6:	e892 0003 	ldmia.w	r2, {r0, r1}
 801cffa:	e88c 0003 	stmia.w	ip, {r0, r1}
 801cffe:	2301      	movs	r3, #1
 801d000:	4618      	mov	r0, r3
 801d002:	f85d 4b04 	ldr.w	r4, [sp], #4
 801d006:	4770      	bx	lr
 801d008:	4603      	mov	r3, r0
 801d00a:	4618      	mov	r0, r3
 801d00c:	4770      	bx	lr
 801d00e:	460b      	mov	r3, r1
 801d010:	4618      	mov	r0, r3
 801d012:	4770      	bx	lr
 801d014:	4613      	mov	r3, r2
 801d016:	4618      	mov	r0, r3
 801d018:	4770      	bx	lr
 801d01a:	bf00      	nop
 801d01c:	a1facade 	.word	0xa1facade

0801d020 <ai_platform_network_get_error>:
 801d020:	4b04      	ldr	r3, [pc, #16]	@ (801d034 <ai_platform_network_get_error+0x14>)
 801d022:	6802      	ldr	r2, [r0, #0]
 801d024:	4393      	bics	r3, r2
 801d026:	d102      	bne.n	801d02e <ai_platform_network_get_error+0xe>
 801d028:	300c      	adds	r0, #12
 801d02a:	f000 bc19 	b.w	801d860 <core_get_error>
 801d02e:	f241 0010 	movw	r0, #4112	@ 0x1010
 801d032:	4770      	bx	lr
 801d034:	a1c00100 	.word	0xa1c00100

0801d038 <ai_platform_network_set_error>:
 801d038:	b110      	cbz	r0, 801d040 <ai_platform_network_set_error+0x8>
 801d03a:	300c      	adds	r0, #12
 801d03c:	f000 bc16 	b.w	801d86c <core_set_error>
 801d040:	4770      	bx	lr
 801d042:	bf00      	nop

0801d044 <ai_platform_inputs_get>:
 801d044:	4b39      	ldr	r3, [pc, #228]	@ (801d12c <ai_platform_inputs_get+0xe8>)
 801d046:	6802      	ldr	r2, [r0, #0]
 801d048:	4393      	bics	r3, r2
 801d04a:	d163      	bne.n	801d114 <ai_platform_inputs_get+0xd0>
 801d04c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d050:	8e03      	ldrh	r3, [r0, #48]	@ 0x30
 801d052:	b085      	sub	sp, #20
 801d054:	4605      	mov	r5, r0
 801d056:	460c      	mov	r4, r1
 801d058:	2b00      	cmp	r3, #0
 801d05a:	d04e      	beq.n	801d0fa <ai_platform_inputs_get+0xb6>
 801d05c:	6b47      	ldr	r7, [r0, #52]	@ 0x34
 801d05e:	2f00      	cmp	r7, #0
 801d060:	d04b      	beq.n	801d0fa <ai_platform_inputs_get+0xb6>
 801d062:	f04f 0b00 	mov.w	fp, #0
 801d066:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801d06a:	465e      	mov	r6, fp
 801d06c:	46ba      	mov	sl, r7
 801d06e:	e016      	b.n	801d09e <ai_platform_inputs_get+0x5a>
 801d070:	9901      	ldr	r1, [sp, #4]
 801d072:	2201      	movs	r2, #1
 801d074:	507a      	str	r2, [r7, r1]
 801d076:	69a1      	ldr	r1, [r4, #24]
 801d078:	684c      	ldr	r4, [r1, #4]
 801d07a:	6028      	str	r0, [r5, #0]
 801d07c:	f04f 0201 	mov.w	r2, #1
 801d080:	752a      	strb	r2, [r5, #20]
 801d082:	6968      	ldr	r0, [r5, #20]
 801d084:	60ab      	str	r3, [r5, #8]
 801d086:	f368 201f 	bfi	r0, r8, #8, #24
 801d08a:	2300      	movs	r3, #0
 801d08c:	e9c5 3403 	strd	r3, r4, [r5, #12]
 801d090:	e9c5 0905 	strd	r0, r9, [r5, #20]
 801d094:	f8c5 c004 	str.w	ip, [r5, #4]
 801d098:	3601      	adds	r6, #1
 801d09a:	f10b 0b1c 	add.w	fp, fp, #28
 801d09e:	f8ba 3000 	ldrh.w	r3, [sl]
 801d0a2:	00f2      	lsls	r2, r6, #3
 801d0a4:	42b3      	cmp	r3, r6
 801d0a6:	9201      	str	r2, [sp, #4]
 801d0a8:	d936      	bls.n	801d118 <ai_platform_inputs_get+0xd4>
 801d0aa:	f8da 3004 	ldr.w	r3, [sl, #4]
 801d0ae:	2b00      	cmp	r3, #0
 801d0b0:	d032      	beq.n	801d118 <ai_platform_inputs_get+0xd4>
 801d0b2:	f853 4026 	ldr.w	r4, [r3, r6, lsl #2]
 801d0b6:	b37c      	cbz	r4, 801d118 <ai_platform_inputs_get+0xd4>
 801d0b8:	f8da 3008 	ldr.w	r3, [sl, #8]
 801d0bc:	69a2      	ldr	r2, [r4, #24]
 801d0be:	f8d4 900c 	ldr.w	r9, [r4, #12]
 801d0c2:	6810      	ldr	r0, [r2, #0]
 801d0c4:	e9d3 5701 	ldrd	r5, r7, [r3, #4]
 801d0c8:	68a3      	ldr	r3, [r4, #8]
 801d0ca:	f3c3 2817 	ubfx	r8, r3, #8, #24
 801d0ce:	f014 fcb7 	bl	8031a40 <ai_array_to_buffer_fmt>
 801d0d2:	69a1      	ldr	r1, [r4, #24]
 801d0d4:	eb07 03c6 	add.w	r3, r7, r6, lsl #3
 801d0d8:	f8d1 c008 	ldr.w	ip, [r1, #8]
 801d0dc:	445d      	add	r5, fp
 801d0de:	2b00      	cmp	r3, #0
 801d0e0:	d0ca      	beq.n	801d078 <ai_platform_inputs_get+0x34>
 801d0e2:	2100      	movs	r1, #0
 801d0e4:	f847 1036 	str.w	r1, [r7, r6, lsl #3]
 801d0e8:	6821      	ldr	r1, [r4, #0]
 801d0ea:	6059      	str	r1, [r3, #4]
 801d0ec:	b111      	cbz	r1, 801d0f4 <ai_platform_inputs_get+0xb0>
 801d0ee:	8849      	ldrh	r1, [r1, #2]
 801d0f0:	2900      	cmp	r1, #0
 801d0f2:	d1bd      	bne.n	801d070 <ai_platform_inputs_get+0x2c>
 801d0f4:	69a1      	ldr	r1, [r4, #24]
 801d0f6:	2300      	movs	r3, #0
 801d0f8:	e7be      	b.n	801d078 <ai_platform_inputs_get+0x34>
 801d0fa:	2218      	movs	r2, #24
 801d0fc:	2111      	movs	r1, #17
 801d0fe:	f105 000c 	add.w	r0, r5, #12
 801d102:	2600      	movs	r6, #0
 801d104:	f000 fbb2 	bl	801d86c <core_set_error>
 801d108:	4630      	mov	r0, r6
 801d10a:	b104      	cbz	r4, 801d10e <ai_platform_inputs_get+0xca>
 801d10c:	8026      	strh	r6, [r4, #0]
 801d10e:	b005      	add	sp, #20
 801d110:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d114:	2000      	movs	r0, #0
 801d116:	4770      	bx	lr
 801d118:	b2b6      	uxth	r6, r6
 801d11a:	e9dd 5402 	ldrd	r5, r4, [sp, #8]
 801d11e:	2e00      	cmp	r6, #0
 801d120:	d0eb      	beq.n	801d0fa <ai_platform_inputs_get+0xb6>
 801d122:	f8da 3008 	ldr.w	r3, [sl, #8]
 801d126:	6858      	ldr	r0, [r3, #4]
 801d128:	e7ef      	b.n	801d10a <ai_platform_inputs_get+0xc6>
 801d12a:	bf00      	nop
 801d12c:	a1c00100 	.word	0xa1c00100

0801d130 <ai_platform_outputs_get>:
 801d130:	4b37      	ldr	r3, [pc, #220]	@ (801d210 <ai_platform_outputs_get+0xe0>)
 801d132:	6802      	ldr	r2, [r0, #0]
 801d134:	4393      	bics	r3, r2
 801d136:	d169      	bne.n	801d20c <ai_platform_outputs_get+0xdc>
 801d138:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d13c:	8e03      	ldrh	r3, [r0, #48]	@ 0x30
 801d13e:	2b01      	cmp	r3, #1
 801d140:	b085      	sub	sp, #20
 801d142:	4605      	mov	r5, r0
 801d144:	460c      	mov	r4, r1
 801d146:	d94b      	bls.n	801d1e0 <ai_platform_outputs_get+0xb0>
 801d148:	6b47      	ldr	r7, [r0, #52]	@ 0x34
 801d14a:	f04f 0b00 	mov.w	fp, #0
 801d14e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801d152:	465e      	mov	r6, fp
 801d154:	46d8      	mov	r8, fp
 801d156:	46ba      	mov	sl, r7
 801d158:	e016      	b.n	801d188 <ai_platform_outputs_get+0x58>
 801d15a:	9901      	ldr	r1, [sp, #4]
 801d15c:	2201      	movs	r2, #1
 801d15e:	507a      	str	r2, [r7, r1]
 801d160:	69a9      	ldr	r1, [r5, #24]
 801d162:	684d      	ldr	r5, [r1, #4]
 801d164:	6020      	str	r0, [r4, #0]
 801d166:	f04f 0201 	mov.w	r2, #1
 801d16a:	7522      	strb	r2, [r4, #20]
 801d16c:	6960      	ldr	r0, [r4, #20]
 801d16e:	f8c4 c004 	str.w	ip, [r4, #4]
 801d172:	f369 201f 	bfi	r0, r9, #8, #24
 801d176:	e9c4 5004 	strd	r5, r0, [r4, #16]
 801d17a:	e9c4 3802 	strd	r3, r8, [r4, #8]
 801d17e:	9b00      	ldr	r3, [sp, #0]
 801d180:	61a3      	str	r3, [r4, #24]
 801d182:	3601      	adds	r6, #1
 801d184:	f10b 0b1c 	add.w	fp, fp, #28
 801d188:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 801d18c:	00f2      	lsls	r2, r6, #3
 801d18e:	42b3      	cmp	r3, r6
 801d190:	9201      	str	r2, [sp, #4]
 801d192:	d932      	bls.n	801d1fa <ai_platform_outputs_get+0xca>
 801d194:	f8da 3010 	ldr.w	r3, [sl, #16]
 801d198:	b37b      	cbz	r3, 801d1fa <ai_platform_outputs_get+0xca>
 801d19a:	f853 5026 	ldr.w	r5, [r3, r6, lsl #2]
 801d19e:	b365      	cbz	r5, 801d1fa <ai_platform_outputs_get+0xca>
 801d1a0:	f8da 3014 	ldr.w	r3, [sl, #20]
 801d1a4:	69aa      	ldr	r2, [r5, #24]
 801d1a6:	e9d3 4701 	ldrd	r4, r7, [r3, #4]
 801d1aa:	68ab      	ldr	r3, [r5, #8]
 801d1ac:	6810      	ldr	r0, [r2, #0]
 801d1ae:	f3c3 2917 	ubfx	r9, r3, #8, #24
 801d1b2:	68eb      	ldr	r3, [r5, #12]
 801d1b4:	9300      	str	r3, [sp, #0]
 801d1b6:	f014 fc43 	bl	8031a40 <ai_array_to_buffer_fmt>
 801d1ba:	69a9      	ldr	r1, [r5, #24]
 801d1bc:	eb07 03c6 	add.w	r3, r7, r6, lsl #3
 801d1c0:	f8d1 c008 	ldr.w	ip, [r1, #8]
 801d1c4:	445c      	add	r4, fp
 801d1c6:	2b00      	cmp	r3, #0
 801d1c8:	d0cb      	beq.n	801d162 <ai_platform_outputs_get+0x32>
 801d1ca:	f847 8036 	str.w	r8, [r7, r6, lsl #3]
 801d1ce:	6829      	ldr	r1, [r5, #0]
 801d1d0:	6059      	str	r1, [r3, #4]
 801d1d2:	b111      	cbz	r1, 801d1da <ai_platform_outputs_get+0xaa>
 801d1d4:	8849      	ldrh	r1, [r1, #2]
 801d1d6:	2900      	cmp	r1, #0
 801d1d8:	d1bf      	bne.n	801d15a <ai_platform_outputs_get+0x2a>
 801d1da:	69a9      	ldr	r1, [r5, #24]
 801d1dc:	2300      	movs	r3, #0
 801d1de:	e7c0      	b.n	801d162 <ai_platform_outputs_get+0x32>
 801d1e0:	2218      	movs	r2, #24
 801d1e2:	2111      	movs	r1, #17
 801d1e4:	f105 000c 	add.w	r0, r5, #12
 801d1e8:	2600      	movs	r6, #0
 801d1ea:	f000 fb3f 	bl	801d86c <core_set_error>
 801d1ee:	4630      	mov	r0, r6
 801d1f0:	b104      	cbz	r4, 801d1f4 <ai_platform_outputs_get+0xc4>
 801d1f2:	8026      	strh	r6, [r4, #0]
 801d1f4:	b005      	add	sp, #20
 801d1f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d1fa:	b2b6      	uxth	r6, r6
 801d1fc:	e9dd 5402 	ldrd	r5, r4, [sp, #8]
 801d200:	2e00      	cmp	r6, #0
 801d202:	d0ed      	beq.n	801d1e0 <ai_platform_outputs_get+0xb0>
 801d204:	f8da 3014 	ldr.w	r3, [sl, #20]
 801d208:	6858      	ldr	r0, [r3, #4]
 801d20a:	e7f1      	b.n	801d1f0 <ai_platform_outputs_get+0xc0>
 801d20c:	2000      	movs	r0, #0
 801d20e:	4770      	bx	lr
 801d210:	a1c00100 	.word	0xa1c00100

0801d214 <ai_platform_network_create>:
 801d214:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801d218:	b083      	sub	sp, #12
 801d21a:	f89d 8028 	ldrb.w	r8, [sp, #40]	@ 0x28
 801d21e:	f89d 902c 	ldrb.w	r9, [sp, #44]	@ 0x2c
 801d222:	b320      	cbz	r0, 801d26e <ai_platform_network_create+0x5a>
 801d224:	6002      	str	r2, [r0, #0]
 801d226:	4616      	mov	r6, r2
 801d228:	461f      	mov	r7, r3
 801d22a:	4604      	mov	r4, r0
 801d22c:	f000 fb16 	bl	801d85c <core_init>
 801d230:	b970      	cbnz	r0, 801d250 <ai_platform_network_create+0x3c>
 801d232:	2530      	movs	r5, #48	@ 0x30
 801d234:	2300      	movs	r3, #0
 801d236:	6023      	str	r3, [r4, #0]
 801d238:	2410      	movs	r4, #16
 801d23a:	464a      	mov	r2, r9
 801d23c:	4641      	mov	r1, r8
 801d23e:	4638      	mov	r0, r7
 801d240:	f014 fc9e 	bl	8031b80 <ai_version_get>
 801d244:	60b0      	str	r0, [r6, #8]
 801d246:	ea45 2004 	orr.w	r0, r5, r4, lsl #8
 801d24a:	b003      	add	sp, #12
 801d24c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801d250:	2200      	movs	r2, #0
 801d252:	4641      	mov	r1, r8
 801d254:	4638      	mov	r0, r7
 801d256:	f014 fc93 	bl	8031b80 <ai_version_get>
 801d25a:	2200      	movs	r2, #0
 801d25c:	4605      	mov	r5, r0
 801d25e:	2105      	movs	r1, #5
 801d260:	2001      	movs	r0, #1
 801d262:	f014 fc8d 	bl	8031b80 <ai_version_get>
 801d266:	4285      	cmp	r5, r0
 801d268:	d008      	beq.n	801d27c <ai_platform_network_create+0x68>
 801d26a:	2501      	movs	r5, #1
 801d26c:	e7e2      	b.n	801d234 <ai_platform_network_create+0x20>
 801d26e:	2510      	movs	r5, #16
 801d270:	462c      	mov	r4, r5
 801d272:	ea45 2004 	orr.w	r0, r5, r4, lsl #8
 801d276:	b003      	add	sp, #12
 801d278:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801d27c:	4b05      	ldr	r3, [pc, #20]	@ (801d294 <ai_platform_network_create+0x80>)
 801d27e:	9301      	str	r3, [sp, #4]
 801d280:	a801      	add	r0, sp, #4
 801d282:	f000 fcc3 	bl	801dc0c <ai_check_custom_types>
 801d286:	b110      	cbz	r0, 801d28e <ai_platform_network_create+0x7a>
 801d288:	2400      	movs	r4, #0
 801d28a:	4625      	mov	r5, r4
 801d28c:	e7d5      	b.n	801d23a <ai_platform_network_create+0x26>
 801d28e:	2502      	movs	r5, #2
 801d290:	e7d0      	b.n	801d234 <ai_platform_network_create+0x20>
 801d292:	bf00      	nop
 801d294:	84048403 	.word	0x84048403

0801d298 <ai_platform_network_init>:
 801d298:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801d29c:	4a48      	ldr	r2, [pc, #288]	@ (801d3c0 <ai_platform_network_init+0x128>)
 801d29e:	4604      	mov	r4, r0
 801d2a0:	6800      	ldr	r0, [r0, #0]
 801d2a2:	460b      	mov	r3, r1
 801d2a4:	ea00 0102 	and.w	r1, r0, r2
 801d2a8:	4382      	bics	r2, r0
 801d2aa:	d13b      	bne.n	801d324 <ai_platform_network_init+0x8c>
 801d2ac:	2b00      	cmp	r3, #0
 801d2ae:	d078      	beq.n	801d3a2 <ai_platform_network_init+0x10a>
 801d2b0:	4a44      	ldr	r2, [pc, #272]	@ (801d3c4 <ai_platform_network_init+0x12c>)
 801d2b2:	681d      	ldr	r5, [r3, #0]
 801d2b4:	4295      	cmp	r5, r2
 801d2b6:	d10a      	bne.n	801d2ce <ai_platform_network_init+0x36>
 801d2b8:	4288      	cmp	r0, r1
 801d2ba:	e9d3 2503 	ldrd	r2, r5, [r3, #12]
 801d2be:	e9d3 6301 	ldrd	r6, r3, [r3, #4]
 801d2c2:	d03d      	beq.n	801d340 <ai_platform_network_init+0xa8>
 801d2c4:	2303      	movs	r3, #3
 801d2c6:	6123      	str	r3, [r4, #16]
 801d2c8:	4620      	mov	r0, r4
 801d2ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801d2ce:	2101      	movs	r1, #1
 801d2d0:	4618      	mov	r0, r3
 801d2d2:	461d      	mov	r5, r3
 801d2d4:	f8d3 8004 	ldr.w	r8, [r3, #4]
 801d2d8:	f7ff fd90 	bl	801cdfc <ai_buffer_get_size>
 801d2dc:	f105 071c 	add.w	r7, r5, #28
 801d2e0:	4606      	mov	r6, r0
 801d2e2:	2101      	movs	r1, #1
 801d2e4:	4638      	mov	r0, r7
 801d2e6:	f8d5 9020 	ldr.w	r9, [r5, #32]
 801d2ea:	f7ff fd87 	bl	801cdfc <ai_buffer_get_size>
 801d2ee:	2e00      	cmp	r6, #0
 801d2f0:	bf0a      	itet	eq
 801d2f2:	4631      	moveq	r1, r6
 801d2f4:	2101      	movne	r1, #1
 801d2f6:	4635      	moveq	r5, r6
 801d2f8:	b1b0      	cbz	r0, 801d328 <ai_platform_network_init+0x90>
 801d2fa:	f1b9 0f00 	cmp.w	r9, #0
 801d2fe:	d057      	beq.n	801d3b0 <ai_platform_network_init+0x118>
 801d300:	f04f 0e01 	mov.w	lr, #1
 801d304:	f1b8 0f00 	cmp.w	r8, #0
 801d308:	d011      	beq.n	801d32e <ai_platform_network_init+0x96>
 801d30a:	4b2d      	ldr	r3, [pc, #180]	@ (801d3c0 <ai_platform_network_init+0x128>)
 801d30c:	6822      	ldr	r2, [r4, #0]
 801d30e:	429a      	cmp	r2, r3
 801d310:	d1d8      	bne.n	801d2c4 <ai_platform_network_init+0x2c>
 801d312:	8c63      	ldrh	r3, [r4, #34]	@ 0x22
 801d314:	428b      	cmp	r3, r1
 801d316:	d21b      	bcs.n	801d350 <ai_platform_network_init+0xb8>
 801d318:	2212      	movs	r2, #18
 801d31a:	2116      	movs	r1, #22
 801d31c:	f104 000c 	add.w	r0, r4, #12
 801d320:	f000 faa4 	bl	801d86c <core_set_error>
 801d324:	2000      	movs	r0, #0
 801d326:	e7d0      	b.n	801d2ca <ai_platform_network_init+0x32>
 801d328:	4607      	mov	r7, r0
 801d32a:	4686      	mov	lr, r0
 801d32c:	e7ea      	b.n	801d304 <ai_platform_network_init+0x6c>
 801d32e:	2e00      	cmp	r6, #0
 801d330:	d0eb      	beq.n	801d30a <ai_platform_network_init+0x72>
 801d332:	2212      	movs	r2, #18
 801d334:	2110      	movs	r1, #16
 801d336:	f104 000c 	add.w	r0, r4, #12
 801d33a:	f000 fa97 	bl	801d86c <core_set_error>
 801d33e:	e7f1      	b.n	801d324 <ai_platform_network_init+0x8c>
 801d340:	e9c4 6308 	strd	r6, r3, [r4, #32]
 801d344:	62e5      	str	r5, [r4, #44]	@ 0x2c
 801d346:	62a2      	str	r2, [r4, #40]	@ 0x28
 801d348:	4620      	mov	r0, r4
 801d34a:	f000 fc89 	bl	801dc60 <ai_layers_init_all>
 801d34e:	e7b9      	b.n	801d2c4 <ai_platform_network_init+0x2c>
 801d350:	b1e1      	cbz	r1, 801d38c <ai_platform_network_init+0xf4>
 801d352:	46ac      	mov	ip, r5
 801d354:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801d358:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 801d35a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801d35c:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 801d360:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 801d364:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 801d366:	f44f 3680 	mov.w	r6, #65536	@ 0x10000
 801d36a:	4573      	cmp	r3, lr
 801d36c:	6226      	str	r6, [r4, #32]
 801d36e:	d311      	bcc.n	801d394 <ai_platform_network_init+0xfc>
 801d370:	f1be 0f00 	cmp.w	lr, #0
 801d374:	d007      	beq.n	801d386 <ai_platform_network_init+0xee>
 801d376:	463e      	mov	r6, r7
 801d378:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 801d37a:	6ae5      	ldr	r5, [r4, #44]	@ 0x2c
 801d37c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801d37e:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 801d382:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 801d386:	ea4f 420e 	mov.w	r2, lr, lsl #16
 801d38a:	e7dc      	b.n	801d346 <ai_platform_network_init+0xae>
 801d38c:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 801d38e:	6221      	str	r1, [r4, #32]
 801d390:	4573      	cmp	r3, lr
 801d392:	d2ed      	bcs.n	801d370 <ai_platform_network_init+0xd8>
 801d394:	2213      	movs	r2, #19
 801d396:	2116      	movs	r1, #22
 801d398:	f104 000c 	add.w	r0, r4, #12
 801d39c:	f000 fa66 	bl	801d86c <core_set_error>
 801d3a0:	e7c0      	b.n	801d324 <ai_platform_network_init+0x8c>
 801d3a2:	2211      	movs	r2, #17
 801d3a4:	2110      	movs	r1, #16
 801d3a6:	f104 000c 	add.w	r0, r4, #12
 801d3aa:	f000 fa5f 	bl	801d86c <core_set_error>
 801d3ae:	e7b9      	b.n	801d324 <ai_platform_network_init+0x8c>
 801d3b0:	2213      	movs	r2, #19
 801d3b2:	2110      	movs	r1, #16
 801d3b4:	f104 000c 	add.w	r0, r4, #12
 801d3b8:	f000 fa58 	bl	801d86c <core_set_error>
 801d3bc:	e7b2      	b.n	801d324 <ai_platform_network_init+0x8c>
 801d3be:	bf00      	nop
 801d3c0:	a1c00100 	.word	0xa1c00100
 801d3c4:	a1facade 	.word	0xa1facade

0801d3c8 <ai_platform_network_post_init>:
 801d3c8:	4b15      	ldr	r3, [pc, #84]	@ (801d420 <ai_platform_network_post_init+0x58>)
 801d3ca:	6802      	ldr	r2, [r0, #0]
 801d3cc:	ea02 0103 	and.w	r1, r2, r3
 801d3d0:	4393      	bics	r3, r2
 801d3d2:	d123      	bne.n	801d41c <ai_platform_network_post_init+0x54>
 801d3d4:	b570      	push	{r4, r5, r6, lr}
 801d3d6:	6903      	ldr	r3, [r0, #16]
 801d3d8:	079b      	lsls	r3, r3, #30
 801d3da:	4604      	mov	r4, r0
 801d3dc:	d503      	bpl.n	801d3e6 <ai_platform_network_post_init+0x1e>
 801d3de:	428a      	cmp	r2, r1
 801d3e0:	d008      	beq.n	801d3f4 <ai_platform_network_post_init+0x2c>
 801d3e2:	2001      	movs	r0, #1
 801d3e4:	bd70      	pop	{r4, r5, r6, pc}
 801d3e6:	2210      	movs	r2, #16
 801d3e8:	2111      	movs	r1, #17
 801d3ea:	300c      	adds	r0, #12
 801d3ec:	f000 fa3e 	bl	801d86c <core_set_error>
 801d3f0:	2000      	movs	r0, #0
 801d3f2:	bd70      	pop	{r4, r5, r6, pc}
 801d3f4:	f000 fc44 	bl	801dc80 <ai_layers_post_init_all>
 801d3f8:	6c26      	ldr	r6, [r4, #64]	@ 0x40
 801d3fa:	2e00      	cmp	r6, #0
 801d3fc:	d0f1      	beq.n	801d3e2 <ai_platform_network_post_init+0x1a>
 801d3fe:	6ba5      	ldr	r5, [r4, #56]	@ 0x38
 801d400:	2d00      	cmp	r5, #0
 801d402:	d0ee      	beq.n	801d3e2 <ai_platform_network_post_init+0x1a>
 801d404:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 801d406:	4629      	mov	r1, r5
 801d408:	2000      	movs	r0, #0
 801d40a:	47b0      	blx	r6
 801d40c:	692b      	ldr	r3, [r5, #16]
 801d40e:	42ab      	cmp	r3, r5
 801d410:	d0e7      	beq.n	801d3e2 <ai_platform_network_post_init+0x1a>
 801d412:	2b00      	cmp	r3, #0
 801d414:	d0e5      	beq.n	801d3e2 <ai_platform_network_post_init+0x1a>
 801d416:	6c26      	ldr	r6, [r4, #64]	@ 0x40
 801d418:	461d      	mov	r5, r3
 801d41a:	e7f3      	b.n	801d404 <ai_platform_network_post_init+0x3c>
 801d41c:	2000      	movs	r0, #0
 801d41e:	4770      	bx	lr
 801d420:	a1c00100 	.word	0xa1c00100

0801d424 <ai_platform_network_process>:
 801d424:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d428:	4bb7      	ldr	r3, [pc, #732]	@ (801d708 <ai_platform_network_process+0x2e4>)
 801d42a:	4607      	mov	r7, r0
 801d42c:	6800      	ldr	r0, [r0, #0]
 801d42e:	4383      	bics	r3, r0
 801d430:	b085      	sub	sp, #20
 801d432:	f040 812d 	bne.w	801d690 <ai_platform_network_process+0x26c>
 801d436:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 801d438:	2b00      	cmp	r3, #0
 801d43a:	f000 811d 	beq.w	801d678 <ai_platform_network_process+0x254>
 801d43e:	693b      	ldr	r3, [r7, #16]
 801d440:	f8d7 9034 	ldr.w	r9, [r7, #52]	@ 0x34
 801d444:	f003 0303 	and.w	r3, r3, #3
 801d448:	2600      	movs	r6, #0
 801d44a:	2b03      	cmp	r3, #3
 801d44c:	61be      	str	r6, [r7, #24]
 801d44e:	f040 8129 	bne.w	801d6a4 <ai_platform_network_process+0x280>
 801d452:	2900      	cmp	r1, #0
 801d454:	f000 8116 	beq.w	801d684 <ai_platform_network_process+0x260>
 801d458:	f1b9 0f00 	cmp.w	r9, #0
 801d45c:	f000 8112 	beq.w	801d684 <ai_platform_network_process+0x260>
 801d460:	f8b9 3000 	ldrh.w	r3, [r9]
 801d464:	2b00      	cmp	r3, #0
 801d466:	f000 810d 	beq.w	801d684 <ai_platform_network_process+0x260>
 801d46a:	698b      	ldr	r3, [r1, #24]
 801d46c:	e9cd 7202 	strd	r7, r2, [sp, #8]
 801d470:	f8d3 b000 	ldr.w	fp, [r3]
 801d474:	460c      	mov	r4, r1
 801d476:	f8d9 3004 	ldr.w	r3, [r9, #4]
 801d47a:	2b00      	cmp	r3, #0
 801d47c:	d072      	beq.n	801d564 <ai_platform_network_process+0x140>
 801d47e:	f853 5026 	ldr.w	r5, [r3, r6, lsl #2]
 801d482:	2d00      	cmp	r5, #0
 801d484:	d06e      	beq.n	801d564 <ai_platform_network_process+0x140>
 801d486:	f8d9 3008 	ldr.w	r3, [r9, #8]
 801d48a:	f8d3 a000 	ldr.w	sl, [r3]
 801d48e:	0133      	lsls	r3, r6, #4
 801d490:	eb1a 1806 	adds.w	r8, sl, r6, lsl #4
 801d494:	9301      	str	r3, [sp, #4]
 801d496:	f000 81ba 	beq.w	801d80e <ai_platform_network_process+0x3ea>
 801d49a:	69ab      	ldr	r3, [r5, #24]
 801d49c:	2101      	movs	r1, #1
 801d49e:	4620      	mov	r0, r4
 801d4a0:	685f      	ldr	r7, [r3, #4]
 801d4a2:	f7ff fcab 	bl	801cdfc <ai_buffer_get_size>
 801d4a6:	4287      	cmp	r7, r0
 801d4a8:	f0c0 8103 	bcc.w	801d6b2 <ai_platform_network_process+0x28e>
 801d4ac:	68e8      	ldr	r0, [r5, #12]
 801d4ae:	69a1      	ldr	r1, [r4, #24]
 801d4b0:	68c2      	ldr	r2, [r0, #12]
 801d4b2:	68cb      	ldr	r3, [r1, #12]
 801d4b4:	429a      	cmp	r2, r3
 801d4b6:	f040 80fc 	bne.w	801d6b2 <ai_platform_network_process+0x28e>
 801d4ba:	6882      	ldr	r2, [r0, #8]
 801d4bc:	688b      	ldr	r3, [r1, #8]
 801d4be:	429a      	cmp	r2, r3
 801d4c0:	f040 80f7 	bne.w	801d6b2 <ai_platform_network_process+0x28e>
 801d4c4:	6842      	ldr	r2, [r0, #4]
 801d4c6:	684b      	ldr	r3, [r1, #4]
 801d4c8:	429a      	cmp	r2, r3
 801d4ca:	f040 80f2 	bne.w	801d6b2 <ai_platform_network_process+0x28e>
 801d4ce:	69ab      	ldr	r3, [r5, #24]
 801d4d0:	e9d3 0100 	ldrd	r0, r1, [r3]
 801d4d4:	f014 fb42 	bl	8031b5c <ai_array_get_data_byte_size>
 801d4d8:	9001      	str	r0, [sp, #4]
 801d4da:	4628      	mov	r0, r5
 801d4dc:	f014 fb56 	bl	8031b8c <get_tensor_byte_size>
 801d4e0:	9b01      	ldr	r3, [sp, #4]
 801d4e2:	4283      	cmp	r3, r0
 801d4e4:	f0c0 80e5 	bcc.w	801d6b2 <ai_platform_network_process+0x28e>
 801d4e8:	69ab      	ldr	r3, [r5, #24]
 801d4ea:	6818      	ldr	r0, [r3, #0]
 801d4ec:	f014 faa8 	bl	8031a40 <ai_array_to_buffer_fmt>
 801d4f0:	6823      	ldr	r3, [r4, #0]
 801d4f2:	4058      	eors	r0, r3
 801d4f4:	f030 437e 	bics.w	r3, r0, #4261412864	@ 0xfe000000
 801d4f8:	f040 8193 	bne.w	801d822 <ai_platform_network_process+0x3fe>
 801d4fc:	6863      	ldr	r3, [r4, #4]
 801d4fe:	2b00      	cmp	r3, #0
 801d500:	f000 8185 	beq.w	801d80e <ai_platform_network_process+0x3ea>
 801d504:	69a3      	ldr	r3, [r4, #24]
 801d506:	681b      	ldr	r3, [r3, #0]
 801d508:	2b00      	cmp	r3, #0
 801d50a:	f000 8182 	beq.w	801d812 <ai_platform_network_process+0x3ee>
 801d50e:	459b      	cmp	fp, r3
 801d510:	4628      	mov	r0, r5
 801d512:	bf38      	it	cc
 801d514:	469b      	movcc	fp, r3
 801d516:	f014 fb39 	bl	8031b8c <get_tensor_byte_size>
 801d51a:	f8c8 0008 	str.w	r0, [r8, #8]
 801d51e:	69a3      	ldr	r3, [r4, #24]
 801d520:	681b      	ldr	r3, [r3, #0]
 801d522:	fb00 f303 	mul.w	r3, r0, r3
 801d526:	f8c8 300c 	str.w	r3, [r8, #12]
 801d52a:	6861      	ldr	r1, [r4, #4]
 801d52c:	f8c8 1004 	str.w	r1, [r8, #4]
 801d530:	0132      	lsls	r2, r6, #4
 801d532:	440b      	add	r3, r1
 801d534:	f84a 3002 	str.w	r3, [sl, r2]
 801d538:	69a8      	ldr	r0, [r5, #24]
 801d53a:	6803      	ldr	r3, [r0, #0]
 801d53c:	009a      	lsls	r2, r3, #2
 801d53e:	f106 0601 	add.w	r6, r6, #1
 801d542:	f104 041c 	add.w	r4, r4, #28
 801d546:	f100 80a7 	bmi.w	801d698 <ai_platform_network_process+0x274>
 801d54a:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 801d54e:	1a9b      	subs	r3, r3, r2
 801d550:	4419      	add	r1, r3
 801d552:	6081      	str	r1, [r0, #8]
 801d554:	69ab      	ldr	r3, [r5, #24]
 801d556:	f8d8 2004 	ldr.w	r2, [r8, #4]
 801d55a:	60da      	str	r2, [r3, #12]
 801d55c:	f8b9 3000 	ldrh.w	r3, [r9]
 801d560:	42b3      	cmp	r3, r6
 801d562:	d888      	bhi.n	801d476 <ai_platform_network_process+0x52>
 801d564:	e9dd 7802 	ldrd	r7, r8, [sp, #8]
 801d568:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 801d56a:	f1b8 0f00 	cmp.w	r8, #0
 801d56e:	f000 80b5 	beq.w	801d6dc <ai_platform_network_process+0x2b8>
 801d572:	2b01      	cmp	r3, #1
 801d574:	f240 80a5 	bls.w	801d6c2 <ai_platform_network_process+0x29e>
 801d578:	f8d7 9034 	ldr.w	r9, [r7, #52]	@ 0x34
 801d57c:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 801d580:	2b00      	cmp	r3, #0
 801d582:	f000 809e 	beq.w	801d6c2 <ai_platform_network_process+0x29e>
 801d586:	4645      	mov	r5, r8
 801d588:	2600      	movs	r6, #0
 801d58a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801d58e:	2b00      	cmp	r3, #0
 801d590:	f000 80a3 	beq.w	801d6da <ai_platform_network_process+0x2b6>
 801d594:	f853 4026 	ldr.w	r4, [r3, r6, lsl #2]
 801d598:	2c00      	cmp	r4, #0
 801d59a:	f000 809e 	beq.w	801d6da <ai_platform_network_process+0x2b6>
 801d59e:	f8d9 3014 	ldr.w	r3, [r9, #20]
 801d5a2:	f8d3 a000 	ldr.w	sl, [r3]
 801d5a6:	0133      	lsls	r3, r6, #4
 801d5a8:	eb1a 1806 	adds.w	r8, sl, r6, lsl #4
 801d5ac:	9301      	str	r3, [sp, #4]
 801d5ae:	f000 8140 	beq.w	801d832 <ai_platform_network_process+0x40e>
 801d5b2:	69a3      	ldr	r3, [r4, #24]
 801d5b4:	2101      	movs	r1, #1
 801d5b6:	685b      	ldr	r3, [r3, #4]
 801d5b8:	9301      	str	r3, [sp, #4]
 801d5ba:	4628      	mov	r0, r5
 801d5bc:	f7ff fc1e 	bl	801cdfc <ai_buffer_get_size>
 801d5c0:	9b01      	ldr	r3, [sp, #4]
 801d5c2:	4283      	cmp	r3, r0
 801d5c4:	d37d      	bcc.n	801d6c2 <ai_platform_network_process+0x29e>
 801d5c6:	68e0      	ldr	r0, [r4, #12]
 801d5c8:	69a9      	ldr	r1, [r5, #24]
 801d5ca:	68c2      	ldr	r2, [r0, #12]
 801d5cc:	68cb      	ldr	r3, [r1, #12]
 801d5ce:	429a      	cmp	r2, r3
 801d5d0:	d177      	bne.n	801d6c2 <ai_platform_network_process+0x29e>
 801d5d2:	6882      	ldr	r2, [r0, #8]
 801d5d4:	688b      	ldr	r3, [r1, #8]
 801d5d6:	429a      	cmp	r2, r3
 801d5d8:	d173      	bne.n	801d6c2 <ai_platform_network_process+0x29e>
 801d5da:	6842      	ldr	r2, [r0, #4]
 801d5dc:	684b      	ldr	r3, [r1, #4]
 801d5de:	429a      	cmp	r2, r3
 801d5e0:	d16f      	bne.n	801d6c2 <ai_platform_network_process+0x29e>
 801d5e2:	69a3      	ldr	r3, [r4, #24]
 801d5e4:	e9d3 0100 	ldrd	r0, r1, [r3]
 801d5e8:	f014 fab8 	bl	8031b5c <ai_array_get_data_byte_size>
 801d5ec:	9001      	str	r0, [sp, #4]
 801d5ee:	4620      	mov	r0, r4
 801d5f0:	f014 facc 	bl	8031b8c <get_tensor_byte_size>
 801d5f4:	9b01      	ldr	r3, [sp, #4]
 801d5f6:	4283      	cmp	r3, r0
 801d5f8:	d363      	bcc.n	801d6c2 <ai_platform_network_process+0x29e>
 801d5fa:	69a3      	ldr	r3, [r4, #24]
 801d5fc:	6818      	ldr	r0, [r3, #0]
 801d5fe:	f014 fa1f 	bl	8031a40 <ai_array_to_buffer_fmt>
 801d602:	682b      	ldr	r3, [r5, #0]
 801d604:	4043      	eors	r3, r0
 801d606:	f033 437e 	bics.w	r3, r3, #4261412864	@ 0xfe000000
 801d60a:	f040 8119 	bne.w	801d840 <ai_platform_network_process+0x41c>
 801d60e:	686b      	ldr	r3, [r5, #4]
 801d610:	2b00      	cmp	r3, #0
 801d612:	f000 810e 	beq.w	801d832 <ai_platform_network_process+0x40e>
 801d616:	69ab      	ldr	r3, [r5, #24]
 801d618:	681b      	ldr	r3, [r3, #0]
 801d61a:	2b00      	cmp	r3, #0
 801d61c:	f000 8117 	beq.w	801d84e <ai_platform_network_process+0x42a>
 801d620:	459b      	cmp	fp, r3
 801d622:	4620      	mov	r0, r4
 801d624:	bf38      	it	cc
 801d626:	469b      	movcc	fp, r3
 801d628:	f014 fab0 	bl	8031b8c <get_tensor_byte_size>
 801d62c:	f8c8 0008 	str.w	r0, [r8, #8]
 801d630:	69aa      	ldr	r2, [r5, #24]
 801d632:	6812      	ldr	r2, [r2, #0]
 801d634:	4603      	mov	r3, r0
 801d636:	fb02 f303 	mul.w	r3, r2, r3
 801d63a:	f8c8 300c 	str.w	r3, [r8, #12]
 801d63e:	6869      	ldr	r1, [r5, #4]
 801d640:	f8c8 1004 	str.w	r1, [r8, #4]
 801d644:	0132      	lsls	r2, r6, #4
 801d646:	440b      	add	r3, r1
 801d648:	f84a 3002 	str.w	r3, [sl, r2]
 801d64c:	69a0      	ldr	r0, [r4, #24]
 801d64e:	6803      	ldr	r3, [r0, #0]
 801d650:	009b      	lsls	r3, r3, #2
 801d652:	f106 0601 	add.w	r6, r6, #1
 801d656:	f105 051c 	add.w	r5, r5, #28
 801d65a:	d439      	bmi.n	801d6d0 <ai_platform_network_process+0x2ac>
 801d65c:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 801d660:	1a9b      	subs	r3, r3, r2
 801d662:	4419      	add	r1, r3
 801d664:	6081      	str	r1, [r0, #8]
 801d666:	69a3      	ldr	r3, [r4, #24]
 801d668:	f8d8 2004 	ldr.w	r2, [r8, #4]
 801d66c:	60da      	str	r2, [r3, #12]
 801d66e:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 801d672:	429e      	cmp	r6, r3
 801d674:	d389      	bcc.n	801d58a <ai_platform_network_process+0x166>
 801d676:	e030      	b.n	801d6da <ai_platform_network_process+0x2b6>
 801d678:	693a      	ldr	r2, [r7, #16]
 801d67a:	61bb      	str	r3, [r7, #24]
 801d67c:	f002 0203 	and.w	r2, r2, #3
 801d680:	2a03      	cmp	r2, #3
 801d682:	d10f      	bne.n	801d6a4 <ai_platform_network_process+0x280>
 801d684:	2217      	movs	r2, #23
 801d686:	2112      	movs	r1, #18
 801d688:	f107 000c 	add.w	r0, r7, #12
 801d68c:	f000 f8ee 	bl	801d86c <core_set_error>
 801d690:	2000      	movs	r0, #0
 801d692:	b005      	add	sp, #20
 801d694:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d698:	f8b9 3000 	ldrh.w	r3, [r9]
 801d69c:	429e      	cmp	r6, r3
 801d69e:	f4ff aeea 	bcc.w	801d476 <ai_platform_network_process+0x52>
 801d6a2:	e75f      	b.n	801d564 <ai_platform_network_process+0x140>
 801d6a4:	2230      	movs	r2, #48	@ 0x30
 801d6a6:	2111      	movs	r1, #17
 801d6a8:	f107 000c 	add.w	r0, r7, #12
 801d6ac:	f000 f8de 	bl	801d86c <core_set_error>
 801d6b0:	e7ee      	b.n	801d690 <ai_platform_network_process+0x26c>
 801d6b2:	9f02      	ldr	r7, [sp, #8]
 801d6b4:	2218      	movs	r2, #24
 801d6b6:	2112      	movs	r1, #18
 801d6b8:	f107 000c 	add.w	r0, r7, #12
 801d6bc:	f000 f8d6 	bl	801d86c <core_set_error>
 801d6c0:	e7e6      	b.n	801d690 <ai_platform_network_process+0x26c>
 801d6c2:	2218      	movs	r2, #24
 801d6c4:	2113      	movs	r1, #19
 801d6c6:	f107 000c 	add.w	r0, r7, #12
 801d6ca:	f000 f8cf 	bl	801d86c <core_set_error>
 801d6ce:	e7df      	b.n	801d690 <ai_platform_network_process+0x26c>
 801d6d0:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 801d6d4:	429e      	cmp	r6, r3
 801d6d6:	f4ff af58 	bcc.w	801d58a <ai_platform_network_process+0x166>
 801d6da:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 801d6dc:	fa1f fb8b 	uxth.w	fp, fp
 801d6e0:	f8a7 b018 	strh.w	fp, [r7, #24]
 801d6e4:	2b00      	cmp	r3, #0
 801d6e6:	f000 808c 	beq.w	801d802 <ai_platform_network_process+0x3de>
 801d6ea:	2b01      	cmp	r3, #1
 801d6ec:	6b7e      	ldr	r6, [r7, #52]	@ 0x34
 801d6ee:	f000 808b 	beq.w	801d808 <ai_platform_network_process+0x3e4>
 801d6f2:	f106 080c 	add.w	r8, r6, #12
 801d6f6:	8b78      	ldrh	r0, [r7, #26]
 801d6f8:	4583      	cmp	fp, r0
 801d6fa:	d9ca      	bls.n	801d692 <ai_platform_network_process+0x26e>
 801d6fc:	4645      	mov	r5, r8
 801d6fe:	46bb      	mov	fp, r7
 801d700:	f04f 0800 	mov.w	r8, #0
 801d704:	b9ae      	cbnz	r6, 801d732 <ai_platform_network_process+0x30e>
 801d706:	e02d      	b.n	801d764 <ai_platform_network_process+0x340>
 801d708:	a1c00100 	.word	0xa1c00100
 801d70c:	68df      	ldr	r7, [r3, #12]
 801d70e:	1bc9      	subs	r1, r1, r7
 801d710:	4408      	add	r0, r1
 801d712:	6098      	str	r0, [r3, #8]
 801d714:	6993      	ldr	r3, [r2, #24]
 801d716:	6862      	ldr	r2, [r4, #4]
 801d718:	60da      	str	r2, [r3, #12]
 801d71a:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 801d71e:	f859 200a 	ldr.w	r2, [r9, sl]
 801d722:	440b      	add	r3, r1
 801d724:	4293      	cmp	r3, r2
 801d726:	bf24      	itt	cs
 801d728:	68e3      	ldrcs	r3, [r4, #12]
 801d72a:	1ad3      	subcs	r3, r2, r3
 801d72c:	6063      	str	r3, [r4, #4]
 801d72e:	f108 0801 	add.w	r8, r8, #1
 801d732:	8833      	ldrh	r3, [r6, #0]
 801d734:	4543      	cmp	r3, r8
 801d736:	ea4f 1a08 	mov.w	sl, r8, lsl #4
 801d73a:	d913      	bls.n	801d764 <ai_platform_network_process+0x340>
 801d73c:	6873      	ldr	r3, [r6, #4]
 801d73e:	b18b      	cbz	r3, 801d764 <ai_platform_network_process+0x340>
 801d740:	f853 2028 	ldr.w	r2, [r3, r8, lsl #2]
 801d744:	b172      	cbz	r2, 801d764 <ai_platform_network_process+0x340>
 801d746:	68b1      	ldr	r1, [r6, #8]
 801d748:	6993      	ldr	r3, [r2, #24]
 801d74a:	f8d1 9000 	ldr.w	r9, [r1]
 801d74e:	681f      	ldr	r7, [r3, #0]
 801d750:	6899      	ldr	r1, [r3, #8]
 801d752:	eb09 1408 	add.w	r4, r9, r8, lsl #4
 801d756:	00bf      	lsls	r7, r7, #2
 801d758:	6860      	ldr	r0, [r4, #4]
 801d75a:	d5d7      	bpl.n	801d70c <ai_platform_network_process+0x2e8>
 801d75c:	68a2      	ldr	r2, [r4, #8]
 801d75e:	f004 fc03 	bl	8021f68 <st_int8_copy>
 801d762:	e7da      	b.n	801d71a <ai_platform_network_process+0x2f6>
 801d764:	4658      	mov	r0, fp
 801d766:	f000 faa9 	bl	801dcbc <ai_layers_forward_all>
 801d76a:	2400      	movs	r4, #0
 801d76c:	b9b5      	cbnz	r5, 801d79c <ai_platform_network_process+0x378>
 801d76e:	e03b      	b.n	801d7e8 <ai_platform_network_process+0x3c4>
 801d770:	f859 300a 	ldr.w	r3, [r9, sl]
 801d774:	eb01 020c 	add.w	r2, r1, ip
 801d778:	429a      	cmp	r2, r3
 801d77a:	bf24      	itt	cs
 801d77c:	f8d8 200c 	ldrcs.w	r2, [r8, #12]
 801d780:	1a9a      	subcs	r2, r3, r2
 801d782:	f8c8 2004 	str.w	r2, [r8, #4]
 801d786:	6981      	ldr	r1, [r0, #24]
 801d788:	e9d1 3702 	ldrd	r3, r7, [r1, #8]
 801d78c:	1bdb      	subs	r3, r3, r7
 801d78e:	441a      	add	r2, r3
 801d790:	608a      	str	r2, [r1, #8]
 801d792:	6983      	ldr	r3, [r0, #24]
 801d794:	f8d8 2004 	ldr.w	r2, [r8, #4]
 801d798:	60da      	str	r2, [r3, #12]
 801d79a:	3401      	adds	r4, #1
 801d79c:	882b      	ldrh	r3, [r5, #0]
 801d79e:	42a3      	cmp	r3, r4
 801d7a0:	d922      	bls.n	801d7e8 <ai_platform_network_process+0x3c4>
 801d7a2:	686b      	ldr	r3, [r5, #4]
 801d7a4:	b303      	cbz	r3, 801d7e8 <ai_platform_network_process+0x3c4>
 801d7a6:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801d7aa:	b1e8      	cbz	r0, 801d7e8 <ai_platform_network_process+0x3c4>
 801d7ac:	68ab      	ldr	r3, [r5, #8]
 801d7ae:	6982      	ldr	r2, [r0, #24]
 801d7b0:	f8d3 9000 	ldr.w	r9, [r3]
 801d7b4:	6813      	ldr	r3, [r2, #0]
 801d7b6:	eb09 1804 	add.w	r8, r9, r4, lsl #4
 801d7ba:	009b      	lsls	r3, r3, #2
 801d7bc:	e9d8 1c01 	ldrd	r1, ip, [r8, #4]
 801d7c0:	ea4f 1a04 	mov.w	sl, r4, lsl #4
 801d7c4:	d5d4      	bpl.n	801d770 <ai_platform_network_process+0x34c>
 801d7c6:	6890      	ldr	r0, [r2, #8]
 801d7c8:	4662      	mov	r2, ip
 801d7ca:	f004 fbcd 	bl	8021f68 <st_int8_copy>
 801d7ce:	e9d8 3101 	ldrd	r3, r1, [r8, #4]
 801d7d2:	f859 200a 	ldr.w	r2, [r9, sl]
 801d7d6:	440b      	add	r3, r1
 801d7d8:	4293      	cmp	r3, r2
 801d7da:	bf24      	itt	cs
 801d7dc:	f8d8 300c 	ldrcs.w	r3, [r8, #12]
 801d7e0:	1ad3      	subcs	r3, r2, r3
 801d7e2:	f8c8 3004 	str.w	r3, [r8, #4]
 801d7e6:	e7d8      	b.n	801d79a <ai_platform_network_process+0x376>
 801d7e8:	f8bb 001a 	ldrh.w	r0, [fp, #26]
 801d7ec:	f8bb 3018 	ldrh.w	r3, [fp, #24]
 801d7f0:	3001      	adds	r0, #1
 801d7f2:	b280      	uxth	r0, r0
 801d7f4:	4283      	cmp	r3, r0
 801d7f6:	f8ab 001a 	strh.w	r0, [fp, #26]
 801d7fa:	d881      	bhi.n	801d700 <ai_platform_network_process+0x2dc>
 801d7fc:	b005      	add	sp, #20
 801d7fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d802:	461e      	mov	r6, r3
 801d804:	4698      	mov	r8, r3
 801d806:	e776      	b.n	801d6f6 <ai_platform_network_process+0x2d2>
 801d808:	f04f 0800 	mov.w	r8, #0
 801d80c:	e773      	b.n	801d6f6 <ai_platform_network_process+0x2d2>
 801d80e:	9f02      	ldr	r7, [sp, #8]
 801d810:	e738      	b.n	801d684 <ai_platform_network_process+0x260>
 801d812:	9f02      	ldr	r7, [sp, #8]
 801d814:	2221      	movs	r2, #33	@ 0x21
 801d816:	2112      	movs	r1, #18
 801d818:	f107 000c 	add.w	r0, r7, #12
 801d81c:	f000 f826 	bl	801d86c <core_set_error>
 801d820:	e736      	b.n	801d690 <ai_platform_network_process+0x26c>
 801d822:	9f02      	ldr	r7, [sp, #8]
 801d824:	2219      	movs	r2, #25
 801d826:	2112      	movs	r1, #18
 801d828:	f107 000c 	add.w	r0, r7, #12
 801d82c:	f000 f81e 	bl	801d86c <core_set_error>
 801d830:	e72e      	b.n	801d690 <ai_platform_network_process+0x26c>
 801d832:	2217      	movs	r2, #23
 801d834:	2113      	movs	r1, #19
 801d836:	f107 000c 	add.w	r0, r7, #12
 801d83a:	f000 f817 	bl	801d86c <core_set_error>
 801d83e:	e727      	b.n	801d690 <ai_platform_network_process+0x26c>
 801d840:	2219      	movs	r2, #25
 801d842:	2113      	movs	r1, #19
 801d844:	f107 000c 	add.w	r0, r7, #12
 801d848:	f000 f810 	bl	801d86c <core_set_error>
 801d84c:	e720      	b.n	801d690 <ai_platform_network_process+0x26c>
 801d84e:	2221      	movs	r2, #33	@ 0x21
 801d850:	2113      	movs	r1, #19
 801d852:	f107 000c 	add.w	r0, r7, #12
 801d856:	f000 f809 	bl	801d86c <core_set_error>
 801d85a:	e719      	b.n	801d690 <ai_platform_network_process+0x26c>

0801d85c <core_init>:
 801d85c:	2001      	movs	r0, #1
 801d85e:	4770      	bx	lr

0801d860 <core_get_error>:
 801d860:	4603      	mov	r3, r0
 801d862:	2200      	movs	r2, #0
 801d864:	6800      	ldr	r0, [r0, #0]
 801d866:	601a      	str	r2, [r3, #0]
 801d868:	4770      	bx	lr
 801d86a:	bf00      	nop

0801d86c <core_set_error>:
 801d86c:	4603      	mov	r3, r0
 801d86e:	7800      	ldrb	r0, [r0, #0]
 801d870:	b108      	cbz	r0, 801d876 <core_set_error+0xa>
 801d872:	2000      	movs	r0, #0
 801d874:	4770      	bx	lr
 801d876:	7019      	strb	r1, [r3, #0]
 801d878:	6819      	ldr	r1, [r3, #0]
 801d87a:	f362 211f 	bfi	r1, r2, #8, #24
 801d87e:	2001      	movs	r0, #1
 801d880:	6019      	str	r1, [r3, #0]
 801d882:	4770      	bx	lr

0801d884 <node_convert>:
 801d884:	6982      	ldr	r2, [r0, #24]
 801d886:	8813      	ldrh	r3, [r2, #0]
 801d888:	b90b      	cbnz	r3, 801d88e <node_convert+0xa>
 801d88a:	685b      	ldr	r3, [r3, #4]
 801d88c:	deff      	udf	#255	@ 0xff
 801d88e:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d890:	6852      	ldr	r2, [r2, #4]
 801d892:	6855      	ldr	r5, [r2, #4]
 801d894:	b083      	sub	sp, #12
 801d896:	b105      	cbz	r5, 801d89a <node_convert+0x16>
 801d898:	682d      	ldr	r5, [r5, #0]
 801d89a:	2b01      	cmp	r3, #1
 801d89c:	f000 80d6 	beq.w	801da4c <node_convert+0x1c8>
 801d8a0:	6916      	ldr	r6, [r2, #16]
 801d8a2:	b106      	cbz	r6, 801d8a6 <node_convert+0x22>
 801d8a4:	6836      	ldr	r6, [r6, #0]
 801d8a6:	68ab      	ldr	r3, [r5, #8]
 801d8a8:	0a1b      	lsrs	r3, r3, #8
 801d8aa:	f000 80b8 	beq.w	801da1e <node_convert+0x19a>
 801d8ae:	68e9      	ldr	r1, [r5, #12]
 801d8b0:	2401      	movs	r4, #1
 801d8b2:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 801d8b6:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 801d8ba:	4299      	cmp	r1, r3
 801d8bc:	fb02 f404 	mul.w	r4, r2, r4
 801d8c0:	d1f9      	bne.n	801d8b6 <node_convert+0x32>
 801d8c2:	69aa      	ldr	r2, [r5, #24]
 801d8c4:	69b7      	ldr	r7, [r6, #24]
 801d8c6:	6813      	ldr	r3, [r2, #0]
 801d8c8:	6890      	ldr	r0, [r2, #8]
 801d8ca:	f3c3 4243 	ubfx	r2, r3, #17, #4
 801d8ce:	2a01      	cmp	r2, #1
 801d8d0:	d016      	beq.n	801d900 <node_convert+0x7c>
 801d8d2:	6829      	ldr	r1, [r5, #0]
 801d8d4:	68be      	ldr	r6, [r7, #8]
 801d8d6:	15da      	asrs	r2, r3, #23
 801d8d8:	f002 0201 	and.w	r2, r2, #1
 801d8dc:	b341      	cbz	r1, 801d930 <node_convert+0xac>
 801d8de:	684d      	ldr	r5, [r1, #4]
 801d8e0:	2d00      	cmp	r5, #0
 801d8e2:	d066      	beq.n	801d9b2 <node_convert+0x12e>
 801d8e4:	884b      	ldrh	r3, [r1, #2]
 801d8e6:	2b00      	cmp	r3, #0
 801d8e8:	d146      	bne.n	801d978 <node_convert+0xf4>
 801d8ea:	2a00      	cmp	r2, #0
 801d8ec:	d063      	beq.n	801d9b6 <node_convert+0x132>
 801d8ee:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 801d8f2:	4622      	mov	r2, r4
 801d8f4:	4631      	mov	r1, r6
 801d8f6:	b003      	add	sp, #12
 801d8f8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801d8fc:	f001 b8a6 	b.w	801ea4c <forward_lite_node_convert_integer_is8of32>
 801d900:	683b      	ldr	r3, [r7, #0]
 801d902:	6835      	ldr	r5, [r6, #0]
 801d904:	15da      	asrs	r2, r3, #23
 801d906:	2d00      	cmp	r5, #0
 801d908:	d05f      	beq.n	801d9ca <node_convert+0x146>
 801d90a:	686b      	ldr	r3, [r5, #4]
 801d90c:	68b9      	ldr	r1, [r7, #8]
 801d90e:	f002 0201 	and.w	r2, r2, #1
 801d912:	2b00      	cmp	r3, #0
 801d914:	d039      	beq.n	801d98a <node_convert+0x106>
 801d916:	886d      	ldrh	r5, [r5, #2]
 801d918:	2d00      	cmp	r5, #0
 801d91a:	d03f      	beq.n	801d99c <node_convert+0x118>
 801d91c:	681d      	ldr	r5, [r3, #0]
 801d91e:	685b      	ldr	r3, [r3, #4]
 801d920:	ed95 0a00 	vldr	s0, [r5]
 801d924:	2a00      	cmp	r2, #0
 801d926:	f000 8085 	beq.w	801da34 <node_convert+0x1b0>
 801d92a:	f993 3000 	ldrsb.w	r3, [r3]
 801d92e:	e02f      	b.n	801d990 <node_convert+0x10c>
 801d930:	f3c3 11c6 	ubfx	r1, r3, #7, #7
 801d934:	f003 057f 	and.w	r5, r3, #127	@ 0x7f
 801d938:	1b4d      	subs	r5, r1, r5
 801d93a:	3540      	adds	r5, #64	@ 0x40
 801d93c:	2908      	cmp	r1, #8
 801d93e:	eba5 0502 	sub.w	r5, r5, r2
 801d942:	4631      	mov	r1, r6
 801d944:	4622      	mov	r2, r4
 801d946:	d06c      	beq.n	801da22 <node_convert+0x19e>
 801d948:	f004 f860 	bl	8021a0c <st_int16_to_f32>
 801d94c:	b195      	cbz	r5, 801d974 <node_convert+0xf0>
 801d94e:	ee07 5a90 	vmov	s15, r5
 801d952:	eeb0 0a00 	vmov.f32	s0, #0	@ 0x40000000  2.0
 801d956:	eef8 0ae7 	vcvt.f32.s32	s1, s15
 801d95a:	f018 f93b 	bl	8035bd4 <powf>
 801d95e:	b14c      	cbz	r4, 801d974 <node_convert+0xf0>
 801d960:	2300      	movs	r3, #0
 801d962:	ecf6 7a01 	vldmia	r6!, {s15}
 801d966:	3301      	adds	r3, #1
 801d968:	ee67 7a80 	vmul.f32	s15, s15, s0
 801d96c:	42a3      	cmp	r3, r4
 801d96e:	ed46 7a01 	vstr	s15, [r6, #-4]
 801d972:	d1f6      	bne.n	801d962 <node_convert+0xde>
 801d974:	b003      	add	sp, #12
 801d976:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801d978:	682b      	ldr	r3, [r5, #0]
 801d97a:	ed93 0a00 	vldr	s0, [r3]
 801d97e:	686b      	ldr	r3, [r5, #4]
 801d980:	2a00      	cmp	r2, #0
 801d982:	d051      	beq.n	801da28 <node_convert+0x1a4>
 801d984:	f993 3000 	ldrsb.w	r3, [r3]
 801d988:	e7b3      	b.n	801d8f2 <node_convert+0x6e>
 801d98a:	b14a      	cbz	r2, 801d9a0 <node_convert+0x11c>
 801d98c:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 801d990:	4622      	mov	r2, r4
 801d992:	b003      	add	sp, #12
 801d994:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801d998:	f001 b85c 	b.w	801ea54 <forward_lite_node_convert_integer_if32os8>
 801d99c:	2a00      	cmp	r2, #0
 801d99e:	d14b      	bne.n	801da38 <node_convert+0x1b4>
 801d9a0:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 801d9a4:	4613      	mov	r3, r2
 801d9a6:	4622      	mov	r2, r4
 801d9a8:	b003      	add	sp, #12
 801d9aa:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801d9ae:	f001 b853 	b.w	801ea58 <forward_lite_node_convert_integer_if32ou8>
 801d9b2:	2a00      	cmp	r2, #0
 801d9b4:	d13a      	bne.n	801da2c <node_convert+0x1a8>
 801d9b6:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 801d9ba:	4613      	mov	r3, r2
 801d9bc:	4622      	mov	r2, r4
 801d9be:	4631      	mov	r1, r6
 801d9c0:	b003      	add	sp, #12
 801d9c2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801d9c6:	f001 b843 	b.w	801ea50 <forward_lite_node_convert_integer_iu8of32>
 801d9ca:	f3c3 16c6 	ubfx	r6, r3, #7, #7
 801d9ce:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801d9d2:	1af3      	subs	r3, r6, r3
 801d9d4:	f002 0201 	and.w	r2, r2, #1
 801d9d8:	3340      	adds	r3, #64	@ 0x40
 801d9da:	1a9b      	subs	r3, r3, r2
 801d9dc:	d016      	beq.n	801da0c <node_convert+0x188>
 801d9de:	425b      	negs	r3, r3
 801d9e0:	ee00 3a90 	vmov	s1, r3
 801d9e4:	eeb0 0a00 	vmov.f32	s0, #0	@ 0x40000000  2.0
 801d9e8:	eef8 0ae0 	vcvt.f32.s32	s1, s1
 801d9ec:	9001      	str	r0, [sp, #4]
 801d9ee:	f018 f8f1 	bl	8035bd4 <powf>
 801d9f2:	9801      	ldr	r0, [sp, #4]
 801d9f4:	b154      	cbz	r4, 801da0c <node_convert+0x188>
 801d9f6:	462b      	mov	r3, r5
 801d9f8:	4602      	mov	r2, r0
 801d9fa:	ecf2 7a01 	vldmia	r2!, {s15}
 801d9fe:	3301      	adds	r3, #1
 801da00:	ee67 7a80 	vmul.f32	s15, s15, s0
 801da04:	42a3      	cmp	r3, r4
 801da06:	ed42 7a01 	vstr	s15, [r2, #-4]
 801da0a:	d1f6      	bne.n	801d9fa <node_convert+0x176>
 801da0c:	2e08      	cmp	r6, #8
 801da0e:	68b9      	ldr	r1, [r7, #8]
 801da10:	d016      	beq.n	801da40 <node_convert+0x1bc>
 801da12:	4622      	mov	r2, r4
 801da14:	b003      	add	sp, #12
 801da16:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801da1a:	f003 be53 	b.w	80216c4 <st_f32_to_int16>
 801da1e:	2401      	movs	r4, #1
 801da20:	e74f      	b.n	801d8c2 <node_convert+0x3e>
 801da22:	f004 fe93 	bl	802274c <st_int8_to_f32>
 801da26:	e791      	b.n	801d94c <node_convert+0xc8>
 801da28:	781b      	ldrb	r3, [r3, #0]
 801da2a:	e7c7      	b.n	801d9bc <node_convert+0x138>
 801da2c:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 801da30:	462b      	mov	r3, r5
 801da32:	e75e      	b.n	801d8f2 <node_convert+0x6e>
 801da34:	781b      	ldrb	r3, [r3, #0]
 801da36:	e7b6      	b.n	801d9a6 <node_convert+0x122>
 801da38:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 801da3c:	462b      	mov	r3, r5
 801da3e:	e7a7      	b.n	801d990 <node_convert+0x10c>
 801da40:	4622      	mov	r2, r4
 801da42:	b003      	add	sp, #12
 801da44:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801da48:	f003 bf02 	b.w	8021850 <st_f32_to_int8>
 801da4c:	2300      	movs	r3, #0
 801da4e:	685b      	ldr	r3, [r3, #4]
 801da50:	deff      	udf	#255	@ 0xff
 801da52:	bf00      	nop

0801da54 <node_convert_integer>:
 801da54:	6982      	ldr	r2, [r0, #24]
 801da56:	8813      	ldrh	r3, [r2, #0]
 801da58:	b90b      	cbnz	r3, 801da5e <node_convert_integer+0xa>
 801da5a:	685b      	ldr	r3, [r3, #4]
 801da5c:	deff      	udf	#255	@ 0xff
 801da5e:	b570      	push	{r4, r5, r6, lr}
 801da60:	6852      	ldr	r2, [r2, #4]
 801da62:	6855      	ldr	r5, [r2, #4]
 801da64:	b082      	sub	sp, #8
 801da66:	b105      	cbz	r5, 801da6a <node_convert_integer+0x16>
 801da68:	682d      	ldr	r5, [r5, #0]
 801da6a:	2b01      	cmp	r3, #1
 801da6c:	f000 80cb 	beq.w	801dc06 <node_convert_integer+0x1b2>
 801da70:	6916      	ldr	r6, [r2, #16]
 801da72:	b106      	cbz	r6, 801da76 <node_convert_integer+0x22>
 801da74:	6836      	ldr	r6, [r6, #0]
 801da76:	68ab      	ldr	r3, [r5, #8]
 801da78:	0a1b      	lsrs	r3, r3, #8
 801da7a:	f000 80a0 	beq.w	801dbbe <node_convert_integer+0x16a>
 801da7e:	68e8      	ldr	r0, [r5, #12]
 801da80:	2201      	movs	r2, #1
 801da82:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 801da86:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801da8a:	4298      	cmp	r0, r3
 801da8c:	fb01 f202 	mul.w	r2, r1, r2
 801da90:	d1f9      	bne.n	801da86 <node_convert_integer+0x32>
 801da92:	682b      	ldr	r3, [r5, #0]
 801da94:	6834      	ldr	r4, [r6, #0]
 801da96:	b18b      	cbz	r3, 801dabc <node_convert_integer+0x68>
 801da98:	6859      	ldr	r1, [r3, #4]
 801da9a:	b179      	cbz	r1, 801dabc <node_convert_integer+0x68>
 801da9c:	8858      	ldrh	r0, [r3, #2]
 801da9e:	b168      	cbz	r0, 801dabc <node_convert_integer+0x68>
 801daa0:	6809      	ldr	r1, [r1, #0]
 801daa2:	edd1 7a00 	vldr	s15, [r1]
 801daa6:	b16c      	cbz	r4, 801dac4 <node_convert_integer+0x70>
 801daa8:	6861      	ldr	r1, [r4, #4]
 801daaa:	b159      	cbz	r1, 801dac4 <node_convert_integer+0x70>
 801daac:	8860      	ldrh	r0, [r4, #2]
 801daae:	b148      	cbz	r0, 801dac4 <node_convert_integer+0x70>
 801dab0:	6809      	ldr	r1, [r1, #0]
 801dab2:	ed91 7a00 	vldr	s14, [r1]
 801dab6:	ee87 0a87 	vdiv.f32	s0, s15, s14
 801daba:	e007      	b.n	801dacc <node_convert_integer+0x78>
 801dabc:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 801dac0:	2c00      	cmp	r4, #0
 801dac2:	d1f1      	bne.n	801daa8 <node_convert_integer+0x54>
 801dac4:	eeb0 0a67 	vmov.f32	s0, s15
 801dac8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801dacc:	69a8      	ldr	r0, [r5, #24]
 801dace:	69b1      	ldr	r1, [r6, #24]
 801dad0:	6806      	ldr	r6, [r0, #0]
 801dad2:	680d      	ldr	r5, [r1, #0]
 801dad4:	6880      	ldr	r0, [r0, #8]
 801dad6:	6889      	ldr	r1, [r1, #8]
 801dad8:	0236      	lsls	r6, r6, #8
 801dada:	f3c5 55c0 	ubfx	r5, r5, #23, #1
 801dade:	d416      	bmi.n	801db0e <node_convert_integer+0xba>
 801dae0:	2d00      	cmp	r5, #0
 801dae2:	d137      	bne.n	801db54 <node_convert_integer+0x100>
 801dae4:	b133      	cbz	r3, 801daf4 <node_convert_integer+0xa0>
 801dae6:	685d      	ldr	r5, [r3, #4]
 801dae8:	2d00      	cmp	r5, #0
 801daea:	d078      	beq.n	801dbde <node_convert_integer+0x18a>
 801daec:	885b      	ldrh	r3, [r3, #2]
 801daee:	b10b      	cbz	r3, 801daf4 <node_convert_integer+0xa0>
 801daf0:	686b      	ldr	r3, [r5, #4]
 801daf2:	781b      	ldrb	r3, [r3, #0]
 801daf4:	b134      	cbz	r4, 801db04 <node_convert_integer+0xb0>
 801daf6:	6865      	ldr	r5, [r4, #4]
 801daf8:	2d00      	cmp	r5, #0
 801dafa:	d06a      	beq.n	801dbd2 <node_convert_integer+0x17e>
 801dafc:	8864      	ldrh	r4, [r4, #2]
 801dafe:	b10c      	cbz	r4, 801db04 <node_convert_integer+0xb0>
 801db00:	686c      	ldr	r4, [r5, #4]
 801db02:	7824      	ldrb	r4, [r4, #0]
 801db04:	9400      	str	r4, [sp, #0]
 801db06:	f000 ffb1 	bl	801ea6c <forward_lite_node_convert_integer_iu8ou8>
 801db0a:	b002      	add	sp, #8
 801db0c:	bd70      	pop	{r4, r5, r6, pc}
 801db0e:	b1b5      	cbz	r5, 801db3e <node_convert_integer+0xea>
 801db10:	b13b      	cbz	r3, 801db22 <node_convert_integer+0xce>
 801db12:	685d      	ldr	r5, [r3, #4]
 801db14:	2d00      	cmp	r5, #0
 801db16:	d05e      	beq.n	801dbd6 <node_convert_integer+0x182>
 801db18:	885b      	ldrh	r3, [r3, #2]
 801db1a:	b113      	cbz	r3, 801db22 <node_convert_integer+0xce>
 801db1c:	686b      	ldr	r3, [r5, #4]
 801db1e:	f993 3000 	ldrsb.w	r3, [r3]
 801db22:	b13c      	cbz	r4, 801db34 <node_convert_integer+0xe0>
 801db24:	6865      	ldr	r5, [r4, #4]
 801db26:	2d00      	cmp	r5, #0
 801db28:	d05f      	beq.n	801dbea <node_convert_integer+0x196>
 801db2a:	8864      	ldrh	r4, [r4, #2]
 801db2c:	b114      	cbz	r4, 801db34 <node_convert_integer+0xe0>
 801db2e:	686c      	ldr	r4, [r5, #4]
 801db30:	f994 4000 	ldrsb.w	r4, [r4]
 801db34:	9400      	str	r4, [sp, #0]
 801db36:	f000 ff91 	bl	801ea5c <forward_lite_node_convert_integer_is8os8>
 801db3a:	b002      	add	sp, #8
 801db3c:	bd70      	pop	{r4, r5, r6, pc}
 801db3e:	b34b      	cbz	r3, 801db94 <node_convert_integer+0x140>
 801db40:	685d      	ldr	r5, [r3, #4]
 801db42:	2d00      	cmp	r5, #0
 801db44:	d040      	beq.n	801dbc8 <node_convert_integer+0x174>
 801db46:	885b      	ldrh	r3, [r3, #2]
 801db48:	b323      	cbz	r3, 801db94 <node_convert_integer+0x140>
 801db4a:	686b      	ldr	r3, [r5, #4]
 801db4c:	f993 3000 	ldrsb.w	r3, [r3]
 801db50:	bb0c      	cbnz	r4, 801db96 <node_convert_integer+0x142>
 801db52:	e026      	b.n	801dba2 <node_convert_integer+0x14e>
 801db54:	b143      	cbz	r3, 801db68 <node_convert_integer+0x114>
 801db56:	685d      	ldr	r5, [r3, #4]
 801db58:	2d00      	cmp	r5, #0
 801db5a:	d032      	beq.n	801dbc2 <node_convert_integer+0x16e>
 801db5c:	885b      	ldrh	r3, [r3, #2]
 801db5e:	b11b      	cbz	r3, 801db68 <node_convert_integer+0x114>
 801db60:	686b      	ldr	r3, [r5, #4]
 801db62:	781b      	ldrb	r3, [r3, #0]
 801db64:	b90c      	cbnz	r4, 801db6a <node_convert_integer+0x116>
 801db66:	e007      	b.n	801db78 <node_convert_integer+0x124>
 801db68:	b364      	cbz	r4, 801dbc4 <node_convert_integer+0x170>
 801db6a:	6865      	ldr	r5, [r4, #4]
 801db6c:	b37d      	cbz	r5, 801dbce <node_convert_integer+0x17a>
 801db6e:	8864      	ldrh	r4, [r4, #2]
 801db70:	b114      	cbz	r4, 801db78 <node_convert_integer+0x124>
 801db72:	686c      	ldr	r4, [r5, #4]
 801db74:	f994 4000 	ldrsb.w	r4, [r4]
 801db78:	eef4 7a47 	vcmp.f32	s15, s14
 801db7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801db80:	d103      	bne.n	801db8a <node_convert_integer+0x136>
 801db82:	f104 0580 	add.w	r5, r4, #128	@ 0x80
 801db86:	42ab      	cmp	r3, r5
 801db88:	d039      	beq.n	801dbfe <node_convert_integer+0x1aa>
 801db8a:	9400      	str	r4, [sp, #0]
 801db8c:	f000 ff76 	bl	801ea7c <forward_lite_node_convert_integer_iu8os8>
 801db90:	b002      	add	sp, #8
 801db92:	bd70      	pop	{r4, r5, r6, pc}
 801db94:	b1cc      	cbz	r4, 801dbca <node_convert_integer+0x176>
 801db96:	6865      	ldr	r5, [r4, #4]
 801db98:	b32d      	cbz	r5, 801dbe6 <node_convert_integer+0x192>
 801db9a:	8864      	ldrh	r4, [r4, #2]
 801db9c:	b10c      	cbz	r4, 801dba2 <node_convert_integer+0x14e>
 801db9e:	686c      	ldr	r4, [r5, #4]
 801dba0:	7824      	ldrb	r4, [r4, #0]
 801dba2:	eef4 7a47 	vcmp.f32	s15, s14
 801dba6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801dbaa:	d103      	bne.n	801dbb4 <node_convert_integer+0x160>
 801dbac:	f103 0580 	add.w	r5, r3, #128	@ 0x80
 801dbb0:	42a5      	cmp	r5, r4
 801dbb2:	d020      	beq.n	801dbf6 <node_convert_integer+0x1a2>
 801dbb4:	9400      	str	r4, [sp, #0]
 801dbb6:	f000 ff6b 	bl	801ea90 <forward_lite_node_convert_integer_is8ou8>
 801dbba:	b002      	add	sp, #8
 801dbbc:	bd70      	pop	{r4, r5, r6, pc}
 801dbbe:	2201      	movs	r2, #1
 801dbc0:	e767      	b.n	801da92 <node_convert_integer+0x3e>
 801dbc2:	b9a4      	cbnz	r4, 801dbee <node_convert_integer+0x19a>
 801dbc4:	4623      	mov	r3, r4
 801dbc6:	e7e0      	b.n	801db8a <node_convert_integer+0x136>
 801dbc8:	b99c      	cbnz	r4, 801dbf2 <node_convert_integer+0x19e>
 801dbca:	4623      	mov	r3, r4
 801dbcc:	e7f2      	b.n	801dbb4 <node_convert_integer+0x160>
 801dbce:	462c      	mov	r4, r5
 801dbd0:	e7d2      	b.n	801db78 <node_convert_integer+0x124>
 801dbd2:	462c      	mov	r4, r5
 801dbd4:	e796      	b.n	801db04 <node_convert_integer+0xb0>
 801dbd6:	462b      	mov	r3, r5
 801dbd8:	2c00      	cmp	r4, #0
 801dbda:	d1a3      	bne.n	801db24 <node_convert_integer+0xd0>
 801dbdc:	e7aa      	b.n	801db34 <node_convert_integer+0xe0>
 801dbde:	462b      	mov	r3, r5
 801dbe0:	2c00      	cmp	r4, #0
 801dbe2:	d188      	bne.n	801daf6 <node_convert_integer+0xa2>
 801dbe4:	e78e      	b.n	801db04 <node_convert_integer+0xb0>
 801dbe6:	462c      	mov	r4, r5
 801dbe8:	e7db      	b.n	801dba2 <node_convert_integer+0x14e>
 801dbea:	462c      	mov	r4, r5
 801dbec:	e7a2      	b.n	801db34 <node_convert_integer+0xe0>
 801dbee:	462b      	mov	r3, r5
 801dbf0:	e7bb      	b.n	801db6a <node_convert_integer+0x116>
 801dbf2:	462b      	mov	r3, r5
 801dbf4:	e7cf      	b.n	801db96 <node_convert_integer+0x142>
 801dbf6:	9400      	str	r4, [sp, #0]
 801dbf8:	f000 ff52 	bl	801eaa0 <forward_lite_node_convert_integer_is8ou8_fast>
 801dbfc:	e785      	b.n	801db0a <node_convert_integer+0xb6>
 801dbfe:	9400      	str	r4, [sp, #0]
 801dc00:	f000 ff44 	bl	801ea8c <forward_lite_node_convert_integer_iu8os8_fast>
 801dc04:	e781      	b.n	801db0a <node_convert_integer+0xb6>
 801dc06:	2300      	movs	r3, #0
 801dc08:	685b      	ldr	r3, [r3, #4]
 801dc0a:	deff      	udf	#255	@ 0xff

0801dc0c <ai_check_custom_types>:
 801dc0c:	b082      	sub	sp, #8
 801dc0e:	4b13      	ldr	r3, [pc, #76]	@ (801dc5c <ai_check_custom_types+0x50>)
 801dc10:	9301      	str	r3, [sp, #4]
 801dc12:	b118      	cbz	r0, 801dc1c <ai_check_custom_types+0x10>
 801dc14:	7803      	ldrb	r3, [r0, #0]
 801dc16:	2b03      	cmp	r3, #3
 801dc18:	d002      	beq.n	801dc20 <ai_check_custom_types+0x14>
 801dc1a:	2000      	movs	r0, #0
 801dc1c:	b002      	add	sp, #8
 801dc1e:	4770      	bx	lr
 801dc20:	f89d 2004 	ldrb.w	r2, [sp, #4]
 801dc24:	4293      	cmp	r3, r2
 801dc26:	d004      	beq.n	801dc32 <ai_check_custom_types+0x26>
 801dc28:	2001      	movs	r0, #1
 801dc2a:	f080 0001 	eor.w	r0, r0, #1
 801dc2e:	b002      	add	sp, #8
 801dc30:	4770      	bx	lr
 801dc32:	7842      	ldrb	r2, [r0, #1]
 801dc34:	f89d 3005 	ldrb.w	r3, [sp, #5]
 801dc38:	429a      	cmp	r2, r3
 801dc3a:	f100 0001 	add.w	r0, r0, #1
 801dc3e:	d1f3      	bne.n	801dc28 <ai_check_custom_types+0x1c>
 801dc40:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 801dc44:	f89d 3006 	ldrb.w	r3, [sp, #6]
 801dc48:	429a      	cmp	r2, r3
 801dc4a:	d1ed      	bne.n	801dc28 <ai_check_custom_types+0x1c>
 801dc4c:	7842      	ldrb	r2, [r0, #1]
 801dc4e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 801dc52:	429a      	cmp	r2, r3
 801dc54:	d1e8      	bne.n	801dc28 <ai_check_custom_types+0x1c>
 801dc56:	2000      	movs	r0, #0
 801dc58:	e7e7      	b.n	801dc2a <ai_check_custom_types+0x1e>
 801dc5a:	bf00      	nop
 801dc5c:	84048403 	.word	0x84048403

0801dc60 <ai_layers_init_all>:
 801dc60:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 801dc62:	4601      	mov	r1, r0
 801dc64:	b153      	cbz	r3, 801dc7c <ai_layers_init_all+0x1c>
 801dc66:	2000      	movs	r0, #0
 801dc68:	461a      	mov	r2, r3
 801dc6a:	60d9      	str	r1, [r3, #12]
 801dc6c:	691b      	ldr	r3, [r3, #16]
 801dc6e:	4293      	cmp	r3, r2
 801dc70:	f100 0001 	add.w	r0, r0, #1
 801dc74:	d003      	beq.n	801dc7e <ai_layers_init_all+0x1e>
 801dc76:	2b00      	cmp	r3, #0
 801dc78:	d1f6      	bne.n	801dc68 <ai_layers_init_all+0x8>
 801dc7a:	4770      	bx	lr
 801dc7c:	4618      	mov	r0, r3
 801dc7e:	4770      	bx	lr

0801dc80 <ai_layers_post_init_all>:
 801dc80:	b538      	push	{r3, r4, r5, lr}
 801dc82:	6b84      	ldr	r4, [r0, #56]	@ 0x38
 801dc84:	b1b4      	cbz	r4, 801dcb4 <ai_layers_post_init_all+0x34>
 801dc86:	6863      	ldr	r3, [r4, #4]
 801dc88:	07db      	lsls	r3, r3, #31
 801dc8a:	f04f 0500 	mov.w	r5, #0
 801dc8e:	d504      	bpl.n	801dc9a <ai_layers_post_init_all+0x1a>
 801dc90:	6a23      	ldr	r3, [r4, #32]
 801dc92:	4620      	mov	r0, r4
 801dc94:	b10b      	cbz	r3, 801dc9a <ai_layers_post_init_all+0x1a>
 801dc96:	4798      	blx	r3
 801dc98:	3501      	adds	r5, #1
 801dc9a:	6923      	ldr	r3, [r4, #16]
 801dc9c:	42a3      	cmp	r3, r4
 801dc9e:	d007      	beq.n	801dcb0 <ai_layers_post_init_all+0x30>
 801dca0:	b133      	cbz	r3, 801dcb0 <ai_layers_post_init_all+0x30>
 801dca2:	461c      	mov	r4, r3
 801dca4:	6863      	ldr	r3, [r4, #4]
 801dca6:	07db      	lsls	r3, r3, #31
 801dca8:	d4f2      	bmi.n	801dc90 <ai_layers_post_init_all+0x10>
 801dcaa:	6923      	ldr	r3, [r4, #16]
 801dcac:	42a3      	cmp	r3, r4
 801dcae:	d1f7      	bne.n	801dca0 <ai_layers_post_init_all+0x20>
 801dcb0:	4628      	mov	r0, r5
 801dcb2:	bd38      	pop	{r3, r4, r5, pc}
 801dcb4:	4625      	mov	r5, r4
 801dcb6:	4628      	mov	r0, r5
 801dcb8:	bd38      	pop	{r3, r4, r5, pc}
 801dcba:	bf00      	nop

0801dcbc <ai_layers_forward_all>:
 801dcbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801dcc0:	f8d0 8040 	ldr.w	r8, [r0, #64]	@ 0x40
 801dcc4:	6b85      	ldr	r5, [r0, #56]	@ 0x38
 801dcc6:	63c5      	str	r5, [r0, #60]	@ 0x3c
 801dcc8:	4604      	mov	r4, r0
 801dcca:	f1b8 0f00 	cmp.w	r8, #0
 801dcce:	d02a      	beq.n	801dd26 <ai_layers_forward_all+0x6a>
 801dcd0:	b32d      	cbz	r5, 801dd1e <ai_layers_forward_all+0x62>
 801dcd2:	6c42      	ldr	r2, [r0, #68]	@ 0x44
 801dcd4:	4629      	mov	r1, r5
 801dcd6:	2001      	movs	r0, #1
 801dcd8:	47c0      	blx	r8
 801dcda:	6be6      	ldr	r6, [r4, #60]	@ 0x3c
 801dcdc:	b1fe      	cbz	r6, 801dd1e <ai_layers_forward_all+0x62>
 801dcde:	2700      	movs	r7, #0
 801dce0:	4631      	mov	r1, r6
 801dce2:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 801dce4:	2002      	movs	r0, #2
 801dce6:	47c0      	blx	r8
 801dce8:	6be5      	ldr	r5, [r4, #60]	@ 0x3c
 801dcea:	4628      	mov	r0, r5
 801dcec:	696b      	ldr	r3, [r5, #20]
 801dcee:	4798      	blx	r3
 801dcf0:	692e      	ldr	r6, [r5, #16]
 801dcf2:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 801dcf4:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
 801dcf6:	42b5      	cmp	r5, r6
 801dcf8:	f04f 0003 	mov.w	r0, #3
 801dcfc:	d007      	beq.n	801dd0e <ai_layers_forward_all+0x52>
 801dcfe:	47c0      	blx	r8
 801dd00:	3701      	adds	r7, #1
 801dd02:	63e6      	str	r6, [r4, #60]	@ 0x3c
 801dd04:	2e00      	cmp	r6, #0
 801dd06:	d1eb      	bne.n	801dce0 <ai_layers_forward_all+0x24>
 801dd08:	4638      	mov	r0, r7
 801dd0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801dd0e:	2003      	movs	r0, #3
 801dd10:	47c0      	blx	r8
 801dd12:	2300      	movs	r3, #0
 801dd14:	3701      	adds	r7, #1
 801dd16:	63e3      	str	r3, [r4, #60]	@ 0x3c
 801dd18:	4638      	mov	r0, r7
 801dd1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801dd1e:	2700      	movs	r7, #0
 801dd20:	4638      	mov	r0, r7
 801dd22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801dd26:	2d00      	cmp	r5, #0
 801dd28:	d0f9      	beq.n	801dd1e <ai_layers_forward_all+0x62>
 801dd2a:	4647      	mov	r7, r8
 801dd2c:	696b      	ldr	r3, [r5, #20]
 801dd2e:	4628      	mov	r0, r5
 801dd30:	4798      	blx	r3
 801dd32:	462b      	mov	r3, r5
 801dd34:	692d      	ldr	r5, [r5, #16]
 801dd36:	429d      	cmp	r5, r3
 801dd38:	d004      	beq.n	801dd44 <ai_layers_forward_all+0x88>
 801dd3a:	63e5      	str	r5, [r4, #60]	@ 0x3c
 801dd3c:	3701      	adds	r7, #1
 801dd3e:	2d00      	cmp	r5, #0
 801dd40:	d1f4      	bne.n	801dd2c <ai_layers_forward_all+0x70>
 801dd42:	e7e1      	b.n	801dd08 <ai_layers_forward_all+0x4c>
 801dd44:	2300      	movs	r3, #0
 801dd46:	63e3      	str	r3, [r4, #60]	@ 0x3c
 801dd48:	3701      	adds	r7, #1
 801dd4a:	e7dd      	b.n	801dd08 <ai_layers_forward_all+0x4c>

0801dd4c <forward_conv2d_deep_3x3_sssa8_ch>:
 801dd4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801dd50:	ed2d 8b02 	vpush	{d8}
 801dd54:	6983      	ldr	r3, [r0, #24]
 801dd56:	881c      	ldrh	r4, [r3, #0]
 801dd58:	b097      	sub	sp, #92	@ 0x5c
 801dd5a:	b90c      	cbnz	r4, 801dd60 <forward_conv2d_deep_3x3_sssa8_ch+0x14>
 801dd5c:	6863      	ldr	r3, [r4, #4]
 801dd5e:	deff      	udf	#255	@ 0xff
 801dd60:	685d      	ldr	r5, [r3, #4]
 801dd62:	686a      	ldr	r2, [r5, #4]
 801dd64:	b102      	cbz	r2, 801dd68 <forward_conv2d_deep_3x3_sssa8_ch+0x1c>
 801dd66:	6812      	ldr	r2, [r2, #0]
 801dd68:	2c01      	cmp	r4, #1
 801dd6a:	f000 8098 	beq.w	801de9e <forward_conv2d_deep_3x3_sssa8_ch+0x152>
 801dd6e:	692b      	ldr	r3, [r5, #16]
 801dd70:	b103      	cbz	r3, 801dd74 <forward_conv2d_deep_3x3_sssa8_ch+0x28>
 801dd72:	681b      	ldr	r3, [r3, #0]
 801dd74:	2c02      	cmp	r4, #2
 801dd76:	f000 8092 	beq.w	801de9e <forward_conv2d_deep_3x3_sssa8_ch+0x152>
 801dd7a:	69ee      	ldr	r6, [r5, #28]
 801dd7c:	2e00      	cmp	r6, #0
 801dd7e:	f000 809b 	beq.w	801deb8 <forward_conv2d_deep_3x3_sssa8_ch+0x16c>
 801dd82:	8b2f      	ldrh	r7, [r5, #24]
 801dd84:	6831      	ldr	r1, [r6, #0]
 801dd86:	2f01      	cmp	r7, #1
 801dd88:	f240 8098 	bls.w	801debc <forward_conv2d_deep_3x3_sssa8_ch+0x170>
 801dd8c:	6876      	ldr	r6, [r6, #4]
 801dd8e:	2c03      	cmp	r4, #3
 801dd90:	f000 8085 	beq.w	801de9e <forward_conv2d_deep_3x3_sssa8_ch+0x152>
 801dd94:	6aac      	ldr	r4, [r5, #40]	@ 0x28
 801dd96:	6a45      	ldr	r5, [r0, #36]	@ 0x24
 801dd98:	2c00      	cmp	r4, #0
 801dd9a:	f000 8091 	beq.w	801dec0 <forward_conv2d_deep_3x3_sssa8_ch+0x174>
 801dd9e:	b105      	cbz	r5, 801dda2 <forward_conv2d_deep_3x3_sssa8_ch+0x56>
 801dda0:	6863      	ldr	r3, [r4, #4]
 801dda2:	6825      	ldr	r5, [r4, #0]
 801dda4:	69b4      	ldr	r4, [r6, #24]
 801dda6:	68de      	ldr	r6, [r3, #12]
 801dda8:	68a4      	ldr	r4, [r4, #8]
 801ddaa:	9414      	str	r4, [sp, #80]	@ 0x50
 801ddac:	68d4      	ldr	r4, [r2, #12]
 801ddae:	f8d5 c018 	ldr.w	ip, [r5, #24]
 801ddb2:	88a7      	ldrh	r7, [r4, #4]
 801ddb4:	970f      	str	r7, [sp, #60]	@ 0x3c
 801ddb6:	88b7      	ldrh	r7, [r6, #4]
 801ddb8:	f8d6 b008 	ldr.w	fp, [r6, #8]
 801ddbc:	9710      	str	r7, [sp, #64]	@ 0x40
 801ddbe:	6815      	ldr	r5, [r2, #0]
 801ddc0:	68f7      	ldr	r7, [r6, #12]
 801ddc2:	68e6      	ldr	r6, [r4, #12]
 801ddc4:	68a4      	ldr	r4, [r4, #8]
 801ddc6:	9413      	str	r4, [sp, #76]	@ 0x4c
 801ddc8:	f8dc 4008 	ldr.w	r4, [ip, #8]
 801ddcc:	9612      	str	r6, [sp, #72]	@ 0x48
 801ddce:	9415      	str	r4, [sp, #84]	@ 0x54
 801ddd0:	680e      	ldr	r6, [r1, #0]
 801ddd2:	681c      	ldr	r4, [r3, #0]
 801ddd4:	9711      	str	r7, [sp, #68]	@ 0x44
 801ddd6:	2d00      	cmp	r5, #0
 801ddd8:	d067      	beq.n	801deaa <forward_conv2d_deep_3x3_sssa8_ch+0x15e>
 801ddda:	686f      	ldr	r7, [r5, #4]
 801dddc:	2f00      	cmp	r7, #0
 801ddde:	d064      	beq.n	801deaa <forward_conv2d_deep_3x3_sssa8_ch+0x15e>
 801dde0:	f8b5 e002 	ldrh.w	lr, [r5, #2]
 801dde4:	f1be 0f00 	cmp.w	lr, #0
 801dde8:	d05f      	beq.n	801deaa <forward_conv2d_deep_3x3_sssa8_ch+0x15e>
 801ddea:	683f      	ldr	r7, [r7, #0]
 801ddec:	edd7 8a00 	vldr	s17, [r7]
 801ddf0:	2c00      	cmp	r4, #0
 801ddf2:	d057      	beq.n	801dea4 <forward_conv2d_deep_3x3_sssa8_ch+0x158>
 801ddf4:	6867      	ldr	r7, [r4, #4]
 801ddf6:	2f00      	cmp	r7, #0
 801ddf8:	d054      	beq.n	801dea4 <forward_conv2d_deep_3x3_sssa8_ch+0x158>
 801ddfa:	f8b4 e002 	ldrh.w	lr, [r4, #2]
 801ddfe:	f1be 0f00 	cmp.w	lr, #0
 801de02:	d04f      	beq.n	801dea4 <forward_conv2d_deep_3x3_sssa8_ch+0x158>
 801de04:	683f      	ldr	r7, [r7, #0]
 801de06:	ed97 8a00 	vldr	s16, [r7]
 801de0a:	699b      	ldr	r3, [r3, #24]
 801de0c:	6997      	ldr	r7, [r2, #24]
 801de0e:	6989      	ldr	r1, [r1, #24]
 801de10:	f890 9041 	ldrb.w	r9, [r0, #65]	@ 0x41
 801de14:	f8d3 a008 	ldr.w	sl, [r3, #8]
 801de18:	68bf      	ldr	r7, [r7, #8]
 801de1a:	f8d1 8008 	ldr.w	r8, [r1, #8]
 801de1e:	b116      	cbz	r6, 801de26 <forward_conv2d_deep_3x3_sssa8_ch+0xda>
 801de20:	6876      	ldr	r6, [r6, #4]
 801de22:	b106      	cbz	r6, 801de26 <forward_conv2d_deep_3x3_sssa8_ch+0xda>
 801de24:	6836      	ldr	r6, [r6, #0]
 801de26:	b13d      	cbz	r5, 801de38 <forward_conv2d_deep_3x3_sssa8_ch+0xec>
 801de28:	6869      	ldr	r1, [r5, #4]
 801de2a:	2900      	cmp	r1, #0
 801de2c:	d040      	beq.n	801deb0 <forward_conv2d_deep_3x3_sssa8_ch+0x164>
 801de2e:	886d      	ldrh	r5, [r5, #2]
 801de30:	b115      	cbz	r5, 801de38 <forward_conv2d_deep_3x3_sssa8_ch+0xec>
 801de32:	6849      	ldr	r1, [r1, #4]
 801de34:	f991 5000 	ldrsb.w	r5, [r1]
 801de38:	b13c      	cbz	r4, 801de4a <forward_conv2d_deep_3x3_sssa8_ch+0xfe>
 801de3a:	6861      	ldr	r1, [r4, #4]
 801de3c:	2900      	cmp	r1, #0
 801de3e:	d039      	beq.n	801deb4 <forward_conv2d_deep_3x3_sssa8_ch+0x168>
 801de40:	8864      	ldrh	r4, [r4, #2]
 801de42:	b114      	cbz	r4, 801de4a <forward_conv2d_deep_3x3_sssa8_ch+0xfe>
 801de44:	6849      	ldr	r1, [r1, #4]
 801de46:	f991 4000 	ldrsb.w	r4, [r1]
 801de4a:	e9dc 0100 	ldrd	r0, r1, [ip]
 801de4e:	f013 fe67 	bl	8031b20 <ai_array_get_byte_size>
 801de52:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801de54:	f8bd 2048 	ldrh.w	r2, [sp, #72]	@ 0x48
 801de58:	f8bd 104c 	ldrh.w	r1, [sp, #76]	@ 0x4c
 801de5c:	9503      	str	r5, [sp, #12]
 801de5e:	e9cd 030b 	strd	r0, r3, [sp, #44]	@ 0x2c
 801de62:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801de64:	9302      	str	r3, [sp, #8]
 801de66:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801de68:	e9cd 8300 	strd	r8, r3, [sp]
 801de6c:	f8bd 3044 	ldrh.w	r3, [sp, #68]	@ 0x44
 801de70:	9309      	str	r3, [sp, #36]	@ 0x24
 801de72:	e9cd 4604 	strd	r4, r6, [sp, #16]
 801de76:	fa1f f38b 	uxth.w	r3, fp
 801de7a:	2401      	movs	r4, #1
 801de7c:	9308      	str	r3, [sp, #32]
 801de7e:	e9cd 9a06 	strd	r9, sl, [sp, #24]
 801de82:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801de84:	940a      	str	r4, [sp, #40]	@ 0x28
 801de86:	eef0 0a48 	vmov.f32	s1, s16
 801de8a:	eeb0 0a68 	vmov.f32	s0, s17
 801de8e:	4638      	mov	r0, r7
 801de90:	f001 fd7e 	bl	801f990 <forward_lite_conv2d_deep_3x3_sssa8_ch>
 801de94:	b017      	add	sp, #92	@ 0x5c
 801de96:	ecbd 8b02 	vpop	{d8}
 801de9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801de9e:	2300      	movs	r3, #0
 801dea0:	685b      	ldr	r3, [r3, #4]
 801dea2:	deff      	udf	#255	@ 0xff
 801dea4:	eeb7 8a00 	vmov.f32	s16, #112	@ 0x3f800000  1.0
 801dea8:	e7af      	b.n	801de0a <forward_conv2d_deep_3x3_sssa8_ch+0xbe>
 801deaa:	eef7 8a00 	vmov.f32	s17, #112	@ 0x3f800000  1.0
 801deae:	e79f      	b.n	801ddf0 <forward_conv2d_deep_3x3_sssa8_ch+0xa4>
 801deb0:	460d      	mov	r5, r1
 801deb2:	e7c1      	b.n	801de38 <forward_conv2d_deep_3x3_sssa8_ch+0xec>
 801deb4:	460c      	mov	r4, r1
 801deb6:	e7c8      	b.n	801de4a <forward_conv2d_deep_3x3_sssa8_ch+0xfe>
 801deb8:	4631      	mov	r1, r6
 801deba:	e768      	b.n	801dd8e <forward_conv2d_deep_3x3_sssa8_ch+0x42>
 801debc:	2600      	movs	r6, #0
 801debe:	e766      	b.n	801dd8e <forward_conv2d_deep_3x3_sssa8_ch+0x42>
 801dec0:	b90d      	cbnz	r5, 801dec6 <forward_conv2d_deep_3x3_sssa8_ch+0x17a>
 801dec2:	69ab      	ldr	r3, [r5, #24]
 801dec4:	deff      	udf	#255	@ 0xff
 801dec6:	68e3      	ldr	r3, [r4, #12]
 801dec8:	deff      	udf	#255	@ 0xff
 801deca:	bf00      	nop

0801decc <forward_conv2d_sssa8_ch>:
 801decc:	6983      	ldr	r3, [r0, #24]
 801dece:	8819      	ldrh	r1, [r3, #0]
 801ded0:	b909      	cbnz	r1, 801ded6 <forward_conv2d_sssa8_ch+0xa>
 801ded2:	684b      	ldr	r3, [r1, #4]
 801ded4:	deff      	udf	#255	@ 0xff
 801ded6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801deda:	ed2d 8b02 	vpush	{d8}
 801dede:	685c      	ldr	r4, [r3, #4]
 801dee0:	6862      	ldr	r2, [r4, #4]
 801dee2:	b0a3      	sub	sp, #140	@ 0x8c
 801dee4:	b102      	cbz	r2, 801dee8 <forward_conv2d_sssa8_ch+0x1c>
 801dee6:	6812      	ldr	r2, [r2, #0]
 801dee8:	2901      	cmp	r1, #1
 801deea:	f000 80c5 	beq.w	801e078 <forward_conv2d_sssa8_ch+0x1ac>
 801deee:	6923      	ldr	r3, [r4, #16]
 801def0:	b103      	cbz	r3, 801def4 <forward_conv2d_sssa8_ch+0x28>
 801def2:	681b      	ldr	r3, [r3, #0]
 801def4:	2902      	cmp	r1, #2
 801def6:	f000 80b6 	beq.w	801e066 <forward_conv2d_sssa8_ch+0x19a>
 801defa:	69e5      	ldr	r5, [r4, #28]
 801defc:	2d00      	cmp	r5, #0
 801defe:	f000 80b9 	beq.w	801e074 <forward_conv2d_sssa8_ch+0x1a8>
 801df02:	8b26      	ldrh	r6, [r4, #24]
 801df04:	f8d5 8000 	ldr.w	r8, [r5]
 801df08:	2e01      	cmp	r6, #1
 801df0a:	f240 80b8 	bls.w	801e07e <forward_conv2d_sssa8_ch+0x1b2>
 801df0e:	686d      	ldr	r5, [r5, #4]
 801df10:	2903      	cmp	r1, #3
 801df12:	f000 80b9 	beq.w	801e088 <forward_conv2d_sssa8_ch+0x1bc>
 801df16:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 801df18:	6a44      	ldr	r4, [r0, #36]	@ 0x24
 801df1a:	2900      	cmp	r1, #0
 801df1c:	f000 80b1 	beq.w	801e082 <forward_conv2d_sssa8_ch+0x1b6>
 801df20:	b104      	cbz	r4, 801df24 <forward_conv2d_sssa8_ch+0x58>
 801df22:	684b      	ldr	r3, [r1, #4]
 801df24:	680c      	ldr	r4, [r1, #0]
 801df26:	69a9      	ldr	r1, [r5, #24]
 801df28:	68d6      	ldr	r6, [r2, #12]
 801df2a:	68df      	ldr	r7, [r3, #12]
 801df2c:	6889      	ldr	r1, [r1, #8]
 801df2e:	9120      	str	r1, [sp, #128]	@ 0x80
 801df30:	88b1      	ldrh	r1, [r6, #4]
 801df32:	9115      	str	r1, [sp, #84]	@ 0x54
 801df34:	88b9      	ldrh	r1, [r7, #4]
 801df36:	9116      	str	r1, [sp, #88]	@ 0x58
 801df38:	68f9      	ldr	r1, [r7, #12]
 801df3a:	9117      	str	r1, [sp, #92]	@ 0x5c
 801df3c:	68b9      	ldr	r1, [r7, #8]
 801df3e:	9118      	str	r1, [sp, #96]	@ 0x60
 801df40:	e9d6 1b02 	ldrd	r1, fp, [r6, #8]
 801df44:	f8d4 c018 	ldr.w	ip, [r4, #24]
 801df48:	9119      	str	r1, [sp, #100]	@ 0x64
 801df4a:	6bc4      	ldr	r4, [r0, #60]	@ 0x3c
 801df4c:	8d01      	ldrh	r1, [r0, #40]	@ 0x28
 801df4e:	911a      	str	r1, [sp, #104]	@ 0x68
 801df50:	8d81      	ldrh	r1, [r0, #44]	@ 0x2c
 801df52:	f8d8 e00c 	ldr.w	lr, [r8, #12]
 801df56:	911b      	str	r1, [sp, #108]	@ 0x6c
 801df58:	8821      	ldrh	r1, [r4, #0]
 801df5a:	911c      	str	r1, [sp, #112]	@ 0x70
 801df5c:	88a1      	ldrh	r1, [r4, #4]
 801df5e:	911d      	str	r1, [sp, #116]	@ 0x74
 801df60:	f8de 1008 	ldr.w	r1, [lr, #8]
 801df64:	911e      	str	r1, [sp, #120]	@ 0x78
 801df66:	6815      	ldr	r5, [r2, #0]
 801df68:	f8de 1004 	ldr.w	r1, [lr, #4]
 801df6c:	911f      	str	r1, [sp, #124]	@ 0x7c
 801df6e:	f8dc 1008 	ldr.w	r1, [ip, #8]
 801df72:	681c      	ldr	r4, [r3, #0]
 801df74:	f8d8 6000 	ldr.w	r6, [r8]
 801df78:	9121      	str	r1, [sp, #132]	@ 0x84
 801df7a:	2d00      	cmp	r5, #0
 801df7c:	d070      	beq.n	801e060 <forward_conv2d_sssa8_ch+0x194>
 801df7e:	6869      	ldr	r1, [r5, #4]
 801df80:	2900      	cmp	r1, #0
 801df82:	d06d      	beq.n	801e060 <forward_conv2d_sssa8_ch+0x194>
 801df84:	886f      	ldrh	r7, [r5, #2]
 801df86:	2f00      	cmp	r7, #0
 801df88:	d06a      	beq.n	801e060 <forward_conv2d_sssa8_ch+0x194>
 801df8a:	6809      	ldr	r1, [r1, #0]
 801df8c:	edd1 8a00 	vldr	s17, [r1]
 801df90:	2c00      	cmp	r4, #0
 801df92:	d062      	beq.n	801e05a <forward_conv2d_sssa8_ch+0x18e>
 801df94:	6861      	ldr	r1, [r4, #4]
 801df96:	2900      	cmp	r1, #0
 801df98:	d05f      	beq.n	801e05a <forward_conv2d_sssa8_ch+0x18e>
 801df9a:	8867      	ldrh	r7, [r4, #2]
 801df9c:	2f00      	cmp	r7, #0
 801df9e:	d05c      	beq.n	801e05a <forward_conv2d_sssa8_ch+0x18e>
 801dfa0:	6809      	ldr	r1, [r1, #0]
 801dfa2:	ed91 8a00 	vldr	s16, [r1]
 801dfa6:	699f      	ldr	r7, [r3, #24]
 801dfa8:	6991      	ldr	r1, [r2, #24]
 801dfaa:	f8d8 3018 	ldr.w	r3, [r8, #24]
 801dfae:	f8d7 9008 	ldr.w	r9, [r7, #8]
 801dfb2:	f890 a041 	ldrb.w	sl, [r0, #65]	@ 0x41
 801dfb6:	f8d1 8008 	ldr.w	r8, [r1, #8]
 801dfba:	689f      	ldr	r7, [r3, #8]
 801dfbc:	b116      	cbz	r6, 801dfc4 <forward_conv2d_sssa8_ch+0xf8>
 801dfbe:	6876      	ldr	r6, [r6, #4]
 801dfc0:	b106      	cbz	r6, 801dfc4 <forward_conv2d_sssa8_ch+0xf8>
 801dfc2:	6836      	ldr	r6, [r6, #0]
 801dfc4:	b13d      	cbz	r5, 801dfd6 <forward_conv2d_sssa8_ch+0x10a>
 801dfc6:	6869      	ldr	r1, [r5, #4]
 801dfc8:	2900      	cmp	r1, #0
 801dfca:	d051      	beq.n	801e070 <forward_conv2d_sssa8_ch+0x1a4>
 801dfcc:	886d      	ldrh	r5, [r5, #2]
 801dfce:	b115      	cbz	r5, 801dfd6 <forward_conv2d_sssa8_ch+0x10a>
 801dfd0:	6849      	ldr	r1, [r1, #4]
 801dfd2:	f991 5000 	ldrsb.w	r5, [r1]
 801dfd6:	b13c      	cbz	r4, 801dfe8 <forward_conv2d_sssa8_ch+0x11c>
 801dfd8:	6861      	ldr	r1, [r4, #4]
 801dfda:	2900      	cmp	r1, #0
 801dfdc:	d046      	beq.n	801e06c <forward_conv2d_sssa8_ch+0x1a0>
 801dfde:	8864      	ldrh	r4, [r4, #2]
 801dfe0:	b114      	cbz	r4, 801dfe8 <forward_conv2d_sssa8_ch+0x11c>
 801dfe2:	6849      	ldr	r1, [r1, #4]
 801dfe4:	f991 4000 	ldrsb.w	r4, [r1]
 801dfe8:	e9dc 0100 	ldrd	r0, r1, [ip]
 801dfec:	f013 fd98 	bl	8031b20 <ai_array_get_byte_size>
 801dff0:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 801dff2:	9308      	str	r3, [sp, #32]
 801dff4:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 801dff6:	9307      	str	r3, [sp, #28]
 801dff8:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801dffa:	9306      	str	r3, [sp, #24]
 801dffc:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 801dffe:	9305      	str	r3, [sp, #20]
 801e000:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 801e002:	9304      	str	r3, [sp, #16]
 801e004:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801e006:	f8bd 1064 	ldrh.w	r1, [sp, #100]	@ 0x64
 801e00a:	f8cd 9034 	str.w	r9, [sp, #52]	@ 0x34
 801e00e:	e9cd 7300 	strd	r7, r3, [sp]
 801e012:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 801e014:	f8bd 707c 	ldrh.w	r7, [sp, #124]	@ 0x7c
 801e018:	9702      	str	r7, [sp, #8]
 801e01a:	e9cd 0311 	strd	r0, r3, [sp, #68]	@ 0x44
 801e01e:	f8bd 3078 	ldrh.w	r3, [sp, #120]	@ 0x78
 801e022:	9303      	str	r3, [sp, #12]
 801e024:	e9cd 5409 	strd	r5, r4, [sp, #36]	@ 0x24
 801e028:	f8bd 305c 	ldrh.w	r3, [sp, #92]	@ 0x5c
 801e02c:	f8bd 4060 	ldrh.w	r4, [sp, #96]	@ 0x60
 801e030:	930f      	str	r3, [sp, #60]	@ 0x3c
 801e032:	940e      	str	r4, [sp, #56]	@ 0x38
 801e034:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801e036:	eef0 0a48 	vmov.f32	s1, s16
 801e03a:	eeb0 0a68 	vmov.f32	s0, s17
 801e03e:	fa1f f28b 	uxth.w	r2, fp
 801e042:	4640      	mov	r0, r8
 801e044:	2401      	movs	r4, #1
 801e046:	e9cd 6a0b 	strd	r6, sl, [sp, #44]	@ 0x2c
 801e04a:	9410      	str	r4, [sp, #64]	@ 0x40
 801e04c:	f001 fd3e 	bl	801facc <forward_lite_conv2d_sssa8_ch>
 801e050:	b023      	add	sp, #140	@ 0x8c
 801e052:	ecbd 8b02 	vpop	{d8}
 801e056:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e05a:	eeb7 8a00 	vmov.f32	s16, #112	@ 0x3f800000  1.0
 801e05e:	e7a2      	b.n	801dfa6 <forward_conv2d_sssa8_ch+0xda>
 801e060:	eef7 8a00 	vmov.f32	s17, #112	@ 0x3f800000  1.0
 801e064:	e794      	b.n	801df90 <forward_conv2d_sssa8_ch+0xc4>
 801e066:	2300      	movs	r3, #0
 801e068:	685b      	ldr	r3, [r3, #4]
 801e06a:	deff      	udf	#255	@ 0xff
 801e06c:	460c      	mov	r4, r1
 801e06e:	e7bb      	b.n	801dfe8 <forward_conv2d_sssa8_ch+0x11c>
 801e070:	460d      	mov	r5, r1
 801e072:	e7b0      	b.n	801dfd6 <forward_conv2d_sssa8_ch+0x10a>
 801e074:	46a8      	mov	r8, r5
 801e076:	e74b      	b.n	801df10 <forward_conv2d_sssa8_ch+0x44>
 801e078:	2300      	movs	r3, #0
 801e07a:	685b      	ldr	r3, [r3, #4]
 801e07c:	deff      	udf	#255	@ 0xff
 801e07e:	2500      	movs	r5, #0
 801e080:	e746      	b.n	801df10 <forward_conv2d_sssa8_ch+0x44>
 801e082:	b924      	cbnz	r4, 801e08e <forward_conv2d_sssa8_ch+0x1c2>
 801e084:	69a3      	ldr	r3, [r4, #24]
 801e086:	deff      	udf	#255	@ 0xff
 801e088:	2300      	movs	r3, #0
 801e08a:	685b      	ldr	r3, [r3, #4]
 801e08c:	deff      	udf	#255	@ 0xff
 801e08e:	68cb      	ldr	r3, [r1, #12]
 801e090:	deff      	udf	#255	@ 0xff
 801e092:	bf00      	nop

0801e094 <forward_dense_integer_SSSA>:
 801e094:	6983      	ldr	r3, [r0, #24]
 801e096:	881a      	ldrh	r2, [r3, #0]
 801e098:	b90a      	cbnz	r2, 801e09e <forward_dense_integer_SSSA+0xa>
 801e09a:	6853      	ldr	r3, [r2, #4]
 801e09c:	deff      	udf	#255	@ 0xff
 801e09e:	6858      	ldr	r0, [r3, #4]
 801e0a0:	6841      	ldr	r1, [r0, #4]
 801e0a2:	b101      	cbz	r1, 801e0a6 <forward_dense_integer_SSSA+0x12>
 801e0a4:	6809      	ldr	r1, [r1, #0]
 801e0a6:	2a01      	cmp	r2, #1
 801e0a8:	f000 80d8 	beq.w	801e25c <forward_dense_integer_SSSA+0x1c8>
 801e0ac:	6903      	ldr	r3, [r0, #16]
 801e0ae:	b103      	cbz	r3, 801e0b2 <forward_dense_integer_SSSA+0x1e>
 801e0b0:	681b      	ldr	r3, [r3, #0]
 801e0b2:	2a02      	cmp	r2, #2
 801e0b4:	f000 80cf 	beq.w	801e256 <forward_dense_integer_SSSA+0x1c2>
 801e0b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e0bc:	69c4      	ldr	r4, [r0, #28]
 801e0be:	b089      	sub	sp, #36	@ 0x24
 801e0c0:	2c00      	cmp	r4, #0
 801e0c2:	f000 8099 	beq.w	801e1f8 <forward_dense_integer_SSSA+0x164>
 801e0c6:	8b05      	ldrh	r5, [r0, #24]
 801e0c8:	6827      	ldr	r7, [r4, #0]
 801e0ca:	2d01      	cmp	r5, #1
 801e0cc:	f240 80b7 	bls.w	801e23e <forward_dense_integer_SSSA+0x1aa>
 801e0d0:	6864      	ldr	r4, [r4, #4]
 801e0d2:	2a03      	cmp	r2, #3
 801e0d4:	f000 80c5 	beq.w	801e262 <forward_dense_integer_SSSA+0x1ce>
 801e0d8:	69a2      	ldr	r2, [r4, #24]
 801e0da:	68dc      	ldr	r4, [r3, #12]
 801e0dc:	6892      	ldr	r2, [r2, #8]
 801e0de:	9207      	str	r2, [sp, #28]
 801e0e0:	68ca      	ldr	r2, [r1, #12]
 801e0e2:	6a85      	ldr	r5, [r0, #40]	@ 0x28
 801e0e4:	f8b2 a004 	ldrh.w	sl, [r2, #4]
 801e0e8:	f8b4 b004 	ldrh.w	fp, [r4, #4]
 801e0ec:	e9d4 0202 	ldrd	r0, r2, [r4, #8]
 801e0f0:	fb00 f802 	mul.w	r8, r0, r2
 801e0f4:	6988      	ldr	r0, [r1, #24]
 801e0f6:	699a      	ldr	r2, [r3, #24]
 801e0f8:	b11d      	cbz	r5, 801e102 <forward_dense_integer_SSSA+0x6e>
 801e0fa:	682d      	ldr	r5, [r5, #0]
 801e0fc:	b10d      	cbz	r5, 801e102 <forward_dense_integer_SSSA+0x6e>
 801e0fe:	69ac      	ldr	r4, [r5, #24]
 801e100:	68a5      	ldr	r5, [r4, #8]
 801e102:	681c      	ldr	r4, [r3, #0]
 801e104:	680e      	ldr	r6, [r1, #0]
 801e106:	6893      	ldr	r3, [r2, #8]
 801e108:	69ba      	ldr	r2, [r7, #24]
 801e10a:	9306      	str	r3, [sp, #24]
 801e10c:	f8d0 c008 	ldr.w	ip, [r0, #8]
 801e110:	683b      	ldr	r3, [r7, #0]
 801e112:	f8d2 e008 	ldr.w	lr, [r2, #8]
 801e116:	2e00      	cmp	r6, #0
 801e118:	d043      	beq.n	801e1a2 <forward_dense_integer_SSSA+0x10e>
 801e11a:	6871      	ldr	r1, [r6, #4]
 801e11c:	2900      	cmp	r1, #0
 801e11e:	d037      	beq.n	801e190 <forward_dense_integer_SSSA+0xfc>
 801e120:	8877      	ldrh	r7, [r6, #2]
 801e122:	2f00      	cmp	r7, #0
 801e124:	d153      	bne.n	801e1ce <forward_dense_integer_SSSA+0x13a>
 801e126:	2c00      	cmp	r4, #0
 801e128:	d034      	beq.n	801e194 <forward_dense_integer_SSSA+0x100>
 801e12a:	6862      	ldr	r2, [r4, #4]
 801e12c:	4691      	mov	r9, r2
 801e12e:	2a00      	cmp	r2, #0
 801e130:	f000 8089 	beq.w	801e246 <forward_dense_integer_SSSA+0x1b2>
 801e134:	8867      	ldrh	r7, [r4, #2]
 801e136:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 801e13a:	2f00      	cmp	r7, #0
 801e13c:	d152      	bne.n	801e1e4 <forward_dense_integer_SSSA+0x150>
 801e13e:	2900      	cmp	r1, #0
 801e140:	f000 8086 	beq.w	801e250 <forward_dense_integer_SSSA+0x1bc>
 801e144:	8877      	ldrh	r7, [r6, #2]
 801e146:	2f00      	cmp	r7, #0
 801e148:	d171      	bne.n	801e22e <forward_dense_integer_SSSA+0x19a>
 801e14a:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 801e14e:	2100      	movs	r1, #0
 801e150:	2c00      	cmp	r4, #0
 801e152:	d07b      	beq.n	801e24c <forward_dense_integer_SSSA+0x1b8>
 801e154:	4691      	mov	r9, r2
 801e156:	2a00      	cmp	r2, #0
 801e158:	d073      	beq.n	801e242 <forward_dense_integer_SSSA+0x1ae>
 801e15a:	8867      	ldrh	r7, [r4, #2]
 801e15c:	2f00      	cmp	r7, #0
 801e15e:	d131      	bne.n	801e1c4 <forward_dense_integer_SSSA+0x130>
 801e160:	2b00      	cmp	r3, #0
 801e162:	f000 8081 	beq.w	801e268 <forward_dense_integer_SSSA+0x1d4>
 801e166:	685b      	ldr	r3, [r3, #4]
 801e168:	2b00      	cmp	r3, #0
 801e16a:	d07d      	beq.n	801e268 <forward_dense_integer_SSSA+0x1d4>
 801e16c:	681b      	ldr	r3, [r3, #0]
 801e16e:	9806      	ldr	r0, [sp, #24]
 801e170:	ed93 1a00 	vldr	s2, [r3]
 801e174:	9b07      	ldr	r3, [sp, #28]
 801e176:	e9cd 1700 	strd	r1, r7, [sp]
 801e17a:	e9cd 8504 	strd	r8, r5, [sp, #16]
 801e17e:	e9cd ab02 	strd	sl, fp, [sp, #8]
 801e182:	4672      	mov	r2, lr
 801e184:	4661      	mov	r1, ip
 801e186:	f000 fc8d 	bl	801eaa4 <forward_lite_dense_is8os8ws8>
 801e18a:	b009      	add	sp, #36	@ 0x24
 801e18c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e190:	2c00      	cmp	r4, #0
 801e192:	d133      	bne.n	801e1fc <forward_dense_integer_SSSA+0x168>
 801e194:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 801e198:	4621      	mov	r1, r4
 801e19a:	eef0 0a40 	vmov.f32	s1, s0
 801e19e:	460f      	mov	r7, r1
 801e1a0:	e7de      	b.n	801e160 <forward_dense_integer_SSSA+0xcc>
 801e1a2:	2c00      	cmp	r4, #0
 801e1a4:	d0f6      	beq.n	801e194 <forward_dense_integer_SSSA+0x100>
 801e1a6:	f8d4 9004 	ldr.w	r9, [r4, #4]
 801e1aa:	f1b9 0f00 	cmp.w	r9, #0
 801e1ae:	d037      	beq.n	801e220 <forward_dense_integer_SSSA+0x18c>
 801e1b0:	8861      	ldrh	r1, [r4, #2]
 801e1b2:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 801e1b6:	2900      	cmp	r1, #0
 801e1b8:	d0ef      	beq.n	801e19a <forward_dense_integer_SSSA+0x106>
 801e1ba:	f8d9 2000 	ldr.w	r2, [r9]
 801e1be:	edd2 0a00 	vldr	s1, [r2]
 801e1c2:	4631      	mov	r1, r6
 801e1c4:	f8d9 2004 	ldr.w	r2, [r9, #4]
 801e1c8:	f992 7000 	ldrsb.w	r7, [r2]
 801e1cc:	e7c8      	b.n	801e160 <forward_dense_integer_SSSA+0xcc>
 801e1ce:	680f      	ldr	r7, [r1, #0]
 801e1d0:	ed97 0a00 	vldr	s0, [r7]
 801e1d4:	b1ec      	cbz	r4, 801e212 <forward_dense_integer_SSSA+0x17e>
 801e1d6:	6862      	ldr	r2, [r4, #4]
 801e1d8:	4691      	mov	r9, r2
 801e1da:	2a00      	cmp	r2, #0
 801e1dc:	d0af      	beq.n	801e13e <forward_dense_integer_SSSA+0xaa>
 801e1de:	8867      	ldrh	r7, [r4, #2]
 801e1e0:	2f00      	cmp	r7, #0
 801e1e2:	d0ac      	beq.n	801e13e <forward_dense_integer_SSSA+0xaa>
 801e1e4:	6810      	ldr	r0, [r2, #0]
 801e1e6:	edd0 0a00 	vldr	s1, [r0]
 801e1ea:	2900      	cmp	r1, #0
 801e1ec:	d0b6      	beq.n	801e15c <forward_dense_integer_SSSA+0xc8>
 801e1ee:	8876      	ldrh	r6, [r6, #2]
 801e1f0:	b9fe      	cbnz	r6, 801e232 <forward_dense_integer_SSSA+0x19e>
 801e1f2:	4631      	mov	r1, r6
 801e1f4:	4691      	mov	r9, r2
 801e1f6:	e7ae      	b.n	801e156 <forward_dense_integer_SSSA+0xc2>
 801e1f8:	4627      	mov	r7, r4
 801e1fa:	e76a      	b.n	801e0d2 <forward_dense_integer_SSSA+0x3e>
 801e1fc:	6862      	ldr	r2, [r4, #4]
 801e1fe:	4691      	mov	r9, r2
 801e200:	2a00      	cmp	r2, #0
 801e202:	d197      	bne.n	801e134 <forward_dense_integer_SSSA+0xa0>
 801e204:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 801e208:	4611      	mov	r1, r2
 801e20a:	eef0 0a40 	vmov.f32	s1, s0
 801e20e:	4617      	mov	r7, r2
 801e210:	e7a6      	b.n	801e160 <forward_dense_integer_SSSA+0xcc>
 801e212:	684a      	ldr	r2, [r1, #4]
 801e214:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 801e218:	f992 1000 	ldrsb.w	r1, [r2]
 801e21c:	4627      	mov	r7, r4
 801e21e:	e79f      	b.n	801e160 <forward_dense_integer_SSSA+0xcc>
 801e220:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 801e224:	4649      	mov	r1, r9
 801e226:	eef0 0a40 	vmov.f32	s1, s0
 801e22a:	464f      	mov	r7, r9
 801e22c:	e798      	b.n	801e160 <forward_dense_integer_SSSA+0xcc>
 801e22e:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 801e232:	6849      	ldr	r1, [r1, #4]
 801e234:	f991 1000 	ldrsb.w	r1, [r1]
 801e238:	2c00      	cmp	r4, #0
 801e23a:	d18b      	bne.n	801e154 <forward_dense_integer_SSSA+0xc0>
 801e23c:	e006      	b.n	801e24c <forward_dense_integer_SSSA+0x1b8>
 801e23e:	2400      	movs	r4, #0
 801e240:	e747      	b.n	801e0d2 <forward_dense_integer_SSSA+0x3e>
 801e242:	4617      	mov	r7, r2
 801e244:	e78c      	b.n	801e160 <forward_dense_integer_SSSA+0xcc>
 801e246:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 801e24a:	e77e      	b.n	801e14a <forward_dense_integer_SSSA+0xb6>
 801e24c:	4627      	mov	r7, r4
 801e24e:	e787      	b.n	801e160 <forward_dense_integer_SSSA+0xcc>
 801e250:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 801e254:	e77f      	b.n	801e156 <forward_dense_integer_SSSA+0xc2>
 801e256:	2300      	movs	r3, #0
 801e258:	685b      	ldr	r3, [r3, #4]
 801e25a:	deff      	udf	#255	@ 0xff
 801e25c:	2300      	movs	r3, #0
 801e25e:	685b      	ldr	r3, [r3, #4]
 801e260:	deff      	udf	#255	@ 0xff
 801e262:	2300      	movs	r3, #0
 801e264:	685b      	ldr	r3, [r3, #4]
 801e266:	deff      	udf	#255	@ 0xff
 801e268:	2300      	movs	r3, #0
 801e26a:	681b      	ldr	r3, [r3, #0]
 801e26c:	deff      	udf	#255	@ 0xff
 801e26e:	bf00      	nop

0801e270 <forward_dw_3x3_sssa8_ch>:
 801e270:	6983      	ldr	r3, [r0, #24]
 801e272:	4601      	mov	r1, r0
 801e274:	8818      	ldrh	r0, [r3, #0]
 801e276:	b908      	cbnz	r0, 801e27c <forward_dw_3x3_sssa8_ch+0xc>
 801e278:	6843      	ldr	r3, [r0, #4]
 801e27a:	deff      	udf	#255	@ 0xff
 801e27c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e280:	ed2d 8b02 	vpush	{d8}
 801e284:	685c      	ldr	r4, [r3, #4]
 801e286:	6862      	ldr	r2, [r4, #4]
 801e288:	b097      	sub	sp, #92	@ 0x5c
 801e28a:	b102      	cbz	r2, 801e28e <forward_dw_3x3_sssa8_ch+0x1e>
 801e28c:	6812      	ldr	r2, [r2, #0]
 801e28e:	2801      	cmp	r0, #1
 801e290:	f000 80a3 	beq.w	801e3da <forward_dw_3x3_sssa8_ch+0x16a>
 801e294:	6923      	ldr	r3, [r4, #16]
 801e296:	b103      	cbz	r3, 801e29a <forward_dw_3x3_sssa8_ch+0x2a>
 801e298:	681b      	ldr	r3, [r3, #0]
 801e29a:	2802      	cmp	r0, #2
 801e29c:	f000 8094 	beq.w	801e3c8 <forward_dw_3x3_sssa8_ch+0x158>
 801e2a0:	69e5      	ldr	r5, [r4, #28]
 801e2a2:	2d00      	cmp	r5, #0
 801e2a4:	f000 8097 	beq.w	801e3d6 <forward_dw_3x3_sssa8_ch+0x166>
 801e2a8:	8b26      	ldrh	r6, [r4, #24]
 801e2aa:	f8d5 c000 	ldr.w	ip, [r5]
 801e2ae:	2e01      	cmp	r6, #1
 801e2b0:	f240 8096 	bls.w	801e3e0 <forward_dw_3x3_sssa8_ch+0x170>
 801e2b4:	686d      	ldr	r5, [r5, #4]
 801e2b6:	2803      	cmp	r0, #3
 801e2b8:	f000 8097 	beq.w	801e3ea <forward_dw_3x3_sssa8_ch+0x17a>
 801e2bc:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 801e2be:	6a4c      	ldr	r4, [r1, #36]	@ 0x24
 801e2c0:	2800      	cmp	r0, #0
 801e2c2:	f000 808f 	beq.w	801e3e4 <forward_dw_3x3_sssa8_ch+0x174>
 801e2c6:	b104      	cbz	r4, 801e2ca <forward_dw_3x3_sssa8_ch+0x5a>
 801e2c8:	6843      	ldr	r3, [r0, #4]
 801e2ca:	69ac      	ldr	r4, [r5, #24]
 801e2cc:	6800      	ldr	r0, [r0, #0]
 801e2ce:	68a4      	ldr	r4, [r4, #8]
 801e2d0:	9414      	str	r4, [sp, #80]	@ 0x50
 801e2d2:	68d4      	ldr	r4, [r2, #12]
 801e2d4:	68de      	ldr	r6, [r3, #12]
 801e2d6:	88a7      	ldrh	r7, [r4, #4]
 801e2d8:	6980      	ldr	r0, [r0, #24]
 801e2da:	6815      	ldr	r5, [r2, #0]
 801e2dc:	970f      	str	r7, [sp, #60]	@ 0x3c
 801e2de:	e9d4 4a02 	ldrd	r4, sl, [r4, #8]
 801e2e2:	e9d6 6b02 	ldrd	r6, fp, [r6, #8]
 801e2e6:	9411      	str	r4, [sp, #68]	@ 0x44
 801e2e8:	8d0c      	ldrh	r4, [r1, #40]	@ 0x28
 801e2ea:	8d89      	ldrh	r1, [r1, #44]	@ 0x2c
 801e2ec:	9113      	str	r1, [sp, #76]	@ 0x4c
 801e2ee:	6881      	ldr	r1, [r0, #8]
 801e2f0:	9610      	str	r6, [sp, #64]	@ 0x40
 801e2f2:	9412      	str	r4, [sp, #72]	@ 0x48
 801e2f4:	f8dc 6000 	ldr.w	r6, [ip]
 801e2f8:	681c      	ldr	r4, [r3, #0]
 801e2fa:	9115      	str	r1, [sp, #84]	@ 0x54
 801e2fc:	2d00      	cmp	r5, #0
 801e2fe:	d060      	beq.n	801e3c2 <forward_dw_3x3_sssa8_ch+0x152>
 801e300:	6869      	ldr	r1, [r5, #4]
 801e302:	2900      	cmp	r1, #0
 801e304:	d05d      	beq.n	801e3c2 <forward_dw_3x3_sssa8_ch+0x152>
 801e306:	886f      	ldrh	r7, [r5, #2]
 801e308:	2f00      	cmp	r7, #0
 801e30a:	d05a      	beq.n	801e3c2 <forward_dw_3x3_sssa8_ch+0x152>
 801e30c:	6809      	ldr	r1, [r1, #0]
 801e30e:	edd1 8a00 	vldr	s17, [r1]
 801e312:	2c00      	cmp	r4, #0
 801e314:	d052      	beq.n	801e3bc <forward_dw_3x3_sssa8_ch+0x14c>
 801e316:	6861      	ldr	r1, [r4, #4]
 801e318:	2900      	cmp	r1, #0
 801e31a:	d04f      	beq.n	801e3bc <forward_dw_3x3_sssa8_ch+0x14c>
 801e31c:	8867      	ldrh	r7, [r4, #2]
 801e31e:	2f00      	cmp	r7, #0
 801e320:	d04c      	beq.n	801e3bc <forward_dw_3x3_sssa8_ch+0x14c>
 801e322:	6809      	ldr	r1, [r1, #0]
 801e324:	ed91 8a00 	vldr	s16, [r1]
 801e328:	699f      	ldr	r7, [r3, #24]
 801e32a:	6991      	ldr	r1, [r2, #24]
 801e32c:	f8dc 3018 	ldr.w	r3, [ip, #24]
 801e330:	f8d7 9008 	ldr.w	r9, [r7, #8]
 801e334:	f8d3 8008 	ldr.w	r8, [r3, #8]
 801e338:	688f      	ldr	r7, [r1, #8]
 801e33a:	b116      	cbz	r6, 801e342 <forward_dw_3x3_sssa8_ch+0xd2>
 801e33c:	6876      	ldr	r6, [r6, #4]
 801e33e:	b106      	cbz	r6, 801e342 <forward_dw_3x3_sssa8_ch+0xd2>
 801e340:	6836      	ldr	r6, [r6, #0]
 801e342:	b13d      	cbz	r5, 801e354 <forward_dw_3x3_sssa8_ch+0xe4>
 801e344:	6869      	ldr	r1, [r5, #4]
 801e346:	2900      	cmp	r1, #0
 801e348:	d043      	beq.n	801e3d2 <forward_dw_3x3_sssa8_ch+0x162>
 801e34a:	886d      	ldrh	r5, [r5, #2]
 801e34c:	b115      	cbz	r5, 801e354 <forward_dw_3x3_sssa8_ch+0xe4>
 801e34e:	6849      	ldr	r1, [r1, #4]
 801e350:	f991 5000 	ldrsb.w	r5, [r1]
 801e354:	b13c      	cbz	r4, 801e366 <forward_dw_3x3_sssa8_ch+0xf6>
 801e356:	6861      	ldr	r1, [r4, #4]
 801e358:	2900      	cmp	r1, #0
 801e35a:	d038      	beq.n	801e3ce <forward_dw_3x3_sssa8_ch+0x15e>
 801e35c:	8864      	ldrh	r4, [r4, #2]
 801e35e:	b114      	cbz	r4, 801e366 <forward_dw_3x3_sssa8_ch+0xf6>
 801e360:	6849      	ldr	r1, [r1, #4]
 801e362:	f991 4000 	ldrsb.w	r4, [r1]
 801e366:	e9d0 0100 	ldrd	r0, r1, [r0]
 801e36a:	f013 fbd9 	bl	8031b20 <ai_array_get_byte_size>
 801e36e:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801e370:	f8bd 1044 	ldrh.w	r1, [sp, #68]	@ 0x44
 801e374:	e9cd 030b 	strd	r0, r3, [sp, #44]	@ 0x2c
 801e378:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801e37a:	9303      	str	r3, [sp, #12]
 801e37c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801e37e:	9302      	str	r3, [sp, #8]
 801e380:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801e382:	e9cd 8300 	strd	r8, r3, [sp]
 801e386:	fa1f f38b 	uxth.w	r3, fp
 801e38a:	e9cd 5404 	strd	r5, r4, [sp, #16]
 801e38e:	9309      	str	r3, [sp, #36]	@ 0x24
 801e390:	2400      	movs	r4, #0
 801e392:	f8bd 3040 	ldrh.w	r3, [sp, #64]	@ 0x40
 801e396:	9308      	str	r3, [sp, #32]
 801e398:	e9cd 6906 	strd	r6, r9, [sp, #24]
 801e39c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801e39e:	940a      	str	r4, [sp, #40]	@ 0x28
 801e3a0:	eef0 0a48 	vmov.f32	s1, s16
 801e3a4:	eeb0 0a68 	vmov.f32	s0, s17
 801e3a8:	fa1f f28a 	uxth.w	r2, sl
 801e3ac:	4638      	mov	r0, r7
 801e3ae:	f000 fbe1 	bl	801eb74 <forward_lite_dw_3x3_sssa8_ch>
 801e3b2:	b017      	add	sp, #92	@ 0x5c
 801e3b4:	ecbd 8b02 	vpop	{d8}
 801e3b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e3bc:	eeb7 8a00 	vmov.f32	s16, #112	@ 0x3f800000  1.0
 801e3c0:	e7b2      	b.n	801e328 <forward_dw_3x3_sssa8_ch+0xb8>
 801e3c2:	eef7 8a00 	vmov.f32	s17, #112	@ 0x3f800000  1.0
 801e3c6:	e7a4      	b.n	801e312 <forward_dw_3x3_sssa8_ch+0xa2>
 801e3c8:	2300      	movs	r3, #0
 801e3ca:	685b      	ldr	r3, [r3, #4]
 801e3cc:	deff      	udf	#255	@ 0xff
 801e3ce:	460c      	mov	r4, r1
 801e3d0:	e7c9      	b.n	801e366 <forward_dw_3x3_sssa8_ch+0xf6>
 801e3d2:	460d      	mov	r5, r1
 801e3d4:	e7be      	b.n	801e354 <forward_dw_3x3_sssa8_ch+0xe4>
 801e3d6:	46ac      	mov	ip, r5
 801e3d8:	e76d      	b.n	801e2b6 <forward_dw_3x3_sssa8_ch+0x46>
 801e3da:	2300      	movs	r3, #0
 801e3dc:	685b      	ldr	r3, [r3, #4]
 801e3de:	deff      	udf	#255	@ 0xff
 801e3e0:	2500      	movs	r5, #0
 801e3e2:	e768      	b.n	801e2b6 <forward_dw_3x3_sssa8_ch+0x46>
 801e3e4:	b924      	cbnz	r4, 801e3f0 <forward_dw_3x3_sssa8_ch+0x180>
 801e3e6:	69a3      	ldr	r3, [r4, #24]
 801e3e8:	deff      	udf	#255	@ 0xff
 801e3ea:	2300      	movs	r3, #0
 801e3ec:	685b      	ldr	r3, [r3, #4]
 801e3ee:	deff      	udf	#255	@ 0xff
 801e3f0:	68c3      	ldr	r3, [r0, #12]
 801e3f2:	deff      	udf	#255	@ 0xff

0801e3f4 <forward_pad>:
 801e3f4:	7f03      	ldrb	r3, [r0, #28]
 801e3f6:	2b03      	cmp	r3, #3
 801e3f8:	d80b      	bhi.n	801e412 <forward_pad+0x1e>
 801e3fa:	e8df f003 	tbb	[pc, r3]
 801e3fe:	0608      	.short	0x0608
 801e400:	0204      	.short	0x0204
 801e402:	f000 b869 	b.w	801e4d8 <forward_pad_8bit_ch1st_3x3_constant>
 801e406:	f000 b8f7 	b.w	801e5f8 <forward_pad_edge>
 801e40a:	f000 b935 	b.w	801e678 <forward_pad_reflect>
 801e40e:	f000 b8ad 	b.w	801e56c <forward_pad_constant>
 801e412:	4770      	bx	lr

0801e414 <forward_sm_integer>:
 801e414:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e418:	6983      	ldr	r3, [r0, #24]
 801e41a:	881e      	ldrh	r6, [r3, #0]
 801e41c:	b086      	sub	sp, #24
 801e41e:	b90e      	cbnz	r6, 801e424 <forward_sm_integer+0x10>
 801e420:	6873      	ldr	r3, [r6, #4]
 801e422:	deff      	udf	#255	@ 0xff
 801e424:	685f      	ldr	r7, [r3, #4]
 801e426:	687d      	ldr	r5, [r7, #4]
 801e428:	b105      	cbz	r5, 801e42c <forward_sm_integer+0x18>
 801e42a:	682d      	ldr	r5, [r5, #0]
 801e42c:	2e01      	cmp	r6, #1
 801e42e:	d04c      	beq.n	801e4ca <forward_sm_integer+0xb6>
 801e430:	f8d7 c010 	ldr.w	ip, [r7, #16]
 801e434:	f1bc 0f00 	cmp.w	ip, #0
 801e438:	d001      	beq.n	801e43e <forward_sm_integer+0x2a>
 801e43a:	f8dc c000 	ldr.w	ip, [ip]
 801e43e:	68ab      	ldr	r3, [r5, #8]
 801e440:	0a1b      	lsrs	r3, r3, #8
 801e442:	d040      	beq.n	801e4c6 <forward_sm_integer+0xb2>
 801e444:	68ec      	ldr	r4, [r5, #12]
 801e446:	2201      	movs	r2, #1
 801e448:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801e44c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801e450:	429c      	cmp	r4, r3
 801e452:	fb01 f202 	mul.w	r2, r1, r2
 801e456:	d1f9      	bne.n	801e44c <forward_sm_integer+0x38>
 801e458:	69c3      	ldr	r3, [r0, #28]
 801e45a:	2e03      	cmp	r6, #3
 801e45c:	f8d3 e008 	ldr.w	lr, [r3, #8]
 801e460:	d933      	bls.n	801e4ca <forward_sm_integer+0xb6>
 801e462:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801e464:	2b00      	cmp	r3, #0
 801e466:	d033      	beq.n	801e4d0 <forward_sm_integer+0xbc>
 801e468:	6819      	ldr	r1, [r3, #0]
 801e46a:	f9b0 3020 	ldrsh.w	r3, [r0, #32]
 801e46e:	6989      	ldr	r1, [r1, #24]
 801e470:	f8dc 0018 	ldr.w	r0, [ip, #24]
 801e474:	688f      	ldr	r7, [r1, #8]
 801e476:	68e9      	ldr	r1, [r5, #12]
 801e478:	6880      	ldr	r0, [r0, #8]
 801e47a:	f851 6023 	ldr.w	r6, [r1, r3, lsl #2]
 801e47e:	6929      	ldr	r1, [r5, #16]
 801e480:	ebb3 2f11 	cmp.w	r3, r1, lsr #8
 801e484:	bf3c      	itt	cc
 801e486:	6969      	ldrcc	r1, [r5, #20]
 801e488:	f851 3023 	ldrcc.w	r3, [r1, r3, lsl #2]
 801e48c:	69a9      	ldr	r1, [r5, #24]
 801e48e:	4d11      	ldr	r5, [pc, #68]	@ (801e4d4 <forward_sm_integer+0xc0>)
 801e490:	680c      	ldr	r4, [r1, #0]
 801e492:	6889      	ldr	r1, [r1, #8]
 801e494:	e9de c800 	ldrd	ip, r8, [lr]
 801e498:	f024 447e 	bic.w	r4, r4, #4261412864	@ 0xfe000000
 801e49c:	f8de e008 	ldr.w	lr, [lr, #8]
 801e4a0:	9600      	str	r6, [sp, #0]
 801e4a2:	bf28      	it	cs
 801e4a4:	2300      	movcs	r3, #0
 801e4a6:	42ac      	cmp	r4, r5
 801e4a8:	e9cd e703 	strd	lr, r7, [sp, #12]
 801e4ac:	e9cd c801 	strd	ip, r8, [sp, #4]
 801e4b0:	d004      	beq.n	801e4bc <forward_sm_integer+0xa8>
 801e4b2:	f002 f9ed 	bl	8020890 <forward_lite_nl_softmax_iu8ou8>
 801e4b6:	b006      	add	sp, #24
 801e4b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e4bc:	f002 f9de 	bl	802087c <forward_lite_nl_softmax_is8os8>
 801e4c0:	b006      	add	sp, #24
 801e4c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e4c6:	2201      	movs	r2, #1
 801e4c8:	e7c6      	b.n	801e458 <forward_sm_integer+0x44>
 801e4ca:	2300      	movs	r3, #0
 801e4cc:	685b      	ldr	r3, [r3, #4]
 801e4ce:	deff      	udf	#255	@ 0xff
 801e4d0:	699b      	ldr	r3, [r3, #24]
 801e4d2:	deff      	udf	#255	@ 0xff
 801e4d4:	00840440 	.word	0x00840440

0801e4d8 <forward_pad_8bit_ch1st_3x3_constant>:
 801e4d8:	6982      	ldr	r2, [r0, #24]
 801e4da:	8813      	ldrh	r3, [r2, #0]
 801e4dc:	b90b      	cbnz	r3, 801e4e2 <forward_pad_8bit_ch1st_3x3_constant+0xa>
 801e4de:	685b      	ldr	r3, [r3, #4]
 801e4e0:	deff      	udf	#255	@ 0xff
 801e4e2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801e4e6:	6852      	ldr	r2, [r2, #4]
 801e4e8:	6855      	ldr	r5, [r2, #4]
 801e4ea:	b085      	sub	sp, #20
 801e4ec:	b105      	cbz	r5, 801e4f0 <forward_pad_8bit_ch1st_3x3_constant+0x18>
 801e4ee:	682d      	ldr	r5, [r5, #0]
 801e4f0:	2b01      	cmp	r3, #1
 801e4f2:	d037      	beq.n	801e564 <forward_pad_8bit_ch1st_3x3_constant+0x8c>
 801e4f4:	6913      	ldr	r3, [r2, #16]
 801e4f6:	b39b      	cbz	r3, 801e560 <forward_pad_8bit_ch1st_3x3_constant+0x88>
 801e4f8:	e9d0 6209 	ldrd	r6, r2, [r0, #36]	@ 0x24
 801e4fc:	e9d6 1000 	ldrd	r1, r0, [r6]
 801e500:	4301      	orrs	r1, r0
 801e502:	b20c      	sxth	r4, r1
 801e504:	e9d5 7105 	ldrd	r7, r1, [r5, #20]
 801e508:	f8d3 c000 	ldr.w	ip, [r3]
 801e50c:	6888      	ldr	r0, [r1, #8]
 801e50e:	68eb      	ldr	r3, [r5, #12]
 801e510:	6892      	ldr	r2, [r2, #8]
 801e512:	f8d3 e004 	ldr.w	lr, [r3, #4]
 801e516:	f8d6 900c 	ldr.w	r9, [r6, #12]
 801e51a:	68db      	ldr	r3, [r3, #12]
 801e51c:	e9dc 5105 	ldrd	r5, r1, [ip, #20]
 801e520:	f8d7 c00c 	ldr.w	ip, [r7, #12]
 801e524:	f8d5 800c 	ldr.w	r8, [r5, #12]
 801e528:	6889      	ldr	r1, [r1, #8]
 801e52a:	687d      	ldr	r5, [r7, #4]
 801e52c:	b144      	cbz	r4, 801e540 <forward_pad_8bit_ch1st_3x3_constant+0x68>
 801e52e:	e9cd c802 	strd	ip, r8, [sp, #8]
 801e532:	e9cd e500 	strd	lr, r5, [sp]
 801e536:	f002 f9e5 	bl	8020904 <forward_lite_pad_8bit_ch1st_3x3_constant_P1111>
 801e53a:	b005      	add	sp, #20
 801e53c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801e540:	f9b6 4008 	ldrsh.w	r4, [r6, #8]
 801e544:	2c02      	cmp	r4, #2
 801e546:	d1f2      	bne.n	801e52e <forward_pad_8bit_ch1st_3x3_constant+0x56>
 801e548:	fa0f f989 	sxth.w	r9, r9
 801e54c:	f1b9 0f02 	cmp.w	r9, #2
 801e550:	d1ed      	bne.n	801e52e <forward_pad_8bit_ch1st_3x3_constant+0x56>
 801e552:	e9cd c802 	strd	ip, r8, [sp, #8]
 801e556:	e9cd e500 	strd	lr, r5, [sp]
 801e55a:	f002 f9a3 	bl	80208a4 <forward_lite_pad_8bit_ch1st_3x3_constant_P0022>
 801e55e:	e7ec      	b.n	801e53a <forward_pad_8bit_ch1st_3x3_constant+0x62>
 801e560:	699b      	ldr	r3, [r3, #24]
 801e562:	deff      	udf	#255	@ 0xff
 801e564:	2300      	movs	r3, #0
 801e566:	685b      	ldr	r3, [r3, #4]
 801e568:	deff      	udf	#255	@ 0xff
 801e56a:	bf00      	nop

0801e56c <forward_pad_constant>:
 801e56c:	6982      	ldr	r2, [r0, #24]
 801e56e:	8813      	ldrh	r3, [r2, #0]
 801e570:	b90b      	cbnz	r3, 801e576 <forward_pad_constant+0xa>
 801e572:	685b      	ldr	r3, [r3, #4]
 801e574:	deff      	udf	#255	@ 0xff
 801e576:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e57a:	6852      	ldr	r2, [r2, #4]
 801e57c:	6854      	ldr	r4, [r2, #4]
 801e57e:	b088      	sub	sp, #32
 801e580:	b104      	cbz	r4, 801e584 <forward_pad_constant+0x18>
 801e582:	6824      	ldr	r4, [r4, #0]
 801e584:	2b01      	cmp	r3, #1
 801e586:	d034      	beq.n	801e5f2 <forward_pad_constant+0x86>
 801e588:	6913      	ldr	r3, [r2, #16]
 801e58a:	2b00      	cmp	r3, #0
 801e58c:	d02f      	beq.n	801e5ee <forward_pad_constant+0x82>
 801e58e:	6819      	ldr	r1, [r3, #0]
 801e590:	6a45      	ldr	r5, [r0, #36]	@ 0x24
 801e592:	6a82      	ldr	r2, [r0, #40]	@ 0x28
 801e594:	f9b5 600c 	ldrsh.w	r6, [r5, #12]
 801e598:	69a3      	ldr	r3, [r4, #24]
 801e59a:	6967      	ldr	r7, [r4, #20]
 801e59c:	f8d3 8000 	ldr.w	r8, [r3]
 801e5a0:	6892      	ldr	r2, [r2, #8]
 801e5a2:	e9d1 0105 	ldrd	r0, r1, [r1, #20]
 801e5a6:	e9d0 ec02 	ldrd	lr, ip, [r0, #8]
 801e5aa:	fb0e f606 	mul.w	r6, lr, r6
 801e5ae:	6898      	ldr	r0, [r3, #8]
 801e5b0:	6889      	ldr	r1, [r1, #8]
 801e5b2:	9606      	str	r6, [sp, #24]
 801e5b4:	f9b5 6004 	ldrsh.w	r6, [r5, #4]
 801e5b8:	fb0e f606 	mul.w	r6, lr, r6
 801e5bc:	9605      	str	r6, [sp, #20]
 801e5be:	f9b5 6008 	ldrsh.w	r6, [r5, #8]
 801e5c2:	fb0c f606 	mul.w	r6, ip, r6
 801e5c6:	9604      	str	r6, [sp, #16]
 801e5c8:	f9b5 5000 	ldrsh.w	r5, [r5]
 801e5cc:	fb0c f505 	mul.w	r5, ip, r5
 801e5d0:	9503      	str	r5, [sp, #12]
 801e5d2:	68fd      	ldr	r5, [r7, #12]
 801e5d4:	9502      	str	r5, [sp, #8]
 801e5d6:	687d      	ldr	r5, [r7, #4]
 801e5d8:	9501      	str	r5, [sp, #4]
 801e5da:	68e4      	ldr	r4, [r4, #12]
 801e5dc:	68e4      	ldr	r4, [r4, #12]
 801e5de:	9400      	str	r4, [sp, #0]
 801e5e0:	f3c8 13c6 	ubfx	r3, r8, #7, #7
 801e5e4:	f002 fa50 	bl	8020a88 <forward_lite_pad_constant>
 801e5e8:	b008      	add	sp, #32
 801e5ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e5ee:	699b      	ldr	r3, [r3, #24]
 801e5f0:	deff      	udf	#255	@ 0xff
 801e5f2:	2300      	movs	r3, #0
 801e5f4:	685b      	ldr	r3, [r3, #4]
 801e5f6:	deff      	udf	#255	@ 0xff

0801e5f8 <forward_pad_edge>:
 801e5f8:	6982      	ldr	r2, [r0, #24]
 801e5fa:	8813      	ldrh	r3, [r2, #0]
 801e5fc:	b90b      	cbnz	r3, 801e602 <forward_pad_edge+0xa>
 801e5fe:	685b      	ldr	r3, [r3, #4]
 801e600:	deff      	udf	#255	@ 0xff
 801e602:	6851      	ldr	r1, [r2, #4]
 801e604:	684a      	ldr	r2, [r1, #4]
 801e606:	b102      	cbz	r2, 801e60a <forward_pad_edge+0x12>
 801e608:	6812      	ldr	r2, [r2, #0]
 801e60a:	2b01      	cmp	r3, #1
 801e60c:	d030      	beq.n	801e670 <forward_pad_edge+0x78>
 801e60e:	690b      	ldr	r3, [r1, #16]
 801e610:	b363      	cbz	r3, 801e66c <forward_pad_edge+0x74>
 801e612:	b5f0      	push	{r4, r5, r6, r7, lr}
 801e614:	681b      	ldr	r3, [r3, #0]
 801e616:	6a45      	ldr	r5, [r0, #36]	@ 0x24
 801e618:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 801e61c:	f9b5 6008 	ldrsh.w	r6, [r5, #8]
 801e620:	6990      	ldr	r0, [r2, #24]
 801e622:	6957      	ldr	r7, [r2, #20]
 801e624:	6880      	ldr	r0, [r0, #8]
 801e626:	f8de 200c 	ldr.w	r2, [lr, #12]
 801e62a:	e9d3 c105 	ldrd	ip, r1, [r3, #20]
 801e62e:	f8dc 400c 	ldr.w	r4, [ip, #12]
 801e632:	f9b5 3000 	ldrsh.w	r3, [r5]
 801e636:	6889      	ldr	r1, [r1, #8]
 801e638:	b089      	sub	sp, #36	@ 0x24
 801e63a:	fb04 f606 	mul.w	r6, r4, r6
 801e63e:	9606      	str	r6, [sp, #24]
 801e640:	f8dc c008 	ldr.w	ip, [ip, #8]
 801e644:	f9b5 6004 	ldrsh.w	r6, [r5, #4]
 801e648:	9403      	str	r4, [sp, #12]
 801e64a:	fb0c f606 	mul.w	r6, ip, r6
 801e64e:	fb03 f404 	mul.w	r4, r3, r4
 801e652:	9605      	str	r6, [sp, #20]
 801e654:	9404      	str	r4, [sp, #16]
 801e656:	68bc      	ldr	r4, [r7, #8]
 801e658:	9402      	str	r4, [sp, #8]
 801e65a:	68fc      	ldr	r4, [r7, #12]
 801e65c:	9401      	str	r4, [sp, #4]
 801e65e:	f9b5 400c 	ldrsh.w	r4, [r5, #12]
 801e662:	9400      	str	r4, [sp, #0]
 801e664:	f002 faae 	bl	8020bc4 <forward_lite_pad_edge>
 801e668:	b009      	add	sp, #36	@ 0x24
 801e66a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801e66c:	699b      	ldr	r3, [r3, #24]
 801e66e:	deff      	udf	#255	@ 0xff
 801e670:	2300      	movs	r3, #0
 801e672:	685b      	ldr	r3, [r3, #4]
 801e674:	deff      	udf	#255	@ 0xff
 801e676:	bf00      	nop

0801e678 <forward_pad_reflect>:
 801e678:	6982      	ldr	r2, [r0, #24]
 801e67a:	8813      	ldrh	r3, [r2, #0]
 801e67c:	b90b      	cbnz	r3, 801e682 <forward_pad_reflect+0xa>
 801e67e:	685b      	ldr	r3, [r3, #4]
 801e680:	deff      	udf	#255	@ 0xff
 801e682:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e686:	6852      	ldr	r2, [r2, #4]
 801e688:	6857      	ldr	r7, [r2, #4]
 801e68a:	b08f      	sub	sp, #60	@ 0x3c
 801e68c:	b107      	cbz	r7, 801e690 <forward_pad_reflect+0x18>
 801e68e:	683f      	ldr	r7, [r7, #0]
 801e690:	2b01      	cmp	r3, #1
 801e692:	d03e      	beq.n	801e712 <forward_pad_reflect+0x9a>
 801e694:	6913      	ldr	r3, [r2, #16]
 801e696:	2b00      	cmp	r3, #0
 801e698:	d039      	beq.n	801e70e <forward_pad_reflect+0x96>
 801e69a:	6819      	ldr	r1, [r3, #0]
 801e69c:	68fa      	ldr	r2, [r7, #12]
 801e69e:	e9d2 8302 	ldrd	r8, r3, [r2, #8]
 801e6a2:	e9d1 4202 	ldrd	r4, r2, [r1, #8]
 801e6a6:	f5b4 6fa0 	cmp.w	r4, #1280	@ 0x500
 801e6aa:	6a44      	ldr	r4, [r0, #36]	@ 0x24
 801e6ac:	e9d1 0105 	ldrd	r0, r1, [r1, #20]
 801e6b0:	e9d0 5c02 	ldrd	r5, ip, [r0, #8]
 801e6b4:	f9b4 600c 	ldrsh.w	r6, [r4, #12]
 801e6b8:	f9b4 e004 	ldrsh.w	lr, [r4, #4]
 801e6bc:	f9b4 b000 	ldrsh.w	fp, [r4]
 801e6c0:	6889      	ldr	r1, [r1, #8]
 801e6c2:	e9d7 7005 	ldrd	r7, r0, [r7, #20]
 801e6c6:	fb05 f606 	mul.w	r6, r5, r6
 801e6ca:	e9d2 a902 	ldrd	sl, r9, [r2, #8]
 801e6ce:	6880      	ldr	r0, [r0, #8]
 801e6d0:	bf28      	it	cs
 801e6d2:	6912      	ldrcs	r2, [r2, #16]
 801e6d4:	960c      	str	r6, [sp, #48]	@ 0x30
 801e6d6:	fb05 f60e 	mul.w	r6, r5, lr
 801e6da:	960b      	str	r6, [sp, #44]	@ 0x2c
 801e6dc:	fb0c f60b 	mul.w	r6, ip, fp
 801e6e0:	960a      	str	r6, [sp, #40]	@ 0x28
 801e6e2:	f9b4 4008 	ldrsh.w	r4, [r4, #8]
 801e6e6:	f8cd c014 	str.w	ip, [sp, #20]
 801e6ea:	e9cd 5e06 	strd	r5, lr, [sp, #24]
 801e6ee:	e9cd b408 	strd	fp, r4, [sp, #32]
 801e6f2:	68bc      	ldr	r4, [r7, #8]
 801e6f4:	9404      	str	r4, [sp, #16]
 801e6f6:	68fc      	ldr	r4, [r7, #12]
 801e6f8:	bf38      	it	cc
 801e6fa:	2201      	movcc	r2, #1
 801e6fc:	e9cd a402 	strd	sl, r4, [sp, #8]
 801e700:	e9cd 8900 	strd	r8, r9, [sp]
 801e704:	f002 fad0 	bl	8020ca8 <forward_lite_pad_reflect>
 801e708:	b00f      	add	sp, #60	@ 0x3c
 801e70a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e70e:	68db      	ldr	r3, [r3, #12]
 801e710:	deff      	udf	#255	@ 0xff
 801e712:	2300      	movs	r3, #0
 801e714:	685b      	ldr	r3, [r3, #4]
 801e716:	deff      	udf	#255	@ 0xff

0801e718 <forward_ap_integer_INT8>:
 801e718:	6983      	ldr	r3, [r0, #24]
 801e71a:	881a      	ldrh	r2, [r3, #0]
 801e71c:	b90a      	cbnz	r2, 801e722 <forward_ap_integer_INT8+0xa>
 801e71e:	6853      	ldr	r3, [r2, #4]
 801e720:	deff      	udf	#255	@ 0xff
 801e722:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e726:	6859      	ldr	r1, [r3, #4]
 801e728:	684b      	ldr	r3, [r1, #4]
 801e72a:	b093      	sub	sp, #76	@ 0x4c
 801e72c:	4607      	mov	r7, r0
 801e72e:	b103      	cbz	r3, 801e732 <forward_ap_integer_INT8+0x1a>
 801e730:	681b      	ldr	r3, [r3, #0]
 801e732:	2a01      	cmp	r2, #1
 801e734:	f000 80c8 	beq.w	801e8c8 <forward_ap_integer_INT8+0x1b0>
 801e738:	690a      	ldr	r2, [r1, #16]
 801e73a:	2a00      	cmp	r2, #0
 801e73c:	f000 80c7 	beq.w	801e8ce <forward_ap_integer_INT8+0x1b6>
 801e740:	6812      	ldr	r2, [r2, #0]
 801e742:	f8d3 e00c 	ldr.w	lr, [r3, #12]
 801e746:	68d5      	ldr	r5, [r2, #12]
 801e748:	6991      	ldr	r1, [r2, #24]
 801e74a:	6814      	ldr	r4, [r2, #0]
 801e74c:	681e      	ldr	r6, [r3, #0]
 801e74e:	699a      	ldr	r2, [r3, #24]
 801e750:	f8be 300c 	ldrh.w	r3, [lr, #12]
 801e754:	f8d7 c030 	ldr.w	ip, [r7, #48]	@ 0x30
 801e758:	930c      	str	r3, [sp, #48]	@ 0x30
 801e75a:	8bbb      	ldrh	r3, [r7, #28]
 801e75c:	930d      	str	r3, [sp, #52]	@ 0x34
 801e75e:	8c3b      	ldrh	r3, [r7, #32]
 801e760:	930e      	str	r3, [sp, #56]	@ 0x38
 801e762:	f8bc 3004 	ldrh.w	r3, [ip, #4]
 801e766:	930f      	str	r3, [sp, #60]	@ 0x3c
 801e768:	f8bc 3000 	ldrh.w	r3, [ip]
 801e76c:	9310      	str	r3, [sp, #64]	@ 0x40
 801e76e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801e770:	6890      	ldr	r0, [r2, #8]
 801e772:	f8be 8004 	ldrh.w	r8, [lr, #4]
 801e776:	f8be 2008 	ldrh.w	r2, [lr, #8]
 801e77a:	6889      	ldr	r1, [r1, #8]
 801e77c:	f8b7 b028 	ldrh.w	fp, [r7, #40]	@ 0x28
 801e780:	f8b5 a008 	ldrh.w	sl, [r5, #8]
 801e784:	f8b5 e00c 	ldrh.w	lr, [r5, #12]
 801e788:	9311      	str	r3, [sp, #68]	@ 0x44
 801e78a:	b32e      	cbz	r6, 801e7d8 <forward_ap_integer_INT8+0xc0>
 801e78c:	f8d6 c004 	ldr.w	ip, [r6, #4]
 801e790:	f1bc 0f00 	cmp.w	ip, #0
 801e794:	d030      	beq.n	801e7f8 <forward_ap_integer_INT8+0xe0>
 801e796:	8875      	ldrh	r5, [r6, #2]
 801e798:	2d00      	cmp	r5, #0
 801e79a:	d156      	bne.n	801e84a <forward_ap_integer_INT8+0x132>
 801e79c:	2c00      	cmp	r4, #0
 801e79e:	d037      	beq.n	801e810 <forward_ap_integer_INT8+0xf8>
 801e7a0:	6867      	ldr	r7, [r4, #4]
 801e7a2:	46b9      	mov	r9, r7
 801e7a4:	2f00      	cmp	r7, #0
 801e7a6:	d079      	beq.n	801e89c <forward_ap_integer_INT8+0x184>
 801e7a8:	8865      	ldrh	r5, [r4, #2]
 801e7aa:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 801e7ae:	2d00      	cmp	r5, #0
 801e7b0:	d056      	beq.n	801e860 <forward_ap_integer_INT8+0x148>
 801e7b2:	683b      	ldr	r3, [r7, #0]
 801e7b4:	edd3 0a00 	vldr	s1, [r3]
 801e7b8:	f1bc 0f00 	cmp.w	ip, #0
 801e7bc:	d07b      	beq.n	801e8b6 <forward_ap_integer_INT8+0x19e>
 801e7be:	8876      	ldrh	r6, [r6, #2]
 801e7c0:	2e00      	cmp	r6, #0
 801e7c2:	d154      	bne.n	801e86e <forward_ap_integer_INT8+0x156>
 801e7c4:	46b9      	mov	r9, r7
 801e7c6:	2f00      	cmp	r7, #0
 801e7c8:	d066      	beq.n	801e898 <forward_ap_integer_INT8+0x180>
 801e7ca:	8865      	ldrh	r5, [r4, #2]
 801e7cc:	b335      	cbz	r5, 801e81c <forward_ap_integer_INT8+0x104>
 801e7ce:	f8d9 4004 	ldr.w	r4, [r9, #4]
 801e7d2:	f994 5000 	ldrsb.w	r5, [r4]
 801e7d6:	e021      	b.n	801e81c <forward_ap_integer_INT8+0x104>
 801e7d8:	b1d4      	cbz	r4, 801e810 <forward_ap_integer_INT8+0xf8>
 801e7da:	f8d4 9004 	ldr.w	r9, [r4, #4]
 801e7de:	f1b9 0f00 	cmp.w	r9, #0
 801e7e2:	d06a      	beq.n	801e8ba <forward_ap_integer_INT8+0x1a2>
 801e7e4:	8864      	ldrh	r4, [r4, #2]
 801e7e6:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 801e7ea:	2c00      	cmp	r4, #0
 801e7ec:	d15e      	bne.n	801e8ac <forward_ap_integer_INT8+0x194>
 801e7ee:	4626      	mov	r6, r4
 801e7f0:	eef0 0a40 	vmov.f32	s1, s0
 801e7f4:	4625      	mov	r5, r4
 801e7f6:	e011      	b.n	801e81c <forward_ap_integer_INT8+0x104>
 801e7f8:	b154      	cbz	r4, 801e810 <forward_ap_integer_INT8+0xf8>
 801e7fa:	6867      	ldr	r7, [r4, #4]
 801e7fc:	46b9      	mov	r9, r7
 801e7fe:	2f00      	cmp	r7, #0
 801e800:	d1d2      	bne.n	801e7a8 <forward_ap_integer_INT8+0x90>
 801e802:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 801e806:	463e      	mov	r6, r7
 801e808:	eef0 0a40 	vmov.f32	s1, s0
 801e80c:	463d      	mov	r5, r7
 801e80e:	e005      	b.n	801e81c <forward_ap_integer_INT8+0x104>
 801e810:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 801e814:	4626      	mov	r6, r4
 801e816:	eef0 0a40 	vmov.f32	s1, s0
 801e81a:	4625      	mov	r5, r4
 801e81c:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 801e81e:	9405      	str	r4, [sp, #20]
 801e820:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 801e822:	9404      	str	r4, [sp, #16]
 801e824:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 801e826:	9403      	str	r4, [sp, #12]
 801e828:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 801e82a:	9402      	str	r4, [sp, #8]
 801e82c:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 801e82e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801e830:	f8cd b018 	str.w	fp, [sp, #24]
 801e834:	e9cd 6509 	strd	r6, r5, [sp, #36]	@ 0x24
 801e838:	e9cd ae07 	strd	sl, lr, [sp, #28]
 801e83c:	e9cd 8400 	strd	r8, r4, [sp]
 801e840:	f000 f972 	bl	801eb28 <forward_lite_avepool_is8os8>
 801e844:	b013      	add	sp, #76	@ 0x4c
 801e846:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e84a:	f8dc 5000 	ldr.w	r5, [ip]
 801e84e:	ed95 0a00 	vldr	s0, [r5]
 801e852:	b1a4      	cbz	r4, 801e87e <forward_ap_integer_INT8+0x166>
 801e854:	6867      	ldr	r7, [r4, #4]
 801e856:	46b9      	mov	r9, r7
 801e858:	b117      	cbz	r7, 801e860 <forward_ap_integer_INT8+0x148>
 801e85a:	8865      	ldrh	r5, [r4, #2]
 801e85c:	2d00      	cmp	r5, #0
 801e85e:	d1a8      	bne.n	801e7b2 <forward_ap_integer_INT8+0x9a>
 801e860:	f1bc 0f00 	cmp.w	ip, #0
 801e864:	d013      	beq.n	801e88e <forward_ap_integer_INT8+0x176>
 801e866:	8875      	ldrh	r5, [r6, #2]
 801e868:	b1d5      	cbz	r5, 801e8a0 <forward_ap_integer_INT8+0x188>
 801e86a:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 801e86e:	f8dc 5004 	ldr.w	r5, [ip, #4]
 801e872:	f995 6000 	ldrsb.w	r6, [r5]
 801e876:	2c00      	cmp	r4, #0
 801e878:	d1a4      	bne.n	801e7c4 <forward_ap_integer_INT8+0xac>
 801e87a:	4625      	mov	r5, r4
 801e87c:	e7ce      	b.n	801e81c <forward_ap_integer_INT8+0x104>
 801e87e:	f8dc 5004 	ldr.w	r5, [ip, #4]
 801e882:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 801e886:	f995 6000 	ldrsb.w	r6, [r5]
 801e88a:	4625      	mov	r5, r4
 801e88c:	e7c6      	b.n	801e81c <forward_ap_integer_INT8+0x104>
 801e88e:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 801e892:	4666      	mov	r6, ip
 801e894:	2f00      	cmp	r7, #0
 801e896:	d198      	bne.n	801e7ca <forward_ap_integer_INT8+0xb2>
 801e898:	463d      	mov	r5, r7
 801e89a:	e7bf      	b.n	801e81c <forward_ap_integer_INT8+0x104>
 801e89c:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 801e8a0:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 801e8a4:	2600      	movs	r6, #0
 801e8a6:	2c00      	cmp	r4, #0
 801e8a8:	d18c      	bne.n	801e7c4 <forward_ap_integer_INT8+0xac>
 801e8aa:	e7e6      	b.n	801e87a <forward_ap_integer_INT8+0x162>
 801e8ac:	f8d9 4000 	ldr.w	r4, [r9]
 801e8b0:	edd4 0a00 	vldr	s1, [r4]
 801e8b4:	e78b      	b.n	801e7ce <forward_ap_integer_INT8+0xb6>
 801e8b6:	4666      	mov	r6, ip
 801e8b8:	e788      	b.n	801e7cc <forward_ap_integer_INT8+0xb4>
 801e8ba:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 801e8be:	464e      	mov	r6, r9
 801e8c0:	eef0 0a40 	vmov.f32	s1, s0
 801e8c4:	464d      	mov	r5, r9
 801e8c6:	e7a9      	b.n	801e81c <forward_ap_integer_INT8+0x104>
 801e8c8:	2300      	movs	r3, #0
 801e8ca:	685b      	ldr	r3, [r3, #4]
 801e8cc:	deff      	udf	#255	@ 0xff
 801e8ce:	68d3      	ldr	r3, [r2, #12]
 801e8d0:	deff      	udf	#255	@ 0xff
 801e8d2:	bf00      	nop

0801e8d4 <forward_pw_sssa8_ch>:
 801e8d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e8d8:	ed2d 8b02 	vpush	{d8}
 801e8dc:	6983      	ldr	r3, [r0, #24]
 801e8de:	881c      	ldrh	r4, [r3, #0]
 801e8e0:	b097      	sub	sp, #92	@ 0x5c
 801e8e2:	b90c      	cbnz	r4, 801e8e8 <forward_pw_sssa8_ch+0x14>
 801e8e4:	6863      	ldr	r3, [r4, #4]
 801e8e6:	deff      	udf	#255	@ 0xff
 801e8e8:	685d      	ldr	r5, [r3, #4]
 801e8ea:	686a      	ldr	r2, [r5, #4]
 801e8ec:	b102      	cbz	r2, 801e8f0 <forward_pw_sssa8_ch+0x1c>
 801e8ee:	6812      	ldr	r2, [r2, #0]
 801e8f0:	2c01      	cmp	r4, #1
 801e8f2:	f000 8095 	beq.w	801ea20 <forward_pw_sssa8_ch+0x14c>
 801e8f6:	692b      	ldr	r3, [r5, #16]
 801e8f8:	b103      	cbz	r3, 801e8fc <forward_pw_sssa8_ch+0x28>
 801e8fa:	681b      	ldr	r3, [r3, #0]
 801e8fc:	2c02      	cmp	r4, #2
 801e8fe:	f000 808f 	beq.w	801ea20 <forward_pw_sssa8_ch+0x14c>
 801e902:	69ee      	ldr	r6, [r5, #28]
 801e904:	2e00      	cmp	r6, #0
 801e906:	f000 8098 	beq.w	801ea3a <forward_pw_sssa8_ch+0x166>
 801e90a:	8b2f      	ldrh	r7, [r5, #24]
 801e90c:	6831      	ldr	r1, [r6, #0]
 801e90e:	2f01      	cmp	r7, #1
 801e910:	f240 8095 	bls.w	801ea3e <forward_pw_sssa8_ch+0x16a>
 801e914:	6876      	ldr	r6, [r6, #4]
 801e916:	2c03      	cmp	r4, #3
 801e918:	f000 8082 	beq.w	801ea20 <forward_pw_sssa8_ch+0x14c>
 801e91c:	6aac      	ldr	r4, [r5, #40]	@ 0x28
 801e91e:	6a45      	ldr	r5, [r0, #36]	@ 0x24
 801e920:	2c00      	cmp	r4, #0
 801e922:	f000 808e 	beq.w	801ea42 <forward_pw_sssa8_ch+0x16e>
 801e926:	b105      	cbz	r5, 801e92a <forward_pw_sssa8_ch+0x56>
 801e928:	6863      	ldr	r3, [r4, #4]
 801e92a:	6825      	ldr	r5, [r4, #0]
 801e92c:	69b4      	ldr	r4, [r6, #24]
 801e92e:	f8d5 c018 	ldr.w	ip, [r5, #24]
 801e932:	68a4      	ldr	r4, [r4, #8]
 801e934:	9414      	str	r4, [sp, #80]	@ 0x50
 801e936:	68d4      	ldr	r4, [r2, #12]
 801e938:	68dd      	ldr	r5, [r3, #12]
 801e93a:	88a6      	ldrh	r6, [r4, #4]
 801e93c:	88ad      	ldrh	r5, [r5, #4]
 801e93e:	9510      	str	r5, [sp, #64]	@ 0x40
 801e940:	e9d4 4a02 	ldrd	r4, sl, [r4, #8]
 801e944:	9411      	str	r4, [sp, #68]	@ 0x44
 801e946:	8d04      	ldrh	r4, [r0, #40]	@ 0x28
 801e948:	9412      	str	r4, [sp, #72]	@ 0x48
 801e94a:	6815      	ldr	r5, [r2, #0]
 801e94c:	8d84      	ldrh	r4, [r0, #44]	@ 0x2c
 801e94e:	9413      	str	r4, [sp, #76]	@ 0x4c
 801e950:	f8dc 4008 	ldr.w	r4, [ip, #8]
 801e954:	960f      	str	r6, [sp, #60]	@ 0x3c
 801e956:	9415      	str	r4, [sp, #84]	@ 0x54
 801e958:	680e      	ldr	r6, [r1, #0]
 801e95a:	681c      	ldr	r4, [r3, #0]
 801e95c:	2d00      	cmp	r5, #0
 801e95e:	d065      	beq.n	801ea2c <forward_pw_sssa8_ch+0x158>
 801e960:	686f      	ldr	r7, [r5, #4]
 801e962:	2f00      	cmp	r7, #0
 801e964:	d062      	beq.n	801ea2c <forward_pw_sssa8_ch+0x158>
 801e966:	f8b5 e002 	ldrh.w	lr, [r5, #2]
 801e96a:	f1be 0f00 	cmp.w	lr, #0
 801e96e:	d05d      	beq.n	801ea2c <forward_pw_sssa8_ch+0x158>
 801e970:	683f      	ldr	r7, [r7, #0]
 801e972:	edd7 8a00 	vldr	s17, [r7]
 801e976:	2c00      	cmp	r4, #0
 801e978:	d055      	beq.n	801ea26 <forward_pw_sssa8_ch+0x152>
 801e97a:	6867      	ldr	r7, [r4, #4]
 801e97c:	2f00      	cmp	r7, #0
 801e97e:	d052      	beq.n	801ea26 <forward_pw_sssa8_ch+0x152>
 801e980:	f8b4 e002 	ldrh.w	lr, [r4, #2]
 801e984:	f1be 0f00 	cmp.w	lr, #0
 801e988:	d04d      	beq.n	801ea26 <forward_pw_sssa8_ch+0x152>
 801e98a:	683f      	ldr	r7, [r7, #0]
 801e98c:	ed97 8a00 	vldr	s16, [r7]
 801e990:	699b      	ldr	r3, [r3, #24]
 801e992:	6997      	ldr	r7, [r2, #24]
 801e994:	6989      	ldr	r1, [r1, #24]
 801e996:	f890 b041 	ldrb.w	fp, [r0, #65]	@ 0x41
 801e99a:	f8d3 9008 	ldr.w	r9, [r3, #8]
 801e99e:	68bf      	ldr	r7, [r7, #8]
 801e9a0:	f8d1 8008 	ldr.w	r8, [r1, #8]
 801e9a4:	b116      	cbz	r6, 801e9ac <forward_pw_sssa8_ch+0xd8>
 801e9a6:	6876      	ldr	r6, [r6, #4]
 801e9a8:	b106      	cbz	r6, 801e9ac <forward_pw_sssa8_ch+0xd8>
 801e9aa:	6836      	ldr	r6, [r6, #0]
 801e9ac:	b13d      	cbz	r5, 801e9be <forward_pw_sssa8_ch+0xea>
 801e9ae:	6869      	ldr	r1, [r5, #4]
 801e9b0:	2900      	cmp	r1, #0
 801e9b2:	d03e      	beq.n	801ea32 <forward_pw_sssa8_ch+0x15e>
 801e9b4:	886d      	ldrh	r5, [r5, #2]
 801e9b6:	b115      	cbz	r5, 801e9be <forward_pw_sssa8_ch+0xea>
 801e9b8:	6849      	ldr	r1, [r1, #4]
 801e9ba:	f991 5000 	ldrsb.w	r5, [r1]
 801e9be:	b13c      	cbz	r4, 801e9d0 <forward_pw_sssa8_ch+0xfc>
 801e9c0:	6861      	ldr	r1, [r4, #4]
 801e9c2:	2900      	cmp	r1, #0
 801e9c4:	d037      	beq.n	801ea36 <forward_pw_sssa8_ch+0x162>
 801e9c6:	8864      	ldrh	r4, [r4, #2]
 801e9c8:	b114      	cbz	r4, 801e9d0 <forward_pw_sssa8_ch+0xfc>
 801e9ca:	6849      	ldr	r1, [r1, #4]
 801e9cc:	f991 4000 	ldrsb.w	r4, [r1]
 801e9d0:	e9dc 0100 	ldrd	r0, r1, [ip]
 801e9d4:	f013 f8a4 	bl	8031b20 <ai_array_get_byte_size>
 801e9d8:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801e9da:	f8bd 1044 	ldrh.w	r1, [sp, #68]	@ 0x44
 801e9de:	9505      	str	r5, [sp, #20]
 801e9e0:	e9cd 030b 	strd	r0, r3, [sp, #44]	@ 0x2c
 801e9e4:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801e9e6:	9304      	str	r3, [sp, #16]
 801e9e8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801e9ea:	e9cd 8302 	strd	r8, r3, [sp, #8]
 801e9ee:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801e9f0:	9301      	str	r3, [sp, #4]
 801e9f2:	e9cd 4606 	strd	r4, r6, [sp, #24]
 801e9f6:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801e9f8:	9300      	str	r3, [sp, #0]
 801e9fa:	2401      	movs	r4, #1
 801e9fc:	e9cd b908 	strd	fp, r9, [sp, #32]
 801ea00:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801ea02:	940a      	str	r4, [sp, #40]	@ 0x28
 801ea04:	eef0 0a48 	vmov.f32	s1, s16
 801ea08:	eeb0 0a68 	vmov.f32	s0, s17
 801ea0c:	fa1f f28a 	uxth.w	r2, sl
 801ea10:	4638      	mov	r0, r7
 801ea12:	f000 fe07 	bl	801f624 <forward_lite_pw_sssa8_ch>
 801ea16:	b017      	add	sp, #92	@ 0x5c
 801ea18:	ecbd 8b02 	vpop	{d8}
 801ea1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ea20:	2300      	movs	r3, #0
 801ea22:	685b      	ldr	r3, [r3, #4]
 801ea24:	deff      	udf	#255	@ 0xff
 801ea26:	eeb7 8a00 	vmov.f32	s16, #112	@ 0x3f800000  1.0
 801ea2a:	e7b1      	b.n	801e990 <forward_pw_sssa8_ch+0xbc>
 801ea2c:	eef7 8a00 	vmov.f32	s17, #112	@ 0x3f800000  1.0
 801ea30:	e7a1      	b.n	801e976 <forward_pw_sssa8_ch+0xa2>
 801ea32:	460d      	mov	r5, r1
 801ea34:	e7c3      	b.n	801e9be <forward_pw_sssa8_ch+0xea>
 801ea36:	460c      	mov	r4, r1
 801ea38:	e7ca      	b.n	801e9d0 <forward_pw_sssa8_ch+0xfc>
 801ea3a:	4631      	mov	r1, r6
 801ea3c:	e76b      	b.n	801e916 <forward_pw_sssa8_ch+0x42>
 801ea3e:	2600      	movs	r6, #0
 801ea40:	e769      	b.n	801e916 <forward_pw_sssa8_ch+0x42>
 801ea42:	b90d      	cbnz	r5, 801ea48 <forward_pw_sssa8_ch+0x174>
 801ea44:	69ab      	ldr	r3, [r5, #24]
 801ea46:	deff      	udf	#255	@ 0xff
 801ea48:	68e3      	ldr	r3, [r4, #12]
 801ea4a:	deff      	udf	#255	@ 0xff

0801ea4c <forward_lite_node_convert_integer_is8of32>:
 801ea4c:	f001 bd5c 	b.w	8020508 <lite_convert_is8of32>

0801ea50 <forward_lite_node_convert_integer_iu8of32>:
 801ea50:	f001 bd6c 	b.w	802052c <lite_convert_iu8of32>

0801ea54 <forward_lite_node_convert_integer_if32os8>:
 801ea54:	f001 bd7c 	b.w	8020550 <lite_convert_if32os8>

0801ea58 <forward_lite_node_convert_integer_if32ou8>:
 801ea58:	f001 bdb0 	b.w	80205bc <lite_convert_if32ou8>

0801ea5c <forward_lite_node_convert_integer_is8os8>:
 801ea5c:	b410      	push	{r4}
 801ea5e:	f9bd 4004 	ldrsh.w	r4, [sp, #4]
 801ea62:	9401      	str	r4, [sp, #4]
 801ea64:	f85d 4b04 	ldr.w	r4, [sp], #4
 801ea68:	f001 bdc8 	b.w	80205fc <lite_convert_is8os8>

0801ea6c <forward_lite_node_convert_integer_iu8ou8>:
 801ea6c:	b410      	push	{r4}
 801ea6e:	f89d 4004 	ldrb.w	r4, [sp, #4]
 801ea72:	9401      	str	r4, [sp, #4]
 801ea74:	f85d 4b04 	ldr.w	r4, [sp], #4
 801ea78:	f001 be00 	b.w	802067c <lite_convert_iu8ou8>

0801ea7c <forward_lite_node_convert_integer_iu8os8>:
 801ea7c:	b410      	push	{r4}
 801ea7e:	f99d 4004 	ldrsb.w	r4, [sp, #4]
 801ea82:	9401      	str	r4, [sp, #4]
 801ea84:	f85d 4b04 	ldr.w	r4, [sp], #4
 801ea88:	f001 be22 	b.w	80206d0 <lite_convert_iu8os8>

0801ea8c <forward_lite_node_convert_integer_iu8os8_fast>:
 801ea8c:	f001 be60 	b.w	8020750 <lite_convert_iu8os8_fast>

0801ea90 <forward_lite_node_convert_integer_is8ou8>:
 801ea90:	b410      	push	{r4}
 801ea92:	f89d 4004 	ldrb.w	r4, [sp, #4]
 801ea96:	9401      	str	r4, [sp, #4]
 801ea98:	f85d 4b04 	ldr.w	r4, [sp], #4
 801ea9c:	f001 be90 	b.w	80207c0 <lite_convert_is8ou8>

0801eaa0 <forward_lite_node_convert_integer_is8ou8_fast>:
 801eaa0:	f001 beb8 	b.w	8020814 <lite_convert_is8ou8_fast>

0801eaa4 <forward_lite_dense_is8os8ws8>:
 801eaa4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801eaa8:	b08f      	sub	sp, #60	@ 0x3c
 801eaaa:	ee21 0a00 	vmul.f32	s0, s2, s0
 801eaae:	f99d 4060 	ldrsb.w	r4, [sp, #96]	@ 0x60
 801eab2:	940a      	str	r4, [sp, #40]	@ 0x28
 801eab4:	f10d 0932 	add.w	r9, sp, #50	@ 0x32
 801eab8:	9309      	str	r3, [sp, #36]	@ 0x24
 801eaba:	2400      	movs	r4, #0
 801eabc:	f99d 3064 	ldrsb.w	r3, [sp, #100]	@ 0x64
 801eac0:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 801eac4:	f8bd 7068 	ldrh.w	r7, [sp, #104]	@ 0x68
 801eac8:	f8bd 806c 	ldrh.w	r8, [sp, #108]	@ 0x6c
 801eacc:	f8ad 4032 	strh.w	r4, [sp, #50]	@ 0x32
 801ead0:	ee80 0a20 	vdiv.f32	s0, s0, s1
 801ead4:	4605      	mov	r5, r0
 801ead6:	4648      	mov	r0, r9
 801ead8:	460e      	mov	r6, r1
 801eada:	4693      	mov	fp, r2
 801eadc:	940d      	str	r4, [sp, #52]	@ 0x34
 801eade:	930b      	str	r3, [sp, #44]	@ 0x2c
 801eae0:	f002 f98c 	bl	8020dfc <align_factor>
 801eae4:	900d      	str	r0, [sp, #52]	@ 0x34
 801eae6:	f1ba 0f00 	cmp.w	sl, #0
 801eaea:	d019      	beq.n	801eb20 <forward_lite_dense_is8os8ws8+0x7c>
 801eaec:	4643      	mov	r3, r8
 801eaee:	46b8      	mov	r8, r7
 801eaf0:	461f      	mov	r7, r3
 801eaf2:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801eaf4:	9306      	str	r3, [sp, #24]
 801eaf6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801eaf8:	9304      	str	r3, [sp, #16]
 801eafa:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801eafc:	9303      	str	r3, [sp, #12]
 801eafe:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801eb00:	9505      	str	r5, [sp, #20]
 801eb02:	e9cd 9301 	strd	r9, r3, [sp, #4]
 801eb06:	ab0d      	add	r3, sp, #52	@ 0x34
 801eb08:	9300      	str	r3, [sp, #0]
 801eb0a:	4630      	mov	r0, r6
 801eb0c:	3401      	adds	r4, #1
 801eb0e:	463b      	mov	r3, r7
 801eb10:	4642      	mov	r2, r8
 801eb12:	4659      	mov	r1, fp
 801eb14:	f003 f874 	bl	8021c00 <st_sssa8_fully_connected>
 801eb18:	45a2      	cmp	sl, r4
 801eb1a:	443d      	add	r5, r7
 801eb1c:	4446      	add	r6, r8
 801eb1e:	d1e8      	bne.n	801eaf2 <forward_lite_dense_is8os8ws8+0x4e>
 801eb20:	b00f      	add	sp, #60	@ 0x3c
 801eb22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801eb26:	bf00      	nop

0801eb28 <forward_lite_avepool_is8os8>:
 801eb28:	b410      	push	{r4}
 801eb2a:	f8bd 4004 	ldrh.w	r4, [sp, #4]
 801eb2e:	9401      	str	r4, [sp, #4]
 801eb30:	f8bd 4008 	ldrh.w	r4, [sp, #8]
 801eb34:	9402      	str	r4, [sp, #8]
 801eb36:	f8bd 400c 	ldrh.w	r4, [sp, #12]
 801eb3a:	9403      	str	r4, [sp, #12]
 801eb3c:	f8bd 4010 	ldrh.w	r4, [sp, #16]
 801eb40:	9404      	str	r4, [sp, #16]
 801eb42:	f8bd 4014 	ldrh.w	r4, [sp, #20]
 801eb46:	9405      	str	r4, [sp, #20]
 801eb48:	f8bd 4018 	ldrh.w	r4, [sp, #24]
 801eb4c:	9406      	str	r4, [sp, #24]
 801eb4e:	f8bd 401c 	ldrh.w	r4, [sp, #28]
 801eb52:	9407      	str	r4, [sp, #28]
 801eb54:	f8bd 4020 	ldrh.w	r4, [sp, #32]
 801eb58:	9408      	str	r4, [sp, #32]
 801eb5a:	f8bd 4024 	ldrh.w	r4, [sp, #36]	@ 0x24
 801eb5e:	9409      	str	r4, [sp, #36]	@ 0x24
 801eb60:	f99d 4028 	ldrsb.w	r4, [sp, #40]	@ 0x28
 801eb64:	940a      	str	r4, [sp, #40]	@ 0x28
 801eb66:	f99d 402c 	ldrsb.w	r4, [sp, #44]	@ 0x2c
 801eb6a:	940b      	str	r4, [sp, #44]	@ 0x2c
 801eb6c:	f85d 4b04 	ldr.w	r4, [sp], #4
 801eb70:	f002 bc84 	b.w	802147c <st_int8_avepool>

0801eb74 <forward_lite_dw_3x3_sssa8_ch>:
 801eb74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801eb78:	b09d      	sub	sp, #116	@ 0x74
 801eb7a:	469a      	mov	sl, r3
 801eb7c:	f8bd 20a0 	ldrh.w	r2, [sp, #160]	@ 0xa0
 801eb80:	9205      	str	r2, [sp, #20]
 801eb82:	f99d 20a8 	ldrsb.w	r2, [sp, #168]	@ 0xa8
 801eb86:	9207      	str	r2, [sp, #28]
 801eb88:	f8bd 20b8 	ldrh.w	r2, [sp, #184]	@ 0xb8
 801eb8c:	9212      	str	r2, [sp, #72]	@ 0x48
 801eb8e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 801eb92:	f8bd 309c 	ldrh.w	r3, [sp, #156]	@ 0x9c
 801eb96:	9202      	str	r2, [sp, #8]
 801eb98:	9a32      	ldr	r2, [sp, #200]	@ 0xc8
 801eb9a:	9304      	str	r3, [sp, #16]
 801eb9c:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 801eb9e:	9d26      	ldr	r5, [sp, #152]	@ 0x98
 801eba0:	f99d 90ac 	ldrsb.w	r9, [sp, #172]	@ 0xac
 801eba4:	f8dd b0b4 	ldr.w	fp, [sp, #180]	@ 0xb4
 801eba8:	f8bd 80bc 	ldrh.w	r8, [sp, #188]	@ 0xbc
 801ebac:	9017      	str	r0, [sp, #92]	@ 0x5c
 801ebae:	eb02 02ca 	add.w	r2, r2, sl, lsl #3
 801ebb2:	9103      	str	r1, [sp, #12]
 801ebb4:	920f      	str	r2, [sp, #60]	@ 0x3c
 801ebb6:	2b00      	cmp	r3, #0
 801ebb8:	f000 83e8 	beq.w	801f38c <forward_lite_dw_3x3_sssa8_ch+0x818>
 801ebbc:	ea4f 034a 	mov.w	r3, sl, lsl #1
 801ebc0:	9301      	str	r3, [sp, #4]
 801ebc2:	9b02      	ldr	r3, [sp, #8]
 801ebc4:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801ebc6:	982c      	ldr	r0, [sp, #176]	@ 0xb0
 801ebc8:	4453      	add	r3, sl
 801ebca:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 801ebce:	4651      	mov	r1, sl
 801ebd0:	9a32      	ldr	r2, [sp, #200]	@ 0xc8
 801ebd2:	9310      	str	r3, [sp, #64]	@ 0x40
 801ebd4:	461c      	mov	r4, r3
 801ebd6:	f002 f965 	bl	8020ea4 <align_factor_ch>
 801ebda:	f06f 0315 	mvn.w	r3, #21
 801ebde:	fb03 430a 	mla	r3, r3, sl, r4
 801ebe2:	9311      	str	r3, [sp, #68]	@ 0x44
 801ebe4:	f1ba 0f00 	cmp.w	sl, #0
 801ebe8:	d018      	beq.n	801ec1c <forward_lite_dw_3x3_sssa8_ch+0xa8>
 801ebea:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801ebec:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801ebee:	4611      	mov	r1, r2
 801ebf0:	9a01      	ldr	r2, [sp, #4]
 801ebf2:	1f1c      	subs	r4, r3, #4
 801ebf4:	188e      	adds	r6, r1, r2
 801ebf6:	2501      	movs	r5, #1
 801ebf8:	464f      	mov	r7, r9
 801ebfa:	f931 3b02 	ldrsh.w	r3, [r1], #2
 801ebfe:	1e5a      	subs	r2, r3, #1
 801ec00:	b292      	uxth	r2, r2
 801ec02:	fa05 f003 	lsl.w	r0, r5, r3
 801ec06:	2a14      	cmp	r2, #20
 801ec08:	fa07 f303 	lsl.w	r3, r7, r3
 801ec0c:	eb03 0350 	add.w	r3, r3, r0, lsr #1
 801ec10:	f200 83b2 	bhi.w	801f378 <forward_lite_dw_3x3_sssa8_ch+0x804>
 801ec14:	428e      	cmp	r6, r1
 801ec16:	f844 3f04 	str.w	r3, [r4, #4]!
 801ec1a:	d1ee      	bne.n	801ebfa <forward_lite_dw_3x3_sssa8_ch+0x86>
 801ec1c:	9b03      	ldr	r3, [sp, #12]
 801ec1e:	9a05      	ldr	r2, [sp, #20]
 801ec20:	9901      	ldr	r1, [sp, #4]
 801ec22:	fb0a f303 	mul.w	r3, sl, r3
 801ec26:	fb03 f202 	mul.w	r2, r3, r2
 801ec2a:	1a5b      	subs	r3, r3, r1
 801ec2c:	9303      	str	r3, [sp, #12]
 801ec2e:	9b04      	ldr	r3, [sp, #16]
 801ec30:	fb0a f303 	mul.w	r3, sl, r3
 801ec34:	9313      	str	r3, [sp, #76]	@ 0x4c
 801ec36:	9b07      	ldr	r3, [sp, #28]
 801ec38:	f1ba 0f03 	cmp.w	sl, #3
 801ec3c:	f1c3 0300 	rsb	r3, r3, #0
 801ec40:	eac3 4703 	pkhbt	r7, r3, r3, lsl #16
 801ec44:	f200 839e 	bhi.w	801f384 <forward_lite_dw_3x3_sssa8_ch+0x810>
 801ec48:	2300      	movs	r3, #0
 801ec4a:	930b      	str	r3, [sp, #44]	@ 0x2c
 801ec4c:	f1b8 0f00 	cmp.w	r8, #0
 801ec50:	f000 8338 	beq.w	801f2c4 <forward_lite_dw_3x3_sssa8_ch+0x750>
 801ec54:	9912      	ldr	r1, [sp, #72]	@ 0x48
 801ec56:	f00a 0303 	and.w	r3, sl, #3
 801ec5a:	930e      	str	r3, [sp, #56]	@ 0x38
 801ec5c:	2900      	cmp	r1, #0
 801ec5e:	f000 8331 	beq.w	801f2c4 <forward_lite_dw_3x3_sssa8_ch+0x750>
 801ec62:	3b01      	subs	r3, #1
 801ec64:	b29b      	uxth	r3, r3
 801ec66:	9314      	str	r3, [sp, #80]	@ 0x50
 801ec68:	2300      	movs	r3, #0
 801ec6a:	461c      	mov	r4, r3
 801ec6c:	46bc      	mov	ip, r7
 801ec6e:	9218      	str	r2, [sp, #96]	@ 0x60
 801ec70:	4651      	mov	r1, sl
 801ec72:	f8cd 8064 	str.w	r8, [sp, #100]	@ 0x64
 801ec76:	e9dd 2017 	ldrd	r2, r0, [sp, #92]	@ 0x5c
 801ec7a:	fb04 2200 	mla	r2, r4, r0, r2
 801ec7e:	9205      	str	r2, [sp, #20]
 801ec80:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801ec82:	3201      	adds	r2, #1
 801ec84:	e9cd 2315 	strd	r2, r3, [sp, #84]	@ 0x54
 801ec88:	f04f 0a00 	mov.w	sl, #0
 801ec8c:	f8cd a034 	str.w	sl, [sp, #52]	@ 0x34
 801ec90:	468e      	mov	lr, r1
 801ec92:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801ec94:	2b00      	cmp	r3, #0
 801ec96:	f000 8355 	beq.w	801f344 <forward_lite_dw_3x3_sssa8_ch+0x7d0>
 801ec9a:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801ec9c:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 801ec9e:	3208      	adds	r2, #8
 801eca0:	9200      	str	r2, [sp, #0]
 801eca2:	9a32      	ldr	r2, [sp, #200]	@ 0xc8
 801eca4:	f102 0410 	add.w	r4, r2, #16
 801eca8:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801ecaa:	9401      	str	r4, [sp, #4]
 801ecac:	f103 0110 	add.w	r1, r3, #16
 801ecb0:	f102 0010 	add.w	r0, r2, #16
 801ecb4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801ecb6:	9104      	str	r1, [sp, #16]
 801ecb8:	f10b 0204 	add.w	r2, fp, #4
 801ecbc:	9202      	str	r2, [sp, #8]
 801ecbe:	f1cb 0200 	rsb	r2, fp, #0
 801ecc2:	3348      	adds	r3, #72	@ 0x48
 801ecc4:	920c      	str	r2, [sp, #48]	@ 0x30
 801ecc6:	2500      	movs	r5, #0
 801ecc8:	4683      	mov	fp, r0
 801ecca:	e078      	b.n	801edbe <forward_lite_dw_3x3_sssa8_ch+0x24a>
 801eccc:	1ea2      	subs	r2, r4, #2
 801ecce:	2101      	movs	r1, #1
 801ecd0:	3c01      	subs	r4, #1
 801ecd2:	fa01 f202 	lsl.w	r2, r1, r2
 801ecd6:	fb55 2207 	smmla	r2, r5, r7, r2
 801ecda:	4122      	asrs	r2, r4
 801ecdc:	4432      	add	r2, r6
 801ecde:	f302 0207 	ssat	r2, #8, r2
 801ece2:	b252      	sxtb	r2, r2
 801ece4:	9e02      	ldr	r6, [sp, #8]
 801ece6:	f806 2c04 	strb.w	r2, [r6, #-4]
 801ecea:	9a00      	ldr	r2, [sp, #0]
 801ecec:	f932 4c06 	ldrsh.w	r4, [r2, #-6]
 801ecf0:	2c15      	cmp	r4, #21
 801ecf2:	f340 8156 	ble.w	801efa2 <forward_lite_dw_3x3_sssa8_ch+0x42e>
 801ecf6:	1ea5      	subs	r5, r4, #2
 801ecf8:	2201      	movs	r2, #1
 801ecfa:	fa02 f505 	lsl.w	r5, r2, r5
 801ecfe:	9a01      	ldr	r2, [sp, #4]
 801ed00:	f85b 7c0c 	ldr.w	r7, [fp, #-12]
 801ed04:	f852 2c0c 	ldr.w	r2, [r2, #-12]
 801ed08:	fb50 5002 	smmla	r0, r0, r2, r5
 801ed0c:	3c01      	subs	r4, #1
 801ed0e:	4120      	asrs	r0, r4
 801ed10:	4438      	add	r0, r7
 801ed12:	f300 0007 	ssat	r0, #8, r0
 801ed16:	b240      	sxtb	r0, r0
 801ed18:	4632      	mov	r2, r6
 801ed1a:	f802 0c03 	strb.w	r0, [r2, #-3]
 801ed1e:	9a00      	ldr	r2, [sp, #0]
 801ed20:	f932 4c04 	ldrsh.w	r4, [r2, #-4]
 801ed24:	2c15      	cmp	r4, #21
 801ed26:	f340 812a 	ble.w	801ef7e <forward_lite_dw_3x3_sssa8_ch+0x40a>
 801ed2a:	1ea0      	subs	r0, r4, #2
 801ed2c:	2201      	movs	r2, #1
 801ed2e:	fa02 f000 	lsl.w	r0, r2, r0
 801ed32:	9a01      	ldr	r2, [sp, #4]
 801ed34:	f85b 5c08 	ldr.w	r5, [fp, #-8]
 801ed38:	f852 2c08 	ldr.w	r2, [r2, #-8]
 801ed3c:	fb58 0802 	smmla	r8, r8, r2, r0
 801ed40:	3c01      	subs	r4, #1
 801ed42:	fa48 f804 	asr.w	r8, r8, r4
 801ed46:	44a8      	add	r8, r5
 801ed48:	f308 0807 	ssat	r8, #8, r8
 801ed4c:	fa4f f888 	sxtb.w	r8, r8
 801ed50:	9a02      	ldr	r2, [sp, #8]
 801ed52:	f802 8c02 	strb.w	r8, [r2, #-2]
 801ed56:	9a00      	ldr	r2, [sp, #0]
 801ed58:	f932 4c02 	ldrsh.w	r4, [r2, #-2]
 801ed5c:	2c15      	cmp	r4, #21
 801ed5e:	f340 80fc 	ble.w	801ef5a <forward_lite_dw_3x3_sssa8_ch+0x3e6>
 801ed62:	1ea0      	subs	r0, r4, #2
 801ed64:	2201      	movs	r2, #1
 801ed66:	fa02 f000 	lsl.w	r0, r2, r0
 801ed6a:	9a01      	ldr	r2, [sp, #4]
 801ed6c:	f85b 5c04 	ldr.w	r5, [fp, #-4]
 801ed70:	f852 2c04 	ldr.w	r2, [r2, #-4]
 801ed74:	fb59 0902 	smmla	r9, r9, r2, r0
 801ed78:	3c01      	subs	r4, #1
 801ed7a:	fa49 f904 	asr.w	r9, r9, r4
 801ed7e:	44a9      	add	r9, r5
 801ed80:	f309 0907 	ssat	r9, #8, r9
 801ed84:	fa4f f989 	sxtb.w	r9, r9
 801ed88:	9904      	ldr	r1, [sp, #16]
 801ed8a:	9a02      	ldr	r2, [sp, #8]
 801ed8c:	980c      	ldr	r0, [sp, #48]	@ 0x30
 801ed8e:	f802 9c01 	strb.w	r9, [r2, #-1]
 801ed92:	3110      	adds	r1, #16
 801ed94:	9104      	str	r1, [sp, #16]
 801ed96:	9900      	ldr	r1, [sp, #0]
 801ed98:	3108      	adds	r1, #8
 801ed9a:	9100      	str	r1, [sp, #0]
 801ed9c:	9901      	ldr	r1, [sp, #4]
 801ed9e:	3110      	adds	r1, #16
 801eda0:	9101      	str	r1, [sp, #4]
 801eda2:	4611      	mov	r1, r2
 801eda4:	3104      	adds	r1, #4
 801eda6:	1882      	adds	r2, r0, r2
 801eda8:	9102      	str	r1, [sp, #8]
 801edaa:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801edac:	b292      	uxth	r2, r2
 801edae:	428a      	cmp	r2, r1
 801edb0:	f103 0348 	add.w	r3, r3, #72	@ 0x48
 801edb4:	f10b 0b10 	add.w	fp, fp, #16
 801edb8:	4615      	mov	r5, r2
 801edba:	f080 8147 	bcs.w	801f04c <forward_lite_dw_3x3_sssa8_ch+0x4d8>
 801edbe:	9905      	ldr	r1, [sp, #20]
 801edc0:	9306      	str	r3, [sp, #24]
 801edc2:	594c      	ldr	r4, [r1, r5]
 801edc4:	194a      	adds	r2, r1, r5
 801edc6:	9904      	ldr	r1, [sp, #16]
 801edc8:	f852 900e 	ldr.w	r9, [r2, lr]
 801edcc:	f853 5c48 	ldr.w	r5, [r3, #-72]
 801edd0:	eac4 4009 	pkhbt	r0, r4, r9, lsl #16
 801edd4:	eb02 070e 	add.w	r7, r2, lr
 801edd8:	eac9 4924 	pkhtb	r9, r9, r4, asr #16
 801eddc:	910a      	str	r1, [sp, #40]	@ 0x28
 801edde:	f851 4c10 	ldr.w	r4, [r1, #-16]
 801ede2:	fa2c f680 	sxtab16	r6, ip, r0
 801ede6:	eb02 024e 	add.w	r2, r2, lr, lsl #1
 801edea:	fb25 4606 	smlad	r6, r5, r6, r4
 801edee:	fa2c f090 	sxtab16	r0, ip, r0, ror #8
 801edf2:	f853 4c44 	ldr.w	r4, [r3, #-68]
 801edf6:	f851 5c0c 	ldr.w	r5, [r1, #-12]
 801edfa:	fb24 5000 	smlad	r0, r4, r0, r5
 801edfe:	f853 4c40 	ldr.w	r4, [r3, #-64]
 801ee02:	f851 5c08 	ldr.w	r5, [r1, #-8]
 801ee06:	fa2c f889 	sxtab16	r8, ip, r9
 801ee0a:	fb24 5808 	smlad	r8, r4, r8, r5
 801ee0e:	fa2c f999 	sxtab16	r9, ip, r9, ror #8
 801ee12:	f853 4c3c 	ldr.w	r4, [r3, #-60]
 801ee16:	f851 5c04 	ldr.w	r5, [r1, #-4]
 801ee1a:	fb24 5509 	smlad	r5, r4, r9, r5
 801ee1e:	9c03      	ldr	r4, [sp, #12]
 801ee20:	f857 900e 	ldr.w	r9, [r7, lr]
 801ee24:	f853 1c38 	ldr.w	r1, [r3, #-56]
 801ee28:	1917      	adds	r7, r2, r4
 801ee2a:	5912      	ldr	r2, [r2, r4]
 801ee2c:	eac9 4a02 	pkhbt	sl, r9, r2, lsl #16
 801ee30:	eac2 4229 	pkhtb	r2, r2, r9, asr #16
 801ee34:	fa2c f48a 	sxtab16	r4, ip, sl
 801ee38:	eb07 090e 	add.w	r9, r7, lr
 801ee3c:	fb21 6604 	smlad	r6, r1, r4, r6
 801ee40:	fa2c fa9a 	sxtab16	sl, ip, sl, ror #8
 801ee44:	f853 4c34 	ldr.w	r4, [r3, #-52]
 801ee48:	fb24 040a 	smlad	r4, r4, sl, r0
 801ee4c:	f853 0c30 	ldr.w	r0, [r3, #-48]
 801ee50:	fa2c fa82 	sxtab16	sl, ip, r2
 801ee54:	fb20 880a 	smlad	r8, r0, sl, r8
 801ee58:	fa2c f292 	sxtab16	r2, ip, r2, ror #8
 801ee5c:	f853 0c2c 	ldr.w	r0, [r3, #-44]
 801ee60:	fb20 5202 	smlad	r2, r0, r2, r5
 801ee64:	f857 500e 	ldr.w	r5, [r7, lr]
 801ee68:	f859 000e 	ldr.w	r0, [r9, lr]
 801ee6c:	eac5 4a00 	pkhbt	sl, r5, r0, lsl #16
 801ee70:	eac0 4025 	pkhtb	r0, r0, r5, asr #16
 801ee74:	9d03      	ldr	r5, [sp, #12]
 801ee76:	f853 1c28 	ldr.w	r1, [r3, #-40]
 801ee7a:	eb09 070e 	add.w	r7, r9, lr
 801ee7e:	eb07 0905 	add.w	r9, r7, r5
 801ee82:	fa2c f58a 	sxtab16	r5, ip, sl
 801ee86:	fb21 6605 	smlad	r6, r1, r5, r6
 801ee8a:	fa2c fa9a 	sxtab16	sl, ip, sl, ror #8
 801ee8e:	f853 5c24 	ldr.w	r5, [r3, #-36]
 801ee92:	fb25 4a0a 	smlad	sl, r5, sl, r4
 801ee96:	f853 4c20 	ldr.w	r4, [r3, #-32]
 801ee9a:	fa2c f580 	sxtab16	r5, ip, r0
 801ee9e:	fb24 8505 	smlad	r5, r4, r5, r8
 801eea2:	fa2c f090 	sxtab16	r0, ip, r0, ror #8
 801eea6:	f853 4c1c 	ldr.w	r4, [r3, #-28]
 801eeaa:	fb24 2000 	smlad	r0, r4, r0, r2
 801eeae:	9c03      	ldr	r4, [sp, #12]
 801eeb0:	593a      	ldr	r2, [r7, r4]
 801eeb2:	f859 400e 	ldr.w	r4, [r9, lr]
 801eeb6:	eac2 4704 	pkhbt	r7, r2, r4, lsl #16
 801eeba:	44f1      	add	r9, lr
 801eebc:	eac4 4422 	pkhtb	r4, r4, r2, asr #16
 801eec0:	fa2c f887 	sxtab16	r8, ip, r7
 801eec4:	f853 2c18 	ldr.w	r2, [r3, #-24]
 801eec8:	fb22 6608 	smlad	r6, r2, r8, r6
 801eecc:	fa2c f797 	sxtab16	r7, ip, r7, ror #8
 801eed0:	f853 2c14 	ldr.w	r2, [r3, #-20]
 801eed4:	fb22 a707 	smlad	r7, r2, r7, sl
 801eed8:	f853 2c10 	ldr.w	r2, [r3, #-16]
 801eedc:	fa2c f884 	sxtab16	r8, ip, r4
 801eee0:	fb22 5808 	smlad	r8, r2, r8, r5
 801eee4:	fa2c f494 	sxtab16	r4, ip, r4, ror #8
 801eee8:	f853 2c0c 	ldr.w	r2, [r3, #-12]
 801eeec:	fb22 0404 	smlad	r4, r2, r4, r0
 801eef0:	f859 200e 	ldr.w	r2, [r9, lr]
 801eef4:	9907      	ldr	r1, [sp, #28]
 801eef6:	f833 0c08 	ldrh.w	r0, [r3, #-8]
 801eefa:	f833 9c02 	ldrh.w	r9, [r3, #-2]
 801eefe:	f833 ac04 	ldrh.w	sl, [r3, #-4]
 801ef02:	b255      	sxtb	r5, r2
 801ef04:	1a6d      	subs	r5, r5, r1
 801ef06:	fb10 6505 	smlabb	r5, r0, r5, r6
 801ef0a:	f833 6c06 	ldrh.w	r6, [r3, #-6]
 801ef0e:	f342 2007 	sbfx	r0, r2, #8, #8
 801ef12:	1a40      	subs	r0, r0, r1
 801ef14:	fb16 7000 	smlabb	r0, r6, r0, r7
 801ef18:	f342 4607 	sbfx	r6, r2, #16, #8
 801ef1c:	ebc1 6222 	rsb	r2, r1, r2, asr #24
 801ef20:	fb19 4902 	smlabb	r9, r9, r2, r4
 801ef24:	9a00      	ldr	r2, [sp, #0]
 801ef26:	f932 4c08 	ldrsh.w	r4, [r2, #-8]
 801ef2a:	1a76      	subs	r6, r6, r1
 801ef2c:	9901      	ldr	r1, [sp, #4]
 801ef2e:	2c15      	cmp	r4, #21
 801ef30:	fb1a 8806 	smlabb	r8, sl, r6, r8
 801ef34:	e9cd 2108 	strd	r2, r1, [sp, #32]
 801ef38:	f851 7c10 	ldr.w	r7, [r1, #-16]
 801ef3c:	f85b 6c10 	ldr.w	r6, [fp, #-16]
 801ef40:	46da      	mov	sl, fp
 801ef42:	f73f aec3 	bgt.w	801eccc <forward_lite_dw_3x3_sssa8_ch+0x158>
 801ef46:	2c00      	cmp	r4, #0
 801ef48:	dd3b      	ble.n	801efc2 <forward_lite_dw_3x3_sssa8_ch+0x44e>
 801ef4a:	006a      	lsls	r2, r5, #1
 801ef4c:	fb52 6207 	smmla	r2, r2, r7, r6
 801ef50:	4122      	asrs	r2, r4
 801ef52:	f302 0207 	ssat	r2, #8, r2
 801ef56:	b252      	sxtb	r2, r2
 801ef58:	e6c4      	b.n	801ece4 <forward_lite_dw_3x3_sssa8_ch+0x170>
 801ef5a:	2c00      	cmp	r4, #0
 801ef5c:	dd3e      	ble.n	801efdc <forward_lite_dw_3x3_sssa8_ch+0x468>
 801ef5e:	9a01      	ldr	r2, [sp, #4]
 801ef60:	f85b 0c04 	ldr.w	r0, [fp, #-4]
 801ef64:	f852 2c04 	ldr.w	r2, [r2, #-4]
 801ef68:	ea4f 0949 	mov.w	r9, r9, lsl #1
 801ef6c:	fb59 0902 	smmla	r9, r9, r2, r0
 801ef70:	fa49 f904 	asr.w	r9, r9, r4
 801ef74:	f309 0907 	ssat	r9, #8, r9
 801ef78:	fa4f f989 	sxtb.w	r9, r9
 801ef7c:	e704      	b.n	801ed88 <forward_lite_dw_3x3_sssa8_ch+0x214>
 801ef7e:	2c00      	cmp	r4, #0
 801ef80:	dd3f      	ble.n	801f002 <forward_lite_dw_3x3_sssa8_ch+0x48e>
 801ef82:	9a01      	ldr	r2, [sp, #4]
 801ef84:	f85b 0c08 	ldr.w	r0, [fp, #-8]
 801ef88:	f852 2c08 	ldr.w	r2, [r2, #-8]
 801ef8c:	ea4f 0848 	mov.w	r8, r8, lsl #1
 801ef90:	fb58 0802 	smmla	r8, r8, r2, r0
 801ef94:	fa48 f804 	asr.w	r8, r8, r4
 801ef98:	f308 0807 	ssat	r8, #8, r8
 801ef9c:	fa4f f888 	sxtb.w	r8, r8
 801efa0:	e6d6      	b.n	801ed50 <forward_lite_dw_3x3_sssa8_ch+0x1dc>
 801efa2:	2c00      	cmp	r4, #0
 801efa4:	dd40      	ble.n	801f028 <forward_lite_dw_3x3_sssa8_ch+0x4b4>
 801efa6:	9a01      	ldr	r2, [sp, #4]
 801efa8:	0045      	lsls	r5, r0, #1
 801efaa:	f852 2c0c 	ldr.w	r2, [r2, #-12]
 801efae:	f85b 0c0c 	ldr.w	r0, [fp, #-12]
 801efb2:	fb55 0002 	smmla	r0, r5, r2, r0
 801efb6:	4120      	asrs	r0, r4
 801efb8:	f300 0007 	ssat	r0, #8, r0
 801efbc:	b240      	sxtb	r0, r0
 801efbe:	4632      	mov	r2, r6
 801efc0:	e6ab      	b.n	801ed1a <forward_lite_dw_3x3_sssa8_ch+0x1a6>
 801efc2:	f1c4 0201 	rsb	r2, r4, #1
 801efc6:	fa05 f202 	lsl.w	r2, r5, r2
 801efca:	f302 021f 	ssat	r2, #32, r2
 801efce:	fb52 f217 	smmulr	r2, r2, r7
 801efd2:	4432      	add	r2, r6
 801efd4:	f302 0207 	ssat	r2, #8, r2
 801efd8:	b252      	sxtb	r2, r2
 801efda:	e683      	b.n	801ece4 <forward_lite_dw_3x3_sssa8_ch+0x170>
 801efdc:	f1c4 0401 	rsb	r4, r4, #1
 801efe0:	fa09 f904 	lsl.w	r9, r9, r4
 801efe4:	f309 091f 	ssat	r9, #32, r9
 801efe8:	9a01      	ldr	r2, [sp, #4]
 801efea:	f852 2c04 	ldr.w	r2, [r2, #-4]
 801efee:	fb59 f912 	smmulr	r9, r9, r2
 801eff2:	f85b 2c04 	ldr.w	r2, [fp, #-4]
 801eff6:	4491      	add	r9, r2
 801eff8:	f309 0907 	ssat	r9, #8, r9
 801effc:	fa4f f989 	sxtb.w	r9, r9
 801f000:	e6c2      	b.n	801ed88 <forward_lite_dw_3x3_sssa8_ch+0x214>
 801f002:	f1c4 0401 	rsb	r4, r4, #1
 801f006:	fa08 f804 	lsl.w	r8, r8, r4
 801f00a:	f308 081f 	ssat	r8, #32, r8
 801f00e:	9a01      	ldr	r2, [sp, #4]
 801f010:	f852 2c08 	ldr.w	r2, [r2, #-8]
 801f014:	fb58 f812 	smmulr	r8, r8, r2
 801f018:	f85b 2c08 	ldr.w	r2, [fp, #-8]
 801f01c:	4490      	add	r8, r2
 801f01e:	f308 0807 	ssat	r8, #8, r8
 801f022:	fa4f f888 	sxtb.w	r8, r8
 801f026:	e693      	b.n	801ed50 <forward_lite_dw_3x3_sssa8_ch+0x1dc>
 801f028:	f1c4 0401 	rsb	r4, r4, #1
 801f02c:	40a0      	lsls	r0, r4
 801f02e:	f300 001f 	ssat	r0, #32, r0
 801f032:	9a01      	ldr	r2, [sp, #4]
 801f034:	f852 2c0c 	ldr.w	r2, [r2, #-12]
 801f038:	fb50 f012 	smmulr	r0, r0, r2
 801f03c:	f85b 2c0c 	ldr.w	r2, [fp, #-12]
 801f040:	4410      	add	r0, r2
 801f042:	f300 0007 	ssat	r0, #8, r0
 801f046:	b240      	sxtb	r0, r0
 801f048:	4632      	mov	r2, r6
 801f04a:	e666      	b.n	801ed1a <forward_lite_dw_3x3_sssa8_ch+0x1a6>
 801f04c:	4690      	mov	r8, r2
 801f04e:	46d1      	mov	r9, sl
 801f050:	46b3      	mov	fp, r6
 801f052:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801f054:	2b00      	cmp	r3, #0
 801f056:	f000 8120 	beq.w	801f29a <forward_lite_dw_3x3_sssa8_ch+0x726>
 801f05a:	9b05      	ldr	r3, [sp, #20]
 801f05c:	9a06      	ldr	r2, [sp, #24]
 801f05e:	f913 4008 	ldrsb.w	r4, [r3, r8]
 801f062:	9f07      	ldr	r7, [sp, #28]
 801f064:	8815      	ldrh	r5, [r2, #0]
 801f066:	eb03 0008 	add.w	r0, r3, r8
 801f06a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801f06c:	f910 600e 	ldrsb.w	r6, [r0, lr]
 801f070:	681b      	ldr	r3, [r3, #0]
 801f072:	1be4      	subs	r4, r4, r7
 801f074:	fb15 3504 	smlabb	r5, r5, r4, r3
 801f078:	eb00 014e 	add.w	r1, r0, lr, lsl #1
 801f07c:	9b03      	ldr	r3, [sp, #12]
 801f07e:	f910 401e 	ldrsb.w	r4, [r0, lr, lsl #1]
 801f082:	18c8      	adds	r0, r1, r3
 801f084:	56c9      	ldrsb	r1, [r1, r3]
 801f086:	8853      	ldrh	r3, [r2, #2]
 801f088:	1bf6      	subs	r6, r6, r7
 801f08a:	fb13 5306 	smlabb	r3, r3, r6, r5
 801f08e:	8895      	ldrh	r5, [r2, #4]
 801f090:	1be4      	subs	r4, r4, r7
 801f092:	fb14 3305 	smlabb	r3, r4, r5, r3
 801f096:	88d4      	ldrh	r4, [r2, #6]
 801f098:	1bc9      	subs	r1, r1, r7
 801f09a:	eb00 054e 	add.w	r5, r0, lr, lsl #1
 801f09e:	fb11 3404 	smlabb	r4, r1, r4, r3
 801f0a2:	f910 100e 	ldrsb.w	r1, [r0, lr]
 801f0a6:	f910 301e 	ldrsb.w	r3, [r0, lr, lsl #1]
 801f0aa:	9803      	ldr	r0, [sp, #12]
 801f0ac:	182e      	adds	r6, r5, r0
 801f0ae:	5628      	ldrsb	r0, [r5, r0]
 801f0b0:	8915      	ldrh	r5, [r2, #8]
 801f0b2:	1bc9      	subs	r1, r1, r7
 801f0b4:	fb11 4105 	smlabb	r1, r1, r5, r4
 801f0b8:	8954      	ldrh	r4, [r2, #10]
 801f0ba:	f8d9 5000 	ldr.w	r5, [r9]
 801f0be:	1bdb      	subs	r3, r3, r7
 801f0c0:	fb13 1304 	smlabb	r3, r3, r4, r1
 801f0c4:	8991      	ldrh	r1, [r2, #12]
 801f0c6:	89d4      	ldrh	r4, [r2, #14]
 801f0c8:	1bc0      	subs	r0, r0, r7
 801f0ca:	fb10 3001 	smlabb	r0, r0, r1, r3
 801f0ce:	f916 100e 	ldrsb.w	r1, [r6, lr]
 801f0d2:	f916 301e 	ldrsb.w	r3, [r6, lr, lsl #1]
 801f0d6:	1bc9      	subs	r1, r1, r7
 801f0d8:	fb11 0104 	smlabb	r1, r1, r4, r0
 801f0dc:	8a10      	ldrh	r0, [r2, #16]
 801f0de:	9a08      	ldr	r2, [sp, #32]
 801f0e0:	1bdb      	subs	r3, r3, r7
 801f0e2:	fb13 1300 	smlabb	r3, r3, r0, r1
 801f0e6:	f9b2 1000 	ldrsh.w	r1, [r2]
 801f0ea:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801f0ec:	f108 0001 	add.w	r0, r8, #1
 801f0f0:	2915      	cmp	r1, #21
 801f0f2:	6816      	ldr	r6, [r2, #0]
 801f0f4:	b280      	uxth	r0, r0
 801f0f6:	f300 80e8 	bgt.w	801f2ca <forward_lite_dw_3x3_sssa8_ch+0x756>
 801f0fa:	2900      	cmp	r1, #0
 801f0fc:	f340 810a 	ble.w	801f314 <forward_lite_dw_3x3_sssa8_ch+0x7a0>
 801f100:	005b      	lsls	r3, r3, #1
 801f102:	fb53 5306 	smmla	r3, r3, r6, r5
 801f106:	410b      	asrs	r3, r1
 801f108:	f303 0307 	ssat	r3, #8, r3
 801f10c:	b25b      	sxtb	r3, r3
 801f10e:	f88b 3000 	strb.w	r3, [fp]
 801f112:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801f114:	2b00      	cmp	r3, #0
 801f116:	f000 80be 	beq.w	801f296 <forward_lite_dw_3x3_sssa8_ch+0x722>
 801f11a:	9b05      	ldr	r3, [sp, #20]
 801f11c:	9e06      	ldr	r6, [sp, #24]
 801f11e:	5619      	ldrsb	r1, [r3, r0]
 801f120:	9f07      	ldr	r7, [sp, #28]
 801f122:	8a75      	ldrh	r5, [r6, #18]
 801f124:	9a03      	ldr	r2, [sp, #12]
 801f126:	181c      	adds	r4, r3, r0
 801f128:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801f12a:	685b      	ldr	r3, [r3, #4]
 801f12c:	eb04 004e 	add.w	r0, r4, lr, lsl #1
 801f130:	1bc9      	subs	r1, r1, r7
 801f132:	fb11 3105 	smlabb	r1, r1, r5, r3
 801f136:	f914 300e 	ldrsb.w	r3, [r4, lr]
 801f13a:	f914 501e 	ldrsb.w	r5, [r4, lr, lsl #1]
 801f13e:	1884      	adds	r4, r0, r2
 801f140:	5680      	ldrsb	r0, [r0, r2]
 801f142:	4632      	mov	r2, r6
 801f144:	8ab6      	ldrh	r6, [r6, #20]
 801f146:	1bdb      	subs	r3, r3, r7
 801f148:	fb13 1306 	smlabb	r3, r3, r6, r1
 801f14c:	8ad1      	ldrh	r1, [r2, #22]
 801f14e:	1bed      	subs	r5, r5, r7
 801f150:	fb15 3301 	smlabb	r3, r5, r1, r3
 801f154:	8b11      	ldrh	r1, [r2, #24]
 801f156:	1bc0      	subs	r0, r0, r7
 801f158:	eb04 054e 	add.w	r5, r4, lr, lsl #1
 801f15c:	fb10 3001 	smlabb	r0, r0, r1, r3
 801f160:	f914 100e 	ldrsb.w	r1, [r4, lr]
 801f164:	f914 301e 	ldrsb.w	r3, [r4, lr, lsl #1]
 801f168:	9c03      	ldr	r4, [sp, #12]
 801f16a:	192e      	adds	r6, r5, r4
 801f16c:	572c      	ldrsb	r4, [r5, r4]
 801f16e:	8b55      	ldrh	r5, [r2, #26]
 801f170:	1bc9      	subs	r1, r1, r7
 801f172:	fb11 0105 	smlabb	r1, r1, r5, r0
 801f176:	8b90      	ldrh	r0, [r2, #28]
 801f178:	1bdb      	subs	r3, r3, r7
 801f17a:	fb13 1300 	smlabb	r3, r3, r0, r1
 801f17e:	8bd0      	ldrh	r0, [r2, #30]
 801f180:	f916 100e 	ldrsb.w	r1, [r6, lr]
 801f184:	1be4      	subs	r4, r4, r7
 801f186:	fb14 3000 	smlabb	r0, r4, r0, r3
 801f18a:	8c14      	ldrh	r4, [r2, #32]
 801f18c:	f916 301e 	ldrsb.w	r3, [r6, lr, lsl #1]
 801f190:	1bc9      	subs	r1, r1, r7
 801f192:	fb11 0104 	smlabb	r1, r1, r4, r0
 801f196:	8c50      	ldrh	r0, [r2, #34]	@ 0x22
 801f198:	9a08      	ldr	r2, [sp, #32]
 801f19a:	1bdb      	subs	r3, r3, r7
 801f19c:	fb13 1300 	smlabb	r3, r3, r0, r1
 801f1a0:	f9b2 1002 	ldrsh.w	r1, [r2, #2]
 801f1a4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801f1a6:	f8d9 0004 	ldr.w	r0, [r9, #4]
 801f1aa:	6854      	ldr	r4, [r2, #4]
 801f1ac:	2915      	cmp	r1, #21
 801f1ae:	f300 8099 	bgt.w	801f2e4 <forward_lite_dw_3x3_sssa8_ch+0x770>
 801f1b2:	2900      	cmp	r1, #0
 801f1b4:	f340 80ba 	ble.w	801f32c <forward_lite_dw_3x3_sssa8_ch+0x7b8>
 801f1b8:	005b      	lsls	r3, r3, #1
 801f1ba:	fb53 0304 	smmla	r3, r3, r4, r0
 801f1be:	410b      	asrs	r3, r1
 801f1c0:	f303 0307 	ssat	r3, #8, r3
 801f1c4:	b25b      	sxtb	r3, r3
 801f1c6:	f88b 3001 	strb.w	r3, [fp, #1]
 801f1ca:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801f1cc:	2b02      	cmp	r3, #2
 801f1ce:	d062      	beq.n	801f296 <forward_lite_dw_3x3_sssa8_ch+0x722>
 801f1d0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801f1d2:	9e06      	ldr	r6, [sp, #24]
 801f1d4:	6898      	ldr	r0, [r3, #8]
 801f1d6:	9b08      	ldr	r3, [sp, #32]
 801f1d8:	9f07      	ldr	r7, [sp, #28]
 801f1da:	f9b3 1004 	ldrsh.w	r1, [r3, #4]
 801f1de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801f1e0:	8cb5      	ldrh	r5, [r6, #36]	@ 0x24
 801f1e2:	689b      	ldr	r3, [r3, #8]
 801f1e4:	9300      	str	r3, [sp, #0]
 801f1e6:	f108 0202 	add.w	r2, r8, #2
 801f1ea:	9b05      	ldr	r3, [sp, #20]
 801f1ec:	f8d9 a008 	ldr.w	sl, [r9, #8]
 801f1f0:	b292      	uxth	r2, r2
 801f1f2:	189c      	adds	r4, r3, r2
 801f1f4:	569a      	ldrsb	r2, [r3, r2]
 801f1f6:	f914 600e 	ldrsb.w	r6, [r4, lr]
 801f1fa:	1bd2      	subs	r2, r2, r7
 801f1fc:	eb04 034e 	add.w	r3, r4, lr, lsl #1
 801f200:	fb15 0502 	smlabb	r5, r5, r2, r0
 801f204:	9803      	ldr	r0, [sp, #12]
 801f206:	f914 401e 	ldrsb.w	r4, [r4, lr, lsl #1]
 801f20a:	181a      	adds	r2, r3, r0
 801f20c:	5618      	ldrsb	r0, [r3, r0]
 801f20e:	1bf6      	subs	r6, r6, r7
 801f210:	1be4      	subs	r4, r4, r7
 801f212:	1bc0      	subs	r0, r0, r7
 801f214:	9f06      	ldr	r7, [sp, #24]
 801f216:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 801f218:	fb13 5306 	smlabb	r3, r3, r6, r5
 801f21c:	8d3d      	ldrh	r5, [r7, #40]	@ 0x28
 801f21e:	463e      	mov	r6, r7
 801f220:	fb15 3304 	smlabb	r3, r5, r4, r3
 801f224:	8d74      	ldrh	r4, [r6, #42]	@ 0x2a
 801f226:	f912 500e 	ldrsb.w	r5, [r2, lr]
 801f22a:	eb02 074e 	add.w	r7, r2, lr, lsl #1
 801f22e:	fb14 3400 	smlabb	r4, r4, r0, r3
 801f232:	9b03      	ldr	r3, [sp, #12]
 801f234:	f912 001e 	ldrsb.w	r0, [r2, lr, lsl #1]
 801f238:	9a07      	ldr	r2, [sp, #28]
 801f23a:	18fe      	adds	r6, r7, r3
 801f23c:	56fb      	ldrsb	r3, [r7, r3]
 801f23e:	1aad      	subs	r5, r5, r2
 801f240:	1a80      	subs	r0, r0, r2
 801f242:	4617      	mov	r7, r2
 801f244:	1a9b      	subs	r3, r3, r2
 801f246:	9a06      	ldr	r2, [sp, #24]
 801f248:	8d92      	ldrh	r2, [r2, #44]	@ 0x2c
 801f24a:	fb12 4205 	smlabb	r2, r2, r5, r4
 801f24e:	9d06      	ldr	r5, [sp, #24]
 801f250:	8dec      	ldrh	r4, [r5, #46]	@ 0x2e
 801f252:	fb14 2400 	smlabb	r4, r4, r0, r2
 801f256:	8e28      	ldrh	r0, [r5, #48]	@ 0x30
 801f258:	fb10 4003 	smlabb	r0, r0, r3, r4
 801f25c:	f916 400e 	ldrsb.w	r4, [r6, lr]
 801f260:	f916 201e 	ldrsb.w	r2, [r6, lr, lsl #1]
 801f264:	8e6b      	ldrh	r3, [r5, #50]	@ 0x32
 801f266:	1be4      	subs	r4, r4, r7
 801f268:	fb13 0304 	smlabb	r3, r3, r4, r0
 801f26c:	8ea8      	ldrh	r0, [r5, #52]	@ 0x34
 801f26e:	1bd2      	subs	r2, r2, r7
 801f270:	2915      	cmp	r1, #21
 801f272:	fb10 3002 	smlabb	r0, r0, r2, r3
 801f276:	dd42      	ble.n	801f2fe <forward_lite_dw_3x3_sssa8_ch+0x78a>
 801f278:	1e8b      	subs	r3, r1, #2
 801f27a:	2401      	movs	r4, #1
 801f27c:	3901      	subs	r1, #1
 801f27e:	fa04 f303 	lsl.w	r3, r4, r3
 801f282:	9a00      	ldr	r2, [sp, #0]
 801f284:	fb50 3302 	smmla	r3, r0, r2, r3
 801f288:	410b      	asrs	r3, r1
 801f28a:	4453      	add	r3, sl
 801f28c:	f303 0307 	ssat	r3, #8, r3
 801f290:	b25b      	sxtb	r3, r3
 801f292:	f88b 3002 	strb.w	r3, [fp, #2]
 801f296:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801f298:	449b      	add	fp, r3
 801f29a:	9a05      	ldr	r2, [sp, #20]
 801f29c:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 801f29e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801f2a0:	440a      	add	r2, r1
 801f2a2:	3301      	adds	r3, #1
 801f2a4:	9205      	str	r2, [sp, #20]
 801f2a6:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801f2a8:	b21b      	sxth	r3, r3
 801f2aa:	4293      	cmp	r3, r2
 801f2ac:	930d      	str	r3, [sp, #52]	@ 0x34
 801f2ae:	f6ff acf0 	blt.w	801ec92 <forward_lite_dw_3x3_sssa8_ch+0x11e>
 801f2b2:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801f2b4:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 801f2b6:	3301      	adds	r3, #1
 801f2b8:	b21b      	sxth	r3, r3
 801f2ba:	429a      	cmp	r2, r3
 801f2bc:	4671      	mov	r1, lr
 801f2be:	461c      	mov	r4, r3
 801f2c0:	f73f acd9 	bgt.w	801ec76 <forward_lite_dw_3x3_sssa8_ch+0x102>
 801f2c4:	b01d      	add	sp, #116	@ 0x74
 801f2c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f2ca:	1e8c      	subs	r4, r1, #2
 801f2cc:	2201      	movs	r2, #1
 801f2ce:	3901      	subs	r1, #1
 801f2d0:	fa02 f404 	lsl.w	r4, r2, r4
 801f2d4:	fb53 4306 	smmla	r3, r3, r6, r4
 801f2d8:	410b      	asrs	r3, r1
 801f2da:	442b      	add	r3, r5
 801f2dc:	f303 0307 	ssat	r3, #8, r3
 801f2e0:	b25b      	sxtb	r3, r3
 801f2e2:	e714      	b.n	801f10e <forward_lite_dw_3x3_sssa8_ch+0x59a>
 801f2e4:	1e8d      	subs	r5, r1, #2
 801f2e6:	2201      	movs	r2, #1
 801f2e8:	3901      	subs	r1, #1
 801f2ea:	fa02 f505 	lsl.w	r5, r2, r5
 801f2ee:	fb53 5304 	smmla	r3, r3, r4, r5
 801f2f2:	410b      	asrs	r3, r1
 801f2f4:	4403      	add	r3, r0
 801f2f6:	f303 0307 	ssat	r3, #8, r3
 801f2fa:	b25b      	sxtb	r3, r3
 801f2fc:	e763      	b.n	801f1c6 <forward_lite_dw_3x3_sssa8_ch+0x652>
 801f2fe:	2900      	cmp	r1, #0
 801f300:	dd2c      	ble.n	801f35c <forward_lite_dw_3x3_sssa8_ch+0x7e8>
 801f302:	9a00      	ldr	r2, [sp, #0]
 801f304:	0043      	lsls	r3, r0, #1
 801f306:	fb53 a302 	smmla	r3, r3, r2, sl
 801f30a:	410b      	asrs	r3, r1
 801f30c:	f303 0307 	ssat	r3, #8, r3
 801f310:	b25b      	sxtb	r3, r3
 801f312:	e7be      	b.n	801f292 <forward_lite_dw_3x3_sssa8_ch+0x71e>
 801f314:	f1c1 0101 	rsb	r1, r1, #1
 801f318:	408b      	lsls	r3, r1
 801f31a:	f303 031f 	ssat	r3, #32, r3
 801f31e:	fb53 f316 	smmulr	r3, r3, r6
 801f322:	442b      	add	r3, r5
 801f324:	f303 0307 	ssat	r3, #8, r3
 801f328:	b25b      	sxtb	r3, r3
 801f32a:	e6f0      	b.n	801f10e <forward_lite_dw_3x3_sssa8_ch+0x59a>
 801f32c:	f1c1 0101 	rsb	r1, r1, #1
 801f330:	408b      	lsls	r3, r1
 801f332:	f303 031f 	ssat	r3, #32, r3
 801f336:	fb53 f314 	smmulr	r3, r3, r4
 801f33a:	4403      	add	r3, r0
 801f33c:	f303 0307 	ssat	r3, #8, r3
 801f340:	b25b      	sxtb	r3, r3
 801f342:	e740      	b.n	801f1c6 <forward_lite_dw_3x3_sssa8_ch+0x652>
 801f344:	4698      	mov	r8, r3
 801f346:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 801f348:	930a      	str	r3, [sp, #40]	@ 0x28
 801f34a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801f34c:	4699      	mov	r9, r3
 801f34e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801f350:	9306      	str	r3, [sp, #24]
 801f352:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801f354:	9308      	str	r3, [sp, #32]
 801f356:	9b32      	ldr	r3, [sp, #200]	@ 0xc8
 801f358:	9309      	str	r3, [sp, #36]	@ 0x24
 801f35a:	e67a      	b.n	801f052 <forward_lite_dw_3x3_sssa8_ch+0x4de>
 801f35c:	f1c1 0301 	rsb	r3, r1, #1
 801f360:	fa00 f303 	lsl.w	r3, r0, r3
 801f364:	f303 031f 	ssat	r3, #32, r3
 801f368:	9a00      	ldr	r2, [sp, #0]
 801f36a:	fb53 f312 	smmulr	r3, r3, r2
 801f36e:	4453      	add	r3, sl
 801f370:	f303 0307 	ssat	r3, #8, r3
 801f374:	b25b      	sxtb	r3, r3
 801f376:	e78c      	b.n	801f292 <forward_lite_dw_3x3_sssa8_ch+0x71e>
 801f378:	428e      	cmp	r6, r1
 801f37a:	f844 7f04 	str.w	r7, [r4, #4]!
 801f37e:	f47f ac3c 	bne.w	801ebfa <forward_lite_dw_3x3_sssa8_ch+0x86>
 801f382:	e44b      	b.n	801ec1c <forward_lite_dw_3x3_sssa8_ch+0xa8>
 801f384:	f1aa 0303 	sub.w	r3, sl, #3
 801f388:	930b      	str	r3, [sp, #44]	@ 0x2c
 801f38a:	e45f      	b.n	801ec4c <forward_lite_dw_3x3_sssa8_ch+0xd8>
 801f38c:	ea5f 049a 	movs.w	r4, sl, lsr #2
 801f390:	f000 8144 	beq.w	801f61c <forward_lite_dw_3x3_sssa8_ch+0xaa8>
 801f394:	1e63      	subs	r3, r4, #1
 801f396:	b29b      	uxth	r3, r3
 801f398:	1d2a      	adds	r2, r5, #4
 801f39a:	eb02 0c83 	add.w	ip, r2, r3, lsl #2
 801f39e:	ea4f 028a 	mov.w	r2, sl, lsl #2
 801f3a2:	9200      	str	r2, [sp, #0]
 801f3a4:	9a02      	ldr	r2, [sp, #8]
 801f3a6:	9406      	str	r4, [sp, #24]
 801f3a8:	eba2 060a 	sub.w	r6, r2, sl
 801f3ac:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801f3ae:	f8cd a020 	str.w	sl, [sp, #32]
 801f3b2:	ea4f 004a 	mov.w	r0, sl, lsl #1
 801f3b6:	4629      	mov	r1, r5
 801f3b8:	eb05 030a 	add.w	r3, r5, sl
 801f3bc:	9001      	str	r0, [sp, #4]
 801f3be:	eb0a 0e4a 	add.w	lr, sl, sl, lsl #1
 801f3c2:	eb0a 078a 	add.w	r7, sl, sl, lsl #2
 801f3c6:	4614      	mov	r4, r2
 801f3c8:	9526      	str	r5, [sp, #152]	@ 0x98
 801f3ca:	941b      	str	r4, [sp, #108]	@ 0x6c
 801f3cc:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 801f3ce:	f8d1 a000 	ldr.w	sl, [r1]
 801f3d2:	1d2a      	adds	r2, r5, #4
 801f3d4:	921b      	str	r2, [sp, #108]	@ 0x6c
 801f3d6:	681a      	ldr	r2, [r3, #0]
 801f3d8:	eaca 4402 	pkhbt	r4, sl, r2, lsl #16
 801f3dc:	eac2 422a 	pkhtb	r2, r2, sl, asr #16
 801f3e0:	fa2f fa84 	sxtb16	sl, r4
 801f3e4:	f8c5 a000 	str.w	sl, [r5]
 801f3e8:	fa2f f494 	sxtb16	r4, r4, ror #8
 801f3ec:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 801f3ee:	602c      	str	r4, [r5, #0]
 801f3f0:	3504      	adds	r5, #4
 801f3f2:	951b      	str	r5, [sp, #108]	@ 0x6c
 801f3f4:	9c1b      	ldr	r4, [sp, #108]	@ 0x6c
 801f3f6:	fa2f f582 	sxtb16	r5, r2
 801f3fa:	3404      	adds	r4, #4
 801f3fc:	f844 5c04 	str.w	r5, [r4, #-4]
 801f400:	941b      	str	r4, [sp, #108]	@ 0x6c
 801f402:	fa2f f292 	sxtb16	r2, r2, ror #8
 801f406:	9c1b      	ldr	r4, [sp, #108]	@ 0x6c
 801f408:	6022      	str	r2, [r4, #0]
 801f40a:	3404      	adds	r4, #4
 801f40c:	941b      	str	r4, [sp, #108]	@ 0x6c
 801f40e:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 801f410:	f850 a001 	ldr.w	sl, [r0, r1]
 801f414:	1d2a      	adds	r2, r5, #4
 801f416:	921b      	str	r2, [sp, #108]	@ 0x6c
 801f418:	58c2      	ldr	r2, [r0, r3]
 801f41a:	eaca 4402 	pkhbt	r4, sl, r2, lsl #16
 801f41e:	eac2 422a 	pkhtb	r2, r2, sl, asr #16
 801f422:	fa2f fa84 	sxtb16	sl, r4
 801f426:	f8c5 a000 	str.w	sl, [r5]
 801f42a:	fa2f f494 	sxtb16	r4, r4, ror #8
 801f42e:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 801f430:	602c      	str	r4, [r5, #0]
 801f432:	3504      	adds	r5, #4
 801f434:	951b      	str	r5, [sp, #108]	@ 0x6c
 801f436:	9c1b      	ldr	r4, [sp, #108]	@ 0x6c
 801f438:	fa2f f582 	sxtb16	r5, r2
 801f43c:	3404      	adds	r4, #4
 801f43e:	f844 5c04 	str.w	r5, [r4, #-4]
 801f442:	941b      	str	r4, [sp, #108]	@ 0x6c
 801f444:	fa2f f292 	sxtb16	r2, r2, ror #8
 801f448:	9c1b      	ldr	r4, [sp, #108]	@ 0x6c
 801f44a:	6022      	str	r2, [r4, #0]
 801f44c:	3404      	adds	r4, #4
 801f44e:	941b      	str	r4, [sp, #108]	@ 0x6c
 801f450:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 801f452:	f85e a003 	ldr.w	sl, [lr, r3]
 801f456:	1d2a      	adds	r2, r5, #4
 801f458:	921b      	str	r2, [sp, #108]	@ 0x6c
 801f45a:	9a00      	ldr	r2, [sp, #0]
 801f45c:	58d2      	ldr	r2, [r2, r3]
 801f45e:	eaca 4402 	pkhbt	r4, sl, r2, lsl #16
 801f462:	eac2 422a 	pkhtb	r2, r2, sl, asr #16
 801f466:	fa2f fa84 	sxtb16	sl, r4
 801f46a:	f8c5 a000 	str.w	sl, [r5]
 801f46e:	fa2f f494 	sxtb16	r4, r4, ror #8
 801f472:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 801f474:	602c      	str	r4, [r5, #0]
 801f476:	3504      	adds	r5, #4
 801f478:	951b      	str	r5, [sp, #108]	@ 0x6c
 801f47a:	9c1b      	ldr	r4, [sp, #108]	@ 0x6c
 801f47c:	fa2f f582 	sxtb16	r5, r2
 801f480:	3404      	adds	r4, #4
 801f482:	f844 5c04 	str.w	r5, [r4, #-4]
 801f486:	941b      	str	r4, [sp, #108]	@ 0x6c
 801f488:	fa2f f292 	sxtb16	r2, r2, ror #8
 801f48c:	9c1b      	ldr	r4, [sp, #108]	@ 0x6c
 801f48e:	6022      	str	r2, [r4, #0]
 801f490:	3404      	adds	r4, #4
 801f492:	941b      	str	r4, [sp, #108]	@ 0x6c
 801f494:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 801f496:	f857 a003 	ldr.w	sl, [r7, r3]
 801f49a:	1d2a      	adds	r2, r5, #4
 801f49c:	921b      	str	r2, [sp, #108]	@ 0x6c
 801f49e:	5872      	ldr	r2, [r6, r1]
 801f4a0:	eaca 4402 	pkhbt	r4, sl, r2, lsl #16
 801f4a4:	eac2 422a 	pkhtb	r2, r2, sl, asr #16
 801f4a8:	fa2f fa84 	sxtb16	sl, r4
 801f4ac:	f8c5 a000 	str.w	sl, [r5]
 801f4b0:	fa2f f494 	sxtb16	r4, r4, ror #8
 801f4b4:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 801f4b6:	602c      	str	r4, [r5, #0]
 801f4b8:	3504      	adds	r5, #4
 801f4ba:	951b      	str	r5, [sp, #108]	@ 0x6c
 801f4bc:	9c1b      	ldr	r4, [sp, #108]	@ 0x6c
 801f4be:	fa2f f582 	sxtb16	r5, r2
 801f4c2:	3404      	adds	r4, #4
 801f4c4:	f844 5c04 	str.w	r5, [r4, #-4]
 801f4c8:	941b      	str	r4, [sp, #108]	@ 0x6c
 801f4ca:	fa2f f292 	sxtb16	r2, r2, ror #8
 801f4ce:	9c1b      	ldr	r4, [sp, #108]	@ 0x6c
 801f4d0:	6022      	str	r2, [r4, #0]
 801f4d2:	3404      	adds	r4, #4
 801f4d4:	941b      	str	r4, [sp, #108]	@ 0x6c
 801f4d6:	9c1b      	ldr	r4, [sp, #108]	@ 0x6c
 801f4d8:	58f2      	ldr	r2, [r6, r3]
 801f4da:	eac2 2502 	pkhbt	r5, r2, r2, lsl #8
 801f4de:	fa2f f585 	sxtb16	r5, r5
 801f4e2:	8025      	strh	r5, [r4, #0]
 801f4e4:	0c2d      	lsrs	r5, r5, #16
 801f4e6:	8065      	strh	r5, [r4, #2]
 801f4e8:	eac2 6222 	pkhtb	r2, r2, r2, asr #24
 801f4ec:	fa2f f2a2 	sxtb16	r2, r2, ror #16
 801f4f0:	3104      	adds	r1, #4
 801f4f2:	80a2      	strh	r2, [r4, #4]
 801f4f4:	458c      	cmp	ip, r1
 801f4f6:	ea4f 4212 	mov.w	r2, r2, lsr #16
 801f4fa:	80e2      	strh	r2, [r4, #6]
 801f4fc:	f103 0304 	add.w	r3, r3, #4
 801f500:	f104 0408 	add.w	r4, r4, #8
 801f504:	f47f af61 	bne.w	801f3ca <forward_lite_dw_3x3_sssa8_ch+0x856>
 801f508:	4622      	mov	r2, r4
 801f50a:	9c06      	ldr	r4, [sp, #24]
 801f50c:	f8dd a020 	ldr.w	sl, [sp, #32]
 801f510:	9d26      	ldr	r5, [sp, #152]	@ 0x98
 801f512:	00a3      	lsls	r3, r4, #2
 801f514:	b29c      	uxth	r4, r3
 801f516:	f01a 0603 	ands.w	r6, sl, #3
 801f51a:	f43f ab52 	beq.w	801ebc2 <forward_lite_dw_3x3_sssa8_ch+0x4e>
 801f51e:	572b      	ldrsb	r3, [r5, r4]
 801f520:	8013      	strh	r3, [r2, #0]
 801f522:	1929      	adds	r1, r5, r4
 801f524:	eb01 034a 	add.w	r3, r1, sl, lsl #1
 801f528:	f911 000a 	ldrsb.w	r0, [r1, sl]
 801f52c:	8050      	strh	r0, [r2, #2]
 801f52e:	f911 101a 	ldrsb.w	r1, [r1, sl, lsl #1]
 801f532:	8091      	strh	r1, [r2, #4]
 801f534:	f913 100a 	ldrsb.w	r1, [r3, sl]
 801f538:	80d1      	strh	r1, [r2, #6]
 801f53a:	f913 101a 	ldrsb.w	r1, [r3, sl, lsl #1]
 801f53e:	8111      	strh	r1, [r2, #8]
 801f540:	eb03 034a 	add.w	r3, r3, sl, lsl #1
 801f544:	eb03 014a 	add.w	r1, r3, sl, lsl #1
 801f548:	f913 000a 	ldrsb.w	r0, [r3, sl]
 801f54c:	8150      	strh	r0, [r2, #10]
 801f54e:	f913 301a 	ldrsb.w	r3, [r3, sl, lsl #1]
 801f552:	8193      	strh	r3, [r2, #12]
 801f554:	f911 300a 	ldrsb.w	r3, [r1, sl]
 801f558:	81d3      	strh	r3, [r2, #14]
 801f55a:	f911 301a 	ldrsb.w	r3, [r1, sl, lsl #1]
 801f55e:	8213      	strh	r3, [r2, #16]
 801f560:	2e01      	cmp	r6, #1
 801f562:	f104 0301 	add.w	r3, r4, #1
 801f566:	b29b      	uxth	r3, r3
 801f568:	d045      	beq.n	801f5f6 <forward_lite_dw_3x3_sssa8_ch+0xa82>
 801f56a:	56e9      	ldrsb	r1, [r5, r3]
 801f56c:	8251      	strh	r1, [r2, #18]
 801f56e:	442b      	add	r3, r5
 801f570:	eb03 014a 	add.w	r1, r3, sl, lsl #1
 801f574:	f913 000a 	ldrsb.w	r0, [r3, sl]
 801f578:	8290      	strh	r0, [r2, #20]
 801f57a:	f913 301a 	ldrsb.w	r3, [r3, sl, lsl #1]
 801f57e:	82d3      	strh	r3, [r2, #22]
 801f580:	f911 300a 	ldrsb.w	r3, [r1, sl]
 801f584:	8313      	strh	r3, [r2, #24]
 801f586:	f911 301a 	ldrsb.w	r3, [r1, sl, lsl #1]
 801f58a:	8353      	strh	r3, [r2, #26]
 801f58c:	eb01 034a 	add.w	r3, r1, sl, lsl #1
 801f590:	eb03 014a 	add.w	r1, r3, sl, lsl #1
 801f594:	f913 000a 	ldrsb.w	r0, [r3, sl]
 801f598:	8390      	strh	r0, [r2, #28]
 801f59a:	f913 301a 	ldrsb.w	r3, [r3, sl, lsl #1]
 801f59e:	83d3      	strh	r3, [r2, #30]
 801f5a0:	f911 300a 	ldrsb.w	r3, [r1, sl]
 801f5a4:	8413      	strh	r3, [r2, #32]
 801f5a6:	f911 301a 	ldrsb.w	r3, [r1, sl, lsl #1]
 801f5aa:	8453      	strh	r3, [r2, #34]	@ 0x22
 801f5ac:	2e02      	cmp	r6, #2
 801f5ae:	d022      	beq.n	801f5f6 <forward_lite_dw_3x3_sssa8_ch+0xa82>
 801f5b0:	1ca3      	adds	r3, r4, #2
 801f5b2:	b29b      	uxth	r3, r3
 801f5b4:	18e9      	adds	r1, r5, r3
 801f5b6:	56eb      	ldrsb	r3, [r5, r3]
 801f5b8:	8493      	strh	r3, [r2, #36]	@ 0x24
 801f5ba:	f911 300a 	ldrsb.w	r3, [r1, sl]
 801f5be:	84d3      	strh	r3, [r2, #38]	@ 0x26
 801f5c0:	f911 301a 	ldrsb.w	r3, [r1, sl, lsl #1]
 801f5c4:	8513      	strh	r3, [r2, #40]	@ 0x28
 801f5c6:	eb01 034a 	add.w	r3, r1, sl, lsl #1
 801f5ca:	eb03 014a 	add.w	r1, r3, sl, lsl #1
 801f5ce:	f913 000a 	ldrsb.w	r0, [r3, sl]
 801f5d2:	8550      	strh	r0, [r2, #42]	@ 0x2a
 801f5d4:	f913 301a 	ldrsb.w	r3, [r3, sl, lsl #1]
 801f5d8:	8593      	strh	r3, [r2, #44]	@ 0x2c
 801f5da:	f911 300a 	ldrsb.w	r3, [r1, sl]
 801f5de:	85d3      	strh	r3, [r2, #46]	@ 0x2e
 801f5e0:	f911 301a 	ldrsb.w	r3, [r1, sl, lsl #1]
 801f5e4:	8613      	strh	r3, [r2, #48]	@ 0x30
 801f5e6:	eb01 014a 	add.w	r1, r1, sl, lsl #1
 801f5ea:	f911 300a 	ldrsb.w	r3, [r1, sl]
 801f5ee:	8653      	strh	r3, [r2, #50]	@ 0x32
 801f5f0:	f911 301a 	ldrsb.w	r3, [r1, sl, lsl #1]
 801f5f4:	8693      	strh	r3, [r2, #52]	@ 0x34
 801f5f6:	9b02      	ldr	r3, [sp, #8]
 801f5f8:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801f5fa:	982c      	ldr	r0, [sp, #176]	@ 0xb0
 801f5fc:	4453      	add	r3, sl
 801f5fe:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 801f602:	4651      	mov	r1, sl
 801f604:	9a32      	ldr	r2, [sp, #200]	@ 0xc8
 801f606:	9310      	str	r3, [sp, #64]	@ 0x40
 801f608:	461c      	mov	r4, r3
 801f60a:	f001 fc4b 	bl	8020ea4 <align_factor_ch>
 801f60e:	f06f 0315 	mvn.w	r3, #21
 801f612:	fb03 430a 	mla	r3, r3, sl, r4
 801f616:	9311      	str	r3, [sp, #68]	@ 0x44
 801f618:	f7ff bae7 	b.w	801ebea <forward_lite_dw_3x3_sssa8_ch+0x76>
 801f61c:	ea4f 034a 	mov.w	r3, sl, lsl #1
 801f620:	9301      	str	r3, [sp, #4]
 801f622:	e778      	b.n	801f516 <forward_lite_dw_3x3_sssa8_ch+0x9a2>

0801f624 <forward_lite_pw_sssa8_ch>:
 801f624:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f628:	b09d      	sub	sp, #116	@ 0x74
 801f62a:	4689      	mov	r9, r1
 801f62c:	f8bd 10a4 	ldrh.w	r1, [sp, #164]	@ 0xa4
 801f630:	910d      	str	r1, [sp, #52]	@ 0x34
 801f632:	f99d 10ac 	ldrsb.w	r1, [sp, #172]	@ 0xac
 801f636:	9111      	str	r1, [sp, #68]	@ 0x44
 801f638:	f99d 10b0 	ldrsb.w	r1, [sp, #176]	@ 0xb0
 801f63c:	9115      	str	r1, [sp, #84]	@ 0x54
 801f63e:	f89d 10b8 	ldrb.w	r1, [sp, #184]	@ 0xb8
 801f642:	910f      	str	r1, [sp, #60]	@ 0x3c
 801f644:	2b02      	cmp	r3, #2
 801f646:	f8bd 10c0 	ldrh.w	r1, [sp, #192]	@ 0xc0
 801f64a:	9217      	str	r2, [sp, #92]	@ 0x5c
 801f64c:	4616      	mov	r6, r2
 801f64e:	f8bd b09c 	ldrh.w	fp, [sp, #156]	@ 0x9c
 801f652:	f8bd 2098 	ldrh.w	r2, [sp, #152]	@ 0x98
 801f656:	9c2f      	ldr	r4, [sp, #188]	@ 0xbc
 801f658:	9114      	str	r1, [sp, #80]	@ 0x50
 801f65a:	4680      	mov	r8, r0
 801f65c:	46ca      	mov	sl, r9
 801f65e:	f000 80be 	beq.w	801f7de <forward_lite_pw_sssa8_ch+0x1ba>
 801f662:	4645      	mov	r5, r8
 801f664:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801f666:	fb0a f206 	mul.w	r2, sl, r6
 801f66a:	fb03 4302 	mla	r3, r3, r2, r4
 801f66e:	4598      	cmp	r8, r3
 801f670:	920e      	str	r2, [sp, #56]	@ 0x38
 801f672:	d204      	bcs.n	801f67e <forward_lite_pw_sssa8_ch+0x5a>
 801f674:	fb0b 8802 	mla	r8, fp, r2, r8
 801f678:	4544      	cmp	r4, r8
 801f67a:	f0c0 813c 	bcc.w	801f8f6 <forward_lite_pw_sssa8_ch+0x2d2>
 801f67e:	2301      	movs	r3, #1
 801f680:	9310      	str	r3, [sp, #64]	@ 0x40
 801f682:	9f0d      	ldr	r7, [sp, #52]	@ 0x34
 801f684:	9b31      	ldr	r3, [sp, #196]	@ 0xc4
 801f686:	9a32      	ldr	r2, [sp, #200]	@ 0xc8
 801f688:	982d      	ldr	r0, [sp, #180]	@ 0xb4
 801f68a:	eba3 0847 	sub.w	r8, r3, r7, lsl #1
 801f68e:	9b32      	ldr	r3, [sp, #200]	@ 0xc8
 801f690:	4498      	add	r8, r3
 801f692:	4639      	mov	r1, r7
 801f694:	4643      	mov	r3, r8
 801f696:	f001 fc05 	bl	8020ea4 <align_factor_ch>
 801f69a:	9a32      	ldr	r2, [sp, #200]	@ 0xc8
 801f69c:	9932      	ldr	r1, [sp, #200]	@ 0xc8
 801f69e:	eb02 0287 	add.w	r2, r2, r7, lsl #2
 801f6a2:	eb01 01c7 	add.w	r1, r1, r7, lsl #3
 801f6a6:	ea4f 0c47 	mov.w	ip, r7, lsl #1
 801f6aa:	9213      	str	r2, [sp, #76]	@ 0x4c
 801f6ac:	9112      	str	r1, [sp, #72]	@ 0x48
 801f6ae:	2f00      	cmp	r7, #0
 801f6b0:	f000 8169 	beq.w	801f986 <forward_lite_pw_sssa8_ch+0x362>
 801f6b4:	2301      	movs	r3, #1
 801f6b6:	9f15      	ldr	r7, [sp, #84]	@ 0x54
 801f6b8:	9318      	str	r3, [sp, #96]	@ 0x60
 801f6ba:	44c4      	add	ip, r8
 801f6bc:	4641      	mov	r1, r8
 801f6be:	1f10      	subs	r0, r2, #4
 801f6c0:	469e      	mov	lr, r3
 801f6c2:	9616      	str	r6, [sp, #88]	@ 0x58
 801f6c4:	f931 3b02 	ldrsh.w	r3, [r1], #2
 801f6c8:	1e5a      	subs	r2, r3, #1
 801f6ca:	b292      	uxth	r2, r2
 801f6cc:	fa0e f603 	lsl.w	r6, lr, r3
 801f6d0:	2a14      	cmp	r2, #20
 801f6d2:	fa07 f303 	lsl.w	r3, r7, r3
 801f6d6:	eb03 0356 	add.w	r3, r3, r6, lsr #1
 801f6da:	d878      	bhi.n	801f7ce <forward_lite_pw_sssa8_ch+0x1aa>
 801f6dc:	458c      	cmp	ip, r1
 801f6de:	f840 3f04 	str.w	r3, [r0, #4]!
 801f6e2:	d1ef      	bne.n	801f6c4 <forward_lite_pw_sssa8_ch+0xa0>
 801f6e4:	9e16      	ldr	r6, [sp, #88]	@ 0x58
 801f6e6:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801f6e8:	2b01      	cmp	r3, #1
 801f6ea:	f000 8118 	beq.w	801f91e <forward_lite_pw_sssa8_ch+0x2fa>
 801f6ee:	2700      	movs	r7, #0
 801f6f0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801f6f2:	07db      	lsls	r3, r3, #31
 801f6f4:	f140 810a 	bpl.w	801f90c <forward_lite_pw_sssa8_ch+0x2e8>
 801f6f8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801f6fa:	eb0a 0306 	add.w	r3, sl, r6
 801f6fe:	3302      	adds	r3, #2
 801f700:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 801f704:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801f706:	2a00      	cmp	r2, #0
 801f708:	f000 80fd 	beq.w	801f906 <forward_lite_pw_sssa8_ch+0x2e2>
 801f70c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801f70e:	942f      	str	r4, [sp, #188]	@ 0xbc
 801f710:	fb02 f20a 	mul.w	r2, r2, sl
 801f714:	9214      	str	r2, [sp, #80]	@ 0x50
 801f716:	fb0a f20b 	mul.w	r2, sl, fp
 801f71a:	f8cd a058 	str.w	sl, [sp, #88]	@ 0x58
 801f71e:	465c      	mov	r4, fp
 801f720:	46c2      	mov	sl, r8
 801f722:	f8dd b0bc 	ldr.w	fp, [sp, #188]	@ 0xbc
 801f726:	9215      	str	r2, [sp, #84]	@ 0x54
 801f728:	2600      	movs	r6, #0
 801f72a:	4698      	mov	r8, r3
 801f72c:	e022      	b.n	801f774 <forward_lite_pw_sssa8_ch+0x150>
 801f72e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801f730:	930a      	str	r3, [sp, #40]	@ 0x28
 801f732:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801f734:	9309      	str	r3, [sp, #36]	@ 0x24
 801f736:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801f738:	9308      	str	r3, [sp, #32]
 801f73a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801f73c:	9307      	str	r3, [sp, #28]
 801f73e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801f740:	9a2a      	ldr	r2, [sp, #168]	@ 0xa8
 801f742:	9928      	ldr	r1, [sp, #160]	@ 0xa0
 801f744:	970b      	str	r7, [sp, #44]	@ 0x2c
 801f746:	e9cd 4305 	strd	r4, r3, [sp, #20]
 801f74a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801f74c:	e9cd 8303 	strd	r8, r3, [sp, #12]
 801f750:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801f752:	e9cd a301 	strd	sl, r3, [sp, #4]
 801f756:	9b32      	ldr	r3, [sp, #200]	@ 0xc8
 801f758:	9300      	str	r3, [sp, #0]
 801f75a:	4628      	mov	r0, r5
 801f75c:	465b      	mov	r3, fp
 801f75e:	f011 fb87 	bl	8030e70 <st_sssa8_ch_nn_mat_mult_pw_nt_t>
 801f762:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801f764:	449b      	add	fp, r3
 801f766:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801f768:	441d      	add	r5, r3
 801f76a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801f76c:	3601      	adds	r6, #1
 801f76e:	42b3      	cmp	r3, r6
 801f770:	f000 80c9 	beq.w	801f906 <forward_lite_pw_sssa8_ch+0x2e2>
 801f774:	f1b9 0f05 	cmp.w	r9, #5
 801f778:	d1d9      	bne.n	801f72e <forward_lite_pw_sssa8_ch+0x10a>
 801f77a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801f77c:	2b19      	cmp	r3, #25
 801f77e:	d1d6      	bne.n	801f72e <forward_lite_pw_sssa8_ch+0x10a>
 801f780:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801f782:	2b40      	cmp	r3, #64	@ 0x40
 801f784:	d1d3      	bne.n	801f72e <forward_lite_pw_sssa8_ch+0x10a>
 801f786:	2c40      	cmp	r4, #64	@ 0x40
 801f788:	d1d1      	bne.n	801f72e <forward_lite_pw_sssa8_ch+0x10a>
 801f78a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801f78c:	3380      	adds	r3, #128	@ 0x80
 801f78e:	d1ce      	bne.n	801f72e <forward_lite_pw_sssa8_ch+0x10a>
 801f790:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 801f792:	2b00      	cmp	r3, #0
 801f794:	d0cb      	beq.n	801f72e <forward_lite_pw_sssa8_ch+0x10a>
 801f796:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801f798:	2b03      	cmp	r3, #3
 801f79a:	d1c8      	bne.n	801f72e <forward_lite_pw_sssa8_ch+0x10a>
 801f79c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801f79e:	930a      	str	r3, [sp, #40]	@ 0x28
 801f7a0:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801f7a2:	9a2a      	ldr	r2, [sp, #168]	@ 0xa8
 801f7a4:	9928      	ldr	r1, [sp, #160]	@ 0xa0
 801f7a6:	970b      	str	r7, [sp, #44]	@ 0x2c
 801f7a8:	e9cd 9308 	strd	r9, r3, [sp, #32]
 801f7ac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801f7ae:	9307      	str	r3, [sp, #28]
 801f7b0:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801f7b2:	e9cd 4305 	strd	r4, r3, [sp, #20]
 801f7b6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801f7b8:	e9cd a301 	strd	sl, r3, [sp, #4]
 801f7bc:	9b32      	ldr	r3, [sp, #200]	@ 0xc8
 801f7be:	9300      	str	r3, [sp, #0]
 801f7c0:	e9cd 8403 	strd	r8, r4, [sp, #12]
 801f7c4:	465b      	mov	r3, fp
 801f7c6:	4628      	mov	r0, r5
 801f7c8:	f011 ff02 	bl	80315d0 <st_sssa8_ch_nn_mat_mult_pw_nt_t_KWS>
 801f7cc:	e7c9      	b.n	801f762 <forward_lite_pw_sssa8_ch+0x13e>
 801f7ce:	458c      	cmp	ip, r1
 801f7d0:	f840 7f04 	str.w	r7, [r0, #4]!
 801f7d4:	f000 809c 	beq.w	801f910 <forward_lite_pw_sssa8_ch+0x2ec>
 801f7d8:	2300      	movs	r3, #0
 801f7da:	9318      	str	r3, [sp, #96]	@ 0x60
 801f7dc:	e772      	b.n	801f6c4 <forward_lite_pw_sssa8_ch+0xa0>
 801f7de:	2a02      	cmp	r2, #2
 801f7e0:	f47f af3f 	bne.w	801f662 <forward_lite_pw_sssa8_ch+0x3e>
 801f7e4:	2e00      	cmp	r6, #0
 801f7e6:	f000 80d1 	beq.w	801f98c <forward_lite_pw_sssa8_ch+0x368>
 801f7ea:	ea4f 039b 	mov.w	r3, fp, lsr #2
 801f7ee:	461a      	mov	r2, r3
 801f7f0:	f109 33ff 	add.w	r3, r9, #4294967295
 801f7f4:	085b      	lsrs	r3, r3, #1
 801f7f6:	fb0b f303 	mul.w	r3, fp, r3
 801f7fa:	931a      	str	r3, [sp, #104]	@ 0x68
 801f7fc:	fb09 f30b 	mul.w	r3, r9, fp
 801f800:	005b      	lsls	r3, r3, #1
 801f802:	9319      	str	r3, [sp, #100]	@ 0x64
 801f804:	0853      	lsrs	r3, r2, #1
 801f806:	00db      	lsls	r3, r3, #3
 801f808:	9310      	str	r3, [sp, #64]	@ 0x40
 801f80a:	4613      	mov	r3, r2
 801f80c:	f022 0c01 	bic.w	ip, r2, #1
 801f810:	2100      	movs	r1, #0
 801f812:	f003 0701 	and.w	r7, r3, #1
 801f816:	f102 3aff 	add.w	sl, r2, #4294967295
 801f81a:	0095      	lsls	r5, r2, #2
 801f81c:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 801f820:	f00b 0603 	and.w	r6, fp, #3
 801f824:	4686      	mov	lr, r0
 801f826:	460a      	mov	r2, r1
 801f828:	9712      	str	r7, [sp, #72]	@ 0x48
 801f82a:	901b      	str	r0, [sp, #108]	@ 0x6c
 801f82c:	4698      	mov	r8, r3
 801f82e:	f1b9 0f00 	cmp.w	r9, #0
 801f832:	d037      	beq.n	801f8a4 <forward_lite_pw_sssa8_ch+0x280>
 801f834:	4673      	mov	r3, lr
 801f836:	f8cd e04c 	str.w	lr, [sp, #76]	@ 0x4c
 801f83a:	2700      	movs	r7, #0
 801f83c:	46d6      	mov	lr, sl
 801f83e:	9216      	str	r2, [sp, #88]	@ 0x58
 801f840:	9118      	str	r1, [sp, #96]	@ 0x60
 801f842:	f1b8 0f00 	cmp.w	r8, #0
 801f846:	d010      	beq.n	801f86a <forward_lite_pw_sssa8_ch+0x246>
 801f848:	f1be 0f06 	cmp.w	lr, #6
 801f84c:	d903      	bls.n	801f856 <forward_lite_pw_sssa8_ch+0x232>
 801f84e:	43da      	mvns	r2, r3
 801f850:	4402      	add	r2, r0
 801f852:	2a06      	cmp	r2, #6
 801f854:	d879      	bhi.n	801f94a <forward_lite_pw_sssa8_ch+0x326>
 801f856:	1959      	adds	r1, r3, r5
 801f858:	4602      	mov	r2, r0
 801f85a:	f853 4b04 	ldr.w	r4, [r3], #4
 801f85e:	f842 4b04 	str.w	r4, [r2], #4
 801f862:	428b      	cmp	r3, r1
 801f864:	d1f9      	bne.n	801f85a <forward_lite_pw_sssa8_ch+0x236>
 801f866:	460b      	mov	r3, r1
 801f868:	4428      	add	r0, r5
 801f86a:	b176      	cbz	r6, 801f88a <forward_lite_pw_sssa8_ch+0x266>
 801f86c:	f993 2000 	ldrsb.w	r2, [r3]
 801f870:	7002      	strb	r2, [r0, #0]
 801f872:	2e01      	cmp	r6, #1
 801f874:	d007      	beq.n	801f886 <forward_lite_pw_sssa8_ch+0x262>
 801f876:	f993 2001 	ldrsb.w	r2, [r3, #1]
 801f87a:	7042      	strb	r2, [r0, #1]
 801f87c:	2e03      	cmp	r6, #3
 801f87e:	bf04      	itt	eq
 801f880:	f993 2002 	ldrsbeq.w	r2, [r3, #2]
 801f884:	7082      	strbeq	r2, [r0, #2]
 801f886:	4433      	add	r3, r6
 801f888:	4430      	add	r0, r6
 801f88a:	3702      	adds	r7, #2
 801f88c:	454f      	cmp	r7, r9
 801f88e:	445b      	add	r3, fp
 801f890:	dbd7      	blt.n	801f842 <forward_lite_pw_sssa8_ch+0x21e>
 801f892:	9918      	ldr	r1, [sp, #96]	@ 0x60
 801f894:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 801f896:	eb01 030b 	add.w	r3, r1, fp
 801f89a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801f89c:	46f2      	mov	sl, lr
 801f89e:	f8dd e04c 	ldr.w	lr, [sp, #76]	@ 0x4c
 801f8a2:	4419      	add	r1, r3
 801f8a4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801f8a6:	449e      	add	lr, r3
 801f8a8:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801f8aa:	3202      	adds	r2, #2
 801f8ac:	429a      	cmp	r2, r3
 801f8ae:	dbbe      	blt.n	801f82e <forward_lite_pw_sssa8_ch+0x20a>
 801f8b0:	f8dd 806c 	ldr.w	r8, [sp, #108]	@ 0x6c
 801f8b4:	9c2f      	ldr	r4, [sp, #188]	@ 0xbc
 801f8b6:	460a      	mov	r2, r1
 801f8b8:	461e      	mov	r6, r3
 801f8ba:	fb06 f309 	mul.w	r3, r6, r9
 801f8be:	eba8 0502 	sub.w	r5, r8, r2
 801f8c2:	fb0b 5503 	mla	r5, fp, r3, r5
 801f8c6:	4629      	mov	r1, r5
 801f8c8:	4640      	mov	r0, r8
 801f8ca:	edcd 0a10 	vstr	s1, [sp, #64]	@ 0x40
 801f8ce:	ed8d 0a0e 	vstr	s0, [sp, #56]	@ 0x38
 801f8d2:	f002 fb49 	bl	8021f68 <st_int8_copy>
 801f8d6:	1c73      	adds	r3, r6, #1
 801f8d8:	f109 0201 	add.w	r2, r9, #1
 801f8dc:	105e      	asrs	r6, r3, #1
 801f8de:	f3c3 034f 	ubfx	r3, r3, #1, #16
 801f8e2:	ed9d 0a0e 	vldr	s0, [sp, #56]	@ 0x38
 801f8e6:	eddd 0a10 	vldr	s1, [sp, #64]	@ 0x40
 801f8ea:	9317      	str	r3, [sp, #92]	@ 0x5c
 801f8ec:	ea4f 0a62 	mov.w	sl, r2, asr #1
 801f8f0:	f3c2 094f 	ubfx	r9, r2, #1, #16
 801f8f4:	e6b6      	b.n	801f664 <forward_lite_pw_sssa8_ch+0x40>
 801f8f6:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801f8f8:	9310      	str	r3, [sp, #64]	@ 0x40
 801f8fa:	2301      	movs	r3, #1
 801f8fc:	9317      	str	r3, [sp, #92]	@ 0x5c
 801f8fe:	f8cd a038 	str.w	sl, [sp, #56]	@ 0x38
 801f902:	461e      	mov	r6, r3
 801f904:	e6bd      	b.n	801f682 <forward_lite_pw_sssa8_ch+0x5e>
 801f906:	b01d      	add	sp, #116	@ 0x74
 801f908:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f90c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801f90e:	e6f9      	b.n	801f704 <forward_lite_pw_sssa8_ch+0xe0>
 801f910:	2300      	movs	r3, #0
 801f912:	9318      	str	r3, [sp, #96]	@ 0x60
 801f914:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801f916:	9e16      	ldr	r6, [sp, #88]	@ 0x58
 801f918:	2b01      	cmp	r3, #1
 801f91a:	f47f aee8 	bne.w	801f6ee <forward_lite_pw_sssa8_ch+0xca>
 801f91e:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801f920:	9931      	ldr	r1, [sp, #196]	@ 0xc4
 801f922:	f06f 0309 	mvn.w	r3, #9
 801f926:	fb03 1302 	mla	r3, r3, r2, r1
 801f92a:	fb0b f202 	mul.w	r2, fp, r2
 801f92e:	ebb3 0f42 	cmp.w	r3, r2, lsl #1
 801f932:	f6ff aedc 	blt.w	801f6ee <forward_lite_pw_sssa8_ch+0xca>
 801f936:	9f12      	ldr	r7, [sp, #72]	@ 0x48
 801f938:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801f93a:	990d      	ldr	r1, [sp, #52]	@ 0x34
 801f93c:	9828      	ldr	r0, [sp, #160]	@ 0xa0
 801f93e:	e9cd b700 	strd	fp, r7, [sp]
 801f942:	465b      	mov	r3, fp
 801f944:	f002 fec4 	bl	80226d0 <st_sssa8_ch_fullW_prefetch>
 801f948:	e6d2      	b.n	801f6f0 <forward_lite_pw_sssa8_ch+0xcc>
 801f94a:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 801f94c:	f8cd e038 	str.w	lr, [sp, #56]	@ 0x38
 801f950:	461a      	mov	r2, r3
 801f952:	4601      	mov	r1, r0
 801f954:	eb03 0a04 	add.w	sl, r3, r4
 801f958:	6814      	ldr	r4, [r2, #0]
 801f95a:	f8d2 e004 	ldr.w	lr, [r2, #4]
 801f95e:	f8c1 e004 	str.w	lr, [r1, #4]
 801f962:	3208      	adds	r2, #8
 801f964:	4552      	cmp	r2, sl
 801f966:	600c      	str	r4, [r1, #0]
 801f968:	f101 0108 	add.w	r1, r1, #8
 801f96c:	d1f4      	bne.n	801f958 <forward_lite_pw_sssa8_ch+0x334>
 801f96e:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801f970:	f8dd e038 	ldr.w	lr, [sp, #56]	@ 0x38
 801f974:	b11a      	cbz	r2, 801f97e <forward_lite_pw_sssa8_ch+0x35a>
 801f976:	f853 200c 	ldr.w	r2, [r3, ip]
 801f97a:	f840 200c 	str.w	r2, [r0, ip]
 801f97e:	1959      	adds	r1, r3, r5
 801f980:	460b      	mov	r3, r1
 801f982:	4428      	add	r0, r5
 801f984:	e771      	b.n	801f86a <forward_lite_pw_sssa8_ch+0x246>
 801f986:	2301      	movs	r3, #1
 801f988:	9318      	str	r3, [sp, #96]	@ 0x60
 801f98a:	e6ac      	b.n	801f6e6 <forward_lite_pw_sssa8_ch+0xc2>
 801f98c:	4632      	mov	r2, r6
 801f98e:	e794      	b.n	801f8ba <forward_lite_pw_sssa8_ch+0x296>

0801f990 <forward_lite_conv2d_deep_3x3_sssa8_ch>:
 801f990:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f994:	b095      	sub	sp, #84	@ 0x54
 801f996:	4604      	mov	r4, r0
 801f998:	f8bd 6098 	ldrh.w	r6, [sp, #152]	@ 0x98
 801f99c:	f8bd 009c 	ldrh.w	r0, [sp, #156]	@ 0x9c
 801f9a0:	f8bd 807c 	ldrh.w	r8, [sp, #124]	@ 0x7c
 801f9a4:	9d25      	ldr	r5, [sp, #148]	@ 0x94
 801f9a6:	930d      	str	r3, [sp, #52]	@ 0x34
 801f9a8:	469c      	mov	ip, r3
 801f9aa:	fb06 f300 	mul.w	r3, r6, r0
 801f9ae:	fb08 5303 	mla	r3, r8, r3, r5
 801f9b2:	f89d 7090 	ldrb.w	r7, [sp, #144]	@ 0x90
 801f9b6:	960e      	str	r6, [sp, #56]	@ 0x38
 801f9b8:	429c      	cmp	r4, r3
 801f9ba:	f99d 6084 	ldrsb.w	r6, [sp, #132]	@ 0x84
 801f9be:	9610      	str	r6, [sp, #64]	@ 0x40
 801f9c0:	f8dd 90a8 	ldr.w	r9, [sp, #168]	@ 0xa8
 801f9c4:	f99d 6088 	ldrsb.w	r6, [sp, #136]	@ 0x88
 801f9c8:	910c      	str	r1, [sp, #48]	@ 0x30
 801f9ca:	900f      	str	r0, [sp, #60]	@ 0x3c
 801f9cc:	9711      	str	r7, [sp, #68]	@ 0x44
 801f9ce:	d205      	bcs.n	801f9dc <forward_lite_conv2d_deep_3x3_sssa8_ch+0x4c>
 801f9d0:	fb01 f202 	mul.w	r2, r1, r2
 801f9d4:	fb0c 4202 	mla	r2, ip, r2, r4
 801f9d8:	4295      	cmp	r5, r2
 801f9da:	d371      	bcc.n	801fac0 <forward_lite_conv2d_deep_3x3_sssa8_ch+0x130>
 801f9dc:	f04f 0a01 	mov.w	sl, #1
 801f9e0:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 801f9e2:	9823      	ldr	r0, [sp, #140]	@ 0x8c
 801f9e4:	eba3 0348 	sub.w	r3, r3, r8, lsl #1
 801f9e8:	eb09 0703 	add.w	r7, r9, r3
 801f9ec:	4641      	mov	r1, r8
 801f9ee:	463b      	mov	r3, r7
 801f9f0:	464a      	mov	r2, r9
 801f9f2:	f001 fa57 	bl	8020ea4 <align_factor_ch>
 801f9f6:	ea4f 0048 	mov.w	r0, r8, lsl #1
 801f9fa:	eb09 01c8 	add.w	r1, r9, r8, lsl #3
 801f9fe:	eb09 0c88 	add.w	ip, r9, r8, lsl #2
 801fa02:	f1b8 0f00 	cmp.w	r8, #0
 801fa06:	d05f      	beq.n	801fac8 <forward_lite_conv2d_deep_3x3_sssa8_ch+0x138>
 801fa08:	e9cd 0a12 	strd	r0, sl, [sp, #72]	@ 0x48
 801fa0c:	463b      	mov	r3, r7
 801fa0e:	eb07 0b00 	add.w	fp, r7, r0
 801fa12:	f1ac 0204 	sub.w	r2, ip, #4
 801fa16:	2701      	movs	r7, #1
 801fa18:	f933 0b02 	ldrsh.w	r0, [r3], #2
 801fa1c:	f100 3eff 	add.w	lr, r0, #4294967295
 801fa20:	fa1f fe8e 	uxth.w	lr, lr
 801fa24:	fa07 fa00 	lsl.w	sl, r7, r0
 801fa28:	f1be 0f14 	cmp.w	lr, #20
 801fa2c:	fa06 f000 	lsl.w	r0, r6, r0
 801fa30:	eb00 005a 	add.w	r0, r0, sl, lsr #1
 801fa34:	d83f      	bhi.n	801fab6 <forward_lite_conv2d_deep_3x3_sssa8_ch+0x126>
 801fa36:	459b      	cmp	fp, r3
 801fa38:	f842 0f04 	str.w	r0, [r2, #4]!
 801fa3c:	d1ec      	bne.n	801fa18 <forward_lite_conv2d_deep_3x3_sssa8_ch+0x88>
 801fa3e:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 801fa40:	e9dd 0a12 	ldrd	r0, sl, [sp, #72]	@ 0x48
 801fa44:	eb09 0703 	add.w	r7, r9, r3
 801fa48:	e9dd 320c 	ldrd	r3, r2, [sp, #48]	@ 0x30
 801fa4c:	1a38      	subs	r0, r7, r0
 801fa4e:	fb13 f702 	smulbb	r7, r3, r2
 801fa52:	b2bf      	uxth	r7, r7
 801fa54:	f1ba 0f00 	cmp.w	sl, #0
 801fa58:	d02a      	beq.n	801fab0 <forward_lite_conv2d_deep_3x3_sssa8_ch+0x120>
 801fa5a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801fa5c:	f8cd 90a8 	str.w	r9, [sp, #168]	@ 0xa8
 801fa60:	e9cd c812 	strd	ip, r8, [sp, #72]	@ 0x48
 801fa64:	fb08 fb03 	mul.w	fp, r8, r3
 801fa68:	2600      	movs	r6, #0
 801fa6a:	4688      	mov	r8, r1
 801fa6c:	4681      	mov	r9, r0
 801fa6e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801fa70:	930a      	str	r3, [sp, #40]	@ 0x28
 801fa72:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801fa74:	9309      	str	r3, [sp, #36]	@ 0x24
 801fa76:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801fa78:	9308      	str	r3, [sp, #32]
 801fa7a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801fa7c:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 801fa7e:	991e      	ldr	r1, [sp, #120]	@ 0x78
 801fa80:	f8cd 802c 	str.w	r8, [sp, #44]	@ 0x2c
 801fa84:	e9cd 7306 	strd	r7, r3, [sp, #24]
 801fa88:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801fa8a:	9305      	str	r3, [sp, #20]
 801fa8c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801fa8e:	9304      	str	r3, [sp, #16]
 801fa90:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801fa92:	9303      	str	r3, [sp, #12]
 801fa94:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801fa96:	e9cd 9301 	strd	r9, r3, [sp, #4]
 801fa9a:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 801fa9c:	9300      	str	r3, [sp, #0]
 801fa9e:	4620      	mov	r0, r4
 801faa0:	462b      	mov	r3, r5
 801faa2:	3601      	adds	r6, #1
 801faa4:	f010 faac 	bl	8030000 <st_sssa8_ch_nn_mat_mult_deep_conv2d_3x3>
 801faa8:	45b2      	cmp	sl, r6
 801faaa:	445d      	add	r5, fp
 801faac:	443c      	add	r4, r7
 801faae:	d1de      	bne.n	801fa6e <forward_lite_conv2d_deep_3x3_sssa8_ch+0xde>
 801fab0:	b015      	add	sp, #84	@ 0x54
 801fab2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801fab6:	459b      	cmp	fp, r3
 801fab8:	f842 6f04 	str.w	r6, [r2, #4]!
 801fabc:	d1ac      	bne.n	801fa18 <forward_lite_conv2d_deep_3x3_sssa8_ch+0x88>
 801fabe:	e7be      	b.n	801fa3e <forward_lite_conv2d_deep_3x3_sssa8_ch+0xae>
 801fac0:	2301      	movs	r3, #1
 801fac2:	4682      	mov	sl, r0
 801fac4:	930f      	str	r3, [sp, #60]	@ 0x3c
 801fac6:	e78b      	b.n	801f9e0 <forward_lite_conv2d_deep_3x3_sssa8_ch+0x50>
 801fac8:	46cc      	mov	ip, r9
 801faca:	e7bd      	b.n	801fa48 <forward_lite_conv2d_deep_3x3_sssa8_ch+0xb8>

0801facc <forward_lite_conv2d_sssa8_ch>:
 801facc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fad0:	b0e9      	sub	sp, #420	@ 0x1a4
 801fad2:	4681      	mov	r9, r0
 801fad4:	469a      	mov	sl, r3
 801fad6:	f8bd 0204 	ldrh.w	r0, [sp, #516]	@ 0x204
 801fada:	f8bd 3200 	ldrh.w	r3, [sp, #512]	@ 0x200
 801fade:	930e      	str	r3, [sp, #56]	@ 0x38
 801fae0:	9032      	str	r0, [sp, #200]	@ 0xc8
 801fae2:	fb03 f300 	mul.w	r3, r3, r0
 801fae6:	f8bd 01d0 	ldrh.w	r0, [sp, #464]	@ 0x1d0
 801faea:	9030      	str	r0, [sp, #192]	@ 0xc0
 801faec:	f8bd 01d4 	ldrh.w	r0, [sp, #468]	@ 0x1d4
 801faf0:	9031      	str	r0, [sp, #196]	@ 0xc4
 801faf2:	f8bd 01d8 	ldrh.w	r0, [sp, #472]	@ 0x1d8
 801faf6:	9012      	str	r0, [sp, #72]	@ 0x48
 801faf8:	f8bd 01dc 	ldrh.w	r0, [sp, #476]	@ 0x1dc
 801fafc:	903c      	str	r0, [sp, #240]	@ 0xf0
 801fafe:	f8bd 01e0 	ldrh.w	r0, [sp, #480]	@ 0x1e0
 801fb02:	f8bd 51cc 	ldrh.w	r5, [sp, #460]	@ 0x1cc
 801fb06:	9c7f      	ldr	r4, [sp, #508]	@ 0x1fc
 801fb08:	902c      	str	r0, [sp, #176]	@ 0xb0
 801fb0a:	f8bd 01e4 	ldrh.w	r0, [sp, #484]	@ 0x1e4
 801fb0e:	9038      	str	r0, [sp, #224]	@ 0xe0
 801fb10:	f99d 01ec 	ldrsb.w	r0, [sp, #492]	@ 0x1ec
 801fb14:	9324      	str	r3, [sp, #144]	@ 0x90
 801fb16:	900b      	str	r0, [sp, #44]	@ 0x2c
 801fb18:	fb05 4303 	mla	r3, r5, r3, r4
 801fb1c:	f89d 01f8 	ldrb.w	r0, [sp, #504]	@ 0x1f8
 801fb20:	9027      	str	r0, [sp, #156]	@ 0x9c
 801fb22:	4599      	cmp	r9, r3
 801fb24:	f8bd 0208 	ldrh.w	r0, [sp, #520]	@ 0x208
 801fb28:	f99d 81f0 	ldrsb.w	r8, [sp, #496]	@ 0x1f0
 801fb2c:	911a      	str	r1, [sp, #104]	@ 0x68
 801fb2e:	920f      	str	r2, [sp, #60]	@ 0x3c
 801fb30:	9522      	str	r5, [sp, #136]	@ 0x88
 801fb32:	900c      	str	r0, [sp, #48]	@ 0x30
 801fb34:	f080 82af 	bcs.w	8020096 <forward_lite_conv2d_sssa8_ch+0x5ca>
 801fb38:	4613      	mov	r3, r2
 801fb3a:	fb01 f303 	mul.w	r3, r1, r3
 801fb3e:	fb0a 9303 	mla	r3, sl, r3, r9
 801fb42:	429c      	cmp	r4, r3
 801fb44:	bf2c      	ite	cs
 801fb46:	2500      	movcs	r5, #0
 801fb48:	2501      	movcc	r5, #1
 801fb4a:	9922      	ldr	r1, [sp, #136]	@ 0x88
 801fb4c:	9b83      	ldr	r3, [sp, #524]	@ 0x20c
 801fb4e:	9a84      	ldr	r2, [sp, #528]	@ 0x210
 801fb50:	987d      	ldr	r0, [sp, #500]	@ 0x1f4
 801fb52:	eba3 0341 	sub.w	r3, r3, r1, lsl #1
 801fb56:	18d6      	adds	r6, r2, r3
 801fb58:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 801fb5a:	3b02      	subs	r3, #2
 801fb5c:	2b01      	cmp	r3, #1
 801fb5e:	4633      	mov	r3, r6
 801fb60:	bf98      	it	ls
 801fb62:	2500      	movls	r5, #0
 801fb64:	ea4f 0b41 	mov.w	fp, r1, lsl #1
 801fb68:	f001 f99c 	bl	8020ea4 <align_factor_ch>
 801fb6c:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 801fb6e:	07db      	lsls	r3, r3, #31
 801fb70:	d506      	bpl.n	801fb80 <forward_lite_conv2d_sssa8_ch+0xb4>
 801fb72:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801fb74:	9a32      	ldr	r2, [sp, #200]	@ 0xc8
 801fb76:	3302      	adds	r3, #2
 801fb78:	3202      	adds	r2, #2
 801fb7a:	fb02 f303 	mul.w	r3, r2, r3
 801fb7e:	9324      	str	r3, [sp, #144]	@ 0x90
 801fb80:	9b7a      	ldr	r3, [sp, #488]	@ 0x1e8
 801fb82:	9301      	str	r3, [sp, #4]
 801fb84:	9b84      	ldr	r3, [sp, #528]	@ 0x210
 801fb86:	9f22      	ldr	r7, [sp, #136]	@ 0x88
 801fb88:	9303      	str	r3, [sp, #12]
 801fb8a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801fb8c:	9302      	str	r3, [sp, #8]
 801fb8e:	9b31      	ldr	r3, [sp, #196]	@ 0xc4
 801fb90:	9972      	ldr	r1, [sp, #456]	@ 0x1c8
 801fb92:	9300      	str	r3, [sp, #0]
 801fb94:	4650      	mov	r0, sl
 801fb96:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 801fb98:	463a      	mov	r2, r7
 801fb9a:	f001 ff9d 	bl	8021ad8 <st_sssa8_ch_convolve_rank1upd>
 801fb9e:	9984      	ldr	r1, [sp, #528]	@ 0x210
 801fba0:	eb0b 0307 	add.w	r3, fp, r7
 801fba4:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 801fba8:	e9dd 0330 	ldrd	r0, r3, [sp, #192]	@ 0xc0
 801fbac:	fb10 f303 	smulbb	r3, r0, r3
 801fbb0:	fb13 f30a 	smulbb	r3, r3, sl
 801fbb4:	b29b      	uxth	r3, r3
 801fbb6:	9321      	str	r3, [sp, #132]	@ 0x84
 801fbb8:	ebc7 7347 	rsb	r3, r7, r7, lsl #29
 801fbbc:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
 801fbc0:	9329      	str	r3, [sp, #164]	@ 0xa4
 801fbc2:	eb03 0387 	add.w	r3, r3, r7, lsl #2
 801fbc6:	911d      	str	r1, [sp, #116]	@ 0x74
 801fbc8:	932a      	str	r3, [sp, #168]	@ 0xa8
 801fbca:	b1df      	cbz	r7, 801fc04 <forward_lite_conv2d_sssa8_ch+0x138>
 801fbcc:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 801fbce:	4632      	mov	r2, r6
 801fbd0:	1f18      	subs	r0, r3, #4
 801fbd2:	eb06 0c0b 	add.w	ip, r6, fp
 801fbd6:	f04f 0e01 	mov.w	lr, #1
 801fbda:	f932 3b02 	ldrsh.w	r3, [r2], #2
 801fbde:	1e59      	subs	r1, r3, #1
 801fbe0:	b289      	uxth	r1, r1
 801fbe2:	fa0e f603 	lsl.w	r6, lr, r3
 801fbe6:	2914      	cmp	r1, #20
 801fbe8:	fa08 f303 	lsl.w	r3, r8, r3
 801fbec:	eb03 0356 	add.w	r3, r3, r6, lsr #1
 801fbf0:	f200 823a 	bhi.w	8020068 <forward_lite_conv2d_sssa8_ch+0x59c>
 801fbf4:	4562      	cmp	r2, ip
 801fbf6:	f840 3f04 	str.w	r3, [r0, #4]!
 801fbfa:	d1ee      	bne.n	801fbda <forward_lite_conv2d_sssa8_ch+0x10e>
 801fbfc:	e9dd 2383 	ldrd	r2, r3, [sp, #524]	@ 0x20c
 801fc00:	970b      	str	r7, [sp, #44]	@ 0x2c
 801fc02:	189e      	adds	r6, r3, r2
 801fc04:	eba6 030b 	sub.w	r3, r6, fp
 801fc08:	9328      	str	r3, [sp, #160]	@ 0xa0
 801fc0a:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 801fc0c:	934a      	str	r3, [sp, #296]	@ 0x128
 801fc0e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801fc10:	9349      	str	r3, [sp, #292]	@ 0x124
 801fc12:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801fc14:	934e      	str	r3, [sp, #312]	@ 0x138
 801fc16:	9b32      	ldr	r3, [sp, #200]	@ 0xc8
 801fc18:	934d      	str	r3, [sp, #308]	@ 0x134
 801fc1a:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801fc1c:	9360      	str	r3, [sp, #384]	@ 0x180
 801fc1e:	9b3c      	ldr	r3, [sp, #240]	@ 0xf0
 801fc20:	9361      	str	r3, [sp, #388]	@ 0x184
 801fc22:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 801fc24:	9362      	str	r3, [sp, #392]	@ 0x188
 801fc26:	9b38      	ldr	r3, [sp, #224]	@ 0xe0
 801fc28:	9e30      	ldr	r6, [sp, #192]	@ 0xc0
 801fc2a:	9f31      	ldr	r7, [sp, #196]	@ 0xc4
 801fc2c:	9363      	str	r3, [sp, #396]	@ 0x18c
 801fc2e:	ab50      	add	r3, sp, #320	@ 0x140
 801fc30:	9300      	str	r3, [sp, #0]
 801fc32:	aa48      	add	r2, sp, #288	@ 0x120
 801fc34:	ab4c      	add	r3, sp, #304	@ 0x130
 801fc36:	a95e      	add	r1, sp, #376	@ 0x178
 801fc38:	a854      	add	r0, sp, #336	@ 0x150
 801fc3a:	9652      	str	r6, [sp, #328]	@ 0x148
 801fc3c:	fb07 f806 	mul.w	r8, r7, r6
 801fc40:	9751      	str	r7, [sp, #324]	@ 0x144
 801fc42:	f001 fba9 	bl	8021398 <ai_padding_opt_init>
 801fc46:	9822      	ldr	r0, [sp, #136]	@ 0x88
 801fc48:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 801fc4a:	fb0a f106 	mul.w	r1, sl, r6
 801fc4e:	fb0a f308 	mul.w	r3, sl, r8
 801fc52:	fb00 f603 	mul.w	r6, r0, r3
 801fc56:	fb01 f307 	mul.w	r3, r1, r7
 801fc5a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801fc5e:	9323      	str	r3, [sp, #140]	@ 0x8c
 801fc60:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 801fc62:	9117      	str	r1, [sp, #92]	@ 0x5c
 801fc64:	f003 0202 	and.w	r2, r3, #2
 801fc68:	f3c3 0340 	ubfx	r3, r3, #1, #1
 801fc6c:	9326      	str	r3, [sp, #152]	@ 0x98
 801fc6e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801fc70:	923b      	str	r2, [sp, #236]	@ 0xec
 801fc72:	f5b6 6f20 	cmp.w	r6, #2560	@ 0xa00
 801fc76:	bfa8      	it	ge
 801fc78:	f44f 6620 	movge.w	r6, #2560	@ 0xa00
 801fc7c:	2b01      	cmp	r3, #1
 801fc7e:	f000 842b 	beq.w	80204d8 <forward_lite_conv2d_sssa8_ch+0xa0c>
 801fc82:	2300      	movs	r3, #0
 801fc84:	933d      	str	r3, [sp, #244]	@ 0xf4
 801fc86:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 801fc88:	fbb6 f3f3 	udiv	r3, r6, r3
 801fc8c:	b29b      	uxth	r3, r3
 801fc8e:	461a      	mov	r2, r3
 801fc90:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 801fc92:	429a      	cmp	r2, r3
 801fc94:	bf28      	it	cs
 801fc96:	461a      	movcs	r2, r3
 801fc98:	fbb3 f1f2 	udiv	r1, r3, r2
 801fc9c:	fb02 3311 	mls	r3, r2, r1, r3
 801fca0:	b29b      	uxth	r3, r3
 801fca2:	9225      	str	r2, [sp, #148]	@ 0x94
 801fca4:	b289      	uxth	r1, r1
 801fca6:	2b00      	cmp	r3, #0
 801fca8:	f000 81f7 	beq.w	802009a <forward_lite_conv2d_sssa8_ch+0x5ce>
 801fcac:	2d01      	cmp	r5, #1
 801fcae:	f000 81f9 	beq.w	80200a4 <forward_lite_conv2d_sssa8_ch+0x5d8>
 801fcb2:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 801fcb4:	982c      	ldr	r0, [sp, #176]	@ 0xb0
 801fcb6:	f8dd b02c 	ldr.w	fp, [sp, #44]	@ 0x2c
 801fcba:	f8cd a0d0 	str.w	sl, [sp, #208]	@ 0xd0
 801fcbe:	fb0a f308 	mul.w	r3, sl, r8
 801fcc2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801fcc6:	9318      	str	r3, [sp, #96]	@ 0x60
 801fcc8:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 801fcca:	9b38      	ldr	r3, [sp, #224]	@ 0xe0
 801fccc:	f8dd 8088 	ldr.w	r8, [sp, #136]	@ 0x88
 801fcd0:	fb03 f302 	mul.w	r3, r3, r2
 801fcd4:	425b      	negs	r3, r3
 801fcd6:	1a1b      	subs	r3, r3, r0
 801fcd8:	fb0a 9303 	mla	r3, sl, r3, r9
 801fcdc:	933e      	str	r3, [sp, #248]	@ 0xf8
 801fcde:	9b3c      	ldr	r3, [sp, #240]	@ 0xf0
 801fce0:	fb03 f30a 	mul.w	r3, r3, sl
 801fce4:	fb02 f303 	mul.w	r3, r2, r3
 801fce8:	9335      	str	r3, [sp, #212]	@ 0xd4
 801fcea:	f00a 0303 	and.w	r3, sl, #3
 801fcee:	9314      	str	r3, [sp, #80]	@ 0x50
 801fcf0:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801fcf2:	005b      	lsls	r3, r3, #1
 801fcf4:	931b      	str	r3, [sp, #108]	@ 0x6c
 801fcf6:	4243      	negs	r3, r0
 801fcf8:	9336      	str	r3, [sp, #216]	@ 0xd8
 801fcfa:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801fcfc:	e9cd 1839 	strd	r1, r8, [sp, #228]	@ 0xe4
 801fd00:	fb03 f30a 	mul.w	r3, r3, sl
 801fd04:	ea4f 094a 	mov.w	r9, sl, lsl #1
 801fd08:	9319      	str	r3, [sp, #100]	@ 0x64
 801fd0a:	fb02 f30a 	mul.w	r3, r2, sl
 801fd0e:	9337      	str	r3, [sp, #220]	@ 0xdc
 801fd10:	f8cd 90cc 	str.w	r9, [sp, #204]	@ 0xcc
 801fd14:	9b3d      	ldr	r3, [sp, #244]	@ 0xf4
 801fd16:	b94b      	cbnz	r3, 801fd2c <forward_lite_conv2d_sssa8_ch+0x260>
 801fd18:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801fd1a:	2b00      	cmp	r3, #0
 801fd1c:	f040 81b4 	bne.w	8020088 <forward_lite_conv2d_sssa8_ch+0x5bc>
 801fd20:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 801fd22:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 801fd24:	9923      	ldr	r1, [sp, #140]	@ 0x8c
 801fd26:	9872      	ldr	r0, [sp, #456]	@ 0x1c8
 801fd28:	f001 fa7c 	bl	8021224 <st_int8_to16_dual_interleaved>
 801fd2c:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 801fd2e:	2b03      	cmp	r3, #3
 801fd30:	f000 81a2 	beq.w	8020078 <forward_lite_conv2d_sssa8_ch+0x5ac>
 801fd34:	941e      	str	r4, [sp, #120]	@ 0x78
 801fd36:	9b32      	ldr	r3, [sp, #200]	@ 0xc8
 801fd38:	2b00      	cmp	r3, #0
 801fd3a:	f000 80b7 	beq.w	801feac <forward_lite_conv2d_sssa8_ch+0x3e0>
 801fd3e:	9a31      	ldr	r2, [sp, #196]	@ 0xc4
 801fd40:	9b38      	ldr	r3, [sp, #224]	@ 0xe0
 801fd42:	9d3e      	ldr	r5, [sp, #248]	@ 0xf8
 801fd44:	947f      	str	r4, [sp, #508]	@ 0x1fc
 801fd46:	eba2 0803 	sub.w	r8, r2, r3
 801fd4a:	425b      	negs	r3, r3
 801fd4c:	9313      	str	r3, [sp, #76]	@ 0x4c
 801fd4e:	46a9      	mov	r9, r5
 801fd50:	2300      	movs	r3, #0
 801fd52:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 801fd54:	9d3c      	ldr	r5, [sp, #240]	@ 0xf0
 801fd56:	461f      	mov	r7, r3
 801fd58:	a854      	add	r0, sp, #336	@ 0x150
 801fd5a:	920b      	str	r2, [sp, #44]	@ 0x2c
 801fd5c:	f001 fb74 	bl	8021448 <ai_padding_opt_phase1>
 801fd60:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801fd62:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801fd64:	2b00      	cmp	r3, #0
 801fd66:	d07d      	beq.n	801fe64 <forward_lite_conv2d_sssa8_ch+0x398>
 801fd68:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 801fd6a:	981b      	ldr	r0, [sp, #108]	@ 0x6c
 801fd6c:	972d      	str	r7, [sp, #180]	@ 0xb4
 801fd6e:	eba8 0301 	sub.w	r3, r8, r1
 801fd72:	fb00 f303 	mul.w	r3, r0, r3
 801fd76:	931c      	str	r3, [sp, #112]	@ 0x70
 801fd78:	982c      	ldr	r0, [sp, #176]	@ 0xb0
 801fd7a:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 801fd7c:	9f37      	ldr	r7, [sp, #220]	@ 0xdc
 801fd7e:	1a1c      	subs	r4, r3, r0
 801fd80:	9b31      	ldr	r3, [sp, #196]	@ 0xc4
 801fd82:	440b      	add	r3, r1
 801fd84:	932b      	str	r3, [sp, #172]	@ 0xac
 801fd86:	9b36      	ldr	r3, [sp, #216]	@ 0xd8
 801fd88:	e9cd 952e 	strd	r9, r5, [sp, #184]	@ 0xb8
 801fd8c:	e9cd 390b 	strd	r3, r9, [sp, #44]	@ 0x2c
 801fd90:	2300      	movs	r3, #0
 801fd92:	930d      	str	r3, [sp, #52]	@ 0x34
 801fd94:	9b54      	ldr	r3, [sp, #336]	@ 0x150
 801fd96:	2b00      	cmp	r3, #0
 801fd98:	f000 80e0 	beq.w	801ff5c <forward_lite_conv2d_sssa8_ch+0x490>
 801fd9c:	3b01      	subs	r3, #1
 801fd9e:	9354      	str	r3, [sp, #336]	@ 0x150
 801fda0:	f04f 0301 	mov.w	r3, #1
 801fda4:	f8ad 3176 	strh.w	r3, [sp, #374]	@ 0x176
 801fda8:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801fdaa:	992b      	ldr	r1, [sp, #172]	@ 0xac
 801fdac:	428b      	cmp	r3, r1
 801fdae:	da43      	bge.n	801fe38 <forward_lite_conv2d_sssa8_ch+0x36c>
 801fdb0:	4619      	mov	r1, r3
 801fdb2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801fdb4:	9d33      	ldr	r5, [sp, #204]	@ 0xcc
 801fdb6:	980c      	ldr	r0, [sp, #48]	@ 0x30
 801fdb8:	9e34      	ldr	r6, [sp, #208]	@ 0xd0
 801fdba:	1ae3      	subs	r3, r4, r3
 801fdbc:	fb05 f303 	mul.w	r3, r5, r3
 801fdc0:	e9cd 7810 	strd	r7, r8, [sp, #64]	@ 0x40
 801fdc4:	9315      	str	r3, [sp, #84]	@ 0x54
 801fdc6:	46aa      	mov	sl, r5
 801fdc8:	4688      	mov	r8, r1
 801fdca:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 801fdcc:	42a5      	cmp	r5, r4
 801fdce:	da2a      	bge.n	801fe26 <forward_lite_conv2d_sssa8_ch+0x35a>
 801fdd0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801fdd2:	4543      	cmp	r3, r8
 801fdd4:	f240 80b1 	bls.w	801ff3a <forward_lite_conv2d_sssa8_ch+0x46e>
 801fdd8:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801fdda:	f8cd 8058 	str.w	r8, [sp, #88]	@ 0x58
 801fdde:	e9cd 201f 	strd	r2, r0, [sp, #124]	@ 0x7c
 801fde2:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 801fde6:	4607      	mov	r7, r0
 801fde8:	4691      	mov	r9, r2
 801fdea:	2b00      	cmp	r3, #0
 801fdec:	f000 809d 	beq.w	801ff2a <forward_lite_conv2d_sssa8_ch+0x45e>
 801fdf0:	e006      	b.n	801fe00 <forward_lite_conv2d_sssa8_ch+0x334>
 801fdf2:	3501      	adds	r5, #1
 801fdf4:	f001 f886 	bl	8020f04 <st_int8_to16_no_shift>
 801fdf8:	42a5      	cmp	r5, r4
 801fdfa:	44d1      	add	r9, sl
 801fdfc:	4437      	add	r7, r6
 801fdfe:	d00c      	beq.n	801fe1a <forward_lite_conv2d_sssa8_ch+0x34e>
 801fe00:	4545      	cmp	r5, r8
 801fe02:	4632      	mov	r2, r6
 801fe04:	4649      	mov	r1, r9
 801fe06:	4638      	mov	r0, r7
 801fe08:	d3f3      	bcc.n	801fdf2 <forward_lite_conv2d_sssa8_ch+0x326>
 801fe0a:	4658      	mov	r0, fp
 801fe0c:	3501      	adds	r5, #1
 801fe0e:	f001 fc39 	bl	8021684 <st_int16_fill>
 801fe12:	42a5      	cmp	r5, r4
 801fe14:	44d1      	add	r9, sl
 801fe16:	4437      	add	r7, r6
 801fe18:	d1f2      	bne.n	801fe00 <forward_lite_conv2d_sssa8_ch+0x334>
 801fe1a:	e9dd 201f 	ldrd	r2, r0, [sp, #124]	@ 0x7c
 801fe1e:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801fe20:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 801fe24:	441a      	add	r2, r3
 801fe26:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801fe28:	4418      	add	r0, r3
 801fe2a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801fe2c:	f108 0801 	add.w	r8, r8, #1
 801fe30:	4598      	cmp	r8, r3
 801fe32:	d1ca      	bne.n	801fdca <forward_lite_conv2d_sssa8_ch+0x2fe>
 801fe34:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 801fe36:	4698      	mov	r8, r3
 801fe38:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 801fe3a:	4293      	cmp	r3, r2
 801fe3c:	f000 80c2 	beq.w	801ffc4 <forward_lite_conv2d_sssa8_ch+0x4f8>
 801fe40:	990c      	ldr	r1, [sp, #48]	@ 0x30
 801fe42:	9819      	ldr	r0, [sp, #100]	@ 0x64
 801fe44:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801fe46:	4401      	add	r1, r0
 801fe48:	910c      	str	r1, [sp, #48]	@ 0x30
 801fe4a:	9812      	ldr	r0, [sp, #72]	@ 0x48
 801fe4c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801fe4e:	4401      	add	r1, r0
 801fe50:	910b      	str	r1, [sp, #44]	@ 0x2c
 801fe52:	990e      	ldr	r1, [sp, #56]	@ 0x38
 801fe54:	3301      	adds	r3, #1
 801fe56:	4299      	cmp	r1, r3
 801fe58:	930d      	str	r3, [sp, #52]	@ 0x34
 801fe5a:	4404      	add	r4, r0
 801fe5c:	d19a      	bne.n	801fd94 <forward_lite_conv2d_sssa8_ch+0x2c8>
 801fe5e:	e9dd 792d 	ldrd	r7, r9, [sp, #180]	@ 0xb4
 801fe62:	9d2f      	ldr	r5, [sp, #188]	@ 0xbc
 801fe64:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801fe66:	442b      	add	r3, r5
 801fe68:	9313      	str	r3, [sp, #76]	@ 0x4c
 801fe6a:	9b35      	ldr	r3, [sp, #212]	@ 0xd4
 801fe6c:	4499      	add	r9, r3
 801fe6e:	9b32      	ldr	r3, [sp, #200]	@ 0xc8
 801fe70:	3701      	adds	r7, #1
 801fe72:	42bb      	cmp	r3, r7
 801fe74:	44a8      	add	r8, r5
 801fe76:	f47f af6f 	bne.w	801fd58 <forward_lite_conv2d_sssa8_ch+0x28c>
 801fe7a:	991d      	ldr	r1, [sp, #116]	@ 0x74
 801fe7c:	9c7f      	ldr	r4, [sp, #508]	@ 0x1fc
 801fe7e:	4291      	cmp	r1, r2
 801fe80:	d014      	beq.n	801feac <forward_lite_conv2d_sssa8_ch+0x3e0>
 801fe82:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 801fe84:	9307      	str	r3, [sp, #28]
 801fe86:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 801fe88:	9306      	str	r3, [sp, #24]
 801fe8a:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 801fe8c:	9305      	str	r3, [sp, #20]
 801fe8e:	9b84      	ldr	r3, [sp, #528]	@ 0x210
 801fe90:	9304      	str	r3, [sp, #16]
 801fe92:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801fe94:	9303      	str	r3, [sp, #12]
 801fe96:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 801fe98:	9302      	str	r3, [sp, #8]
 801fe9a:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 801fe9c:	9301      	str	r3, [sp, #4]
 801fe9e:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801fea0:	9300      	str	r3, [sp, #0]
 801fea2:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
 801fea4:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 801fea6:	9823      	ldr	r0, [sp, #140]	@ 0x8c
 801fea8:	f002 f970 	bl	802218c <st_sssa8_ch_nn_mat_mult_kernel_single_opt>
 801feac:	9a25      	ldr	r2, [sp, #148]	@ 0x94
 801feae:	9b3a      	ldr	r3, [sp, #232]	@ 0xe8
 801feb0:	1a9b      	subs	r3, r3, r2
 801feb2:	b299      	uxth	r1, r3
 801feb4:	428a      	cmp	r2, r1
 801feb6:	4613      	mov	r3, r2
 801feb8:	bf28      	it	cs
 801feba:	460b      	movcs	r3, r1
 801febc:	913a      	str	r1, [sp, #232]	@ 0xe8
 801febe:	2b00      	cmp	r3, #0
 801fec0:	f000 80d8 	beq.w	8020074 <forward_lite_conv2d_sssa8_ch+0x5a8>
 801fec4:	9972      	ldr	r1, [sp, #456]	@ 0x1c8
 801fec6:	9821      	ldr	r0, [sp, #132]	@ 0x84
 801fec8:	fb00 1102 	mla	r1, r0, r2, r1
 801fecc:	9172      	str	r1, [sp, #456]	@ 0x1c8
 801fece:	9929      	ldr	r1, [sp, #164]	@ 0xa4
 801fed0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 801fed4:	9129      	str	r1, [sp, #164]	@ 0xa4
 801fed6:	9928      	ldr	r1, [sp, #160]	@ 0xa0
 801fed8:	eb01 0142 	add.w	r1, r1, r2, lsl #1
 801fedc:	9128      	str	r1, [sp, #160]	@ 0xa0
 801fede:	9984      	ldr	r1, [sp, #528]	@ 0x210
 801fee0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 801fee4:	9184      	str	r1, [sp, #528]	@ 0x210
 801fee6:	992a      	ldr	r1, [sp, #168]	@ 0xa8
 801fee8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 801feec:	912a      	str	r1, [sp, #168]	@ 0xa8
 801feee:	993b      	ldr	r1, [sp, #236]	@ 0xec
 801fef0:	2900      	cmp	r1, #0
 801fef2:	f000 80c6 	beq.w	8020082 <forward_lite_conv2d_sssa8_ch+0x5b6>
 801fef6:	9924      	ldr	r1, [sp, #144]	@ 0x90
 801fef8:	9325      	str	r3, [sp, #148]	@ 0x94
 801fefa:	fb01 4402 	mla	r4, r1, r2, r4
 801fefe:	9b39      	ldr	r3, [sp, #228]	@ 0xe4
 801ff00:	3b01      	subs	r3, #1
 801ff02:	b29b      	uxth	r3, r3
 801ff04:	461a      	mov	r2, r3
 801ff06:	9339      	str	r3, [sp, #228]	@ 0xe4
 801ff08:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801ff0c:	429a      	cmp	r2, r3
 801ff0e:	f47f af01 	bne.w	801fd14 <forward_lite_conv2d_sssa8_ch+0x248>
 801ff12:	b069      	add	sp, #420	@ 0x1a4
 801ff14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ff18:	4638      	mov	r0, r7
 801ff1a:	f001 f855 	bl	8020fc8 <st_int8_to16_no_shift_interleaved>
 801ff1e:	3501      	adds	r5, #1
 801ff20:	42a5      	cmp	r5, r4
 801ff22:	44d1      	add	r9, sl
 801ff24:	4437      	add	r7, r6
 801ff26:	f43f af78 	beq.w	801fe1a <forward_lite_conv2d_sssa8_ch+0x34e>
 801ff2a:	4545      	cmp	r5, r8
 801ff2c:	4632      	mov	r2, r6
 801ff2e:	4649      	mov	r1, r9
 801ff30:	4658      	mov	r0, fp
 801ff32:	d3f1      	bcc.n	801ff18 <forward_lite_conv2d_sssa8_ch+0x44c>
 801ff34:	f001 fba6 	bl	8021684 <st_int16_fill>
 801ff38:	e7f1      	b.n	801ff1e <forward_lite_conv2d_sssa8_ch+0x452>
 801ff3a:	4691      	mov	r9, r2
 801ff3c:	4617      	mov	r7, r2
 801ff3e:	9016      	str	r0, [sp, #88]	@ 0x58
 801ff40:	4649      	mov	r1, r9
 801ff42:	3501      	adds	r5, #1
 801ff44:	4632      	mov	r2, r6
 801ff46:	4658      	mov	r0, fp
 801ff48:	f001 fb9c 	bl	8021684 <st_int16_fill>
 801ff4c:	42a5      	cmp	r5, r4
 801ff4e:	44d1      	add	r9, sl
 801ff50:	d1f6      	bne.n	801ff40 <forward_lite_conv2d_sssa8_ch+0x474>
 801ff52:	e9dd 3015 	ldrd	r3, r0, [sp, #84]	@ 0x54
 801ff56:	463a      	mov	r2, r7
 801ff58:	441a      	add	r2, r3
 801ff5a:	e764      	b.n	801fe26 <forward_lite_conv2d_sssa8_ch+0x35a>
 801ff5c:	9b55      	ldr	r3, [sp, #340]	@ 0x154
 801ff5e:	b93b      	cbnz	r3, 801ff70 <forward_lite_conv2d_sssa8_ch+0x4a4>
 801ff60:	f04f 0301 	mov.w	r3, #1
 801ff64:	f8ad 3176 	strh.w	r3, [sp, #374]	@ 0x176
 801ff68:	9b56      	ldr	r3, [sp, #344]	@ 0x158
 801ff6a:	3b01      	subs	r3, #1
 801ff6c:	9356      	str	r3, [sp, #344]	@ 0x158
 801ff6e:	e71b      	b.n	801fda8 <forward_lite_conv2d_sssa8_ch+0x2dc>
 801ff70:	3b01      	subs	r3, #1
 801ff72:	9355      	str	r3, [sp, #340]	@ 0x154
 801ff74:	f8bd 3174 	ldrh.w	r3, [sp, #372]	@ 0x174
 801ff78:	f8ad 3176 	strh.w	r3, [sp, #374]	@ 0x176
 801ff7c:	2b01      	cmp	r3, #1
 801ff7e:	f43f af13 	beq.w	801fda8 <forward_lite_conv2d_sssa8_ch+0x2dc>
 801ff82:	e9dd 5313 	ldrd	r5, r3, [sp, #76]	@ 0x4c
 801ff86:	2b00      	cmp	r3, #0
 801ff88:	d13b      	bne.n	8020002 <forward_lite_conv2d_sssa8_ch+0x536>
 801ff8a:	4545      	cmp	r5, r8
 801ff8c:	f6bf af54 	bge.w	801fe38 <forward_lite_conv2d_sssa8_ch+0x36c>
 801ff90:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801ff92:	9411      	str	r4, [sp, #68]	@ 0x44
 801ff94:	f8dd a06c 	ldr.w	sl, [sp, #108]	@ 0x6c
 801ff98:	9c17      	ldr	r4, [sp, #92]	@ 0x5c
 801ff9a:	9210      	str	r2, [sp, #64]	@ 0x40
 801ff9c:	4691      	mov	r9, r2
 801ff9e:	461e      	mov	r6, r3
 801ffa0:	4649      	mov	r1, r9
 801ffa2:	4630      	mov	r0, r6
 801ffa4:	3501      	adds	r5, #1
 801ffa6:	4622      	mov	r2, r4
 801ffa8:	f001 f80e 	bl	8020fc8 <st_int8_to16_no_shift_interleaved>
 801ffac:	4545      	cmp	r5, r8
 801ffae:	44d1      	add	r9, sl
 801ffb0:	443e      	add	r6, r7
 801ffb2:	d1f5      	bne.n	801ffa0 <forward_lite_conv2d_sssa8_ch+0x4d4>
 801ffb4:	e9dd 2410 	ldrd	r2, r4, [sp, #64]	@ 0x40
 801ffb8:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 801ffba:	441a      	add	r2, r3
 801ffbc:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 801ffbe:	4293      	cmp	r3, r2
 801ffc0:	f47f af3e 	bne.w	801fe40 <forward_lite_conv2d_sssa8_ch+0x374>
 801ffc4:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 801ffc6:	2b03      	cmp	r3, #3
 801ffc8:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 801ffca:	9308      	str	r3, [sp, #32]
 801ffcc:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 801ffce:	9307      	str	r3, [sp, #28]
 801ffd0:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 801ffd2:	9306      	str	r3, [sp, #24]
 801ffd4:	9b84      	ldr	r3, [sp, #528]	@ 0x210
 801ffd6:	9305      	str	r3, [sp, #20]
 801ffd8:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801ffda:	9304      	str	r3, [sp, #16]
 801ffdc:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 801ffde:	9303      	str	r3, [sp, #12]
 801ffe0:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 801ffe2:	9302      	str	r3, [sp, #8]
 801ffe4:	d027      	beq.n	8020036 <forward_lite_conv2d_sssa8_ch+0x56a>
 801ffe6:	9d1d      	ldr	r5, [sp, #116]	@ 0x74
 801ffe8:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
 801ffea:	9823      	ldr	r0, [sp, #140]	@ 0x8c
 801ffec:	2300      	movs	r3, #0
 801ffee:	9301      	str	r3, [sp, #4]
 801fff0:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801fff2:	9300      	str	r3, [sp, #0]
 801fff4:	4629      	mov	r1, r5
 801fff6:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 801fff8:	f010 fd9a 	bl	8030b30 <st_sssa8_ch_nn_mat_mult_kernel_opt>
 801fffc:	462a      	mov	r2, r5
 801fffe:	901e      	str	r0, [sp, #120]	@ 0x78
 8020000:	e71e      	b.n	801fe40 <forward_lite_conv2d_sssa8_ch+0x374>
 8020002:	4545      	cmp	r5, r8
 8020004:	f6bf af18 	bge.w	801fe38 <forward_lite_conv2d_sssa8_ch+0x36c>
 8020008:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 802000a:	9411      	str	r4, [sp, #68]	@ 0x44
 802000c:	f8dd a06c 	ldr.w	sl, [sp, #108]	@ 0x6c
 8020010:	9c17      	ldr	r4, [sp, #92]	@ 0x5c
 8020012:	9210      	str	r2, [sp, #64]	@ 0x40
 8020014:	4691      	mov	r9, r2
 8020016:	461e      	mov	r6, r3
 8020018:	4649      	mov	r1, r9
 802001a:	4630      	mov	r0, r6
 802001c:	3501      	adds	r5, #1
 802001e:	4622      	mov	r2, r4
 8020020:	f000 ff70 	bl	8020f04 <st_int8_to16_no_shift>
 8020024:	4545      	cmp	r5, r8
 8020026:	44d1      	add	r9, sl
 8020028:	443e      	add	r6, r7
 802002a:	d1f5      	bne.n	8020018 <forward_lite_conv2d_sssa8_ch+0x54c>
 802002c:	e9dd 2410 	ldrd	r2, r4, [sp, #64]	@ 0x40
 8020030:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8020032:	441a      	add	r2, r3
 8020034:	e7c2      	b.n	801ffbc <forward_lite_conv2d_sssa8_ch+0x4f0>
 8020036:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 8020038:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 802003a:	9300      	str	r3, [sp, #0]
 802003c:	fab5 f385 	clz	r3, r5
 8020040:	095b      	lsrs	r3, r3, #5
 8020042:	005b      	lsls	r3, r3, #1
 8020044:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
 8020046:	9301      	str	r3, [sp, #4]
 8020048:	991d      	ldr	r1, [sp, #116]	@ 0x74
 802004a:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 802004c:	9823      	ldr	r0, [sp, #140]	@ 0x8c
 802004e:	f010 fd6f 	bl	8030b30 <st_sssa8_ch_nn_mat_mult_kernel_opt>
 8020052:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8020054:	901e      	str	r0, [sp, #120]	@ 0x78
 8020056:	3b01      	subs	r3, #1
 8020058:	42ab      	cmp	r3, r5
 802005a:	bf04      	itt	eq
 802005c:	4603      	moveq	r3, r0
 802005e:	3302      	addeq	r3, #2
 8020060:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8020062:	bf08      	it	eq
 8020064:	931e      	streq	r3, [sp, #120]	@ 0x78
 8020066:	e6eb      	b.n	801fe40 <forward_lite_conv2d_sssa8_ch+0x374>
 8020068:	4562      	cmp	r2, ip
 802006a:	f840 8f04 	str.w	r8, [r0, #4]!
 802006e:	f47f adb4 	bne.w	801fbda <forward_lite_conv2d_sssa8_ch+0x10e>
 8020072:	e5c3      	b.n	801fbfc <forward_lite_conv2d_sssa8_ch+0x130>
 8020074:	9325      	str	r3, [sp, #148]	@ 0x94
 8020076:	e742      	b.n	801fefe <forward_lite_conv2d_sssa8_ch+0x432>
 8020078:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 802007a:	3303      	adds	r3, #3
 802007c:	18e3      	adds	r3, r4, r3
 802007e:	931e      	str	r3, [sp, #120]	@ 0x78
 8020080:	e659      	b.n	801fd36 <forward_lite_conv2d_sssa8_ch+0x26a>
 8020082:	4414      	add	r4, r2
 8020084:	9325      	str	r3, [sp, #148]	@ 0x94
 8020086:	e73a      	b.n	801fefe <forward_lite_conv2d_sssa8_ch+0x432>
 8020088:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 802008a:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 802008c:	9923      	ldr	r1, [sp, #140]	@ 0x8c
 802008e:	9872      	ldr	r0, [sp, #456]	@ 0x1c8
 8020090:	f000 ffdc 	bl	802104c <st_int8_to16_dual>
 8020094:	e64a      	b.n	801fd2c <forward_lite_conv2d_sssa8_ch+0x260>
 8020096:	2500      	movs	r5, #0
 8020098:	e557      	b.n	801fb4a <forward_lite_conv2d_sssa8_ch+0x7e>
 802009a:	2d01      	cmp	r5, #1
 802009c:	d004      	beq.n	80200a8 <forward_lite_conv2d_sssa8_ch+0x5dc>
 802009e:	3901      	subs	r1, #1
 80200a0:	b289      	uxth	r1, r1
 80200a2:	e606      	b.n	801fcb2 <forward_lite_conv2d_sssa8_ch+0x1e6>
 80200a4:	3101      	adds	r1, #1
 80200a6:	b289      	uxth	r1, r1
 80200a8:	9b32      	ldr	r3, [sp, #200]	@ 0xc8
 80200aa:	2b00      	cmp	r3, #0
 80200ac:	f43f af31 	beq.w	801ff12 <forward_lite_conv2d_sssa8_ch+0x446>
 80200b0:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 80200b2:	9838      	ldr	r0, [sp, #224]	@ 0xe0
 80200b4:	9d1a      	ldr	r5, [sp, #104]	@ 0x68
 80200b6:	9f31      	ldr	r7, [sp, #196]	@ 0xc4
 80200b8:	f8cd a0e8 	str.w	sl, [sp, #232]	@ 0xe8
 80200bc:	fb0a f308 	mul.w	r3, sl, r8
 80200c0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80200c4:	9319      	str	r3, [sp, #100]	@ 0x64
 80200c6:	9a2c      	ldr	r2, [sp, #176]	@ 0xb0
 80200c8:	9442      	str	r4, [sp, #264]	@ 0x108
 80200ca:	fb05 f300 	mul.w	r3, r5, r0
 80200ce:	425b      	negs	r3, r3
 80200d0:	1a9b      	subs	r3, r3, r2
 80200d2:	fb0a 9303 	mla	r3, sl, r3, r9
 80200d6:	9339      	str	r3, [sp, #228]	@ 0xe4
 80200d8:	1e4b      	subs	r3, r1, #1
 80200da:	b29b      	uxth	r3, r3
 80200dc:	9344      	str	r3, [sp, #272]	@ 0x110
 80200de:	9b3c      	ldr	r3, [sp, #240]	@ 0xf0
 80200e0:	fb0a f303 	mul.w	r3, sl, r3
 80200e4:	fb05 f303 	mul.w	r3, r5, r3
 80200e8:	eba7 0b00 	sub.w	fp, r7, r0
 80200ec:	9343      	str	r3, [sp, #268]	@ 0x10c
 80200ee:	4247      	negs	r7, r0
 80200f0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80200f2:	982c      	ldr	r0, [sp, #176]	@ 0xb0
 80200f4:	9715      	str	r7, [sp, #84]	@ 0x54
 80200f6:	3303      	adds	r3, #3
 80200f8:	4240      	negs	r0, r0
 80200fa:	18e6      	adds	r6, r4, r3
 80200fc:	903e      	str	r0, [sp, #248]	@ 0xf8
 80200fe:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8020100:	9822      	ldr	r0, [sp, #136]	@ 0x88
 8020102:	9640      	str	r6, [sp, #256]	@ 0x100
 8020104:	f00a 0603 	and.w	r6, sl, #3
 8020108:	f103 0902 	add.w	r9, r3, #2
 802010c:	9613      	str	r6, [sp, #76]	@ 0x4c
 802010e:	fb03 f300 	mul.w	r3, r3, r0
 8020112:	9e17      	ldr	r6, [sp, #92]	@ 0x5c
 8020114:	9345      	str	r3, [sp, #276]	@ 0x114
 8020116:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8020118:	f8cd 9118 	str.w	r9, [sp, #280]	@ 0x118
 802011c:	0076      	lsls	r6, r6, #1
 802011e:	fb05 f80a 	mul.w	r8, r5, sl
 8020122:	fb03 f30a 	mul.w	r3, r3, sl
 8020126:	2200      	movs	r2, #0
 8020128:	961b      	str	r6, [sp, #108]	@ 0x6c
 802012a:	ea4f 064a 	mov.w	r6, sl, lsl #1
 802012e:	f8dd a02c 	ldr.w	sl, [sp, #44]	@ 0x2c
 8020132:	f8cd 80fc 	str.w	r8, [sp, #252]	@ 0xfc
 8020136:	9318      	str	r3, [sp, #96]	@ 0x60
 8020138:	9241      	str	r2, [sp, #260]	@ 0x104
 802013a:	46d8      	mov	r8, fp
 802013c:	4689      	mov	r9, r1
 802013e:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8020140:	a854      	add	r0, sp, #336	@ 0x150
 8020142:	3301      	adds	r3, #1
 8020144:	9341      	str	r3, [sp, #260]	@ 0x104
 8020146:	f001 f97f 	bl	8021448 <ai_padding_opt_phase1>
 802014a:	9b40      	ldr	r3, [sp, #256]	@ 0x100
 802014c:	9d42      	ldr	r5, [sp, #264]	@ 0x108
 802014e:	9a27      	ldr	r2, [sp, #156]	@ 0x9c
 8020150:	2a03      	cmp	r2, #3
 8020152:	bf08      	it	eq
 8020154:	461d      	moveq	r5, r3
 8020156:	9b3d      	ldr	r3, [sp, #244]	@ 0xf4
 8020158:	b94b      	cbnz	r3, 802016e <forward_lite_conv2d_sssa8_ch+0x6a2>
 802015a:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 802015c:	2b00      	cmp	r3, #0
 802015e:	f040 81b4 	bne.w	80204ca <forward_lite_conv2d_sssa8_ch+0x9fe>
 8020162:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 8020164:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8020166:	9923      	ldr	r1, [sp, #140]	@ 0x8c
 8020168:	9872      	ldr	r0, [sp, #456]	@ 0x1c8
 802016a:	f001 f85b 	bl	8021224 <st_int8_to16_dual_interleaved>
 802016e:	f1b9 0f00 	cmp.w	r9, #0
 8020172:	f000 8186 	beq.w	8020482 <forward_lite_conv2d_sssa8_ch+0x9b6>
 8020176:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8020178:	991b      	ldr	r1, [sp, #108]	@ 0x6c
 802017a:	f8dd b110 	ldr.w	fp, [sp, #272]	@ 0x110
 802017e:	f8cd 911c 	str.w	r9, [sp, #284]	@ 0x11c
 8020182:	eba8 0302 	sub.w	r3, r8, r2
 8020186:	fb01 f303 	mul.w	r3, r1, r3
 802018a:	931c      	str	r3, [sp, #112]	@ 0x70
 802018c:	9b31      	ldr	r3, [sp, #196]	@ 0xc4
 802018e:	9638      	str	r6, [sp, #224]	@ 0xe0
 8020190:	18d3      	adds	r3, r2, r3
 8020192:	9a25      	ldr	r2, [sp, #148]	@ 0x94
 8020194:	922b      	str	r2, [sp, #172]	@ 0xac
 8020196:	9a72      	ldr	r2, [sp, #456]	@ 0x1c8
 8020198:	923b      	str	r2, [sp, #236]	@ 0xec
 802019a:	9a2a      	ldr	r2, [sp, #168]	@ 0xa8
 802019c:	9233      	str	r2, [sp, #204]	@ 0xcc
 802019e:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
 80201a0:	9337      	str	r3, [sp, #220]	@ 0xdc
 80201a2:	922f      	str	r2, [sp, #188]	@ 0xbc
 80201a4:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80201a6:	9a28      	ldr	r2, [sp, #160]	@ 0xa0
 80201a8:	922e      	str	r2, [sp, #184]	@ 0xb8
 80201aa:	9a84      	ldr	r2, [sp, #528]	@ 0x210
 80201ac:	922d      	str	r2, [sp, #180]	@ 0xb4
 80201ae:	46a9      	mov	r9, r5
 80201b0:	461d      	mov	r5, r3
 80201b2:	9a59      	ldr	r2, [sp, #356]	@ 0x164
 80201b4:	9b58      	ldr	r3, [sp, #352]	@ 0x160
 80201b6:	9256      	str	r2, [sp, #344]	@ 0x158
 80201b8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80201ba:	9355      	str	r3, [sp, #340]	@ 0x154
 80201bc:	9b57      	ldr	r3, [sp, #348]	@ 0x15c
 80201be:	9354      	str	r3, [sp, #336]	@ 0x150
 80201c0:	2a00      	cmp	r2, #0
 80201c2:	f000 8127 	beq.w	8020414 <forward_lite_conv2d_sssa8_ch+0x948>
 80201c6:	9a30      	ldr	r2, [sp, #192]	@ 0xc0
 80201c8:	992c      	ldr	r1, [sp, #176]	@ 0xb0
 80201ca:	f8cd 9080 	str.w	r9, [sp, #128]	@ 0x80
 80201ce:	1a54      	subs	r4, r2, r1
 80201d0:	9a3e      	ldr	r2, [sp, #248]	@ 0xf8
 80201d2:	920b      	str	r2, [sp, #44]	@ 0x2c
 80201d4:	2100      	movs	r1, #0
 80201d6:	9a39      	ldr	r2, [sp, #228]	@ 0xe4
 80201d8:	920c      	str	r2, [sp, #48]	@ 0x30
 80201da:	e9cd b934 	strd	fp, r9, [sp, #208]	@ 0xd0
 80201de:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 80201e0:	f8dd 90fc 	ldr.w	r9, [sp, #252]	@ 0xfc
 80201e4:	910d      	str	r1, [sp, #52]	@ 0x34
 80201e6:	9536      	str	r5, [sp, #216]	@ 0xd8
 80201e8:	2b00      	cmp	r3, #0
 80201ea:	d05e      	beq.n	80202aa <forward_lite_conv2d_sssa8_ch+0x7de>
 80201ec:	3b01      	subs	r3, #1
 80201ee:	9354      	str	r3, [sp, #336]	@ 0x150
 80201f0:	f04f 0301 	mov.w	r3, #1
 80201f4:	f8ad 3176 	strh.w	r3, [sp, #374]	@ 0x176
 80201f8:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80201fa:	9937      	ldr	r1, [sp, #220]	@ 0xdc
 80201fc:	428b      	cmp	r3, r1
 80201fe:	da3e      	bge.n	802027e <forward_lite_conv2d_sssa8_ch+0x7b2>
 8020200:	4619      	mov	r1, r3
 8020202:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8020204:	9e38      	ldr	r6, [sp, #224]	@ 0xe0
 8020206:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8020208:	9f3a      	ldr	r7, [sp, #232]	@ 0xe8
 802020a:	1ae3      	subs	r3, r4, r3
 802020c:	e9cd 8910 	strd	r8, r9, [sp, #64]	@ 0x40
 8020210:	fb06 f303 	mul.w	r3, r6, r3
 8020214:	9314      	str	r3, [sp, #80]	@ 0x50
 8020216:	4603      	mov	r3, r0
 8020218:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 802021a:	42ac      	cmp	r4, r5
 802021c:	dd26      	ble.n	802026c <forward_lite_conv2d_sssa8_ch+0x7a0>
 802021e:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 8020220:	4281      	cmp	r1, r0
 8020222:	d25c      	bcs.n	80202de <forward_lite_conv2d_sssa8_ch+0x812>
 8020224:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 8020226:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 802022a:	9316      	str	r3, [sp, #88]	@ 0x58
 802022c:	e9cd 121e 	strd	r1, r2, [sp, #120]	@ 0x78
 8020230:	4699      	mov	r9, r3
 8020232:	4693      	mov	fp, r2
 8020234:	2800      	cmp	r0, #0
 8020236:	d04a      	beq.n	80202ce <forward_lite_conv2d_sssa8_ch+0x802>
 8020238:	e006      	b.n	8020248 <forward_lite_conv2d_sssa8_ch+0x77c>
 802023a:	3501      	adds	r5, #1
 802023c:	f000 fe62 	bl	8020f04 <st_int8_to16_no_shift>
 8020240:	42ac      	cmp	r4, r5
 8020242:	44b3      	add	fp, r6
 8020244:	44b9      	add	r9, r7
 8020246:	d00c      	beq.n	8020262 <forward_lite_conv2d_sssa8_ch+0x796>
 8020248:	4545      	cmp	r5, r8
 802024a:	463a      	mov	r2, r7
 802024c:	4659      	mov	r1, fp
 802024e:	4648      	mov	r0, r9
 8020250:	d3f3      	bcc.n	802023a <forward_lite_conv2d_sssa8_ch+0x76e>
 8020252:	4650      	mov	r0, sl
 8020254:	3501      	adds	r5, #1
 8020256:	f001 fa15 	bl	8021684 <st_int16_fill>
 802025a:	42ac      	cmp	r4, r5
 802025c:	44b3      	add	fp, r6
 802025e:	44b9      	add	r9, r7
 8020260:	d1f2      	bne.n	8020248 <forward_lite_conv2d_sssa8_ch+0x77c>
 8020262:	e9dd 121e 	ldrd	r1, r2, [sp, #120]	@ 0x78
 8020266:	9814      	ldr	r0, [sp, #80]	@ 0x50
 8020268:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 802026a:	4402      	add	r2, r0
 802026c:	9811      	ldr	r0, [sp, #68]	@ 0x44
 802026e:	4403      	add	r3, r0
 8020270:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8020272:	3101      	adds	r1, #1
 8020274:	4281      	cmp	r1, r0
 8020276:	d1cf      	bne.n	8020218 <forward_lite_conv2d_sssa8_ch+0x74c>
 8020278:	f8dd 9044 	ldr.w	r9, [sp, #68]	@ 0x44
 802027c:	4680      	mov	r8, r0
 802027e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8020280:	4293      	cmp	r3, r2
 8020282:	d067      	beq.n	8020354 <forward_lite_conv2d_sssa8_ch+0x888>
 8020284:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8020286:	9818      	ldr	r0, [sp, #96]	@ 0x60
 8020288:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 802028a:	4401      	add	r1, r0
 802028c:	910c      	str	r1, [sp, #48]	@ 0x30
 802028e:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8020290:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8020292:	4401      	add	r1, r0
 8020294:	910b      	str	r1, [sp, #44]	@ 0x2c
 8020296:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8020298:	3301      	adds	r3, #1
 802029a:	4299      	cmp	r1, r3
 802029c:	930d      	str	r3, [sp, #52]	@ 0x34
 802029e:	4404      	add	r4, r0
 80202a0:	f000 809d 	beq.w	80203de <forward_lite_conv2d_sssa8_ch+0x912>
 80202a4:	9b54      	ldr	r3, [sp, #336]	@ 0x150
 80202a6:	2b00      	cmp	r3, #0
 80202a8:	d1a0      	bne.n	80201ec <forward_lite_conv2d_sssa8_ch+0x720>
 80202aa:	9b55      	ldr	r3, [sp, #340]	@ 0x154
 80202ac:	bb53      	cbnz	r3, 8020304 <forward_lite_conv2d_sssa8_ch+0x838>
 80202ae:	f04f 0301 	mov.w	r3, #1
 80202b2:	f8ad 3176 	strh.w	r3, [sp, #374]	@ 0x176
 80202b6:	9b56      	ldr	r3, [sp, #344]	@ 0x158
 80202b8:	3b01      	subs	r3, #1
 80202ba:	9356      	str	r3, [sp, #344]	@ 0x158
 80202bc:	e79c      	b.n	80201f8 <forward_lite_conv2d_sssa8_ch+0x72c>
 80202be:	4648      	mov	r0, r9
 80202c0:	f000 fe82 	bl	8020fc8 <st_int8_to16_no_shift_interleaved>
 80202c4:	3501      	adds	r5, #1
 80202c6:	42ac      	cmp	r4, r5
 80202c8:	44b3      	add	fp, r6
 80202ca:	44b9      	add	r9, r7
 80202cc:	d0c9      	beq.n	8020262 <forward_lite_conv2d_sssa8_ch+0x796>
 80202ce:	4545      	cmp	r5, r8
 80202d0:	463a      	mov	r2, r7
 80202d2:	4659      	mov	r1, fp
 80202d4:	4650      	mov	r0, sl
 80202d6:	d3f2      	bcc.n	80202be <forward_lite_conv2d_sssa8_ch+0x7f2>
 80202d8:	f001 f9d4 	bl	8021684 <st_int16_fill>
 80202dc:	e7f2      	b.n	80202c4 <forward_lite_conv2d_sssa8_ch+0x7f8>
 80202de:	4693      	mov	fp, r2
 80202e0:	9316      	str	r3, [sp, #88]	@ 0x58
 80202e2:	4689      	mov	r9, r1
 80202e4:	4690      	mov	r8, r2
 80202e6:	4641      	mov	r1, r8
 80202e8:	3501      	adds	r5, #1
 80202ea:	463a      	mov	r2, r7
 80202ec:	4650      	mov	r0, sl
 80202ee:	f001 f9c9 	bl	8021684 <st_int16_fill>
 80202f2:	42ac      	cmp	r4, r5
 80202f4:	44b0      	add	r8, r6
 80202f6:	d1f6      	bne.n	80202e6 <forward_lite_conv2d_sssa8_ch+0x81a>
 80202f8:	9814      	ldr	r0, [sp, #80]	@ 0x50
 80202fa:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80202fc:	465a      	mov	r2, fp
 80202fe:	4649      	mov	r1, r9
 8020300:	4402      	add	r2, r0
 8020302:	e7b3      	b.n	802026c <forward_lite_conv2d_sssa8_ch+0x7a0>
 8020304:	3b01      	subs	r3, #1
 8020306:	9355      	str	r3, [sp, #340]	@ 0x154
 8020308:	f8bd 3174 	ldrh.w	r3, [sp, #372]	@ 0x174
 802030c:	f8ad 3176 	strh.w	r3, [sp, #374]	@ 0x176
 8020310:	2b01      	cmp	r3, #1
 8020312:	f43f af71 	beq.w	80201f8 <forward_lite_conv2d_sssa8_ch+0x72c>
 8020316:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8020318:	9d15      	ldr	r5, [sp, #84]	@ 0x54
 802031a:	2b00      	cmp	r3, #0
 802031c:	d145      	bne.n	80203aa <forward_lite_conv2d_sssa8_ch+0x8de>
 802031e:	4545      	cmp	r5, r8
 8020320:	daad      	bge.n	802027e <forward_lite_conv2d_sssa8_ch+0x7b2>
 8020322:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8020324:	9e1b      	ldr	r6, [sp, #108]	@ 0x6c
 8020326:	9410      	str	r4, [sp, #64]	@ 0x40
 8020328:	462f      	mov	r7, r5
 802032a:	9d17      	ldr	r5, [sp, #92]	@ 0x5c
 802032c:	9211      	str	r2, [sp, #68]	@ 0x44
 802032e:	4693      	mov	fp, r2
 8020330:	461c      	mov	r4, r3
 8020332:	4659      	mov	r1, fp
 8020334:	4620      	mov	r0, r4
 8020336:	3701      	adds	r7, #1
 8020338:	462a      	mov	r2, r5
 802033a:	f000 fe45 	bl	8020fc8 <st_int8_to16_no_shift_interleaved>
 802033e:	4547      	cmp	r7, r8
 8020340:	44b3      	add	fp, r6
 8020342:	444c      	add	r4, r9
 8020344:	d1f5      	bne.n	8020332 <forward_lite_conv2d_sssa8_ch+0x866>
 8020346:	e9dd 4210 	ldrd	r4, r2, [sp, #64]	@ 0x40
 802034a:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 802034c:	441a      	add	r2, r3
 802034e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8020350:	4293      	cmp	r3, r2
 8020352:	d197      	bne.n	8020284 <forward_lite_conv2d_sssa8_ch+0x7b8>
 8020354:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8020356:	9308      	str	r3, [sp, #32]
 8020358:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 802035a:	9307      	str	r3, [sp, #28]
 802035c:	9b33      	ldr	r3, [sp, #204]	@ 0xcc
 802035e:	9306      	str	r3, [sp, #24]
 8020360:	9b2d      	ldr	r3, [sp, #180]	@ 0xb4
 8020362:	9305      	str	r3, [sp, #20]
 8020364:	9b2e      	ldr	r3, [sp, #184]	@ 0xb8
 8020366:	9304      	str	r3, [sp, #16]
 8020368:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 802036a:	9303      	str	r3, [sp, #12]
 802036c:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
 802036e:	9302      	str	r3, [sp, #8]
 8020370:	2300      	movs	r3, #0
 8020372:	9301      	str	r3, [sp, #4]
 8020374:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8020376:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8020378:	9300      	str	r3, [sp, #0]
 802037a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 802037c:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 802037e:	991d      	ldr	r1, [sp, #116]	@ 0x74
 8020380:	9823      	ldr	r0, [sp, #140]	@ 0x8c
 8020382:	4413      	add	r3, r2
 8020384:	930c      	str	r3, [sp, #48]	@ 0x30
 8020386:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8020388:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 802038a:	4413      	add	r3, r2
 802038c:	3501      	adds	r5, #1
 802038e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8020390:	4414      	add	r4, r2
 8020392:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8020394:	9a2f      	ldr	r2, [sp, #188]	@ 0xbc
 8020396:	950d      	str	r5, [sp, #52]	@ 0x34
 8020398:	f010 fbca 	bl	8030b30 <st_sssa8_ch_nn_mat_mult_kernel_opt>
 802039c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 802039e:	9020      	str	r0, [sp, #128]	@ 0x80
 80203a0:	42ab      	cmp	r3, r5
 80203a2:	f000 808e 	beq.w	80204c2 <forward_lite_conv2d_sssa8_ch+0x9f6>
 80203a6:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 80203a8:	e77c      	b.n	80202a4 <forward_lite_conv2d_sssa8_ch+0x7d8>
 80203aa:	4545      	cmp	r5, r8
 80203ac:	f6bf af67 	bge.w	802027e <forward_lite_conv2d_sssa8_ch+0x7b2>
 80203b0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80203b2:	9e1b      	ldr	r6, [sp, #108]	@ 0x6c
 80203b4:	9410      	str	r4, [sp, #64]	@ 0x40
 80203b6:	462f      	mov	r7, r5
 80203b8:	9d17      	ldr	r5, [sp, #92]	@ 0x5c
 80203ba:	9211      	str	r2, [sp, #68]	@ 0x44
 80203bc:	4693      	mov	fp, r2
 80203be:	461c      	mov	r4, r3
 80203c0:	4659      	mov	r1, fp
 80203c2:	4620      	mov	r0, r4
 80203c4:	3701      	adds	r7, #1
 80203c6:	462a      	mov	r2, r5
 80203c8:	f000 fd9c 	bl	8020f04 <st_int8_to16_no_shift>
 80203cc:	4547      	cmp	r7, r8
 80203ce:	44b3      	add	fp, r6
 80203d0:	444c      	add	r4, r9
 80203d2:	d1f5      	bne.n	80203c0 <forward_lite_conv2d_sssa8_ch+0x8f4>
 80203d4:	e9dd 4210 	ldrd	r4, r2, [sp, #64]	@ 0x40
 80203d8:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 80203da:	441a      	add	r2, r3
 80203dc:	e7b7      	b.n	802034e <forward_lite_conv2d_sssa8_ch+0x882>
 80203de:	991d      	ldr	r1, [sp, #116]	@ 0x74
 80203e0:	9d36      	ldr	r5, [sp, #216]	@ 0xd8
 80203e2:	428a      	cmp	r2, r1
 80203e4:	e9dd b934 	ldrd	fp, r9, [sp, #208]	@ 0xd0
 80203e8:	d014      	beq.n	8020414 <forward_lite_conv2d_sssa8_ch+0x948>
 80203ea:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80203ec:	9307      	str	r3, [sp, #28]
 80203ee:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 80203f0:	9306      	str	r3, [sp, #24]
 80203f2:	9b33      	ldr	r3, [sp, #204]	@ 0xcc
 80203f4:	9305      	str	r3, [sp, #20]
 80203f6:	9b2d      	ldr	r3, [sp, #180]	@ 0xb4
 80203f8:	9304      	str	r3, [sp, #16]
 80203fa:	9b2e      	ldr	r3, [sp, #184]	@ 0xb8
 80203fc:	9303      	str	r3, [sp, #12]
 80203fe:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8020400:	9302      	str	r3, [sp, #8]
 8020402:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
 8020404:	9301      	str	r3, [sp, #4]
 8020406:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8020408:	9300      	str	r3, [sp, #0]
 802040a:	9a2f      	ldr	r2, [sp, #188]	@ 0xbc
 802040c:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 802040e:	9823      	ldr	r0, [sp, #140]	@ 0x8c
 8020410:	f001 febc 	bl	802218c <st_sssa8_ch_nn_mat_mult_kernel_single_opt>
 8020414:	9a2b      	ldr	r2, [sp, #172]	@ 0xac
 8020416:	1aab      	subs	r3, r5, r2
 8020418:	b29d      	uxth	r5, r3
 802041a:	42aa      	cmp	r2, r5
 802041c:	4614      	mov	r4, r2
 802041e:	bf28      	it	cs
 8020420:	462c      	movcs	r4, r5
 8020422:	b2a4      	uxth	r4, r4
 8020424:	4613      	mov	r3, r2
 8020426:	4491      	add	r9, r2
 8020428:	2c00      	cmp	r4, #0
 802042a:	d043      	beq.n	80204b4 <forward_lite_conv2d_sssa8_ch+0x9e8>
 802042c:	993b      	ldr	r1, [sp, #236]	@ 0xec
 802042e:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8020430:	fb02 1303 	mla	r3, r2, r3, r1
 8020434:	4618      	mov	r0, r3
 8020436:	933b      	str	r3, [sp, #236]	@ 0xec
 8020438:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 802043a:	2b00      	cmp	r3, #0
 802043c:	d13c      	bne.n	80204b8 <forward_lite_conv2d_sssa8_ch+0x9ec>
 802043e:	9923      	ldr	r1, [sp, #140]	@ 0x8c
 8020440:	4623      	mov	r3, r4
 8020442:	f000 feef 	bl	8021224 <st_int8_to16_dual_interleaved>
 8020446:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
 8020448:	9a2f      	ldr	r2, [sp, #188]	@ 0xbc
 802044a:	942b      	str	r4, [sp, #172]	@ 0xac
 802044c:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8020450:	922f      	str	r2, [sp, #188]	@ 0xbc
 8020452:	9a2e      	ldr	r2, [sp, #184]	@ 0xb8
 8020454:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 8020458:	922e      	str	r2, [sp, #184]	@ 0xb8
 802045a:	9a2d      	ldr	r2, [sp, #180]	@ 0xb4
 802045c:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8020460:	922d      	str	r2, [sp, #180]	@ 0xb4
 8020462:	9a33      	ldr	r2, [sp, #204]	@ 0xcc
 8020464:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8020468:	9333      	str	r3, [sp, #204]	@ 0xcc
 802046a:	f10b 33ff 	add.w	r3, fp, #4294967295
 802046e:	fa1f fb83 	uxth.w	fp, r3
 8020472:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8020476:	459b      	cmp	fp, r3
 8020478:	f47f ae9b 	bne.w	80201b2 <forward_lite_conv2d_sssa8_ch+0x6e6>
 802047c:	9e38      	ldr	r6, [sp, #224]	@ 0xe0
 802047e:	f8dd 911c 	ldr.w	r9, [sp, #284]	@ 0x11c
 8020482:	9b3c      	ldr	r3, [sp, #240]	@ 0xf0
 8020484:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8020486:	441a      	add	r2, r3
 8020488:	4498      	add	r8, r3
 802048a:	9215      	str	r2, [sp, #84]	@ 0x54
 802048c:	9b39      	ldr	r3, [sp, #228]	@ 0xe4
 802048e:	9a43      	ldr	r2, [sp, #268]	@ 0x10c
 8020490:	4413      	add	r3, r2
 8020492:	9339      	str	r3, [sp, #228]	@ 0xe4
 8020494:	9a46      	ldr	r2, [sp, #280]	@ 0x118
 8020496:	9b40      	ldr	r3, [sp, #256]	@ 0x100
 8020498:	4413      	add	r3, r2
 802049a:	9340      	str	r3, [sp, #256]	@ 0x100
 802049c:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 802049e:	9b42      	ldr	r3, [sp, #264]	@ 0x108
 80204a0:	4413      	add	r3, r2
 80204a2:	9342      	str	r3, [sp, #264]	@ 0x108
 80204a4:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 80204a6:	9b32      	ldr	r3, [sp, #200]	@ 0xc8
 80204a8:	4293      	cmp	r3, r2
 80204aa:	f47f ae48 	bne.w	802013e <forward_lite_conv2d_sssa8_ch+0x672>
 80204ae:	b069      	add	sp, #420	@ 0x1a4
 80204b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80204b4:	942b      	str	r4, [sp, #172]	@ 0xac
 80204b6:	e7d8      	b.n	802046a <forward_lite_conv2d_sssa8_ch+0x99e>
 80204b8:	9923      	ldr	r1, [sp, #140]	@ 0x8c
 80204ba:	4623      	mov	r3, r4
 80204bc:	f000 fdc6 	bl	802104c <st_int8_to16_dual>
 80204c0:	e7c1      	b.n	8020446 <forward_lite_conv2d_sssa8_ch+0x97a>
 80204c2:	e9dd b934 	ldrd	fp, r9, [sp, #208]	@ 0xd0
 80204c6:	9d36      	ldr	r5, [sp, #216]	@ 0xd8
 80204c8:	e7a4      	b.n	8020414 <forward_lite_conv2d_sssa8_ch+0x948>
 80204ca:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 80204cc:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 80204ce:	9923      	ldr	r1, [sp, #140]	@ 0x8c
 80204d0:	9872      	ldr	r0, [sp, #456]	@ 0x1c8
 80204d2:	f000 fdbb 	bl	802104c <st_int8_to16_dual>
 80204d6:	e64a      	b.n	802016e <forward_lite_conv2d_sssa8_ch+0x6a2>
 80204d8:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 80204da:	fb02 f300 	mul.w	r3, r2, r0
 80204de:	42b3      	cmp	r3, r6
 80204e0:	f73f abcf 	bgt.w	801fc82 <forward_lite_conv2d_sssa8_ch+0x1b6>
 80204e4:	f01a 0f03 	tst.w	sl, #3
 80204e8:	d108      	bne.n	80204fc <forward_lite_conv2d_sssa8_ch+0xa30>
 80204ea:	4603      	mov	r3, r0
 80204ec:	9923      	ldr	r1, [sp, #140]	@ 0x8c
 80204ee:	9872      	ldr	r0, [sp, #456]	@ 0x1c8
 80204f0:	f000 fe98 	bl	8021224 <st_int8_to16_dual_interleaved>
 80204f4:	2301      	movs	r3, #1
 80204f6:	933d      	str	r3, [sp, #244]	@ 0xf4
 80204f8:	f7ff bbc5 	b.w	801fc86 <forward_lite_conv2d_sssa8_ch+0x1ba>
 80204fc:	4603      	mov	r3, r0
 80204fe:	9923      	ldr	r1, [sp, #140]	@ 0x8c
 8020500:	9872      	ldr	r0, [sp, #456]	@ 0x1c8
 8020502:	f000 fda3 	bl	802104c <st_int8_to16_dual>
 8020506:	e7f5      	b.n	80204f4 <forward_lite_conv2d_sssa8_ch+0xa28>

08020508 <lite_convert_is8of32>:
 8020508:	2a00      	cmp	r2, #0
 802050a:	dd0e      	ble.n	802052a <lite_convert_is8of32+0x22>
 802050c:	4402      	add	r2, r0
 802050e:	f910 cb01 	ldrsb.w	ip, [r0], #1
 8020512:	ebac 0c03 	sub.w	ip, ip, r3
 8020516:	ee07 ca90 	vmov	s15, ip
 802051a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 802051e:	4290      	cmp	r0, r2
 8020520:	ee67 7a80 	vmul.f32	s15, s15, s0
 8020524:	ece1 7a01 	vstmia	r1!, {s15}
 8020528:	d1f1      	bne.n	802050e <lite_convert_is8of32+0x6>
 802052a:	4770      	bx	lr

0802052c <lite_convert_iu8of32>:
 802052c:	2a00      	cmp	r2, #0
 802052e:	dd0e      	ble.n	802054e <lite_convert_iu8of32+0x22>
 8020530:	4402      	add	r2, r0
 8020532:	f810 cb01 	ldrb.w	ip, [r0], #1
 8020536:	ebac 0c03 	sub.w	ip, ip, r3
 802053a:	ee07 ca90 	vmov	s15, ip
 802053e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8020542:	4290      	cmp	r0, r2
 8020544:	ee67 7a80 	vmul.f32	s15, s15, s0
 8020548:	ece1 7a01 	vstmia	r1!, {s15}
 802054c:	d1f1      	bne.n	8020532 <lite_convert_iu8of32+0x6>
 802054e:	4770      	bx	lr

08020550 <lite_convert_if32os8>:
 8020550:	ee06 3a10 	vmov	s12, r3
 8020554:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8020558:	2a00      	cmp	r2, #0
 802055a:	eec7 5a80 	vdiv.f32	s11, s15, s0
 802055e:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8020562:	dd28      	ble.n	80205b6 <lite_convert_if32os8+0x66>
 8020564:	eddf 4a14 	vldr	s9, [pc, #80]	@ 80205b8 <lite_convert_if32os8+0x68>
 8020568:	440a      	add	r2, r1
 802056a:	eeb6 5a00 	vmov.f32	s10, #96	@ 0x3f000000  0.5
 802056e:	ecf0 7a01 	vldmia	r0!, {s15}
 8020572:	eef0 6a46 	vmov.f32	s13, s12
 8020576:	eee7 6aa5 	vfma.f32	s13, s15, s11
 802057a:	ee76 7a85 	vadd.f32	s15, s13, s10
 802057e:	ee36 7ae4 	vsub.f32	s14, s13, s9
 8020582:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 8020586:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802058a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 802058e:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 8020592:	db08      	blt.n	80205a6 <lite_convert_if32os8+0x56>
 8020594:	ee17 3a90 	vmov	r3, s15
 8020598:	f303 0307 	ssat	r3, #8, r3
 802059c:	f801 3b01 	strb.w	r3, [r1], #1
 80205a0:	4291      	cmp	r1, r2
 80205a2:	d1e4      	bne.n	802056e <lite_convert_if32os8+0x1e>
 80205a4:	4770      	bx	lr
 80205a6:	ee17 3a10 	vmov	r3, s14
 80205aa:	f303 0307 	ssat	r3, #8, r3
 80205ae:	f801 3b01 	strb.w	r3, [r1], #1
 80205b2:	4291      	cmp	r1, r2
 80205b4:	d1db      	bne.n	802056e <lite_convert_if32os8+0x1e>
 80205b6:	4770      	bx	lr
 80205b8:	3efffffc 	.word	0x3efffffc

080205bc <lite_convert_if32ou8>:
 80205bc:	ee06 3a90 	vmov	s13, r3
 80205c0:	eef8 6a66 	vcvt.f32.u32	s13, s13
 80205c4:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 80205c8:	2a00      	cmp	r2, #0
 80205ca:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80205ce:	dd14      	ble.n	80205fa <lite_convert_if32ou8+0x3e>
 80205d0:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 80205d4:	ee87 6a80 	vdiv.f32	s12, s15, s0
 80205d8:	440a      	add	r2, r1
 80205da:	ecb0 7a01 	vldmia	r0!, {s14}
 80205de:	eef0 7a66 	vmov.f32	s15, s13
 80205e2:	eee7 7a06 	vfma.f32	s15, s14, s12
 80205e6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80205ea:	ee17 3a90 	vmov	r3, s15
 80205ee:	f383 0308 	usat	r3, #8, r3
 80205f2:	f801 3b01 	strb.w	r3, [r1], #1
 80205f6:	4291      	cmp	r1, r2
 80205f8:	d1ef      	bne.n	80205da <lite_convert_if32ou8+0x1e>
 80205fa:	4770      	bx	lr

080205fc <lite_convert_is8os8>:
 80205fc:	b500      	push	{lr}
 80205fe:	eb00 0e02 	add.w	lr, r0, r2
 8020602:	4570      	cmp	r0, lr
 8020604:	f9bd c004 	ldrsh.w	ip, [sp, #4]
 8020608:	d22a      	bcs.n	8020660 <lite_convert_is8os8+0x64>
 802060a:	ee07 ca90 	vmov	s15, ip
 802060e:	ed9f 5a1a 	vldr	s10, [pc, #104]	@ 8020678 <lite_convert_is8os8+0x7c>
 8020612:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 8020616:	3801      	subs	r0, #1
 8020618:	440a      	add	r2, r1
 802061a:	eef6 5a00 	vmov.f32	s11, #96	@ 0x3f000000  0.5
 802061e:	f910 cf01 	ldrsb.w	ip, [r0, #1]!
 8020622:	ebac 0c03 	sub.w	ip, ip, r3
 8020626:	ee07 ca90 	vmov	s15, ip
 802062a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 802062e:	eef0 6a46 	vmov.f32	s13, s12
 8020632:	eee7 6a80 	vfma.f32	s13, s15, s0
 8020636:	ee76 7aa5 	vadd.f32	s15, s13, s11
 802063a:	ee36 7ac5 	vsub.f32	s14, s13, s10
 802063e:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 8020642:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020646:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 802064a:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 802064e:	dd09      	ble.n	8020664 <lite_convert_is8os8+0x68>
 8020650:	ee17 ca90 	vmov	ip, s15
 8020654:	f30c 0c07 	ssat	ip, #8, ip
 8020658:	f801 cb01 	strb.w	ip, [r1], #1
 802065c:	4291      	cmp	r1, r2
 802065e:	d1de      	bne.n	802061e <lite_convert_is8os8+0x22>
 8020660:	f85d fb04 	ldr.w	pc, [sp], #4
 8020664:	ee17 ca10 	vmov	ip, s14
 8020668:	f30c 0c07 	ssat	ip, #8, ip
 802066c:	f801 cb01 	strb.w	ip, [r1], #1
 8020670:	4291      	cmp	r1, r2
 8020672:	d1d4      	bne.n	802061e <lite_convert_is8os8+0x22>
 8020674:	f85d fb04 	ldr.w	pc, [sp], #4
 8020678:	3efffffc 	.word	0x3efffffc

0802067c <lite_convert_iu8ou8>:
 802067c:	f89d c000 	ldrb.w	ip, [sp]
 8020680:	ee06 ca90 	vmov	s13, ip
 8020684:	ee07 3a90 	vmov	s15, r3
 8020688:	eef8 6a66 	vcvt.f32.u32	s13, s13
 802068c:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8020690:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8020694:	ee76 6a87 	vadd.f32	s13, s13, s14
 8020698:	1883      	adds	r3, r0, r2
 802069a:	4298      	cmp	r0, r3
 802069c:	eee7 6ac0 	vfms.f32	s13, s15, s0
 80206a0:	d215      	bcs.n	80206ce <lite_convert_iu8ou8+0x52>
 80206a2:	3801      	subs	r0, #1
 80206a4:	440a      	add	r2, r1
 80206a6:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 80206aa:	ee07 3a10 	vmov	s14, r3
 80206ae:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80206b2:	eef0 7a66 	vmov.f32	s15, s13
 80206b6:	eee7 7a00 	vfma.f32	s15, s14, s0
 80206ba:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80206be:	ee17 3a90 	vmov	r3, s15
 80206c2:	f383 0308 	usat	r3, #8, r3
 80206c6:	f801 3b01 	strb.w	r3, [r1], #1
 80206ca:	4291      	cmp	r1, r2
 80206cc:	d1eb      	bne.n	80206a6 <lite_convert_iu8ou8+0x2a>
 80206ce:	4770      	bx	lr

080206d0 <lite_convert_iu8os8>:
 80206d0:	f99d c000 	ldrsb.w	ip, [sp]
 80206d4:	ee07 3a90 	vmov	s15, r3
 80206d8:	ee06 ca10 	vmov	s12, ip
 80206dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80206e0:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 80206e4:	1883      	adds	r3, r0, r2
 80206e6:	4298      	cmp	r0, r3
 80206e8:	eea7 6ac0 	vfms.f32	s12, s15, s0
 80206ec:	d22d      	bcs.n	802074a <lite_convert_iu8os8+0x7a>
 80206ee:	ed9f 5a17 	vldr	s10, [pc, #92]	@ 802074c <lite_convert_iu8os8+0x7c>
 80206f2:	3801      	subs	r0, #1
 80206f4:	440a      	add	r2, r1
 80206f6:	eef6 5a00 	vmov.f32	s11, #96	@ 0x3f000000  0.5
 80206fa:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 80206fe:	ee07 3a90 	vmov	s15, r3
 8020702:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8020706:	eef0 6a46 	vmov.f32	s13, s12
 802070a:	eee7 6a80 	vfma.f32	s13, s15, s0
 802070e:	ee76 7aa5 	vadd.f32	s15, s13, s11
 8020712:	ee36 7ac5 	vsub.f32	s14, s13, s10
 8020716:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 802071a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802071e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8020722:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 8020726:	dd08      	ble.n	802073a <lite_convert_iu8os8+0x6a>
 8020728:	ee17 3a90 	vmov	r3, s15
 802072c:	f303 0307 	ssat	r3, #8, r3
 8020730:	f801 3b01 	strb.w	r3, [r1], #1
 8020734:	4291      	cmp	r1, r2
 8020736:	d1e0      	bne.n	80206fa <lite_convert_iu8os8+0x2a>
 8020738:	4770      	bx	lr
 802073a:	ee17 3a10 	vmov	r3, s14
 802073e:	f303 0307 	ssat	r3, #8, r3
 8020742:	f801 3b01 	strb.w	r3, [r1], #1
 8020746:	4291      	cmp	r1, r2
 8020748:	d1d7      	bne.n	80206fa <lite_convert_iu8os8+0x2a>
 802074a:	4770      	bx	lr
 802074c:	3efffffc 	.word	0x3efffffc

08020750 <lite_convert_iu8os8_fast>:
 8020750:	b570      	push	{r4, r5, r6, lr}
 8020752:	1095      	asrs	r5, r2, #2
 8020754:	2d00      	cmp	r5, #0
 8020756:	dd31      	ble.n	80207bc <lite_convert_iu8os8_fast+0x6c>
 8020758:	00ae      	lsls	r6, r5, #2
 802075a:	460c      	mov	r4, r1
 802075c:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 8020760:	f04f 1e80 	mov.w	lr, #8388736	@ 0x800080
 8020764:	f850 3b04 	ldr.w	r3, [r0], #4
 8020768:	ea4f 2c33 	mov.w	ip, r3, ror #8
 802076c:	fa3f fc8c 	uxtb16	ip, ip
 8020770:	fadc fc0e 	ssub16	ip, ip, lr
 8020774:	fa3f f383 	uxtb16	r3, r3
 8020778:	fad3 f30e 	ssub16	r3, r3, lr
 802077c:	ea4f 2c0c 	mov.w	ip, ip, lsl #8
 8020780:	f00c 2cff 	and.w	ip, ip, #4278255360	@ 0xff00ff00
 8020784:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 8020788:	ea43 030c 	orr.w	r3, r3, ip
 802078c:	4285      	cmp	r5, r0
 802078e:	f844 3b04 	str.w	r3, [r4], #4
 8020792:	d1e7      	bne.n	8020764 <lite_convert_iu8os8_fast+0x14>
 8020794:	4431      	add	r1, r6
 8020796:	f012 0203 	ands.w	r2, r2, #3
 802079a:	d00e      	beq.n	80207ba <lite_convert_iu8os8_fast+0x6a>
 802079c:	782b      	ldrb	r3, [r5, #0]
 802079e:	2a01      	cmp	r2, #1
 80207a0:	f1a3 0380 	sub.w	r3, r3, #128	@ 0x80
 80207a4:	700b      	strb	r3, [r1, #0]
 80207a6:	d008      	beq.n	80207ba <lite_convert_iu8os8_fast+0x6a>
 80207a8:	786b      	ldrb	r3, [r5, #1]
 80207aa:	2a02      	cmp	r2, #2
 80207ac:	f1a3 0380 	sub.w	r3, r3, #128	@ 0x80
 80207b0:	704b      	strb	r3, [r1, #1]
 80207b2:	d002      	beq.n	80207ba <lite_convert_iu8os8_fast+0x6a>
 80207b4:	78ab      	ldrb	r3, [r5, #2]
 80207b6:	3b80      	subs	r3, #128	@ 0x80
 80207b8:	708b      	strb	r3, [r1, #2]
 80207ba:	bd70      	pop	{r4, r5, r6, pc}
 80207bc:	4605      	mov	r5, r0
 80207be:	e7ea      	b.n	8020796 <lite_convert_iu8os8_fast+0x46>

080207c0 <lite_convert_is8ou8>:
 80207c0:	f89d c000 	ldrb.w	ip, [sp]
 80207c4:	ee06 ca90 	vmov	s13, ip
 80207c8:	ee07 3a90 	vmov	s15, r3
 80207cc:	eef8 6a66 	vcvt.f32.u32	s13, s13
 80207d0:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80207d4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80207d8:	ee76 6a87 	vadd.f32	s13, s13, s14
 80207dc:	1883      	adds	r3, r0, r2
 80207de:	4298      	cmp	r0, r3
 80207e0:	eee7 6ac0 	vfms.f32	s13, s15, s0
 80207e4:	d215      	bcs.n	8020812 <lite_convert_is8ou8+0x52>
 80207e6:	3801      	subs	r0, #1
 80207e8:	440a      	add	r2, r1
 80207ea:	f910 3f01 	ldrsb.w	r3, [r0, #1]!
 80207ee:	ee07 3a10 	vmov	s14, r3
 80207f2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80207f6:	eef0 7a66 	vmov.f32	s15, s13
 80207fa:	eee7 7a00 	vfma.f32	s15, s14, s0
 80207fe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8020802:	ee17 3a90 	vmov	r3, s15
 8020806:	f383 0308 	usat	r3, #8, r3
 802080a:	f801 3b01 	strb.w	r3, [r1], #1
 802080e:	4291      	cmp	r1, r2
 8020810:	d1eb      	bne.n	80207ea <lite_convert_is8ou8+0x2a>
 8020812:	4770      	bx	lr

08020814 <lite_convert_is8ou8_fast>:
 8020814:	b570      	push	{r4, r5, r6, lr}
 8020816:	1095      	asrs	r5, r2, #2
 8020818:	2d00      	cmp	r5, #0
 802081a:	dd2d      	ble.n	8020878 <lite_convert_is8ou8_fast+0x64>
 802081c:	00ae      	lsls	r6, r5, #2
 802081e:	460c      	mov	r4, r1
 8020820:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 8020824:	f04f 1e80 	mov.w	lr, #8388736	@ 0x800080
 8020828:	f850 3b04 	ldr.w	r3, [r0], #4
 802082c:	ea4f 2c33 	mov.w	ip, r3, ror #8
 8020830:	fa2f fc8c 	sxtb16	ip, ip
 8020834:	fa9c fc0e 	sadd16	ip, ip, lr
 8020838:	fa2f f383 	sxtb16	r3, r3
 802083c:	fa93 f30e 	sadd16	r3, r3, lr
 8020840:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 8020844:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
 8020848:	4285      	cmp	r5, r0
 802084a:	f844 3b04 	str.w	r3, [r4], #4
 802084e:	d1eb      	bne.n	8020828 <lite_convert_is8ou8_fast+0x14>
 8020850:	4431      	add	r1, r6
 8020852:	f012 0203 	ands.w	r2, r2, #3
 8020856:	d00e      	beq.n	8020876 <lite_convert_is8ou8_fast+0x62>
 8020858:	782b      	ldrb	r3, [r5, #0]
 802085a:	2a01      	cmp	r2, #1
 802085c:	f1a3 0380 	sub.w	r3, r3, #128	@ 0x80
 8020860:	700b      	strb	r3, [r1, #0]
 8020862:	d008      	beq.n	8020876 <lite_convert_is8ou8_fast+0x62>
 8020864:	786b      	ldrb	r3, [r5, #1]
 8020866:	2a02      	cmp	r2, #2
 8020868:	f1a3 0380 	sub.w	r3, r3, #128	@ 0x80
 802086c:	704b      	strb	r3, [r1, #1]
 802086e:	d002      	beq.n	8020876 <lite_convert_is8ou8_fast+0x62>
 8020870:	78ab      	ldrb	r3, [r5, #2]
 8020872:	3b80      	subs	r3, #128	@ 0x80
 8020874:	708b      	strb	r3, [r1, #2]
 8020876:	bd70      	pop	{r4, r5, r6, pc}
 8020878:	4605      	mov	r5, r0
 802087a:	e7ea      	b.n	8020852 <lite_convert_is8ou8_fast+0x3e>

0802087c <forward_lite_nl_softmax_is8os8>:
 802087c:	b410      	push	{r4}
 802087e:	fbb2 f2f3 	udiv	r2, r2, r3
 8020882:	9c01      	ldr	r4, [sp, #4]
 8020884:	fbb2 f2f4 	udiv	r2, r2, r4
 8020888:	f85d 4b04 	ldr.w	r4, [sp], #4
 802088c:	f011 b996 	b.w	8031bbc <_lite_kernel_nl_softmax_is8os8>

08020890 <forward_lite_nl_softmax_iu8ou8>:
 8020890:	b410      	push	{r4}
 8020892:	fbb2 f2f3 	udiv	r2, r2, r3
 8020896:	9c01      	ldr	r4, [sp, #4]
 8020898:	fbb2 f2f4 	udiv	r2, r2, r4
 802089c:	f85d 4b04 	ldr.w	r4, [sp], #4
 80208a0:	f011 bee0 	b.w	8032664 <_lite_kernel_nl_softmax_iu8ou8>

080208a4 <forward_lite_pad_8bit_ch1st_3x3_constant_P0022>:
 80208a4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80208a8:	461c      	mov	r4, r3
 80208aa:	f992 9000 	ldrsb.w	r9, [r2]
 80208ae:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80208b0:	f04f 0500 	mov.w	r5, #0
 80208b4:	f369 0507 	bfi	r5, r9, #0, #8
 80208b8:	2b00      	cmp	r3, #0
 80208ba:	f369 250f 	bfi	r5, r9, #8, #8
 80208be:	dd1e      	ble.n	80208fe <forward_lite_pad_8bit_ch1st_3x3_constant_P0022+0x5a>
 80208c0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80208c2:	1c9e      	adds	r6, r3, #2
 80208c4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80208c6:	4688      	mov	r8, r1
 80208c8:	ea4f 0b43 	mov.w	fp, r3, lsl #1
 80208cc:	fb06 fa04 	mul.w	sl, r6, r4
 80208d0:	2700      	movs	r7, #0
 80208d2:	2c00      	cmp	r4, #0
 80208d4:	dd09      	ble.n	80208ea <forward_lite_pad_8bit_ch1st_3x3_constant_P0022+0x46>
 80208d6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80208d8:	2100      	movs	r1, #0
 80208da:	eb08 0003 	add.w	r0, r8, r3
 80208de:	3101      	adds	r1, #1
 80208e0:	428c      	cmp	r4, r1
 80208e2:	8005      	strh	r5, [r0, #0]
 80208e4:	4430      	add	r0, r6
 80208e6:	d1fa      	bne.n	80208de <forward_lite_pad_8bit_ch1st_3x3_constant_P0022+0x3a>
 80208e8:	44d0      	add	r8, sl
 80208ea:	4641      	mov	r1, r8
 80208ec:	465a      	mov	r2, fp
 80208ee:	4648      	mov	r0, r9
 80208f0:	f001 fbd8 	bl	80220a4 <st_int8_fill>
 80208f4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80208f6:	3701      	adds	r7, #1
 80208f8:	42bb      	cmp	r3, r7
 80208fa:	44d8      	add	r8, fp
 80208fc:	d1e9      	bne.n	80208d2 <forward_lite_pad_8bit_ch1st_3x3_constant_P0022+0x2e>
 80208fe:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020902:	bf00      	nop

08020904 <forward_lite_pad_8bit_ch1st_3x3_constant_P1111>:
 8020904:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020908:	b085      	sub	sp, #20
 802090a:	f992 8000 	ldrsb.w	r8, [r2]
 802090e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8020910:	9f0e      	ldr	r7, [sp, #56]	@ 0x38
 8020912:	9203      	str	r2, [sp, #12]
 8020914:	469b      	mov	fp, r3
 8020916:	f04f 0500 	mov.w	r5, #0
 802091a:	f368 0507 	bfi	r5, r8, #0, #8
 802091e:	f1bb 0f06 	cmp.w	fp, #6
 8020922:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8020924:	460c      	mov	r4, r1
 8020926:	f368 250f 	bfi	r5, r8, #8, #8
 802092a:	f000 8082 	beq.w	8020a32 <forward_lite_pad_8bit_ch1st_3x3_constant_P1111+0x12e>
 802092e:	f1bb 0f03 	cmp.w	fp, #3
 8020932:	d058      	beq.n	80209e6 <forward_lite_pad_8bit_ch1st_3x3_constant_P1111+0xe2>
 8020934:	2a00      	cmp	r2, #0
 8020936:	db08      	blt.n	802094a <forward_lite_pad_8bit_ch1st_3x3_constant_P1111+0x46>
 8020938:	9300      	str	r3, [sp, #0]
 802093a:	9b03      	ldr	r3, [sp, #12]
 802093c:	4608      	mov	r0, r1
 802093e:	1c5a      	adds	r2, r3, #1
 8020940:	4641      	mov	r1, r8
 8020942:	4414      	add	r4, r2
 8020944:	f013 fa0a 	bl	8033d5c <memset>
 8020948:	9b00      	ldr	r3, [sp, #0]
 802094a:	2f01      	cmp	r7, #1
 802094c:	f107 3eff 	add.w	lr, r7, #4294967295
 8020950:	f10b 36ff 	add.w	r6, fp, #4294967295
 8020954:	dd2c      	ble.n	80209b0 <forward_lite_pad_8bit_ch1st_3x3_constant_P1111+0xac>
 8020956:	9a03      	ldr	r2, [sp, #12]
 8020958:	f8cd 8000 	str.w	r8, [sp]
 802095c:	3201      	adds	r2, #1
 802095e:	1c9f      	adds	r7, r3, #2
 8020960:	ea4f 0a42 	mov.w	sl, r2, lsl #1
 8020964:	fb07 f206 	mul.w	r2, r7, r6
 8020968:	46d0      	mov	r8, sl
 802096a:	9202      	str	r2, [sp, #8]
 802096c:	f04f 0900 	mov.w	r9, #0
 8020970:	f8cd e004 	str.w	lr, [sp, #4]
 8020974:	469a      	mov	sl, r3
 8020976:	f1bb 0f01 	cmp.w	fp, #1
 802097a:	eb04 010a 	add.w	r1, r4, sl
 802097e:	dd09      	ble.n	8020994 <forward_lite_pad_8bit_ch1st_3x3_constant_P1111+0x90>
 8020980:	468c      	mov	ip, r1
 8020982:	2000      	movs	r0, #0
 8020984:	3001      	adds	r0, #1
 8020986:	4286      	cmp	r6, r0
 8020988:	f8ac 5000 	strh.w	r5, [ip]
 802098c:	44bc      	add	ip, r7
 802098e:	d1f9      	bne.n	8020984 <forward_lite_pad_8bit_ch1st_3x3_constant_P1111+0x80>
 8020990:	9b02      	ldr	r3, [sp, #8]
 8020992:	4419      	add	r1, r3
 8020994:	9800      	ldr	r0, [sp, #0]
 8020996:	4642      	mov	r2, r8
 8020998:	eb01 0408 	add.w	r4, r1, r8
 802099c:	f001 fb82 	bl	80220a4 <st_int8_fill>
 80209a0:	9b01      	ldr	r3, [sp, #4]
 80209a2:	f109 0901 	add.w	r9, r9, #1
 80209a6:	4599      	cmp	r9, r3
 80209a8:	d1e5      	bne.n	8020976 <forward_lite_pad_8bit_ch1st_3x3_constant_P1111+0x72>
 80209aa:	f8dd 8000 	ldr.w	r8, [sp]
 80209ae:	4653      	mov	r3, sl
 80209b0:	f1bb 0f01 	cmp.w	fp, #1
 80209b4:	eb04 0003 	add.w	r0, r4, r3
 80209b8:	dd0a      	ble.n	80209d0 <forward_lite_pad_8bit_ch1st_3x3_constant_P1111+0xcc>
 80209ba:	f103 0a02 	add.w	sl, r3, #2
 80209be:	4602      	mov	r2, r0
 80209c0:	2300      	movs	r3, #0
 80209c2:	3301      	adds	r3, #1
 80209c4:	429e      	cmp	r6, r3
 80209c6:	8015      	strh	r5, [r2, #0]
 80209c8:	4452      	add	r2, sl
 80209ca:	d1fa      	bne.n	80209c2 <forward_lite_pad_8bit_ch1st_3x3_constant_P1111+0xbe>
 80209cc:	fb06 000a 	mla	r0, r6, sl, r0
 80209d0:	9b03      	ldr	r3, [sp, #12]
 80209d2:	2b00      	cmp	r3, #0
 80209d4:	db2a      	blt.n	8020a2c <forward_lite_pad_8bit_ch1st_3x3_constant_P1111+0x128>
 80209d6:	461a      	mov	r2, r3
 80209d8:	3201      	adds	r2, #1
 80209da:	4641      	mov	r1, r8
 80209dc:	b005      	add	sp, #20
 80209de:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80209e2:	f013 b9bb 	b.w	8033d5c <memset>
 80209e6:	fa5f f388 	uxtb.w	r3, r8
 80209ea:	ea4f 2208 	mov.w	r2, r8, lsl #8
 80209ee:	b292      	uxth	r2, r2
 80209f0:	ea43 6308 	orr.w	r3, r3, r8, lsl #24
 80209f4:	4313      	orrs	r3, r2
 80209f6:	ea4f 4208 	mov.w	r2, r8, lsl #16
 80209fa:	f402 027f 	and.w	r2, r2, #16711680	@ 0xff0000
 80209fe:	2f00      	cmp	r7, #0
 8020a00:	ea42 0203 	orr.w	r2, r2, r3
 8020a04:	b29b      	uxth	r3, r3
 8020a06:	dd11      	ble.n	8020a2c <forward_lite_pad_8bit_ch1st_3x3_constant_P1111+0x128>
 8020a08:	eb07 0787 	add.w	r7, r7, r7, lsl #2
 8020a0c:	eb07 0787 	add.w	r7, r7, r7, lsl #2
 8020a10:	4439      	add	r1, r7
 8020a12:	6022      	str	r2, [r4, #0]
 8020a14:	80a3      	strh	r3, [r4, #4]
 8020a16:	f8a4 5009 	strh.w	r5, [r4, #9]
 8020a1a:	81e3      	strh	r3, [r4, #14]
 8020a1c:	f884 8013 	strb.w	r8, [r4, #19]
 8020a20:	6162      	str	r2, [r4, #20]
 8020a22:	f884 8018 	strb.w	r8, [r4, #24]
 8020a26:	3419      	adds	r4, #25
 8020a28:	42a1      	cmp	r1, r4
 8020a2a:	d1f2      	bne.n	8020a12 <forward_lite_pad_8bit_ch1st_3x3_constant_P1111+0x10e>
 8020a2c:	b005      	add	sp, #20
 8020a2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020a32:	fa5f f388 	uxtb.w	r3, r8
 8020a36:	ea4f 2208 	mov.w	r2, r8, lsl #8
 8020a3a:	b292      	uxth	r2, r2
 8020a3c:	ea43 6308 	orr.w	r3, r3, r8, lsl #24
 8020a40:	4313      	orrs	r3, r2
 8020a42:	ea4f 4208 	mov.w	r2, r8, lsl #16
 8020a46:	f402 027f 	and.w	r2, r2, #16711680	@ 0xff0000
 8020a4a:	2f00      	cmp	r7, #0
 8020a4c:	ea43 0302 	orr.w	r3, r3, r2
 8020a50:	ddec      	ble.n	8020a2c <forward_lite_pad_8bit_ch1st_3x3_constant_P1111+0x128>
 8020a52:	340f      	adds	r4, #15
 8020a54:	2200      	movs	r2, #0
 8020a56:	3201      	adds	r2, #1
 8020a58:	4297      	cmp	r7, r2
 8020a5a:	f844 3c0f 	str.w	r3, [r4, #-15]
 8020a5e:	f844 3c0b 	str.w	r3, [r4, #-11]
 8020a62:	f804 8c07 	strb.w	r8, [r4, #-7]
 8020a66:	8025      	strh	r5, [r4, #0]
 8020a68:	8125      	strh	r5, [r4, #8]
 8020a6a:	8225      	strh	r5, [r4, #16]
 8020a6c:	8325      	strh	r5, [r4, #24]
 8020a6e:	8425      	strh	r5, [r4, #32]
 8020a70:	f884 8028 	strb.w	r8, [r4, #40]	@ 0x28
 8020a74:	f8c4 3029 	str.w	r3, [r4, #41]	@ 0x29
 8020a78:	f8c4 302d 	str.w	r3, [r4, #45]	@ 0x2d
 8020a7c:	f104 0440 	add.w	r4, r4, #64	@ 0x40
 8020a80:	d1e9      	bne.n	8020a56 <forward_lite_pad_8bit_ch1st_3x3_constant_P1111+0x152>
 8020a82:	b005      	add	sp, #20
 8020a84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08020a88 <forward_lite_pad_constant>:
 8020a88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020a8c:	b085      	sub	sp, #20
 8020a8e:	4616      	mov	r6, r2
 8020a90:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8020a92:	9201      	str	r2, [sp, #4]
 8020a94:	4681      	mov	r9, r0
 8020a96:	e9dd 2011 	ldrd	r2, r0, [sp, #68]	@ 0x44
 8020a9a:	2b08      	cmp	r3, #8
 8020a9c:	e9dd 5a0f 	ldrd	r5, sl, [sp, #60]	@ 0x3c
 8020aa0:	e9dd 7813 	ldrd	r7, r8, [sp, #76]	@ 0x4c
 8020aa4:	460c      	mov	r4, r1
 8020aa6:	9002      	str	r0, [sp, #8]
 8020aa8:	d050      	beq.n	8020b4c <forward_lite_pad_constant+0xc4>
 8020aaa:	2a00      	cmp	r2, #0
 8020aac:	dd0f      	ble.n	8020ace <forward_lite_pad_constant+0x46>
 8020aae:	9700      	str	r7, [sp, #0]
 8020ab0:	f04f 0b00 	mov.w	fp, #0
 8020ab4:	462f      	mov	r7, r5
 8020ab6:	4615      	mov	r5, r2
 8020ab8:	4621      	mov	r1, r4
 8020aba:	463a      	mov	r2, r7
 8020abc:	44bb      	add	fp, r7
 8020abe:	4630      	mov	r0, r6
 8020ac0:	f001 fa52 	bl	8021f68 <st_int8_copy>
 8020ac4:	455d      	cmp	r5, fp
 8020ac6:	443c      	add	r4, r7
 8020ac8:	dcf6      	bgt.n	8020ab8 <forward_lite_pad_constant+0x30>
 8020aca:	463d      	mov	r5, r7
 8020acc:	9f00      	ldr	r7, [sp, #0]
 8020ace:	9b01      	ldr	r3, [sp, #4]
 8020ad0:	2b00      	cmp	r3, #0
 8020ad2:	dd2a      	ble.n	8020b2a <forward_lite_pad_constant+0xa2>
 8020ad4:	2300      	movs	r3, #0
 8020ad6:	9300      	str	r3, [sp, #0]
 8020ad8:	2f00      	cmp	r7, #0
 8020ada:	bfc8      	it	gt
 8020adc:	f04f 0b00 	movgt.w	fp, #0
 8020ae0:	dd08      	ble.n	8020af4 <forward_lite_pad_constant+0x6c>
 8020ae2:	4621      	mov	r1, r4
 8020ae4:	462a      	mov	r2, r5
 8020ae6:	44ab      	add	fp, r5
 8020ae8:	4630      	mov	r0, r6
 8020aea:	f001 fa3d 	bl	8021f68 <st_int8_copy>
 8020aee:	455f      	cmp	r7, fp
 8020af0:	442c      	add	r4, r5
 8020af2:	dcf6      	bgt.n	8020ae2 <forward_lite_pad_constant+0x5a>
 8020af4:	4621      	mov	r1, r4
 8020af6:	4648      	mov	r0, r9
 8020af8:	4652      	mov	r2, sl
 8020afa:	f001 fa35 	bl	8021f68 <st_int8_copy>
 8020afe:	f1b8 0f00 	cmp.w	r8, #0
 8020b02:	4454      	add	r4, sl
 8020b04:	44d1      	add	r9, sl
 8020b06:	dd0a      	ble.n	8020b1e <forward_lite_pad_constant+0x96>
 8020b08:	f04f 0b00 	mov.w	fp, #0
 8020b0c:	4621      	mov	r1, r4
 8020b0e:	462a      	mov	r2, r5
 8020b10:	44ab      	add	fp, r5
 8020b12:	4630      	mov	r0, r6
 8020b14:	f001 fa28 	bl	8021f68 <st_int8_copy>
 8020b18:	45d8      	cmp	r8, fp
 8020b1a:	442c      	add	r4, r5
 8020b1c:	dcf6      	bgt.n	8020b0c <forward_lite_pad_constant+0x84>
 8020b1e:	9b00      	ldr	r3, [sp, #0]
 8020b20:	9a01      	ldr	r2, [sp, #4]
 8020b22:	3301      	adds	r3, #1
 8020b24:	429a      	cmp	r2, r3
 8020b26:	9300      	str	r3, [sp, #0]
 8020b28:	d1d6      	bne.n	8020ad8 <forward_lite_pad_constant+0x50>
 8020b2a:	9b02      	ldr	r3, [sp, #8]
 8020b2c:	2b00      	cmp	r3, #0
 8020b2e:	dd0a      	ble.n	8020b46 <forward_lite_pad_constant+0xbe>
 8020b30:	2700      	movs	r7, #0
 8020b32:	4698      	mov	r8, r3
 8020b34:	4621      	mov	r1, r4
 8020b36:	462a      	mov	r2, r5
 8020b38:	4630      	mov	r0, r6
 8020b3a:	442f      	add	r7, r5
 8020b3c:	f001 fa14 	bl	8021f68 <st_int8_copy>
 8020b40:	45b8      	cmp	r8, r7
 8020b42:	442c      	add	r4, r5
 8020b44:	dcf6      	bgt.n	8020b34 <forward_lite_pad_constant+0xac>
 8020b46:	b005      	add	sp, #20
 8020b48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020b4c:	f996 6000 	ldrsb.w	r6, [r6]
 8020b50:	188b      	adds	r3, r1, r2
 8020b52:	4630      	mov	r0, r6
 8020b54:	9300      	str	r3, [sp, #0]
 8020b56:	f001 faa5 	bl	80220a4 <st_int8_fill>
 8020b5a:	9b01      	ldr	r3, [sp, #4]
 8020b5c:	2b00      	cmp	r3, #0
 8020b5e:	9b00      	ldr	r3, [sp, #0]
 8020b60:	dd27      	ble.n	8020bb2 <forward_lite_pad_constant+0x12a>
 8020b62:	eb08 020a 	add.w	r2, r8, sl
 8020b66:	f04f 0b00 	mov.w	fp, #0
 8020b6a:	19d5      	adds	r5, r2, r7
 8020b6c:	461c      	mov	r4, r3
 8020b6e:	eb07 020a 	add.w	r2, r7, sl
 8020b72:	9303      	str	r3, [sp, #12]
 8020b74:	4643      	mov	r3, r8
 8020b76:	9200      	str	r2, [sp, #0]
 8020b78:	46d8      	mov	r8, fp
 8020b7a:	469b      	mov	fp, r3
 8020b7c:	4621      	mov	r1, r4
 8020b7e:	4630      	mov	r0, r6
 8020b80:	463a      	mov	r2, r7
 8020b82:	f001 fa8f 	bl	80220a4 <st_int8_fill>
 8020b86:	19e1      	adds	r1, r4, r7
 8020b88:	4648      	mov	r0, r9
 8020b8a:	4652      	mov	r2, sl
 8020b8c:	f001 f9ec 	bl	8021f68 <st_int8_copy>
 8020b90:	9b00      	ldr	r3, [sp, #0]
 8020b92:	465a      	mov	r2, fp
 8020b94:	18e1      	adds	r1, r4, r3
 8020b96:	4630      	mov	r0, r6
 8020b98:	f001 fa84 	bl	80220a4 <st_int8_fill>
 8020b9c:	9b01      	ldr	r3, [sp, #4]
 8020b9e:	f108 0801 	add.w	r8, r8, #1
 8020ba2:	4543      	cmp	r3, r8
 8020ba4:	44d1      	add	r9, sl
 8020ba6:	442c      	add	r4, r5
 8020ba8:	d1e8      	bne.n	8020b7c <forward_lite_pad_constant+0xf4>
 8020baa:	461a      	mov	r2, r3
 8020bac:	9b03      	ldr	r3, [sp, #12]
 8020bae:	fb05 3302 	mla	r3, r5, r2, r3
 8020bb2:	9a02      	ldr	r2, [sp, #8]
 8020bb4:	4619      	mov	r1, r3
 8020bb6:	4630      	mov	r0, r6
 8020bb8:	b005      	add	sp, #20
 8020bba:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020bbe:	f001 ba71 	b.w	80220a4 <st_int8_fill>
 8020bc2:	bf00      	nop

08020bc4 <forward_lite_pad_edge>:
 8020bc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020bc8:	b087      	sub	sp, #28
 8020bca:	469b      	mov	fp, r3
 8020bcc:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8020bce:	f9bd 8040 	ldrsh.w	r8, [sp, #64]	@ 0x40
 8020bd2:	f8dd 9054 	ldr.w	r9, [sp, #84]	@ 0x54
 8020bd6:	18ce      	adds	r6, r1, r3
 8020bd8:	1e13      	subs	r3, r2, #0
 8020bda:	e9dd 4a12 	ldrd	r4, sl, [sp, #72]	@ 0x48
 8020bde:	9301      	str	r3, [sp, #4]
 8020be0:	dd3e      	ble.n	8020c60 <forward_lite_pad_edge+0x9c>
 8020be2:	fb04 f308 	mul.w	r3, r4, r8
 8020be6:	e9cd 6103 	strd	r6, r1, [sp, #12]
 8020bea:	9302      	str	r3, [sp, #8]
 8020bec:	2300      	movs	r3, #0
 8020bee:	4607      	mov	r7, r0
 8020bf0:	4635      	mov	r5, r6
 8020bf2:	9300      	str	r3, [sp, #0]
 8020bf4:	f8cd b014 	str.w	fp, [sp, #20]
 8020bf8:	f1b9 0f00 	cmp.w	r9, #0
 8020bfc:	bfc8      	it	gt
 8020bfe:	2600      	movgt	r6, #0
 8020c00:	dd08      	ble.n	8020c14 <forward_lite_pad_edge+0x50>
 8020c02:	4629      	mov	r1, r5
 8020c04:	4426      	add	r6, r4
 8020c06:	4622      	mov	r2, r4
 8020c08:	4638      	mov	r0, r7
 8020c0a:	f001 f9ad 	bl	8021f68 <st_int8_copy>
 8020c0e:	45b1      	cmp	r9, r6
 8020c10:	4425      	add	r5, r4
 8020c12:	dcf6      	bgt.n	8020c02 <forward_lite_pad_edge+0x3e>
 8020c14:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8020c16:	4629      	mov	r1, r5
 8020c18:	4638      	mov	r0, r7
 8020c1a:	461a      	mov	r2, r3
 8020c1c:	441f      	add	r7, r3
 8020c1e:	441d      	add	r5, r3
 8020c20:	f001 f9a2 	bl	8021f68 <st_int8_copy>
 8020c24:	f1b8 0f00 	cmp.w	r8, #0
 8020c28:	eba7 0a04 	sub.w	sl, r7, r4
 8020c2c:	dd0c      	ble.n	8020c48 <forward_lite_pad_edge+0x84>
 8020c2e:	46ab      	mov	fp, r5
 8020c30:	2600      	movs	r6, #0
 8020c32:	4659      	mov	r1, fp
 8020c34:	3601      	adds	r6, #1
 8020c36:	4622      	mov	r2, r4
 8020c38:	4650      	mov	r0, sl
 8020c3a:	f001 f995 	bl	8021f68 <st_int8_copy>
 8020c3e:	45b0      	cmp	r8, r6
 8020c40:	44a3      	add	fp, r4
 8020c42:	d1f6      	bne.n	8020c32 <forward_lite_pad_edge+0x6e>
 8020c44:	9b02      	ldr	r3, [sp, #8]
 8020c46:	441d      	add	r5, r3
 8020c48:	9b00      	ldr	r3, [sp, #0]
 8020c4a:	9a01      	ldr	r2, [sp, #4]
 8020c4c:	3301      	adds	r3, #1
 8020c4e:	429a      	cmp	r2, r3
 8020c50:	9300      	str	r3, [sp, #0]
 8020c52:	d1d1      	bne.n	8020bf8 <forward_lite_pad_edge+0x34>
 8020c54:	e9dd 6103 	ldrd	r6, r1, [sp, #12]
 8020c58:	f8dd b014 	ldr.w	fp, [sp, #20]
 8020c5c:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 8020c60:	42b1      	cmp	r1, r6
 8020c62:	d00a      	beq.n	8020c7a <forward_lite_pad_edge+0xb6>
 8020c64:	460c      	mov	r4, r1
 8020c66:	460d      	mov	r5, r1
 8020c68:	4621      	mov	r1, r4
 8020c6a:	4652      	mov	r2, sl
 8020c6c:	4630      	mov	r0, r6
 8020c6e:	4454      	add	r4, sl
 8020c70:	f001 f97a 	bl	8021f68 <st_int8_copy>
 8020c74:	42a6      	cmp	r6, r4
 8020c76:	d1f7      	bne.n	8020c68 <forward_lite_pad_edge+0xa4>
 8020c78:	4629      	mov	r1, r5
 8020c7a:	9b01      	ldr	r3, [sp, #4]
 8020c7c:	445b      	add	r3, fp
 8020c7e:	3b01      	subs	r3, #1
 8020c80:	fb0a 1503 	mla	r5, sl, r3, r1
 8020c84:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8020c86:	18ec      	adds	r4, r5, r3
 8020c88:	42a5      	cmp	r5, r4
 8020c8a:	bf18      	it	ne
 8020c8c:	f1ca 0600 	rsbne	r6, sl, #0
 8020c90:	d007      	beq.n	8020ca2 <forward_lite_pad_edge+0xde>
 8020c92:	4621      	mov	r1, r4
 8020c94:	4652      	mov	r2, sl
 8020c96:	4628      	mov	r0, r5
 8020c98:	4434      	add	r4, r6
 8020c9a:	f001 f965 	bl	8021f68 <st_int8_copy>
 8020c9e:	42a5      	cmp	r5, r4
 8020ca0:	d1f7      	bne.n	8020c92 <forward_lite_pad_edge+0xce>
 8020ca2:	b007      	add	sp, #28
 8020ca4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08020ca8 <forward_lite_pad_reflect>:
 8020ca8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020cac:	b08f      	sub	sp, #60	@ 0x3c
 8020cae:	460d      	mov	r5, r1
 8020cb0:	9f22      	ldr	r7, [sp, #136]	@ 0x88
 8020cb2:	9002      	str	r0, [sp, #8]
 8020cb4:	4692      	mov	sl, r2
 8020cb6:	f1b3 0c00 	subs.w	ip, r3, #0
 8020cba:	f9bd 2084 	ldrsh.w	r2, [sp, #132]	@ 0x84
 8020cbe:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8020cc0:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 8020cc4:	f8dd 9078 	ldr.w	r9, [sp, #120]	@ 0x78
 8020cc8:	f9bd e07c 	ldrsh.w	lr, [sp, #124]	@ 0x7c
 8020ccc:	f9bd 0080 	ldrsh.w	r0, [sp, #128]	@ 0x80
 8020cd0:	f8dd b08c 	ldr.w	fp, [sp, #140]	@ 0x8c
 8020cd4:	920b      	str	r2, [sp, #44]	@ 0x2c
 8020cd6:	e9dd 461c 	ldrd	r4, r6, [sp, #112]	@ 0x70
 8020cda:	442f      	add	r7, r5
 8020cdc:	dd62      	ble.n	8020da4 <forward_lite_pad_reflect+0xfc>
 8020cde:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8020ce0:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8020ce2:	950c      	str	r5, [sp, #48]	@ 0x30
 8020ce4:	4413      	add	r3, r2
 8020ce6:	445b      	add	r3, fp
 8020ce8:	fb04 f201 	mul.w	r2, r4, r1
 8020cec:	9309      	str	r3, [sp, #36]	@ 0x24
 8020cee:	9208      	str	r2, [sp, #32]
 8020cf0:	eb07 030b 	add.w	r3, r7, fp
 8020cf4:	9a02      	ldr	r2, [sp, #8]
 8020cf6:	9301      	str	r3, [sp, #4]
 8020cf8:	448e      	add	lr, r1
 8020cfa:	1e8b      	subs	r3, r1, #2
 8020cfc:	fb0a fe0e 	mul.w	lr, sl, lr
 8020d00:	fb04 2303 	mla	r3, r4, r3, r2
 8020d04:	9304      	str	r3, [sp, #16]
 8020d06:	fb08 e300 	mla	r3, r8, r0, lr
 8020d0a:	fb09 5303 	mla	r3, r9, r3, r5
 8020d0e:	9303      	str	r3, [sp, #12]
 8020d10:	fb09 f308 	mul.w	r3, r9, r8
 8020d14:	9307      	str	r3, [sp, #28]
 8020d16:	2300      	movs	r3, #0
 8020d18:	9305      	str	r3, [sp, #20]
 8020d1a:	f1c9 0a00 	rsb	sl, r9, #0
 8020d1e:	f8cd e018 	str.w	lr, [sp, #24]
 8020d22:	f8cd c028 	str.w	ip, [sp, #40]	@ 0x28
 8020d26:	961d      	str	r6, [sp, #116]	@ 0x74
 8020d28:	900d      	str	r0, [sp, #52]	@ 0x34
 8020d2a:	9b01      	ldr	r3, [sp, #4]
 8020d2c:	42bb      	cmp	r3, r7
 8020d2e:	d00a      	beq.n	8020d46 <forward_lite_pad_reflect+0x9e>
 8020d30:	9e02      	ldr	r6, [sp, #8]
 8020d32:	461d      	mov	r5, r3
 8020d34:	4455      	add	r5, sl
 8020d36:	4426      	add	r6, r4
 8020d38:	4622      	mov	r2, r4
 8020d3a:	4629      	mov	r1, r5
 8020d3c:	4630      	mov	r0, r6
 8020d3e:	f001 f913 	bl	8021f68 <st_int8_copy>
 8020d42:	42bd      	cmp	r5, r7
 8020d44:	d1f6      	bne.n	8020d34 <forward_lite_pad_reflect+0x8c>
 8020d46:	9b02      	ldr	r3, [sp, #8]
 8020d48:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8020d4a:	9901      	ldr	r1, [sp, #4]
 8020d4c:	4618      	mov	r0, r3
 8020d4e:	4413      	add	r3, r2
 8020d50:	9302      	str	r3, [sp, #8]
 8020d52:	f001 f909 	bl	8021f68 <st_int8_copy>
 8020d56:	9b06      	ldr	r3, [sp, #24]
 8020d58:	4543      	cmp	r3, r8
 8020d5a:	da0d      	bge.n	8020d78 <forward_lite_pad_reflect+0xd0>
 8020d5c:	e9dd b603 	ldrd	fp, r6, [sp, #12]
 8020d60:	461d      	mov	r5, r3
 8020d62:	4659      	mov	r1, fp
 8020d64:	4630      	mov	r0, r6
 8020d66:	3501      	adds	r5, #1
 8020d68:	4622      	mov	r2, r4
 8020d6a:	f001 f8fd 	bl	8021f68 <st_int8_copy>
 8020d6e:	45a8      	cmp	r8, r5
 8020d70:	44cb      	add	fp, r9
 8020d72:	eba6 0604 	sub.w	r6, r6, r4
 8020d76:	d1f4      	bne.n	8020d62 <forward_lite_pad_reflect+0xba>
 8020d78:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8020d7a:	9901      	ldr	r1, [sp, #4]
 8020d7c:	9b05      	ldr	r3, [sp, #20]
 8020d7e:	4411      	add	r1, r2
 8020d80:	4417      	add	r7, r2
 8020d82:	9101      	str	r1, [sp, #4]
 8020d84:	9a04      	ldr	r2, [sp, #16]
 8020d86:	9908      	ldr	r1, [sp, #32]
 8020d88:	440a      	add	r2, r1
 8020d8a:	9204      	str	r2, [sp, #16]
 8020d8c:	9907      	ldr	r1, [sp, #28]
 8020d8e:	9a03      	ldr	r2, [sp, #12]
 8020d90:	440a      	add	r2, r1
 8020d92:	9203      	str	r2, [sp, #12]
 8020d94:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8020d96:	3301      	adds	r3, #1
 8020d98:	429a      	cmp	r2, r3
 8020d9a:	9305      	str	r3, [sp, #20]
 8020d9c:	d1c5      	bne.n	8020d2a <forward_lite_pad_reflect+0x82>
 8020d9e:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 8020da0:	9e1d      	ldr	r6, [sp, #116]	@ 0x74
 8020da2:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8020da4:	fb00 f406 	mul.w	r4, r0, r6
 8020da8:	eb05 0444 	add.w	r4, r5, r4, lsl #1
 8020dac:	42a5      	cmp	r5, r4
 8020dae:	d00b      	beq.n	8020dc8 <forward_lite_pad_reflect+0x120>
 8020db0:	f1c6 0800 	rsb	r8, r6, #0
 8020db4:	462f      	mov	r7, r5
 8020db6:	4639      	mov	r1, r7
 8020db8:	4620      	mov	r0, r4
 8020dba:	4632      	mov	r2, r6
 8020dbc:	4437      	add	r7, r6
 8020dbe:	4444      	add	r4, r8
 8020dc0:	f001 f8d2 	bl	8021f68 <st_int8_copy>
 8020dc4:	42a7      	cmp	r7, r4
 8020dc6:	d1f6      	bne.n	8020db6 <forward_lite_pad_reflect+0x10e>
 8020dc8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8020dca:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8020dcc:	3b01      	subs	r3, #1
 8020dce:	fb06 5503 	mla	r5, r6, r3, r5
 8020dd2:	fb06 f404 	mul.w	r4, r6, r4
 8020dd6:	eba5 0444 	sub.w	r4, r5, r4, lsl #1
 8020dda:	42a5      	cmp	r5, r4
 8020ddc:	bf18      	it	ne
 8020dde:	4277      	negne	r7, r6
 8020de0:	d008      	beq.n	8020df4 <forward_lite_pad_reflect+0x14c>
 8020de2:	4629      	mov	r1, r5
 8020de4:	4620      	mov	r0, r4
 8020de6:	4632      	mov	r2, r6
 8020de8:	443d      	add	r5, r7
 8020dea:	4434      	add	r4, r6
 8020dec:	f001 f8bc 	bl	8021f68 <st_int8_copy>
 8020df0:	42a5      	cmp	r5, r4
 8020df2:	d1f6      	bne.n	8020de2 <forward_lite_pad_reflect+0x13a>
 8020df4:	b00f      	add	sp, #60	@ 0x3c
 8020df6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020dfa:	bf00      	nop

08020dfc <align_factor>:
 8020dfc:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8020e00:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8020e04:	b508      	push	{r3, lr}
 8020e06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020e0a:	f04f 0300 	mov.w	r3, #0
 8020e0e:	8003      	strh	r3, [r0, #0]
 8020e10:	d425      	bmi.n	8020e5e <align_factor+0x62>
 8020e12:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8020e16:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8020e1a:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8020e1e:	f64f 71e0 	movw	r1, #65504	@ 0xffe0
 8020e22:	e005      	b.n	8020e30 <align_factor+0x34>
 8020e24:	8003      	strh	r3, [r0, #0]
 8020e26:	b293      	uxth	r3, r2
 8020e28:	428b      	cmp	r3, r1
 8020e2a:	ee20 0a07 	vmul.f32	s0, s0, s14
 8020e2e:	d02d      	beq.n	8020e8c <align_factor+0x90>
 8020e30:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8020e34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020e38:	f103 32ff 	add.w	r2, r3, #4294967295
 8020e3c:	dcf2      	bgt.n	8020e24 <align_factor+0x28>
 8020e3e:	eddf 7a18 	vldr	s15, [pc, #96]	@ 8020ea0 <align_factor+0xa4>
 8020e42:	ee60 7a27 	vmul.f32	s15, s0, s15
 8020e46:	ee17 0a90 	vmov	r0, s15
 8020e4a:	f7ef fdfd 	bl	8010a48 <__aeabi_f2lz>
 8020e4e:	ebb1 7fe0 	cmp.w	r1, r0, asr #31
 8020e52:	bf1c      	itt	ne
 8020e54:	f06f 4000 	mvnne.w	r0, #2147483648	@ 0x80000000
 8020e58:	ea80 70e1 	eorne.w	r0, r0, r1, asr #31
 8020e5c:	bd08      	pop	{r3, pc}
 8020e5e:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8020e62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020e66:	ddd4      	ble.n	8020e12 <align_factor+0x16>
 8020e68:	2301      	movs	r3, #1
 8020e6a:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8020e6e:	e005      	b.n	8020e7c <align_factor+0x80>
 8020e70:	8003      	strh	r3, [r0, #0]
 8020e72:	b293      	uxth	r3, r2
 8020e74:	2b21      	cmp	r3, #33	@ 0x21
 8020e76:	ee30 0a00 	vadd.f32	s0, s0, s0
 8020e7a:	d00d      	beq.n	8020e98 <align_factor+0x9c>
 8020e7c:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8020e80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020e84:	f103 0201 	add.w	r2, r3, #1
 8020e88:	d4f2      	bmi.n	8020e70 <align_factor+0x74>
 8020e8a:	e7d8      	b.n	8020e3e <align_factor+0x42>
 8020e8c:	f64f 73e2 	movw	r3, #65506	@ 0xffe2
 8020e90:	ee30 0a00 	vadd.f32	s0, s0, s0
 8020e94:	8003      	strh	r3, [r0, #0]
 8020e96:	e7d2      	b.n	8020e3e <align_factor+0x42>
 8020e98:	2300      	movs	r3, #0
 8020e9a:	8003      	strh	r3, [r0, #0]
 8020e9c:	4618      	mov	r0, r3
 8020e9e:	bd08      	pop	{r3, pc}
 8020ea0:	4f000000 	.word	0x4f000000

08020ea4 <align_factor_ch>:
 8020ea4:	b361      	cbz	r1, 8020f00 <align_factor_ch+0x5c>
 8020ea6:	ee80 7a20 	vdiv.f32	s14, s0, s1
 8020eaa:	b570      	push	{r4, r5, r6, lr}
 8020eac:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8020eb0:	1e9d      	subs	r5, r3, #2
 8020eb2:	1f14      	subs	r4, r2, #4
 8020eb4:	2600      	movs	r6, #0
 8020eb6:	ecf0 7a01 	vldmia	r0!, {s15}
 8020eba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8020ebe:	ee17 ea90 	vmov	lr, s15
 8020ec2:	f3ce 52c7 	ubfx	r2, lr, #23, #8
 8020ec6:	f3ce 0c16 	ubfx	ip, lr, #0, #23
 8020eca:	f50c 0c00 	add.w	ip, ip, #8388608	@ 0x800000
 8020ece:	f1be 0f00 	cmp.w	lr, #0
 8020ed2:	f1c2 027e 	rsb	r2, r2, #126	@ 0x7e
 8020ed6:	bfb8      	it	lt
 8020ed8:	f1cc 0c00 	rsblt	ip, ip, #0
 8020edc:	2a1f      	cmp	r2, #31
 8020ede:	ea4f 13cc 	mov.w	r3, ip, lsl #7
 8020ee2:	dc06      	bgt.n	8020ef2 <align_factor_ch+0x4e>
 8020ee4:	4281      	cmp	r1, r0
 8020ee6:	f825 2f02 	strh.w	r2, [r5, #2]!
 8020eea:	f844 3f04 	str.w	r3, [r4, #4]!
 8020eee:	d1e2      	bne.n	8020eb6 <align_factor_ch+0x12>
 8020ef0:	bd70      	pop	{r4, r5, r6, pc}
 8020ef2:	4281      	cmp	r1, r0
 8020ef4:	f825 6f02 	strh.w	r6, [r5, #2]!
 8020ef8:	f844 6f04 	str.w	r6, [r4, #4]!
 8020efc:	d1db      	bne.n	8020eb6 <align_factor_ch+0x12>
 8020efe:	bd70      	pop	{r4, r5, r6, pc}
 8020f00:	4770      	bx	lr
 8020f02:	bf00      	nop

08020f04 <st_int8_to16_no_shift>:
 8020f04:	b570      	push	{r4, r5, r6, lr}
 8020f06:	f1b2 0410 	subs.w	r4, r2, #16
 8020f0a:	f04f 0e00 	mov.w	lr, #0
 8020f0e:	d437      	bmi.n	8020f80 <st_int8_to16_no_shift+0x7c>
 8020f10:	f8d0 c000 	ldr.w	ip, [r0]
 8020f14:	6843      	ldr	r3, [r0, #4]
 8020f16:	fa2f f59c 	sxtb16	r5, ip, ror #8
 8020f1a:	fa2f fc8c 	sxtb16	ip, ip
 8020f1e:	eac5 462c 	pkhtb	r6, r5, ip, asr #16
 8020f22:	eacc 4c05 	pkhbt	ip, ip, r5, lsl #16
 8020f26:	fa2f f593 	sxtb16	r5, r3, ror #8
 8020f2a:	604e      	str	r6, [r1, #4]
 8020f2c:	f8c1 c000 	str.w	ip, [r1]
 8020f30:	fa2f f383 	sxtb16	r3, r3
 8020f34:	eac5 4623 	pkhtb	r6, r5, r3, asr #16
 8020f38:	eac3 4305 	pkhbt	r3, r3, r5, lsl #16
 8020f3c:	60ce      	str	r6, [r1, #12]
 8020f3e:	608b      	str	r3, [r1, #8]
 8020f40:	f8d0 c008 	ldr.w	ip, [r0, #8]
 8020f44:	68c3      	ldr	r3, [r0, #12]
 8020f46:	3010      	adds	r0, #16
 8020f48:	fa2f f59c 	sxtb16	r5, ip, ror #8
 8020f4c:	fa2f fc8c 	sxtb16	ip, ip
 8020f50:	eac5 462c 	pkhtb	r6, r5, ip, asr #16
 8020f54:	eacc 4c05 	pkhbt	ip, ip, r5, lsl #16
 8020f58:	fa2f f593 	sxtb16	r5, r3, ror #8
 8020f5c:	f8c1 c010 	str.w	ip, [r1, #16]
 8020f60:	614e      	str	r6, [r1, #20]
 8020f62:	f10e 0e10 	add.w	lr, lr, #16
 8020f66:	3120      	adds	r1, #32
 8020f68:	45a6      	cmp	lr, r4
 8020f6a:	fa2f f383 	sxtb16	r3, r3
 8020f6e:	eac5 4c23 	pkhtb	ip, r5, r3, asr #16
 8020f72:	eac3 4305 	pkhbt	r3, r3, r5, lsl #16
 8020f76:	f841 cc04 	str.w	ip, [r1, #-4]
 8020f7a:	f841 3c08 	str.w	r3, [r1, #-8]
 8020f7e:	ddc7      	ble.n	8020f10 <st_int8_to16_no_shift+0xc>
 8020f80:	1f16      	subs	r6, r2, #4
 8020f82:	4576      	cmp	r6, lr
 8020f84:	db12      	blt.n	8020fac <st_int8_to16_no_shift+0xa8>
 8020f86:	f850 3b04 	ldr.w	r3, [r0], #4
 8020f8a:	fa2f f493 	sxtb16	r4, r3, ror #8
 8020f8e:	3108      	adds	r1, #8
 8020f90:	f10e 0e04 	add.w	lr, lr, #4
 8020f94:	45b6      	cmp	lr, r6
 8020f96:	fa2f f383 	sxtb16	r3, r3
 8020f9a:	eac4 4523 	pkhtb	r5, r4, r3, asr #16
 8020f9e:	eac3 4304 	pkhbt	r3, r3, r4, lsl #16
 8020fa2:	f841 5c04 	str.w	r5, [r1, #-4]
 8020fa6:	f841 3c08 	str.w	r3, [r1, #-8]
 8020faa:	ddec      	ble.n	8020f86 <st_int8_to16_no_shift+0x82>
 8020fac:	4572      	cmp	r2, lr
 8020fae:	dd09      	ble.n	8020fc4 <st_int8_to16_no_shift+0xc0>
 8020fb0:	eba2 020e 	sub.w	r2, r2, lr
 8020fb4:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 8020fb8:	f910 3b01 	ldrsb.w	r3, [r0], #1
 8020fbc:	f821 3b02 	strh.w	r3, [r1], #2
 8020fc0:	4291      	cmp	r1, r2
 8020fc2:	d1f9      	bne.n	8020fb8 <st_int8_to16_no_shift+0xb4>
 8020fc4:	bd70      	pop	{r4, r5, r6, pc}
 8020fc6:	bf00      	nop

08020fc8 <st_int8_to16_no_shift_interleaved>:
 8020fc8:	b570      	push	{r4, r5, r6, lr}
 8020fca:	f1b2 0510 	subs.w	r5, r2, #16
 8020fce:	f04f 0e00 	mov.w	lr, #0
 8020fd2:	d426      	bmi.n	8021022 <st_int8_to16_no_shift_interleaved+0x5a>
 8020fd4:	f8d0 c000 	ldr.w	ip, [r0]
 8020fd8:	6843      	ldr	r3, [r0, #4]
 8020fda:	fa2f f69c 	sxtb16	r6, ip, ror #8
 8020fde:	fa2f fc8c 	sxtb16	ip, ip
 8020fe2:	fa2f f493 	sxtb16	r4, r3, ror #8
 8020fe6:	600e      	str	r6, [r1, #0]
 8020fe8:	f8c1 c004 	str.w	ip, [r1, #4]
 8020fec:	608c      	str	r4, [r1, #8]
 8020fee:	fa2f f383 	sxtb16	r3, r3
 8020ff2:	60cb      	str	r3, [r1, #12]
 8020ff4:	f8d0 c008 	ldr.w	ip, [r0, #8]
 8020ff8:	68c3      	ldr	r3, [r0, #12]
 8020ffa:	3010      	adds	r0, #16
 8020ffc:	fa2f f69c 	sxtb16	r6, ip, ror #8
 8021000:	fa2f fc8c 	sxtb16	ip, ip
 8021004:	fa2f f493 	sxtb16	r4, r3, ror #8
 8021008:	610e      	str	r6, [r1, #16]
 802100a:	f8c1 c014 	str.w	ip, [r1, #20]
 802100e:	618c      	str	r4, [r1, #24]
 8021010:	f10e 0e10 	add.w	lr, lr, #16
 8021014:	3120      	adds	r1, #32
 8021016:	45ae      	cmp	lr, r5
 8021018:	fa2f f383 	sxtb16	r3, r3
 802101c:	f841 3c04 	str.w	r3, [r1, #-4]
 8021020:	ddd8      	ble.n	8020fd4 <st_int8_to16_no_shift_interleaved+0xc>
 8021022:	1f14      	subs	r4, r2, #4
 8021024:	4574      	cmp	r4, lr
 8021026:	db0f      	blt.n	8021048 <st_int8_to16_no_shift_interleaved+0x80>
 8021028:	ebae 0e00 	sub.w	lr, lr, r0
 802102c:	f850 3b04 	ldr.w	r3, [r0], #4
 8021030:	fa2f f293 	sxtb16	r2, r3, ror #8
 8021034:	600a      	str	r2, [r1, #0]
 8021036:	eb00 0c0e 	add.w	ip, r0, lr
 802103a:	3108      	adds	r1, #8
 802103c:	4564      	cmp	r4, ip
 802103e:	fa2f f383 	sxtb16	r3, r3
 8021042:	f841 3c04 	str.w	r3, [r1, #-4]
 8021046:	daf1      	bge.n	802102c <st_int8_to16_no_shift_interleaved+0x64>
 8021048:	bd70      	pop	{r4, r5, r6, pc}
 802104a:	bf00      	nop

0802104c <st_int8_to16_dual>:
 802104c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8021050:	085f      	lsrs	r7, r3, #1
 8021052:	4616      	mov	r6, r2
 8021054:	4698      	mov	r8, r3
 8021056:	eb00 0c02 	add.w	ip, r0, r2
 802105a:	f000 80ba 	beq.w	80211d2 <st_int8_to16_dual+0x186>
 802105e:	f1a2 0510 	sub.w	r5, r2, #16
 8021062:	1f14      	subs	r4, r2, #4
 8021064:	2d00      	cmp	r5, #0
 8021066:	f04f 0200 	mov.w	r2, #0
 802106a:	db73      	blt.n	8021154 <st_int8_to16_dual+0x108>
 802106c:	f8d0 e000 	ldr.w	lr, [r0]
 8021070:	f8dc 3000 	ldr.w	r3, [ip]
 8021074:	fa2f f99e 	sxtb16	r9, lr, ror #8
 8021078:	fa2f fe8e 	sxtb16	lr, lr
 802107c:	eac9 4a2e 	pkhtb	sl, r9, lr, asr #16
 8021080:	eace 4e09 	pkhbt	lr, lr, r9, lsl #16
 8021084:	fa2f f993 	sxtb16	r9, r3, ror #8
 8021088:	f8c1 e000 	str.w	lr, [r1]
 802108c:	f8c1 a008 	str.w	sl, [r1, #8]
 8021090:	fa2f f383 	sxtb16	r3, r3
 8021094:	eac9 4e23 	pkhtb	lr, r9, r3, asr #16
 8021098:	eac3 4309 	pkhbt	r3, r3, r9, lsl #16
 802109c:	f8c1 e00c 	str.w	lr, [r1, #12]
 80210a0:	604b      	str	r3, [r1, #4]
 80210a2:	f8d0 e004 	ldr.w	lr, [r0, #4]
 80210a6:	f8dc 3004 	ldr.w	r3, [ip, #4]
 80210aa:	fa2f f99e 	sxtb16	r9, lr, ror #8
 80210ae:	fa2f fe8e 	sxtb16	lr, lr
 80210b2:	eac9 4a2e 	pkhtb	sl, r9, lr, asr #16
 80210b6:	eace 4e09 	pkhbt	lr, lr, r9, lsl #16
 80210ba:	fa2f f993 	sxtb16	r9, r3, ror #8
 80210be:	f8c1 e010 	str.w	lr, [r1, #16]
 80210c2:	f8c1 a018 	str.w	sl, [r1, #24]
 80210c6:	fa2f f383 	sxtb16	r3, r3
 80210ca:	eac9 4e23 	pkhtb	lr, r9, r3, asr #16
 80210ce:	eac3 4309 	pkhbt	r3, r3, r9, lsl #16
 80210d2:	f8c1 e01c 	str.w	lr, [r1, #28]
 80210d6:	614b      	str	r3, [r1, #20]
 80210d8:	f8d0 e008 	ldr.w	lr, [r0, #8]
 80210dc:	f8dc 3008 	ldr.w	r3, [ip, #8]
 80210e0:	fa2f f99e 	sxtb16	r9, lr, ror #8
 80210e4:	fa2f fe8e 	sxtb16	lr, lr
 80210e8:	eac9 4a2e 	pkhtb	sl, r9, lr, asr #16
 80210ec:	eace 4e09 	pkhbt	lr, lr, r9, lsl #16
 80210f0:	fa2f f993 	sxtb16	r9, r3, ror #8
 80210f4:	3010      	adds	r0, #16
 80210f6:	f8c1 e020 	str.w	lr, [r1, #32]
 80210fa:	f8c1 a028 	str.w	sl, [r1, #40]	@ 0x28
 80210fe:	fa2f f383 	sxtb16	r3, r3
 8021102:	eac9 4e23 	pkhtb	lr, r9, r3, asr #16
 8021106:	eac3 4309 	pkhbt	r3, r3, r9, lsl #16
 802110a:	f8c1 e02c 	str.w	lr, [r1, #44]	@ 0x2c
 802110e:	624b      	str	r3, [r1, #36]	@ 0x24
 8021110:	f8dc 300c 	ldr.w	r3, [ip, #12]
 8021114:	f850 ec04 	ldr.w	lr, [r0, #-4]
 8021118:	f10c 0c10 	add.w	ip, ip, #16
 802111c:	fa2f f99e 	sxtb16	r9, lr, ror #8
 8021120:	fa2f fe8e 	sxtb16	lr, lr
 8021124:	eac9 4a2e 	pkhtb	sl, r9, lr, asr #16
 8021128:	eace 4e09 	pkhbt	lr, lr, r9, lsl #16
 802112c:	fa2f f993 	sxtb16	r9, r3, ror #8
 8021130:	f8c1 e030 	str.w	lr, [r1, #48]	@ 0x30
 8021134:	f8c1 a038 	str.w	sl, [r1, #56]	@ 0x38
 8021138:	3210      	adds	r2, #16
 802113a:	3140      	adds	r1, #64	@ 0x40
 802113c:	42aa      	cmp	r2, r5
 802113e:	fa2f f383 	sxtb16	r3, r3
 8021142:	eac9 4e23 	pkhtb	lr, r9, r3, asr #16
 8021146:	eac3 4309 	pkhbt	r3, r3, r9, lsl #16
 802114a:	f841 ec04 	str.w	lr, [r1, #-4]
 802114e:	f841 3c0c 	str.w	r3, [r1, #-12]
 8021152:	dd8b      	ble.n	802106c <st_int8_to16_dual+0x20>
 8021154:	4294      	cmp	r4, r2
 8021156:	db1e      	blt.n	8021196 <st_int8_to16_dual+0x14a>
 8021158:	f850 3b04 	ldr.w	r3, [r0], #4
 802115c:	f85c eb04 	ldr.w	lr, [ip], #4
 8021160:	fa2f f993 	sxtb16	r9, r3, ror #8
 8021164:	fa2f f383 	sxtb16	r3, r3
 8021168:	eac9 4a23 	pkhtb	sl, r9, r3, asr #16
 802116c:	eac3 4309 	pkhbt	r3, r3, r9, lsl #16
 8021170:	fa2f f99e 	sxtb16	r9, lr, ror #8
 8021174:	600b      	str	r3, [r1, #0]
 8021176:	f8c1 a008 	str.w	sl, [r1, #8]
 802117a:	3204      	adds	r2, #4
 802117c:	3110      	adds	r1, #16
 802117e:	42a2      	cmp	r2, r4
 8021180:	fa2f fe8e 	sxtb16	lr, lr
 8021184:	eac9 432e 	pkhtb	r3, r9, lr, asr #16
 8021188:	eace 4e09 	pkhbt	lr, lr, r9, lsl #16
 802118c:	f841 3c04 	str.w	r3, [r1, #-4]
 8021190:	f841 ec0c 	str.w	lr, [r1, #-12]
 8021194:	dde0      	ble.n	8021158 <st_int8_to16_dual+0x10c>
 8021196:	4296      	cmp	r6, r2
 8021198:	dd41      	ble.n	802121e <st_int8_to16_dual+0x1d2>
 802119a:	1ab2      	subs	r2, r6, r2
 802119c:	1d0b      	adds	r3, r1, #4
 802119e:	eb00 0a02 	add.w	sl, r0, r2
 80211a2:	46e6      	mov	lr, ip
 80211a4:	f910 9b01 	ldrsb.w	r9, [r0], #1
 80211a8:	f823 9c04 	strh.w	r9, [r3, #-4]
 80211ac:	f91e 9b01 	ldrsb.w	r9, [lr], #1
 80211b0:	f823 9c02 	strh.w	r9, [r3, #-2]
 80211b4:	4550      	cmp	r0, sl
 80211b6:	f103 0304 	add.w	r3, r3, #4
 80211ba:	d1f3      	bne.n	80211a4 <st_int8_to16_dual+0x158>
 80211bc:	4494      	add	ip, r2
 80211be:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80211c2:	3f01      	subs	r7, #1
 80211c4:	b2bf      	uxth	r7, r7
 80211c6:	eb0a 0006 	add.w	r0, sl, r6
 80211ca:	44b4      	add	ip, r6
 80211cc:	2f00      	cmp	r7, #0
 80211ce:	f47f af49 	bne.w	8021064 <st_int8_to16_dual+0x18>
 80211d2:	f018 0f01 	tst.w	r8, #1
 80211d6:	d020      	beq.n	802121a <st_int8_to16_dual+0x1ce>
 80211d8:	1f37      	subs	r7, r6, #4
 80211da:	f04f 0200 	mov.w	r2, #0
 80211de:	d411      	bmi.n	8021204 <st_int8_to16_dual+0x1b8>
 80211e0:	f850 3b04 	ldr.w	r3, [r0], #4
 80211e4:	fa2f f493 	sxtb16	r4, r3, ror #8
 80211e8:	3108      	adds	r1, #8
 80211ea:	3204      	adds	r2, #4
 80211ec:	4297      	cmp	r7, r2
 80211ee:	fa2f f383 	sxtb16	r3, r3
 80211f2:	eac4 4523 	pkhtb	r5, r4, r3, asr #16
 80211f6:	eac3 4304 	pkhbt	r3, r3, r4, lsl #16
 80211fa:	f841 5c04 	str.w	r5, [r1, #-4]
 80211fe:	f841 3c08 	str.w	r3, [r1, #-8]
 8021202:	daed      	bge.n	80211e0 <st_int8_to16_dual+0x194>
 8021204:	4296      	cmp	r6, r2
 8021206:	dd08      	ble.n	802121a <st_int8_to16_dual+0x1ce>
 8021208:	1ab3      	subs	r3, r6, r2
 802120a:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 802120e:	f910 2b01 	ldrsb.w	r2, [r0], #1
 8021212:	f821 2b02 	strh.w	r2, [r1], #2
 8021216:	428b      	cmp	r3, r1
 8021218:	d1f9      	bne.n	802120e <st_int8_to16_dual+0x1c2>
 802121a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802121e:	4682      	mov	sl, r0
 8021220:	e7cf      	b.n	80211c2 <st_int8_to16_dual+0x176>
 8021222:	bf00      	nop

08021224 <st_int8_to16_dual_interleaved>:
 8021224:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8021228:	085f      	lsrs	r7, r3, #1
 802122a:	4616      	mov	r6, r2
 802122c:	4698      	mov	r8, r3
 802122e:	eb00 0c02 	add.w	ip, r0, r2
 8021232:	f000 808d 	beq.w	8021350 <st_int8_to16_dual_interleaved+0x12c>
 8021236:	f1a2 0510 	sub.w	r5, r2, #16
 802123a:	1f14      	subs	r4, r2, #4
 802123c:	2d00      	cmp	r5, #0
 802123e:	f04f 0e00 	mov.w	lr, #0
 8021242:	db4c      	blt.n	80212de <st_int8_to16_dual_interleaved+0xba>
 8021244:	6802      	ldr	r2, [r0, #0]
 8021246:	f8dc 3000 	ldr.w	r3, [ip]
 802124a:	fa2f fa92 	sxtb16	sl, r2, ror #8
 802124e:	fa2f f282 	sxtb16	r2, r2
 8021252:	fa2f f993 	sxtb16	r9, r3, ror #8
 8021256:	f8c1 a000 	str.w	sl, [r1]
 802125a:	f8c1 9004 	str.w	r9, [r1, #4]
 802125e:	608a      	str	r2, [r1, #8]
 8021260:	fa2f f383 	sxtb16	r3, r3
 8021264:	60cb      	str	r3, [r1, #12]
 8021266:	6842      	ldr	r2, [r0, #4]
 8021268:	f8dc 3004 	ldr.w	r3, [ip, #4]
 802126c:	fa2f fa92 	sxtb16	sl, r2, ror #8
 8021270:	fa2f f282 	sxtb16	r2, r2
 8021274:	fa2f f993 	sxtb16	r9, r3, ror #8
 8021278:	f8c1 a010 	str.w	sl, [r1, #16]
 802127c:	f8c1 9014 	str.w	r9, [r1, #20]
 8021280:	618a      	str	r2, [r1, #24]
 8021282:	fa2f f383 	sxtb16	r3, r3
 8021286:	61cb      	str	r3, [r1, #28]
 8021288:	6882      	ldr	r2, [r0, #8]
 802128a:	f8dc 3008 	ldr.w	r3, [ip, #8]
 802128e:	fa2f fa92 	sxtb16	sl, r2, ror #8
 8021292:	fa2f f282 	sxtb16	r2, r2
 8021296:	fa2f f993 	sxtb16	r9, r3, ror #8
 802129a:	f8c1 a020 	str.w	sl, [r1, #32]
 802129e:	f8c1 9024 	str.w	r9, [r1, #36]	@ 0x24
 80212a2:	628a      	str	r2, [r1, #40]	@ 0x28
 80212a4:	fa2f f383 	sxtb16	r3, r3
 80212a8:	62cb      	str	r3, [r1, #44]	@ 0x2c
 80212aa:	68c2      	ldr	r2, [r0, #12]
 80212ac:	f8dc 300c 	ldr.w	r3, [ip, #12]
 80212b0:	3010      	adds	r0, #16
 80212b2:	f10c 0c10 	add.w	ip, ip, #16
 80212b6:	fa2f fa92 	sxtb16	sl, r2, ror #8
 80212ba:	fa2f f282 	sxtb16	r2, r2
 80212be:	fa2f f993 	sxtb16	r9, r3, ror #8
 80212c2:	f8c1 a030 	str.w	sl, [r1, #48]	@ 0x30
 80212c6:	f8c1 9034 	str.w	r9, [r1, #52]	@ 0x34
 80212ca:	638a      	str	r2, [r1, #56]	@ 0x38
 80212cc:	f10e 0e10 	add.w	lr, lr, #16
 80212d0:	3140      	adds	r1, #64	@ 0x40
 80212d2:	45ae      	cmp	lr, r5
 80212d4:	fa2f f383 	sxtb16	r3, r3
 80212d8:	f841 3c04 	str.w	r3, [r1, #-4]
 80212dc:	ddb2      	ble.n	8021244 <st_int8_to16_dual_interleaved+0x20>
 80212de:	4574      	cmp	r4, lr
 80212e0:	db17      	blt.n	8021312 <st_int8_to16_dual_interleaved+0xee>
 80212e2:	f850 2b04 	ldr.w	r2, [r0], #4
 80212e6:	f85c 3b04 	ldr.w	r3, [ip], #4
 80212ea:	fa2f fa92 	sxtb16	sl, r2, ror #8
 80212ee:	fa2f f282 	sxtb16	r2, r2
 80212f2:	fa2f f993 	sxtb16	r9, r3, ror #8
 80212f6:	f8c1 a000 	str.w	sl, [r1]
 80212fa:	f8c1 9004 	str.w	r9, [r1, #4]
 80212fe:	608a      	str	r2, [r1, #8]
 8021300:	f10e 0e04 	add.w	lr, lr, #4
 8021304:	3110      	adds	r1, #16
 8021306:	45a6      	cmp	lr, r4
 8021308:	fa2f f383 	sxtb16	r3, r3
 802130c:	f841 3c04 	str.w	r3, [r1, #-4]
 8021310:	dde7      	ble.n	80212e2 <st_int8_to16_dual_interleaved+0xbe>
 8021312:	4576      	cmp	r6, lr
 8021314:	dd3d      	ble.n	8021392 <st_int8_to16_dual_interleaved+0x16e>
 8021316:	eba6 0e0e 	sub.w	lr, r6, lr
 802131a:	1d0b      	adds	r3, r1, #4
 802131c:	eb00 0a0e 	add.w	sl, r0, lr
 8021320:	4662      	mov	r2, ip
 8021322:	f910 9b01 	ldrsb.w	r9, [r0], #1
 8021326:	f823 9c04 	strh.w	r9, [r3, #-4]
 802132a:	f912 9b01 	ldrsb.w	r9, [r2], #1
 802132e:	f823 9c02 	strh.w	r9, [r3, #-2]
 8021332:	4550      	cmp	r0, sl
 8021334:	f103 0304 	add.w	r3, r3, #4
 8021338:	d1f3      	bne.n	8021322 <st_int8_to16_dual_interleaved+0xfe>
 802133a:	44f4      	add	ip, lr
 802133c:	eb01 018e 	add.w	r1, r1, lr, lsl #2
 8021340:	3f01      	subs	r7, #1
 8021342:	b2bf      	uxth	r7, r7
 8021344:	eb0a 0006 	add.w	r0, sl, r6
 8021348:	44b4      	add	ip, r6
 802134a:	2f00      	cmp	r7, #0
 802134c:	f47f af76 	bne.w	802123c <st_int8_to16_dual_interleaved+0x18>
 8021350:	f018 0f01 	tst.w	r8, #1
 8021354:	d01b      	beq.n	802138e <st_int8_to16_dual_interleaved+0x16a>
 8021356:	1f35      	subs	r5, r6, #4
 8021358:	f04f 0200 	mov.w	r2, #0
 802135c:	d40c      	bmi.n	8021378 <st_int8_to16_dual_interleaved+0x154>
 802135e:	f850 3b04 	ldr.w	r3, [r0], #4
 8021362:	fa2f f493 	sxtb16	r4, r3, ror #8
 8021366:	600c      	str	r4, [r1, #0]
 8021368:	3204      	adds	r2, #4
 802136a:	3108      	adds	r1, #8
 802136c:	4295      	cmp	r5, r2
 802136e:	fa2f f383 	sxtb16	r3, r3
 8021372:	f841 3c04 	str.w	r3, [r1, #-4]
 8021376:	daf2      	bge.n	802135e <st_int8_to16_dual_interleaved+0x13a>
 8021378:	4296      	cmp	r6, r2
 802137a:	dd08      	ble.n	802138e <st_int8_to16_dual_interleaved+0x16a>
 802137c:	1ab3      	subs	r3, r6, r2
 802137e:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 8021382:	f910 2b01 	ldrsb.w	r2, [r0], #1
 8021386:	f821 2b02 	strh.w	r2, [r1], #2
 802138a:	428b      	cmp	r3, r1
 802138c:	d1f9      	bne.n	8021382 <st_int8_to16_dual_interleaved+0x15e>
 802138e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8021392:	4682      	mov	sl, r0
 8021394:	e7d4      	b.n	8021340 <st_int8_to16_dual_interleaved+0x11c>
 8021396:	bf00      	nop

08021398 <ai_padding_opt_init>:
 8021398:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 802139c:	2700      	movs	r7, #0
 802139e:	e9c0 7700 	strd	r7, r7, [r0]
 80213a2:	6087      	str	r7, [r0, #8]
 80213a4:	690e      	ldr	r6, [r1, #16]
 80213a6:	9c07      	ldr	r4, [sp, #28]
 80213a8:	f1c6 0c00 	rsb	ip, r6, #0
 80213ac:	689e      	ldr	r6, [r3, #8]
 80213ae:	42be      	cmp	r6, r7
 80213b0:	46b9      	mov	r9, r7
 80213b2:	dd1b      	ble.n	80213ec <ai_padding_opt_init+0x54>
 80213b4:	463e      	mov	r6, r7
 80213b6:	46be      	mov	lr, r7
 80213b8:	e012      	b.n	80213e0 <ai_padding_opt_init+0x48>
 80213ba:	6895      	ldr	r5, [r2, #8]
 80213bc:	eba5 080c 	sub.w	r8, r5, ip
 80213c0:	68a5      	ldr	r5, [r4, #8]
 80213c2:	45a8      	cmp	r8, r5
 80213c4:	bfb5      	itete	lt
 80213c6:	f109 0901 	addlt.w	r9, r9, #1
 80213ca:	3701      	addge	r7, #1
 80213cc:	f8c0 9008 	strlt.w	r9, [r0, #8]
 80213d0:	6047      	strge	r7, [r0, #4]
 80213d2:	688d      	ldr	r5, [r1, #8]
 80213d4:	44ac      	add	ip, r5
 80213d6:	689d      	ldr	r5, [r3, #8]
 80213d8:	f10e 0e01 	add.w	lr, lr, #1
 80213dc:	4575      	cmp	r5, lr
 80213de:	dd06      	ble.n	80213ee <ai_padding_opt_init+0x56>
 80213e0:	f1bc 0f00 	cmp.w	ip, #0
 80213e4:	dae9      	bge.n	80213ba <ai_padding_opt_init+0x22>
 80213e6:	3601      	adds	r6, #1
 80213e8:	6006      	str	r6, [r0, #0]
 80213ea:	e7f2      	b.n	80213d2 <ai_padding_opt_init+0x3a>
 80213ec:	463e      	mov	r6, r7
 80213ee:	2500      	movs	r5, #0
 80213f0:	e9c0 6703 	strd	r6, r7, [r0, #12]
 80213f4:	e9c0 5506 	strd	r5, r5, [r0, #24]
 80213f8:	f8c0 9014 	str.w	r9, [r0, #20]
 80213fc:	6205      	str	r5, [r0, #32]
 80213fe:	694e      	ldr	r6, [r1, #20]
 8021400:	f1c6 0c00 	rsb	ip, r6, #0
 8021404:	685e      	ldr	r6, [r3, #4]
 8021406:	42ae      	cmp	r6, r5
 8021408:	dd1c      	ble.n	8021444 <ai_padding_opt_init+0xac>
 802140a:	46ae      	mov	lr, r5
 802140c:	e00f      	b.n	802142e <ai_padding_opt_init+0x96>
 802140e:	6855      	ldr	r5, [r2, #4]
 8021410:	6866      	ldr	r6, [r4, #4]
 8021412:	eba5 050c 	sub.w	r5, r5, ip
 8021416:	42b5      	cmp	r5, r6
 8021418:	da10      	bge.n	802143c <ai_padding_opt_init+0xa4>
 802141a:	6a05      	ldr	r5, [r0, #32]
 802141c:	3501      	adds	r5, #1
 802141e:	6205      	str	r5, [r0, #32]
 8021420:	68cd      	ldr	r5, [r1, #12]
 8021422:	44ac      	add	ip, r5
 8021424:	685d      	ldr	r5, [r3, #4]
 8021426:	f10e 0e01 	add.w	lr, lr, #1
 802142a:	4575      	cmp	r5, lr
 802142c:	dd0a      	ble.n	8021444 <ai_padding_opt_init+0xac>
 802142e:	f1bc 0f00 	cmp.w	ip, #0
 8021432:	daec      	bge.n	802140e <ai_padding_opt_init+0x76>
 8021434:	6985      	ldr	r5, [r0, #24]
 8021436:	3501      	adds	r5, #1
 8021438:	6185      	str	r5, [r0, #24]
 802143a:	e7f1      	b.n	8021420 <ai_padding_opt_init+0x88>
 802143c:	69c5      	ldr	r5, [r0, #28]
 802143e:	3501      	adds	r5, #1
 8021440:	61c5      	str	r5, [r0, #28]
 8021442:	e7ed      	b.n	8021420 <ai_padding_opt_init+0x88>
 8021444:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08021448 <ai_padding_opt_phase1>:
 8021448:	e9d0 3206 	ldrd	r3, r2, [r0, #24]
 802144c:	b923      	cbnz	r3, 8021458 <ai_padding_opt_phase1+0x10>
 802144e:	b17a      	cbz	r2, 8021470 <ai_padding_opt_phase1+0x28>
 8021450:	3a01      	subs	r2, #1
 8021452:	8483      	strh	r3, [r0, #36]	@ 0x24
 8021454:	61c2      	str	r2, [r0, #28]
 8021456:	e004      	b.n	8021462 <ai_padding_opt_phase1+0x1a>
 8021458:	b152      	cbz	r2, 8021470 <ai_padding_opt_phase1+0x28>
 802145a:	2201      	movs	r2, #1
 802145c:	3b01      	subs	r3, #1
 802145e:	8482      	strh	r2, [r0, #36]	@ 0x24
 8021460:	6183      	str	r3, [r0, #24]
 8021462:	e9d0 2304 	ldrd	r2, r3, [r0, #16]
 8021466:	68c1      	ldr	r1, [r0, #12]
 8021468:	6083      	str	r3, [r0, #8]
 802146a:	e9c0 1200 	strd	r1, r2, [r0]
 802146e:	4770      	bx	lr
 8021470:	6a03      	ldr	r3, [r0, #32]
 8021472:	2201      	movs	r2, #1
 8021474:	3b01      	subs	r3, #1
 8021476:	8482      	strh	r2, [r0, #36]	@ 0x24
 8021478:	6203      	str	r3, [r0, #32]
 802147a:	e7f2      	b.n	8021462 <ai_padding_opt_phase1+0x1a>

0802147c <st_int8_avepool>:
 802147c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021480:	b097      	sub	sp, #92	@ 0x5c
 8021482:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 8021486:	4619      	mov	r1, r3
 8021488:	f8bd 3084 	ldrh.w	r3, [sp, #132]	@ 0x84
 802148c:	930c      	str	r3, [sp, #48]	@ 0x30
 802148e:	f8bd 308c 	ldrh.w	r3, [sp, #140]	@ 0x8c
 8021492:	f99d 40a4 	ldrsb.w	r4, [sp, #164]	@ 0xa4
 8021496:	930d      	str	r3, [sp, #52]	@ 0x34
 8021498:	f8bd 50a0 	ldrh.w	r5, [sp, #160]	@ 0xa0
 802149c:	f8bd 3094 	ldrh.w	r3, [sp, #148]	@ 0x94
 80214a0:	930e      	str	r3, [sp, #56]	@ 0x38
 80214a2:	9404      	str	r4, [sp, #16]
 80214a4:	f8bd 309c 	ldrh.w	r3, [sp, #156]	@ 0x9c
 80214a8:	f99d 40a8 	ldrsb.w	r4, [sp, #168]	@ 0xa8
 80214ac:	f8bd b080 	ldrh.w	fp, [sp, #128]	@ 0x80
 80214b0:	f8bd c088 	ldrh.w	ip, [sp, #136]	@ 0x88
 80214b4:	f8bd 6090 	ldrh.w	r6, [sp, #144]	@ 0x90
 80214b8:	f8bd 0098 	ldrh.w	r0, [sp, #152]	@ 0x98
 80214bc:	9206      	str	r2, [sp, #24]
 80214be:	9307      	str	r3, [sp, #28]
 80214c0:	9405      	str	r4, [sp, #20]
 80214c2:	b135      	cbz	r5, 80214d2 <st_int8_avepool+0x56>
 80214c4:	fb02 fa0b 	mul.w	sl, r2, fp
 80214c8:	2200      	movs	r2, #0
 80214ca:	b92b      	cbnz	r3, 80214d8 <st_int8_avepool+0x5c>
 80214cc:	3201      	adds	r2, #1
 80214ce:	4295      	cmp	r5, r2
 80214d0:	dcfc      	bgt.n	80214cc <st_int8_avepool+0x50>
 80214d2:	b017      	add	sp, #92	@ 0x5c
 80214d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80214d8:	eec0 4a20 	vdiv.f32	s9, s0, s1
 80214dc:	4688      	mov	r8, r1
 80214de:	4637      	mov	r7, r6
 80214e0:	4629      	mov	r1, r5
 80214e2:	eddd 7a04 	vldr	s15, [sp, #16]
 80214e6:	eddf 5a65 	vldr	s11, [pc, #404]	@ 802167c <st_int8_avepool+0x200>
 80214ea:	eddf 2a65 	vldr	s5, [pc, #404]	@ 8021680 <st_int8_avepool+0x204>
 80214ee:	eeb8 5ae7 	vcvt.f32.s32	s10, s15
 80214f2:	eeb0 6a40 	vmov.f32	s12, s0
 80214f6:	eef0 6a60 	vmov.f32	s13, s1
 80214fa:	fb02 f400 	mul.w	r4, r2, r0
 80214fe:	1be4      	subs	r4, r4, r7
 8021500:	ea24 73e4 	bic.w	r3, r4, r4, asr #31
 8021504:	4464      	add	r4, ip
 8021506:	4544      	cmp	r4, r8
 8021508:	bfa8      	it	ge
 802150a:	4644      	movge	r4, r8
 802150c:	46a1      	mov	r9, r4
 802150e:	9c07      	ldr	r4, [sp, #28]
 8021510:	fb02 f404 	mul.w	r4, r2, r4
 8021514:	9408      	str	r4, [sp, #32]
 8021516:	9c06      	ldr	r4, [sp, #24]
 8021518:	fb03 f404 	mul.w	r4, r3, r4
 802151c:	9409      	str	r4, [sp, #36]	@ 0x24
 802151e:	f1bb 0f00 	cmp.w	fp, #0
 8021522:	f000 8085 	beq.w	8021630 <st_int8_avepool+0x1b4>
 8021526:	eddd 7a05 	vldr	s15, [sp, #20]
 802152a:	e9cd c711 	strd	ip, r7, [sp, #68]	@ 0x44
 802152e:	e9cd 0113 	strd	r0, r1, [sp, #76]	@ 0x4c
 8021532:	eeb8 4ae7 	vcvt.f32.s32	s8, s15
 8021536:	e9cd 280f 	strd	r2, r8, [sp, #60]	@ 0x3c
 802153a:	2500      	movs	r5, #0
 802153c:	4698      	mov	r8, r3
 802153e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8021540:	9c06      	ldr	r4, [sp, #24]
 8021542:	9515      	str	r5, [sp, #84]	@ 0x54
 8021544:	fb05 f203 	mul.w	r2, r5, r3
 8021548:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 802154a:	1ad2      	subs	r2, r2, r3
 802154c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 802154e:	ea22 7ce2 	bic.w	ip, r2, r2, asr #31
 8021552:	441a      	add	r2, r3
 8021554:	9b08      	ldr	r3, [sp, #32]
 8021556:	4294      	cmp	r4, r2
 8021558:	bfa8      	it	ge
 802155a:	4614      	movge	r4, r2
 802155c:	18ea      	adds	r2, r5, r3
 802155e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8021560:	fb0b 3002 	mla	r0, fp, r2, r3
 8021564:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8021566:	eb03 020c 	add.w	r2, r3, ip
 802156a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802156c:	fb0b 3302 	mla	r3, fp, r2, r3
 8021570:	eef6 3a00 	vmov.f32	s7, #96	@ 0x3f000000  0.5
 8021574:	9303      	str	r3, [sp, #12]
 8021576:	2200      	movs	r2, #0
 8021578:	eba4 0e0c 	sub.w	lr, r4, ip
 802157c:	4645      	mov	r5, r8
 802157e:	4601      	mov	r1, r0
 8021580:	45a9      	cmp	r9, r5
 8021582:	dd66      	ble.n	8021652 <st_int8_avepool+0x1d6>
 8021584:	9b03      	ldr	r3, [sp, #12]
 8021586:	e9cd 5201 	strd	r5, r2, [sp, #4]
 802158a:	f04f 0800 	mov.w	r8, #0
 802158e:	18d7      	adds	r7, r2, r3
 8021590:	462e      	mov	r6, r5
 8021592:	4640      	mov	r0, r8
 8021594:	4564      	cmp	r4, ip
 8021596:	dd09      	ble.n	80215ac <st_int8_avepool+0x130>
 8021598:	463a      	mov	r2, r7
 802159a:	4663      	mov	r3, ip
 802159c:	f992 5000 	ldrsb.w	r5, [r2]
 80215a0:	3301      	adds	r3, #1
 80215a2:	429c      	cmp	r4, r3
 80215a4:	4428      	add	r0, r5
 80215a6:	445a      	add	r2, fp
 80215a8:	d1f8      	bne.n	802159c <st_int8_avepool+0x120>
 80215aa:	44f0      	add	r8, lr
 80215ac:	3601      	adds	r6, #1
 80215ae:	45b1      	cmp	r9, r6
 80215b0:	4457      	add	r7, sl
 80215b2:	d1ef      	bne.n	8021594 <st_int8_avepool+0x118>
 80215b4:	eeb4 6a66 	vcmp.f32	s12, s13
 80215b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80215bc:	e9dd 5201 	ldrd	r5, r2, [sp, #4]
 80215c0:	d103      	bne.n	80215ca <st_int8_avepool+0x14e>
 80215c2:	e9dd 3604 	ldrd	r3, r6, [sp, #16]
 80215c6:	42b3      	cmp	r3, r6
 80215c8:	d039      	beq.n	802163e <st_int8_avepool+0x1c2>
 80215ca:	ee07 0a90 	vmov	s15, r0
 80215ce:	eeb8 3ae7 	vcvt.f32.s32	s6, s15
 80215d2:	ee07 8a90 	vmov	s15, r8
 80215d6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80215da:	eec3 7a07 	vdiv.f32	s15, s6, s14
 80215de:	ee77 7ac5 	vsub.f32	s15, s15, s10
 80215e2:	eeb0 7a44 	vmov.f32	s14, s8
 80215e6:	eea7 7aa4 	vfma.f32	s14, s15, s9
 80215ea:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 80215ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80215f2:	bfb4      	ite	lt
 80215f4:	eef0 7a65 	vmovlt.f32	s15, s11
 80215f8:	eef0 7a63 	vmovge.f32	s15, s7
 80215fc:	ee77 7a87 	vadd.f32	s15, s15, s14
 8021600:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8021604:	ee17 3a90 	vmov	r3, s15
 8021608:	f303 0307 	ssat	r3, #8, r3
 802160c:	700b      	strb	r3, [r1, #0]
 802160e:	3201      	adds	r2, #1
 8021610:	455a      	cmp	r2, fp
 8021612:	f101 0101 	add.w	r1, r1, #1
 8021616:	d1b3      	bne.n	8021580 <st_int8_avepool+0x104>
 8021618:	46a8      	mov	r8, r5
 802161a:	9d15      	ldr	r5, [sp, #84]	@ 0x54
 802161c:	9b07      	ldr	r3, [sp, #28]
 802161e:	3501      	adds	r5, #1
 8021620:	42ab      	cmp	r3, r5
 8021622:	dc8c      	bgt.n	802153e <st_int8_avepool+0xc2>
 8021624:	e9dd 280f 	ldrd	r2, r8, [sp, #60]	@ 0x3c
 8021628:	e9dd c711 	ldrd	ip, r7, [sp, #68]	@ 0x44
 802162c:	e9dd 0113 	ldrd	r0, r1, [sp, #76]	@ 0x4c
 8021630:	3201      	adds	r2, #1
 8021632:	4291      	cmp	r1, r2
 8021634:	f73f af61 	bgt.w	80214fa <st_int8_avepool+0x7e>
 8021638:	b017      	add	sp, #92	@ 0x5c
 802163a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802163e:	2800      	cmp	r0, #0
 8021640:	db13      	blt.n	802166a <st_int8_avepool+0x1ee>
 8021642:	eb00 0068 	add.w	r0, r0, r8, asr #1
 8021646:	fbb0 f8f8 	udiv	r8, r0, r8
 802164a:	f308 0307 	ssat	r3, #8, r8
 802164e:	700b      	strb	r3, [r1, #0]
 8021650:	e7dd      	b.n	802160e <st_int8_avepool+0x192>
 8021652:	eeb4 6a66 	vcmp.f32	s12, s13
 8021656:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802165a:	d103      	bne.n	8021664 <st_int8_avepool+0x1e8>
 802165c:	e9dd 3004 	ldrd	r3, r0, [sp, #16]
 8021660:	4283      	cmp	r3, r0
 8021662:	d009      	beq.n	8021678 <st_int8_avepool+0x1fc>
 8021664:	eef0 7a62 	vmov.f32	s15, s5
 8021668:	e7b9      	b.n	80215de <st_int8_avepool+0x162>
 802166a:	eb08 73d8 	add.w	r3, r8, r8, lsr #31
 802166e:	eba0 0063 	sub.w	r0, r0, r3, asr #1
 8021672:	fb90 f8f8 	sdiv	r8, r0, r8
 8021676:	e7e8      	b.n	802164a <st_int8_avepool+0x1ce>
 8021678:	deff      	udf	#255	@ 0xff
 802167a:	bf00      	nop
 802167c:	befffffc 	.word	0xbefffffc
 8021680:	7fc00000 	.word	0x7fc00000

08021684 <st_int16_fill>:
 8021684:	b510      	push	{r4, lr}
 8021686:	eac0 4e00 	pkhbt	lr, r0, r0, lsl #16
 802168a:	0894      	lsrs	r4, r2, #2
 802168c:	d00e      	beq.n	80216ac <st_int16_fill+0x28>
 802168e:	460b      	mov	r3, r1
 8021690:	f04f 0c00 	mov.w	ip, #0
 8021694:	f10c 0c01 	add.w	ip, ip, #1
 8021698:	4564      	cmp	r4, ip
 802169a:	f8c3 e000 	str.w	lr, [r3]
 802169e:	f8c3 e004 	str.w	lr, [r3, #4]
 80216a2:	f103 0308 	add.w	r3, r3, #8
 80216a6:	d1f5      	bne.n	8021694 <st_int16_fill+0x10>
 80216a8:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
 80216ac:	f012 0203 	ands.w	r2, r2, #3
 80216b0:	d006      	beq.n	80216c0 <st_int16_fill+0x3c>
 80216b2:	2a01      	cmp	r2, #1
 80216b4:	8008      	strh	r0, [r1, #0]
 80216b6:	d003      	beq.n	80216c0 <st_int16_fill+0x3c>
 80216b8:	2a02      	cmp	r2, #2
 80216ba:	8048      	strh	r0, [r1, #2]
 80216bc:	bf18      	it	ne
 80216be:	8088      	strhne	r0, [r1, #4]
 80216c0:	bd10      	pop	{r4, pc}
 80216c2:	bf00      	nop

080216c4 <st_f32_to_int16>:
 80216c4:	b530      	push	{r4, r5, lr}
 80216c6:	0895      	lsrs	r5, r2, #2
 80216c8:	d072      	beq.n	80217b0 <st_f32_to_int16+0xec>
 80216ca:	eddf 5a60 	vldr	s11, [pc, #384]	@ 802184c <st_f32_to_int16+0x188>
 80216ce:	f100 0c10 	add.w	ip, r0, #16
 80216d2:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80216d6:	eebe 5a00 	vmov.f32	s10, #224	@ 0xbf000000 -0.5
 80216da:	f101 0e08 	add.w	lr, r1, #8
 80216de:	462c      	mov	r4, r5
 80216e0:	ed5c 6a04 	vldr	s13, [ip, #-16]
 80216e4:	ee66 6aa5 	vmul.f32	s13, s13, s11
 80216e8:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 80216ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80216f0:	bfd4      	ite	le
 80216f2:	eef0 7a45 	vmovle.f32	s15, s10
 80216f6:	eef0 7a47 	vmovgt.f32	s15, s14
 80216fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80216fe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8021702:	ee17 3a90 	vmov	r3, s15
 8021706:	f303 030f 	ssat	r3, #16, r3
 802170a:	f82e 3c08 	strh.w	r3, [lr, #-8]
 802170e:	ed5c 6a03 	vldr	s13, [ip, #-12]
 8021712:	ee66 6aa5 	vmul.f32	s13, s13, s11
 8021716:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 802171a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802171e:	bfd4      	ite	le
 8021720:	eef0 7a45 	vmovle.f32	s15, s10
 8021724:	eef0 7a47 	vmovgt.f32	s15, s14
 8021728:	ee77 7aa6 	vadd.f32	s15, s15, s13
 802172c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8021730:	ee17 3a90 	vmov	r3, s15
 8021734:	f303 030f 	ssat	r3, #16, r3
 8021738:	f82e 3c06 	strh.w	r3, [lr, #-6]
 802173c:	ed5c 6a02 	vldr	s13, [ip, #-8]
 8021740:	ee66 6aa5 	vmul.f32	s13, s13, s11
 8021744:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 8021748:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802174c:	bfd4      	ite	le
 802174e:	eef0 7a45 	vmovle.f32	s15, s10
 8021752:	eef0 7a47 	vmovgt.f32	s15, s14
 8021756:	ee77 7aa6 	vadd.f32	s15, s15, s13
 802175a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 802175e:	ee17 3a90 	vmov	r3, s15
 8021762:	f303 030f 	ssat	r3, #16, r3
 8021766:	f82e 3c04 	strh.w	r3, [lr, #-4]
 802176a:	ed5c 7a01 	vldr	s15, [ip, #-4]
 802176e:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8021772:	ee77 6a87 	vadd.f32	s13, s15, s14
 8021776:	ee37 6ac7 	vsub.f32	s12, s15, s14
 802177a:	eefd 6ae6 	vcvt.s32.f32	s13, s13
 802177e:	eebd 6ac6 	vcvt.s32.f32	s12, s12
 8021782:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8021786:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802178a:	bfcc      	ite	gt
 802178c:	ee16 3a90 	vmovgt	r3, s13
 8021790:	ee16 3a10 	vmovle	r3, s12
 8021794:	f303 030f 	ssat	r3, #16, r3
 8021798:	3c01      	subs	r4, #1
 802179a:	f82e 3c02 	strh.w	r3, [lr, #-2]
 802179e:	f10c 0c10 	add.w	ip, ip, #16
 80217a2:	f10e 0e08 	add.w	lr, lr, #8
 80217a6:	d19b      	bne.n	80216e0 <st_f32_to_int16+0x1c>
 80217a8:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
 80217ac:	eb00 1005 	add.w	r0, r0, r5, lsl #4
 80217b0:	f012 0203 	ands.w	r2, r2, #3
 80217b4:	d049      	beq.n	802184a <st_f32_to_int16+0x186>
 80217b6:	edd0 6a00 	vldr	s13, [r0]
 80217ba:	eddf 5a24 	vldr	s11, [pc, #144]	@ 802184c <st_f32_to_int16+0x188>
 80217be:	ee66 6aa5 	vmul.f32	s13, s13, s11
 80217c2:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80217c6:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 80217ca:	eebe 6a00 	vmov.f32	s12, #224	@ 0xbf000000 -0.5
 80217ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80217d2:	bfd4      	ite	le
 80217d4:	eef0 7a46 	vmovle.f32	s15, s12
 80217d8:	eef0 7a47 	vmovgt.f32	s15, s14
 80217dc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80217e0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80217e4:	ee17 3a90 	vmov	r3, s15
 80217e8:	f303 030f 	ssat	r3, #16, r3
 80217ec:	2a01      	cmp	r2, #1
 80217ee:	800b      	strh	r3, [r1, #0]
 80217f0:	d02b      	beq.n	802184a <st_f32_to_int16+0x186>
 80217f2:	edd0 7a01 	vldr	s15, [r0, #4]
 80217f6:	ee67 7aa5 	vmul.f32	s15, s15, s11
 80217fa:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80217fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021802:	bfd4      	ite	le
 8021804:	eef0 6a46 	vmovle.f32	s13, s12
 8021808:	eef0 6a47 	vmovgt.f32	s13, s14
 802180c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8021810:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8021814:	ee17 3a90 	vmov	r3, s15
 8021818:	f303 030f 	ssat	r3, #16, r3
 802181c:	2a02      	cmp	r2, #2
 802181e:	804b      	strh	r3, [r1, #2]
 8021820:	d013      	beq.n	802184a <st_f32_to_int16+0x186>
 8021822:	edd0 7a02 	vldr	s15, [r0, #8]
 8021826:	ee67 7aa5 	vmul.f32	s15, s15, s11
 802182a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 802182e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021832:	bfd8      	it	le
 8021834:	eeb0 7a46 	vmovle.f32	s14, s12
 8021838:	ee37 7a27 	vadd.f32	s14, s14, s15
 802183c:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 8021840:	ee17 3a10 	vmov	r3, s14
 8021844:	f303 030f 	ssat	r3, #16, r3
 8021848:	808b      	strh	r3, [r1, #4]
 802184a:	bd30      	pop	{r4, r5, pc}
 802184c:	47000000 	.word	0x47000000

08021850 <st_f32_to_int8>:
 8021850:	b5f0      	push	{r4, r5, r6, r7, lr}
 8021852:	0895      	lsrs	r5, r2, #2
 8021854:	d078      	beq.n	8021948 <st_f32_to_int8+0xf8>
 8021856:	f101 0c04 	add.w	ip, r1, #4
 802185a:	eddf 5a6b 	vldr	s11, [pc, #428]	@ 8021a08 <st_f32_to_int8+0x1b8>
 802185e:	f100 0e10 	add.w	lr, r0, #16
 8021862:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 8021866:	eebe 5a00 	vmov.f32	s10, #224	@ 0xbf000000 -0.5
 802186a:	00ae      	lsls	r6, r5, #2
 802186c:	eb0c 0485 	add.w	r4, ip, r5, lsl #2
 8021870:	ed1e 7a04 	vldr	s14, [lr, #-16]
 8021874:	ee27 7a25 	vmul.f32	s14, s14, s11
 8021878:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 802187c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021880:	bfd4      	ite	le
 8021882:	eef0 7a45 	vmovle.f32	s15, s10
 8021886:	eef0 7a46 	vmovgt.f32	s15, s12
 802188a:	ee77 7a87 	vadd.f32	s15, s15, s14
 802188e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8021892:	ee17 3a90 	vmov	r3, s15
 8021896:	b21b      	sxth	r3, r3
 8021898:	f303 0307 	ssat	r3, #8, r3
 802189c:	f80c 3c04 	strb.w	r3, [ip, #-4]
 80218a0:	ed1e 7a03 	vldr	s14, [lr, #-12]
 80218a4:	ee27 7a25 	vmul.f32	s14, s14, s11
 80218a8:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 80218ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80218b0:	bfd4      	ite	le
 80218b2:	eef0 7a45 	vmovle.f32	s15, s10
 80218b6:	eef0 7a46 	vmovgt.f32	s15, s12
 80218ba:	ee77 7a87 	vadd.f32	s15, s15, s14
 80218be:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80218c2:	ee17 3a90 	vmov	r3, s15
 80218c6:	b21b      	sxth	r3, r3
 80218c8:	f303 0307 	ssat	r3, #8, r3
 80218cc:	f80c 3c03 	strb.w	r3, [ip, #-3]
 80218d0:	ed1e 7a02 	vldr	s14, [lr, #-8]
 80218d4:	ee27 7a25 	vmul.f32	s14, s14, s11
 80218d8:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 80218dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80218e0:	bfd4      	ite	le
 80218e2:	eef0 7a45 	vmovle.f32	s15, s10
 80218e6:	eef0 7a46 	vmovgt.f32	s15, s12
 80218ea:	ee77 7a87 	vadd.f32	s15, s15, s14
 80218ee:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80218f2:	ee17 3a90 	vmov	r3, s15
 80218f6:	b21b      	sxth	r3, r3
 80218f8:	f303 0307 	ssat	r3, #8, r3
 80218fc:	f80c 3c02 	strb.w	r3, [ip, #-2]
 8021900:	ed5e 6a01 	vldr	s13, [lr, #-4]
 8021904:	ee66 6aa5 	vmul.f32	s13, s13, s11
 8021908:	ee76 7a86 	vadd.f32	s15, s13, s12
 802190c:	ee36 7ac6 	vsub.f32	s14, s13, s12
 8021910:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8021914:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 8021918:	ee17 3a90 	vmov	r3, s15
 802191c:	ee17 7a10 	vmov	r7, s14
 8021920:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 8021924:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021928:	b21b      	sxth	r3, r3
 802192a:	b23f      	sxth	r7, r7
 802192c:	dd5f      	ble.n	80219ee <st_f32_to_int8+0x19e>
 802192e:	f303 0307 	ssat	r3, #8, r3
 8021932:	f80c 3c01 	strb.w	r3, [ip, #-1]
 8021936:	f10c 0c04 	add.w	ip, ip, #4
 802193a:	4564      	cmp	r4, ip
 802193c:	f10e 0e10 	add.w	lr, lr, #16
 8021940:	d196      	bne.n	8021870 <st_f32_to_int8+0x20>
 8021942:	4431      	add	r1, r6
 8021944:	eb00 1005 	add.w	r0, r0, r5, lsl #4
 8021948:	f012 0203 	ands.w	r2, r2, #3
 802194c:	d04e      	beq.n	80219ec <st_f32_to_int8+0x19c>
 802194e:	edd0 6a00 	vldr	s13, [r0]
 8021952:	eddf 5a2d 	vldr	s11, [pc, #180]	@ 8021a08 <st_f32_to_int8+0x1b8>
 8021956:	ee66 6aa5 	vmul.f32	s13, s13, s11
 802195a:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 802195e:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 8021962:	eebe 6a00 	vmov.f32	s12, #224	@ 0xbf000000 -0.5
 8021966:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802196a:	bfd4      	ite	le
 802196c:	eef0 7a46 	vmovle.f32	s15, s12
 8021970:	eef0 7a47 	vmovgt.f32	s15, s14
 8021974:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8021978:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 802197c:	ee17 3a90 	vmov	r3, s15
 8021980:	b21b      	sxth	r3, r3
 8021982:	f303 0307 	ssat	r3, #8, r3
 8021986:	2a01      	cmp	r2, #1
 8021988:	700b      	strb	r3, [r1, #0]
 802198a:	d02f      	beq.n	80219ec <st_f32_to_int8+0x19c>
 802198c:	edd0 6a01 	vldr	s13, [r0, #4]
 8021990:	ee66 6aa5 	vmul.f32	s13, s13, s11
 8021994:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 8021998:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802199c:	bfd4      	ite	le
 802199e:	eef0 7a46 	vmovle.f32	s15, s12
 80219a2:	eef0 7a47 	vmovgt.f32	s15, s14
 80219a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80219aa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80219ae:	ee17 3a90 	vmov	r3, s15
 80219b2:	b21b      	sxth	r3, r3
 80219b4:	f303 0307 	ssat	r3, #8, r3
 80219b8:	2a02      	cmp	r2, #2
 80219ba:	704b      	strb	r3, [r1, #1]
 80219bc:	d016      	beq.n	80219ec <st_f32_to_int8+0x19c>
 80219be:	edd0 6a02 	vldr	s13, [r0, #8]
 80219c2:	ee66 6aa5 	vmul.f32	s13, s13, s11
 80219c6:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 80219ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80219ce:	bfd4      	ite	le
 80219d0:	eef0 7a46 	vmovle.f32	s15, s12
 80219d4:	eef0 7a47 	vmovgt.f32	s15, s14
 80219d8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80219dc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80219e0:	ee17 3a90 	vmov	r3, s15
 80219e4:	b21b      	sxth	r3, r3
 80219e6:	f303 0307 	ssat	r3, #8, r3
 80219ea:	708b      	strb	r3, [r1, #2]
 80219ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80219ee:	f307 0707 	ssat	r7, #8, r7
 80219f2:	f80c 7c01 	strb.w	r7, [ip, #-1]
 80219f6:	f10c 0c04 	add.w	ip, ip, #4
 80219fa:	45a4      	cmp	ip, r4
 80219fc:	f10e 0e10 	add.w	lr, lr, #16
 8021a00:	f47f af36 	bne.w	8021870 <st_f32_to_int8+0x20>
 8021a04:	e79d      	b.n	8021942 <st_f32_to_int8+0xf2>
 8021a06:	bf00      	nop
 8021a08:	43000000 	.word	0x43000000

08021a0c <st_int16_to_f32>:
 8021a0c:	b530      	push	{r4, r5, lr}
 8021a0e:	0894      	lsrs	r4, r2, #2
 8021a10:	d038      	beq.n	8021a84 <st_int16_to_f32+0x78>
 8021a12:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 8021ad4 <st_int16_to_f32+0xc8>
 8021a16:	f100 0c08 	add.w	ip, r0, #8
 8021a1a:	f101 0310 	add.w	r3, r1, #16
 8021a1e:	46a6      	mov	lr, r4
 8021a20:	f93c 5c08 	ldrsh.w	r5, [ip, #-8]
 8021a24:	ee07 5a90 	vmov	s15, r5
 8021a28:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8021a2c:	3310      	adds	r3, #16
 8021a2e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8021a32:	f10c 0c08 	add.w	ip, ip, #8
 8021a36:	ed43 7a08 	vstr	s15, [r3, #-32]	@ 0xffffffe0
 8021a3a:	f93c 5c0e 	ldrsh.w	r5, [ip, #-14]
 8021a3e:	ee07 5a90 	vmov	s15, r5
 8021a42:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8021a46:	f1be 0e01 	subs.w	lr, lr, #1
 8021a4a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8021a4e:	ed43 7a07 	vstr	s15, [r3, #-28]	@ 0xffffffe4
 8021a52:	f93c 5c0c 	ldrsh.w	r5, [ip, #-12]
 8021a56:	ee07 5a90 	vmov	s15, r5
 8021a5a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8021a5e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8021a62:	ed43 7a06 	vstr	s15, [r3, #-24]	@ 0xffffffe8
 8021a66:	f93c 5c0a 	ldrsh.w	r5, [ip, #-10]
 8021a6a:	ee07 5a90 	vmov	s15, r5
 8021a6e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8021a72:	ee67 7a87 	vmul.f32	s15, s15, s14
 8021a76:	ed43 7a05 	vstr	s15, [r3, #-20]	@ 0xffffffec
 8021a7a:	d1d1      	bne.n	8021a20 <st_int16_to_f32+0x14>
 8021a7c:	eb01 1104 	add.w	r1, r1, r4, lsl #4
 8021a80:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
 8021a84:	f012 0203 	ands.w	r2, r2, #3
 8021a88:	d023      	beq.n	8021ad2 <st_int16_to_f32+0xc6>
 8021a8a:	f9b0 3000 	ldrsh.w	r3, [r0]
 8021a8e:	ed9f 7a11 	vldr	s14, [pc, #68]	@ 8021ad4 <st_int16_to_f32+0xc8>
 8021a92:	ee07 3a90 	vmov	s15, r3
 8021a96:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8021a9a:	2a01      	cmp	r2, #1
 8021a9c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8021aa0:	edc1 7a00 	vstr	s15, [r1]
 8021aa4:	d015      	beq.n	8021ad2 <st_int16_to_f32+0xc6>
 8021aa6:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 8021aaa:	ee07 3a90 	vmov	s15, r3
 8021aae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8021ab2:	2a02      	cmp	r2, #2
 8021ab4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8021ab8:	edc1 7a01 	vstr	s15, [r1, #4]
 8021abc:	d009      	beq.n	8021ad2 <st_int16_to_f32+0xc6>
 8021abe:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8021ac2:	ee07 3a90 	vmov	s15, r3
 8021ac6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8021aca:	ee67 7a87 	vmul.f32	s15, s15, s14
 8021ace:	edc1 7a02 	vstr	s15, [r1, #8]
 8021ad2:	bd30      	pop	{r4, r5, pc}
 8021ad4:	38000000 	.word	0x38000000

08021ad8 <st_sssa8_ch_convolve_rank1upd>:
 8021ad8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021adc:	b087      	sub	sp, #28
 8021ade:	f8bd 4040 	ldrh.w	r4, [sp, #64]	@ 0x40
 8021ae2:	f99d a048 	ldrsb.w	sl, [sp, #72]	@ 0x48
 8021ae6:	fb13 f304 	smulbb	r3, r3, r4
 8021aea:	fb13 f400 	smulbb	r4, r3, r0
 8021aee:	4608      	mov	r0, r1
 8021af0:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8021af2:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8021af4:	2a00      	cmp	r2, #0
 8021af6:	d078      	beq.n	8021bea <st_sssa8_ch_convolve_rank1upd+0x112>
 8021af8:	b2a4      	uxth	r4, r4
 8021afa:	08a7      	lsrs	r7, r4, #2
 8021afc:	f1a3 0804 	sub.w	r8, r3, #4
 8021b00:	f1a7 0381 	sub.w	r3, r7, #129	@ 0x81
 8021b04:	f3c3 13c8 	ubfx	r3, r3, #7, #9
 8021b08:	ebc3 2643 	rsb	r6, r3, r3, lsl #9
 8021b0c:	f004 0403 	and.w	r4, r4, #3
 8021b10:	f1a7 0580 	sub.w	r5, r7, #128	@ 0x80
 8021b14:	eb05 15c6 	add.w	r5, r5, r6, lsl #7
 8021b18:	1e66      	subs	r6, r4, #1
 8021b1a:	b2b6      	uxth	r6, r6
 8021b1c:	fa1f fb85 	uxth.w	fp, r5
 8021b20:	eb01 0982 	add.w	r9, r1, r2, lsl #2
 8021b24:	025d      	lsls	r5, r3, #9
 8021b26:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 8021b2a:	3301      	adds	r3, #1
 8021b2c:	025b      	lsls	r3, r3, #9
 8021b2e:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8021b32:	9201      	str	r2, [sp, #4]
 8021b34:	1c72      	adds	r2, r6, #1
 8021b36:	9502      	str	r5, [sp, #8]
 8021b38:	9203      	str	r2, [sp, #12]
 8021b3a:	461d      	mov	r5, r3
 8021b3c:	4633      	mov	r3, r6
 8021b3e:	2f80      	cmp	r7, #128	@ 0x80
 8021b40:	d958      	bls.n	8021bf4 <st_sssa8_ch_convolve_rank1upd+0x11c>
 8021b42:	9a02      	ldr	r2, [sp, #8]
 8021b44:	e9cd 9304 	strd	r9, r3, [sp, #16]
 8021b48:	f500 7600 	add.w	r6, r0, #512	@ 0x200
 8021b4c:	eb00 0e02 	add.w	lr, r0, r2
 8021b50:	f04f 0c00 	mov.w	ip, #0
 8021b54:	f5a6 7900 	sub.w	r9, r6, #512	@ 0x200
 8021b58:	2200      	movs	r2, #0
 8021b5a:	f859 3b04 	ldr.w	r3, [r9], #4
 8021b5e:	fa2f f183 	sxtb16	r1, r3
 8021b62:	45b1      	cmp	r9, r6
 8021b64:	ea4f 2333 	mov.w	r3, r3, ror #8
 8021b68:	fa92 f211 	qadd16	r2, r2, r1
 8021b6c:	fa2f f383 	sxtb16	r3, r3
 8021b70:	fa92 f213 	qadd16	r2, r2, r3
 8021b74:	d1f1      	bne.n	8021b5a <st_sssa8_ch_convolve_rank1upd+0x82>
 8021b76:	f509 7600 	add.w	r6, r9, #512	@ 0x200
 8021b7a:	b213      	sxth	r3, r2
 8021b7c:	eb03 4322 	add.w	r3, r3, r2, asr #16
 8021b80:	4576      	cmp	r6, lr
 8021b82:	449c      	add	ip, r3
 8021b84:	d1e6      	bne.n	8021b54 <st_sssa8_ch_convolve_rank1upd+0x7c>
 8021b86:	e9dd 9304 	ldrd	r9, r3, [sp, #16]
 8021b8a:	1946      	adds	r6, r0, r5
 8021b8c:	4658      	mov	r0, fp
 8021b8e:	b378      	cbz	r0, 8021bf0 <st_sssa8_ch_convolve_rank1upd+0x118>
 8021b90:	eb06 0080 	add.w	r0, r6, r0, lsl #2
 8021b94:	2100      	movs	r1, #0
 8021b96:	f856 2b04 	ldr.w	r2, [r6], #4
 8021b9a:	fa2f fe82 	sxtb16	lr, r2
 8021b9e:	4286      	cmp	r6, r0
 8021ba0:	ea4f 2232 	mov.w	r2, r2, ror #8
 8021ba4:	fa91 f11e 	qadd16	r1, r1, lr
 8021ba8:	fa2f f282 	sxtb16	r2, r2
 8021bac:	fa91 f112 	qadd16	r1, r1, r2
 8021bb0:	d1f1      	bne.n	8021b96 <st_sssa8_ch_convolve_rank1upd+0xbe>
 8021bb2:	b20a      	sxth	r2, r1
 8021bb4:	eb02 4221 	add.w	r2, r2, r1, asr #16
 8021bb8:	4494      	add	ip, r2
 8021bba:	b16c      	cbz	r4, 8021bd8 <st_sssa8_ch_convolve_rank1upd+0x100>
 8021bbc:	f990 2000 	ldrsb.w	r2, [r0]
 8021bc0:	4494      	add	ip, r2
 8021bc2:	b13b      	cbz	r3, 8021bd4 <st_sssa8_ch_convolve_rank1upd+0xfc>
 8021bc4:	f990 2001 	ldrsb.w	r2, [r0, #1]
 8021bc8:	2c02      	cmp	r4, #2
 8021bca:	4494      	add	ip, r2
 8021bcc:	bf1c      	itt	ne
 8021bce:	f990 2002 	ldrsbne.w	r2, [r0, #2]
 8021bd2:	4494      	addne	ip, r2
 8021bd4:	9a03      	ldr	r2, [sp, #12]
 8021bd6:	4410      	add	r0, r2
 8021bd8:	f858 2f04 	ldr.w	r2, [r8, #4]!
 8021bdc:	fb0c 221a 	mls	r2, ip, sl, r2
 8021be0:	f849 2b04 	str.w	r2, [r9], #4
 8021be4:	9a01      	ldr	r2, [sp, #4]
 8021be6:	4591      	cmp	r9, r2
 8021be8:	d1a9      	bne.n	8021b3e <st_sssa8_ch_convolve_rank1upd+0x66>
 8021bea:	b007      	add	sp, #28
 8021bec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021bf0:	4630      	mov	r0, r6
 8021bf2:	e7e2      	b.n	8021bba <st_sssa8_ch_convolve_rank1upd+0xe2>
 8021bf4:	4606      	mov	r6, r0
 8021bf6:	f04f 0c00 	mov.w	ip, #0
 8021bfa:	4638      	mov	r0, r7
 8021bfc:	e7c7      	b.n	8021b8e <st_sssa8_ch_convolve_rank1upd+0xb6>
 8021bfe:	bf00      	nop

08021c00 <st_sssa8_fully_connected>:
 8021c00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021c04:	b091      	sub	sp, #68	@ 0x44
 8021c06:	468a      	mov	sl, r1
 8021c08:	991b      	ldr	r1, [sp, #108]	@ 0x6c
 8021c0a:	9c1a      	ldr	r4, [sp, #104]	@ 0x68
 8021c0c:	f9b1 8000 	ldrsh.w	r8, [r1]
 8021c10:	6824      	ldr	r4, [r4, #0]
 8021c12:	920a      	str	r2, [sp, #40]	@ 0x28
 8021c14:	f108 32ff 	add.w	r2, r8, #4294967295
 8021c18:	f99d 1074 	ldrsb.w	r1, [sp, #116]	@ 0x74
 8021c1c:	f99d 6070 	ldrsb.w	r6, [sp, #112]	@ 0x70
 8021c20:	920b      	str	r2, [sp, #44]	@ 0x2c
 8021c22:	2a14      	cmp	r2, #20
 8021c24:	e9cd 0408 	strd	r0, r4, [sp, #32]
 8021c28:	9107      	str	r1, [sp, #28]
 8021c2a:	d807      	bhi.n	8021c3c <st_sssa8_fully_connected+0x3c>
 8021c2c:	fa01 f008 	lsl.w	r0, r1, r8
 8021c30:	2101      	movs	r1, #1
 8021c32:	fa01 f108 	lsl.w	r1, r1, r8
 8021c36:	eb00 0251 	add.w	r2, r0, r1, lsr #1
 8021c3a:	9207      	str	r2, [sp, #28]
 8021c3c:	49c2      	ldr	r1, [pc, #776]	@ (8021f48 <st_sssa8_fully_connected+0x348>)
 8021c3e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8021c40:	fba1 0103 	umull	r0, r1, r1, r3
 8021c44:	ea4f 0b91 	mov.w	fp, r1, lsr #2
 8021c48:	eb0b 014b 	add.w	r1, fp, fp, lsl #1
 8021c4c:	eba3 0941 	sub.w	r9, r3, r1, lsl #1
 8021c50:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8021c52:	eb03 0541 	add.w	r5, r3, r1, lsl #1
 8021c56:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8021c58:	fb0b f402 	mul.w	r4, fp, r2
 8021c5c:	eb03 07c1 	add.w	r7, r3, r1, lsl #3
 8021c60:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8021c62:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8021c66:	fa1f f989 	uxth.w	r9, r9
 8021c6a:	eb0a 0444 	add.w	r4, sl, r4, lsl #1
 8021c6e:	2b00      	cmp	r3, #0
 8021c70:	f000 80a3 	beq.w	8021dba <st_sssa8_fully_connected+0x1ba>
 8021c74:	4619      	mov	r1, r3
 8021c76:	9808      	ldr	r0, [sp, #32]
 8021c78:	eac6 4306 	pkhbt	r3, r6, r6, lsl #16
 8021c7c:	9600      	str	r6, [sp, #0]
 8021c7e:	4616      	mov	r6, r2
 8021c80:	f000 fa50 	bl	8022124 <st_int8_reordered_no_shift_zero>
 8021c84:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8021c86:	9304      	str	r3, [sp, #16]
 8021c88:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8021c8a:	9302      	str	r3, [sp, #8]
 8021c8c:	9b07      	ldr	r3, [sp, #28]
 8021c8e:	9301      	str	r3, [sp, #4]
 8021c90:	9820      	ldr	r0, [sp, #128]	@ 0x80
 8021c92:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8021c94:	f8cd b000 	str.w	fp, [sp]
 8021c98:	f8cd 800c 	str.w	r8, [sp, #12]
 8021c9c:	4651      	mov	r1, sl
 8021c9e:	4632      	mov	r2, r6
 8021ca0:	f000 fdbe 	bl	8022820 <st_sssa8_dense_loop>
 8021ca4:	f1b9 0f00 	cmp.w	r9, #0
 8021ca8:	d063      	beq.n	8021d72 <st_sssa8_fully_connected+0x172>
 8021caa:	f006 0203 	and.w	r2, r6, #3
 8021cae:	1e51      	subs	r1, r2, #1
 8021cb0:	2001      	movs	r0, #1
 8021cb2:	ea4f 0e96 	mov.w	lr, r6, lsr #2
 8021cb6:	b28e      	uxth	r6, r1
 8021cb8:	f1a8 0102 	sub.w	r1, r8, #2
 8021cbc:	fa00 f101 	lsl.w	r1, r0, r1
 8021cc0:	f10e 33ff 	add.w	r3, lr, #4294967295
 8021cc4:	b29b      	uxth	r3, r3
 8021cc6:	910d      	str	r1, [sp, #52]	@ 0x34
 8021cc8:	9920      	ldr	r1, [sp, #128]	@ 0x80
 8021cca:	920a      	str	r2, [sp, #40]	@ 0x28
 8021ccc:	3301      	adds	r3, #1
 8021cce:	eb01 0ac3 	add.w	sl, r1, r3, lsl #3
 8021cd2:	eb05 0b09 	add.w	fp, r5, r9
 8021cd6:	ea4f 0983 	mov.w	r9, r3, lsl #2
 8021cda:	1833      	adds	r3, r6, r0
 8021cdc:	930c      	str	r3, [sp, #48]	@ 0x30
 8021cde:	eba0 0308 	sub.w	r3, r0, r8
 8021ce2:	930e      	str	r3, [sp, #56]	@ 0x38
 8021ce4:	4649      	mov	r1, r9
 8021ce6:	4632      	mov	r2, r6
 8021ce8:	f857 3b04 	ldr.w	r3, [r7], #4
 8021cec:	f1be 0f00 	cmp.w	lr, #0
 8021cf0:	d060      	beq.n	8021db4 <st_sssa8_fully_connected+0x1b4>
 8021cf2:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8021cf4:	9508      	str	r5, [sp, #32]
 8021cf6:	eb04 0901 	add.w	r9, r4, r1
 8021cfa:	f854 0b04 	ldr.w	r0, [r4], #4
 8021cfe:	fa2f fc90 	sxtb16	ip, r0, ror #8
 8021d02:	6835      	ldr	r5, [r6, #0]
 8021d04:	fa2f f080 	sxtb16	r0, r0
 8021d08:	fb25 3500 	smlad	r5, r5, r0, r3
 8021d0c:	6873      	ldr	r3, [r6, #4]
 8021d0e:	3608      	adds	r6, #8
 8021d10:	fb23 530c 	smlad	r3, r3, ip, r5
 8021d14:	45a1      	cmp	r9, r4
 8021d16:	d1f0      	bne.n	8021cfa <st_sssa8_fully_connected+0xfa>
 8021d18:	9d08      	ldr	r5, [sp, #32]
 8021d1a:	4650      	mov	r0, sl
 8021d1c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8021d1e:	2c00      	cmp	r4, #0
 8021d20:	d039      	beq.n	8021d96 <st_sssa8_fully_connected+0x196>
 8021d22:	f999 4000 	ldrsb.w	r4, [r9]
 8021d26:	8806      	ldrh	r6, [r0, #0]
 8021d28:	fb16 3304 	smlabb	r3, r6, r4, r3
 8021d2c:	b162      	cbz	r2, 8021d48 <st_sssa8_fully_connected+0x148>
 8021d2e:	f999 4001 	ldrsb.w	r4, [r9, #1]
 8021d32:	8846      	ldrh	r6, [r0, #2]
 8021d34:	fb16 3304 	smlabb	r3, r6, r4, r3
 8021d38:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8021d3a:	2c02      	cmp	r4, #2
 8021d3c:	d004      	beq.n	8021d48 <st_sssa8_fully_connected+0x148>
 8021d3e:	8884      	ldrh	r4, [r0, #4]
 8021d40:	f999 0002 	ldrsb.w	r0, [r9, #2]
 8021d44:	fb14 3300 	smlabb	r3, r4, r0, r3
 8021d48:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8021d4a:	eb09 0400 	add.w	r4, r9, r0
 8021d4e:	f1b8 0f15 	cmp.w	r8, #21
 8021d52:	dd12      	ble.n	8021d7a <st_sssa8_fully_connected+0x17a>
 8021d54:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8021d56:	9e0d      	ldr	r6, [sp, #52]	@ 0x34
 8021d58:	fb53 6300 	smmla	r3, r3, r0, r6
 8021d5c:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8021d5e:	4103      	asrs	r3, r0
 8021d60:	9807      	ldr	r0, [sp, #28]
 8021d62:	4403      	add	r3, r0
 8021d64:	f303 0307 	ssat	r3, #8, r3
 8021d68:	b25b      	sxtb	r3, r3
 8021d6a:	f805 3b01 	strb.w	r3, [r5], #1
 8021d6e:	455d      	cmp	r5, fp
 8021d70:	d1ba      	bne.n	8021ce8 <st_sssa8_fully_connected+0xe8>
 8021d72:	2000      	movs	r0, #0
 8021d74:	b011      	add	sp, #68	@ 0x44
 8021d76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021d7a:	f1b8 0f00 	cmp.w	r8, #0
 8021d7e:	dd0c      	ble.n	8021d9a <st_sssa8_fully_connected+0x19a>
 8021d80:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8021d82:	9e07      	ldr	r6, [sp, #28]
 8021d84:	005b      	lsls	r3, r3, #1
 8021d86:	fb53 6300 	smmla	r3, r3, r0, r6
 8021d8a:	fa43 f308 	asr.w	r3, r3, r8
 8021d8e:	f303 0307 	ssat	r3, #8, r3
 8021d92:	b25b      	sxtb	r3, r3
 8021d94:	e7e9      	b.n	8021d6a <st_sssa8_fully_connected+0x16a>
 8021d96:	464c      	mov	r4, r9
 8021d98:	e7d9      	b.n	8021d4e <st_sssa8_fully_connected+0x14e>
 8021d9a:	980e      	ldr	r0, [sp, #56]	@ 0x38
 8021d9c:	4083      	lsls	r3, r0
 8021d9e:	f303 031f 	ssat	r3, #32, r3
 8021da2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8021da4:	fb53 f310 	smmulr	r3, r3, r0
 8021da8:	9807      	ldr	r0, [sp, #28]
 8021daa:	4403      	add	r3, r0
 8021dac:	f303 0307 	ssat	r3, #8, r3
 8021db0:	b25b      	sxtb	r3, r3
 8021db2:	e7da      	b.n	8021d6a <st_sssa8_fully_connected+0x16a>
 8021db4:	9820      	ldr	r0, [sp, #128]	@ 0x80
 8021db6:	46a1      	mov	r9, r4
 8021db8:	e7b0      	b.n	8021d1c <st_sssa8_fully_connected+0x11c>
 8021dba:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8021dbc:	9305      	str	r3, [sp, #20]
 8021dbe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8021dc0:	f8cd b000 	str.w	fp, [sp]
 8021dc4:	4651      	mov	r1, sl
 8021dc6:	f8dd a020 	ldr.w	sl, [sp, #32]
 8021dca:	f8cd 8010 	str.w	r8, [sp, #16]
 8021dce:	e9cd 6302 	strd	r6, r3, [sp, #8]
 8021dd2:	9b07      	ldr	r3, [sp, #28]
 8021dd4:	9301      	str	r3, [sp, #4]
 8021dd6:	4650      	mov	r0, sl
 8021dd8:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8021dda:	f000 fef9 	bl	8022bd0 <st_sssa8_dense_memopt_loop>
 8021dde:	f1b9 0f00 	cmp.w	r9, #0
 8021de2:	d0c6      	beq.n	8021d72 <st_sssa8_fully_connected+0x172>
 8021de4:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8021de6:	f1a0 0310 	sub.w	r3, r0, #16
 8021dea:	f023 030f 	bic.w	r3, r3, #15
 8021dee:	eb05 0b09 	add.w	fp, r5, r9
 8021df2:	2101      	movs	r1, #1
 8021df4:	f103 0910 	add.w	r9, r3, #16
 8021df8:	f1a8 0302 	sub.w	r3, r8, #2
 8021dfc:	fa01 f303 	lsl.w	r3, r1, r3
 8021e00:	eb0a 0209 	add.w	r2, sl, r9
 8021e04:	4682      	mov	sl, r0
 8021e06:	930e      	str	r3, [sp, #56]	@ 0x38
 8021e08:	f1ba 0f0f 	cmp.w	sl, #15
 8021e0c:	eba1 0308 	sub.w	r3, r1, r8
 8021e10:	930f      	str	r3, [sp, #60]	@ 0x3c
 8021e12:	f1c6 0100 	rsb	r1, r6, #0
 8021e16:	46de      	mov	lr, fp
 8021e18:	f857 3b04 	ldr.w	r3, [r7], #4
 8021e1c:	920d      	str	r2, [sp, #52]	@ 0x34
 8021e1e:	46c3      	mov	fp, r8
 8021e20:	eac1 4101 	pkhbt	r1, r1, r1, lsl #16
 8021e24:	dd78      	ble.n	8021f18 <st_sssa8_fully_connected+0x318>
 8021e26:	9808      	ldr	r0, [sp, #32]
 8021e28:	f8cd 9028 	str.w	r9, [sp, #40]	@ 0x28
 8021e2c:	eb04 0809 	add.w	r8, r4, r9
 8021e30:	950c      	str	r5, [sp, #48]	@ 0x30
 8021e32:	6822      	ldr	r2, [r4, #0]
 8021e34:	6805      	ldr	r5, [r0, #0]
 8021e36:	fa2f f992 	sxtb16	r9, r2, ror #8
 8021e3a:	ea4f 2c35 	mov.w	ip, r5, ror #8
 8021e3e:	fa2f f282 	sxtb16	r2, r2
 8021e42:	fa21 f585 	sxtab16	r5, r1, r5
 8021e46:	fa21 fc8c 	sxtab16	ip, r1, ip
 8021e4a:	fb25 3502 	smlad	r5, r5, r2, r3
 8021e4e:	fb2c 5509 	smlad	r5, ip, r9, r5
 8021e52:	f8d4 c004 	ldr.w	ip, [r4, #4]
 8021e56:	6843      	ldr	r3, [r0, #4]
 8021e58:	fa2f f99c 	sxtb16	r9, ip, ror #8
 8021e5c:	ea4f 2233 	mov.w	r2, r3, ror #8
 8021e60:	fa2f fc8c 	sxtb16	ip, ip
 8021e64:	fa21 f383 	sxtab16	r3, r1, r3
 8021e68:	fa21 f282 	sxtab16	r2, r1, r2
 8021e6c:	fb23 530c 	smlad	r3, r3, ip, r5
 8021e70:	fb22 3209 	smlad	r2, r2, r9, r3
 8021e74:	f8d4 c008 	ldr.w	ip, [r4, #8]
 8021e78:	6883      	ldr	r3, [r0, #8]
 8021e7a:	fa2f f99c 	sxtb16	r9, ip, ror #8
 8021e7e:	ea4f 2533 	mov.w	r5, r3, ror #8
 8021e82:	fa2f fc8c 	sxtb16	ip, ip
 8021e86:	fa21 f383 	sxtab16	r3, r1, r3
 8021e8a:	fa21 f585 	sxtab16	r5, r1, r5
 8021e8e:	fb23 230c 	smlad	r3, r3, ip, r2
 8021e92:	fb25 3509 	smlad	r5, r5, r9, r3
 8021e96:	f8d4 c00c 	ldr.w	ip, [r4, #12]
 8021e9a:	68c2      	ldr	r2, [r0, #12]
 8021e9c:	3410      	adds	r4, #16
 8021e9e:	3010      	adds	r0, #16
 8021ea0:	fa2f f99c 	sxtb16	r9, ip, ror #8
 8021ea4:	ea4f 2332 	mov.w	r3, r2, ror #8
 8021ea8:	fa2f fc8c 	sxtb16	ip, ip
 8021eac:	fa21 f282 	sxtab16	r2, r1, r2
 8021eb0:	fa21 f383 	sxtab16	r3, r1, r3
 8021eb4:	fb22 520c 	smlad	r2, r2, ip, r5
 8021eb8:	fb23 2309 	smlad	r3, r3, r9, r2
 8021ebc:	45a0      	cmp	r8, r4
 8021ebe:	d1b8      	bne.n	8021e32 <st_sssa8_fully_connected+0x232>
 8021ec0:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 8021ec4:	464c      	mov	r4, r9
 8021ec6:	45a2      	cmp	sl, r4
 8021ec8:	e9dd 500c 	ldrd	r5, r0, [sp, #48]	@ 0x30
 8021ecc:	dd29      	ble.n	8021f22 <st_sssa8_fully_connected+0x322>
 8021ece:	ebaa 0404 	sub.w	r4, sl, r4
 8021ed2:	4444      	add	r4, r8
 8021ed4:	f918 cb01 	ldrsb.w	ip, [r8], #1
 8021ed8:	f910 2b01 	ldrsb.w	r2, [r0], #1
 8021edc:	45a0      	cmp	r8, r4
 8021ede:	eba2 0206 	sub.w	r2, r2, r6
 8021ee2:	fb12 330c 	smlabb	r3, r2, ip, r3
 8021ee6:	d1f5      	bne.n	8021ed4 <st_sssa8_fully_connected+0x2d4>
 8021ee8:	f1bb 0f15 	cmp.w	fp, #21
 8021eec:	dd1d      	ble.n	8021f2a <st_sssa8_fully_connected+0x32a>
 8021eee:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8021ef0:	980e      	ldr	r0, [sp, #56]	@ 0x38
 8021ef2:	fb53 0302 	smmla	r3, r3, r2, r0
 8021ef6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8021ef8:	4113      	asrs	r3, r2
 8021efa:	9a07      	ldr	r2, [sp, #28]
 8021efc:	4413      	add	r3, r2
 8021efe:	f303 0307 	ssat	r3, #8, r3
 8021f02:	b25b      	sxtb	r3, r3
 8021f04:	f805 3b01 	strb.w	r3, [r5], #1
 8021f08:	4575      	cmp	r5, lr
 8021f0a:	f43f af32 	beq.w	8021d72 <st_sssa8_fully_connected+0x172>
 8021f0e:	f1ba 0f0f 	cmp.w	sl, #15
 8021f12:	f857 3b04 	ldr.w	r3, [r7], #4
 8021f16:	dc86      	bgt.n	8021e26 <st_sssa8_fully_connected+0x226>
 8021f18:	46a0      	mov	r8, r4
 8021f1a:	2400      	movs	r4, #0
 8021f1c:	45a2      	cmp	sl, r4
 8021f1e:	9808      	ldr	r0, [sp, #32]
 8021f20:	dcd5      	bgt.n	8021ece <st_sssa8_fully_connected+0x2ce>
 8021f22:	f1bb 0f15 	cmp.w	fp, #21
 8021f26:	4644      	mov	r4, r8
 8021f28:	dce1      	bgt.n	8021eee <st_sssa8_fully_connected+0x2ee>
 8021f2a:	f1bb 0f00 	cmp.w	fp, #0
 8021f2e:	dd0d      	ble.n	8021f4c <st_sssa8_fully_connected+0x34c>
 8021f30:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8021f32:	9807      	ldr	r0, [sp, #28]
 8021f34:	005b      	lsls	r3, r3, #1
 8021f36:	fb53 0302 	smmla	r3, r3, r2, r0
 8021f3a:	fa43 f30b 	asr.w	r3, r3, fp
 8021f3e:	f303 0307 	ssat	r3, #8, r3
 8021f42:	b25b      	sxtb	r3, r3
 8021f44:	e7de      	b.n	8021f04 <st_sssa8_fully_connected+0x304>
 8021f46:	bf00      	nop
 8021f48:	aaaaaaab 	.word	0xaaaaaaab
 8021f4c:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8021f4e:	4093      	lsls	r3, r2
 8021f50:	f303 031f 	ssat	r3, #32, r3
 8021f54:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8021f56:	fb53 f312 	smmulr	r3, r3, r2
 8021f5a:	9a07      	ldr	r2, [sp, #28]
 8021f5c:	4413      	add	r3, r2
 8021f5e:	f303 0307 	ssat	r3, #8, r3
 8021f62:	b25b      	sxtb	r3, r3
 8021f64:	e7ce      	b.n	8021f04 <st_sssa8_fully_connected+0x304>
 8021f66:	bf00      	nop

08021f68 <st_int8_copy>:
 8021f68:	4288      	cmp	r0, r1
 8021f6a:	d021      	beq.n	8021fb0 <st_int8_copy+0x48>
 8021f6c:	b302      	cbz	r2, 8021fb0 <st_int8_copy+0x48>
 8021f6e:	4288      	cmp	r0, r1
 8021f70:	d313      	bcc.n	8021f9a <st_int8_copy+0x32>
 8021f72:	2a03      	cmp	r2, #3
 8021f74:	d81d      	bhi.n	8021fb2 <st_int8_copy+0x4a>
 8021f76:	3a01      	subs	r2, #1
 8021f78:	f810 3b01 	ldrb.w	r3, [r0], #1
 8021f7c:	f801 3b01 	strb.w	r3, [r1], #1
 8021f80:	b1b2      	cbz	r2, 8021fb0 <st_int8_copy+0x48>
 8021f82:	f810 3b01 	ldrb.w	r3, [r0], #1
 8021f86:	f801 3b01 	strb.w	r3, [r1], #1
 8021f8a:	2a01      	cmp	r2, #1
 8021f8c:	f000 8088 	beq.w	80220a0 <st_int8_copy+0x138>
 8021f90:	f810 3b01 	ldrb.w	r3, [r0], #1
 8021f94:	f801 3b01 	strb.w	r3, [r1], #1
 8021f98:	4770      	bx	lr
 8021f9a:	1883      	adds	r3, r0, r2
 8021f9c:	428b      	cmp	r3, r1
 8021f9e:	d9e8      	bls.n	8021f72 <st_int8_copy+0xa>
 8021fa0:	440a      	add	r2, r1
 8021fa2:	f913 1d01 	ldrsb.w	r1, [r3, #-1]!
 8021fa6:	f802 1d01 	strb.w	r1, [r2, #-1]!
 8021faa:	4298      	cmp	r0, r3
 8021fac:	d1f9      	bne.n	8021fa2 <st_int8_copy+0x3a>
 8021fae:	4770      	bx	lr
 8021fb0:	4770      	bx	lr
 8021fb2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8021fb6:	f001 0e03 	and.w	lr, r1, #3
 8021fba:	f1ce 0304 	rsb	r3, lr, #4
 8021fbe:	eba2 0c03 	sub.w	ip, r2, r3
 8021fc2:	f000 0803 	and.w	r8, r0, #3
 8021fc6:	f1ce 0203 	rsb	r2, lr, #3
 8021fca:	f810 3b01 	ldrb.w	r3, [r0], #1
 8021fce:	f801 3b01 	strb.w	r3, [r1], #1
 8021fd2:	b182      	cbz	r2, 8021ff6 <st_int8_copy+0x8e>
 8021fd4:	f810 3b01 	ldrb.w	r3, [r0], #1
 8021fd8:	f801 3b01 	strb.w	r3, [r1], #1
 8021fdc:	2a01      	cmp	r2, #1
 8021fde:	d00a      	beq.n	8021ff6 <st_int8_copy+0x8e>
 8021fe0:	f810 3b01 	ldrb.w	r3, [r0], #1
 8021fe4:	f801 3b01 	strb.w	r3, [r1], #1
 8021fe8:	f1be 0f01 	cmp.w	lr, #1
 8021fec:	d003      	beq.n	8021ff6 <st_int8_copy+0x8e>
 8021fee:	f810 3b01 	ldrb.w	r3, [r0], #1
 8021ff2:	f801 3b01 	strb.w	r3, [r1], #1
 8021ff6:	45c6      	cmp	lr, r8
 8021ff8:	d02a      	beq.n	8022050 <st_int8_copy+0xe8>
 8021ffa:	ea5f 121c 	movs.w	r2, ip, lsr #4
 8021ffe:	d00a      	beq.n	8022016 <st_int8_copy+0xae>
 8022000:	f850 3b04 	ldr.w	r3, [r0], #4
 8022004:	f850 4b04 	ldr.w	r4, [r0], #4
 8022008:	f850 5b04 	ldr.w	r5, [r0], #4
 802200c:	f850 6b04 	ldr.w	r6, [r0], #4
 8022010:	c178      	stmia	r1!, {r3, r4, r5, r6}
 8022012:	3a01      	subs	r2, #1
 8022014:	d1f4      	bne.n	8022000 <st_int8_copy+0x98>
 8022016:	f01c 0f08 	tst.w	ip, #8
 802201a:	d004      	beq.n	8022026 <st_int8_copy+0xbe>
 802201c:	f850 3b04 	ldr.w	r3, [r0], #4
 8022020:	f850 4b04 	ldr.w	r4, [r0], #4
 8022024:	c118      	stmia	r1!, {r3, r4}
 8022026:	f01c 0f04 	tst.w	ip, #4
 802202a:	d003      	beq.n	8022034 <st_int8_copy+0xcc>
 802202c:	f850 3b04 	ldr.w	r3, [r0], #4
 8022030:	f841 3b04 	str.w	r3, [r1], #4
 8022034:	f01c 0f02 	tst.w	ip, #2
 8022038:	d003      	beq.n	8022042 <st_int8_copy+0xda>
 802203a:	f830 3b02 	ldrh.w	r3, [r0], #2
 802203e:	f821 3b02 	strh.w	r3, [r1], #2
 8022042:	f01c 0f01 	tst.w	ip, #1
 8022046:	d001      	beq.n	802204c <st_int8_copy+0xe4>
 8022048:	7803      	ldrb	r3, [r0, #0]
 802204a:	700b      	strb	r3, [r1, #0]
 802204c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8022050:	ea5f 199c 	movs.w	r9, ip, lsr #6
 8022054:	d00e      	beq.n	8022074 <st_int8_copy+0x10c>
 8022056:	4688      	mov	r8, r1
 8022058:	4686      	mov	lr, r0
 802205a:	e8be 00ff 	ldmia.w	lr!, {r0, r1, r2, r3, r4, r5, r6, r7}
 802205e:	e8a8 00ff 	stmia.w	r8!, {r0, r1, r2, r3, r4, r5, r6, r7}
 8022062:	e8be 00ff 	ldmia.w	lr!, {r0, r1, r2, r3, r4, r5, r6, r7}
 8022066:	e8a8 00ff 	stmia.w	r8!, {r0, r1, r2, r3, r4, r5, r6, r7}
 802206a:	f1b9 0901 	subs.w	r9, r9, #1
 802206e:	4641      	mov	r1, r8
 8022070:	4670      	mov	r0, lr
 8022072:	d1f0      	bne.n	8022056 <st_int8_copy+0xee>
 8022074:	f01c 0f20 	tst.w	ip, #32
 8022078:	d007      	beq.n	802208a <st_int8_copy+0x122>
 802207a:	4688      	mov	r8, r1
 802207c:	4686      	mov	lr, r0
 802207e:	e8be 00ff 	ldmia.w	lr!, {r0, r1, r2, r3, r4, r5, r6, r7}
 8022082:	e8a8 00ff 	stmia.w	r8!, {r0, r1, r2, r3, r4, r5, r6, r7}
 8022086:	4641      	mov	r1, r8
 8022088:	4670      	mov	r0, lr
 802208a:	f01c 0f10 	tst.w	ip, #16
 802208e:	d001      	beq.n	8022094 <st_int8_copy+0x12c>
 8022090:	c878      	ldmia	r0!, {r3, r4, r5, r6}
 8022092:	c178      	stmia	r1!, {r3, r4, r5, r6}
 8022094:	f01c 0f08 	tst.w	ip, #8
 8022098:	d0c5      	beq.n	8022026 <st_int8_copy+0xbe>
 802209a:	c818      	ldmia	r0!, {r3, r4}
 802209c:	c118      	stmia	r1!, {r3, r4}
 802209e:	e7c2      	b.n	8022026 <st_int8_copy+0xbe>
 80220a0:	4770      	bx	lr
 80220a2:	bf00      	nop

080220a4 <st_int8_fill>:
 80220a4:	fa5f fc80 	uxtb.w	ip, r0
 80220a8:	0203      	lsls	r3, r0, #8
 80220aa:	b29b      	uxth	r3, r3
 80220ac:	ea4c 6c00 	orr.w	ip, ip, r0, lsl #24
 80220b0:	ea4c 0c03 	orr.w	ip, ip, r3
 80220b4:	0403      	lsls	r3, r0, #16
 80220b6:	b410      	push	{r4}
 80220b8:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80220bc:	078c      	lsls	r4, r1, #30
 80220be:	ea4c 0c03 	orr.w	ip, ip, r3
 80220c2:	d006      	beq.n	80220d2 <st_int8_fill+0x2e>
 80220c4:	b35a      	cbz	r2, 802211e <st_int8_fill+0x7a>
 80220c6:	f801 0b01 	strb.w	r0, [r1], #1
 80220ca:	078b      	lsls	r3, r1, #30
 80220cc:	f102 32ff 	add.w	r2, r2, #4294967295
 80220d0:	d1f8      	bne.n	80220c4 <st_int8_fill+0x20>
 80220d2:	0913      	lsrs	r3, r2, #4
 80220d4:	f3c2 0481 	ubfx	r4, r2, #2, #2
 80220d8:	f002 0203 	and.w	r2, r2, #3
 80220dc:	b14b      	cbz	r3, 80220f2 <st_int8_fill+0x4e>
 80220de:	f841 cb04 	str.w	ip, [r1], #4
 80220e2:	f841 cb04 	str.w	ip, [r1], #4
 80220e6:	f841 cb04 	str.w	ip, [r1], #4
 80220ea:	f841 cb04 	str.w	ip, [r1], #4
 80220ee:	3b01      	subs	r3, #1
 80220f0:	d1f5      	bne.n	80220de <st_int8_fill+0x3a>
 80220f2:	b14c      	cbz	r4, 8022108 <st_int8_fill+0x64>
 80220f4:	f841 cb04 	str.w	ip, [r1], #4
 80220f8:	2c01      	cmp	r4, #1
 80220fa:	d005      	beq.n	8022108 <st_int8_fill+0x64>
 80220fc:	f841 cb04 	str.w	ip, [r1], #4
 8022100:	2c02      	cmp	r4, #2
 8022102:	d001      	beq.n	8022108 <st_int8_fill+0x64>
 8022104:	f841 cb04 	str.w	ip, [r1], #4
 8022108:	b14a      	cbz	r2, 802211e <st_int8_fill+0x7a>
 802210a:	f801 0b01 	strb.w	r0, [r1], #1
 802210e:	2a01      	cmp	r2, #1
 8022110:	d005      	beq.n	802211e <st_int8_fill+0x7a>
 8022112:	f801 0b01 	strb.w	r0, [r1], #1
 8022116:	2a02      	cmp	r2, #2
 8022118:	d001      	beq.n	802211e <st_int8_fill+0x7a>
 802211a:	f801 0b01 	strb.w	r0, [r1], #1
 802211e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8022122:	4770      	bx	lr

08022124 <st_int8_reordered_no_shift_zero>:
 8022124:	b5f0      	push	{r4, r5, r6, r7, lr}
 8022126:	0897      	lsrs	r7, r2, #2
 8022128:	f9bd 6014 	ldrsh.w	r6, [sp, #20]
 802212c:	d02c      	beq.n	8022188 <st_int8_reordered_no_shift_zero+0x64>
 802212e:	eb00 0587 	add.w	r5, r0, r7, lsl #2
 8022132:	468e      	mov	lr, r1
 8022134:	f850 cb04 	ldr.w	ip, [r0], #4
 8022138:	fa2f f49c 	sxtb16	r4, ip, ror #8
 802213c:	fad4 f403 	ssub16	r4, r4, r3
 8022140:	fa2f fc8c 	sxtb16	ip, ip
 8022144:	fadc fc03 	ssub16	ip, ip, r3
 8022148:	4285      	cmp	r5, r0
 802214a:	f8ce c000 	str.w	ip, [lr]
 802214e:	f8ce 4004 	str.w	r4, [lr, #4]
 8022152:	f10e 0e08 	add.w	lr, lr, #8
 8022156:	d1ed      	bne.n	8022134 <st_int8_reordered_no_shift_zero+0x10>
 8022158:	eb01 01c7 	add.w	r1, r1, r7, lsl #3
 802215c:	f012 0203 	ands.w	r2, r2, #3
 8022160:	d011      	beq.n	8022186 <st_int8_reordered_no_shift_zero+0x62>
 8022162:	f995 0000 	ldrsb.w	r0, [r5]
 8022166:	b273      	sxtb	r3, r6
 8022168:	1ac0      	subs	r0, r0, r3
 802216a:	2a01      	cmp	r2, #1
 802216c:	8008      	strh	r0, [r1, #0]
 802216e:	d00a      	beq.n	8022186 <st_int8_reordered_no_shift_zero+0x62>
 8022170:	f995 0001 	ldrsb.w	r0, [r5, #1]
 8022174:	2a02      	cmp	r2, #2
 8022176:	eba0 0003 	sub.w	r0, r0, r3
 802217a:	8048      	strh	r0, [r1, #2]
 802217c:	d003      	beq.n	8022186 <st_int8_reordered_no_shift_zero+0x62>
 802217e:	f995 2002 	ldrsb.w	r2, [r5, #2]
 8022182:	1ad3      	subs	r3, r2, r3
 8022184:	808b      	strh	r3, [r1, #4]
 8022186:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8022188:	4605      	mov	r5, r0
 802218a:	e7e7      	b.n	802215c <st_int8_reordered_no_shift_zero+0x38>

0802218c <st_sssa8_ch_nn_mat_mult_kernel_single_opt>:
 802218c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022190:	b093      	sub	sp, #76	@ 0x4c
 8022192:	e9cd 0101 	strd	r0, r1, [sp, #4]
 8022196:	f8bd c074 	ldrh.w	ip, [sp, #116]	@ 0x74
 802219a:	930f      	str	r3, [sp, #60]	@ 0x3c
 802219c:	4611      	mov	r1, r2
 802219e:	f89d 2088 	ldrb.w	r2, [sp, #136]	@ 0x88
 80221a2:	f8bd e078 	ldrh.w	lr, [sp, #120]	@ 0x78
 80221a6:	9c23      	ldr	r4, [sp, #140]	@ 0x8c
 80221a8:	ea4f 035c 	mov.w	r3, ip, lsr #1
 80221ac:	2a00      	cmp	r2, #0
 80221ae:	f000 816d 	beq.w	802248c <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x300>
 80221b2:	981c      	ldr	r0, [sp, #112]	@ 0x70
 80221b4:	b280      	uxth	r0, r0
 80221b6:	eb04 0b00 	add.w	fp, r4, r0
 80221ba:	2b00      	cmp	r3, #0
 80221bc:	f000 80d1 	beq.w	8022362 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x1d6>
 80221c0:	0040      	lsls	r0, r0, #1
 80221c2:	9004      	str	r0, [sp, #16]
 80221c4:	ea4f 009e 	mov.w	r0, lr, lsr #2
 80221c8:	4605      	mov	r5, r0
 80221ca:	f00e 0003 	and.w	r0, lr, #3
 80221ce:	9005      	str	r0, [sp, #20]
 80221d0:	9820      	ldr	r0, [sp, #128]	@ 0x80
 80221d2:	9503      	str	r5, [sp, #12]
 80221d4:	f100 0908 	add.w	r9, r0, #8
 80221d8:	9821      	ldr	r0, [sp, #132]	@ 0x84
 80221da:	930a      	str	r3, [sp, #40]	@ 0x28
 80221dc:	f100 0808 	add.w	r8, r0, #8
 80221e0:	0128      	lsls	r0, r5, #4
 80221e2:	9007      	str	r0, [sp, #28]
 80221e4:	e9dd 5002 	ldrd	r5, r0, [sp, #8]
 80221e8:	1e5e      	subs	r6, r3, #1
 80221ea:	eb05 00c0 	add.w	r0, r5, r0, lsl #3
 80221ee:	f101 0710 	add.w	r7, r1, #16
 80221f2:	b2b6      	uxth	r6, r6
 80221f4:	9008      	str	r0, [sp, #32]
 80221f6:	9805      	ldr	r0, [sp, #20]
 80221f8:	9d01      	ldr	r5, [sp, #4]
 80221fa:	9423      	str	r4, [sp, #140]	@ 0x8c
 80221fc:	eb07 06c6 	add.w	r6, r7, r6, lsl #3
 8022200:	e9cd 1c0b 	strd	r1, ip, [sp, #44]	@ 0x2c
 8022204:	9f1f      	ldr	r7, [sp, #124]	@ 0x7c
 8022206:	9606      	str	r6, [sp, #24]
 8022208:	e9cd e20d 	strd	lr, r2, [sp, #52]	@ 0x34
 802220c:	0080      	lsls	r0, r0, #2
 802220e:	f101 0608 	add.w	r6, r1, #8
 8022212:	3704      	adds	r7, #4
 8022214:	9009      	str	r0, [sp, #36]	@ 0x24
 8022216:	46a2      	mov	sl, r4
 8022218:	f856 3c08 	ldr.w	r3, [r6, #-8]
 802221c:	9311      	str	r3, [sp, #68]	@ 0x44
 802221e:	9c03      	ldr	r4, [sp, #12]
 8022220:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8022224:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8022226:	9311      	str	r3, [sp, #68]	@ 0x44
 8022228:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 802222a:	2c00      	cmp	r4, #0
 802222c:	f000 812c 	beq.w	8022488 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x2fc>
 8022230:	9802      	ldr	r0, [sp, #8]
 8022232:	9601      	str	r6, [sp, #4]
 8022234:	46a6      	mov	lr, r4
 8022236:	462b      	mov	r3, r5
 8022238:	460c      	mov	r4, r1
 802223a:	4616      	mov	r6, r2
 802223c:	f8d0 c000 	ldr.w	ip, [r0]
 8022240:	6819      	ldr	r1, [r3, #0]
 8022242:	fb21 410c 	smlad	r1, r1, ip, r4
 8022246:	685a      	ldr	r2, [r3, #4]
 8022248:	fb22 620c 	smlad	r2, r2, ip, r6
 802224c:	f8d0 c004 	ldr.w	ip, [r0, #4]
 8022250:	689c      	ldr	r4, [r3, #8]
 8022252:	68de      	ldr	r6, [r3, #12]
 8022254:	3008      	adds	r0, #8
 8022256:	3310      	adds	r3, #16
 8022258:	fb24 140c 	smlad	r4, r4, ip, r1
 802225c:	fb26 260c 	smlad	r6, r6, ip, r2
 8022260:	f1be 0e01 	subs.w	lr, lr, #1
 8022264:	d1ea      	bne.n	802223c <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0xb0>
 8022266:	9b07      	ldr	r3, [sp, #28]
 8022268:	4632      	mov	r2, r6
 802226a:	441d      	add	r5, r3
 802226c:	9e01      	ldr	r6, [sp, #4]
 802226e:	9b08      	ldr	r3, [sp, #32]
 8022270:	4621      	mov	r1, r4
 8022272:	9c05      	ldr	r4, [sp, #20]
 8022274:	b30c      	cbz	r4, 80222ba <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x12e>
 8022276:	f9b3 0000 	ldrsh.w	r0, [r3]
 802227a:	f8b5 c000 	ldrh.w	ip, [r5]
 802227e:	fb10 110c 	smlabb	r1, r0, ip, r1
 8022282:	f8b5 c002 	ldrh.w	ip, [r5, #2]
 8022286:	2c01      	cmp	r4, #1
 8022288:	fb1c 2200 	smlabb	r2, ip, r0, r2
 802228c:	d013      	beq.n	80222b6 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x12a>
 802228e:	f9b3 0002 	ldrsh.w	r0, [r3, #2]
 8022292:	f8b5 c004 	ldrh.w	ip, [r5, #4]
 8022296:	fb10 110c 	smlabb	r1, r0, ip, r1
 802229a:	f8b5 c006 	ldrh.w	ip, [r5, #6]
 802229e:	2c02      	cmp	r4, #2
 80222a0:	fb1c 2200 	smlabb	r2, ip, r0, r2
 80222a4:	d007      	beq.n	80222b6 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x12a>
 80222a6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80222aa:	8928      	ldrh	r0, [r5, #8]
 80222ac:	fb10 1103 	smlabb	r1, r0, r3, r1
 80222b0:	8968      	ldrh	r0, [r5, #10]
 80222b2:	fb13 2200 	smlabb	r2, r3, r0, r2
 80222b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80222b8:	441d      	add	r5, r3
 80222ba:	f937 0c04 	ldrsh.w	r0, [r7, #-4]
 80222be:	f859 ec08 	ldr.w	lr, [r9, #-8]
 80222c2:	f858 cc08 	ldr.w	ip, [r8, #-8]
 80222c6:	2815      	cmp	r0, #21
 80222c8:	f340 80a3 	ble.w	8022412 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x286>
 80222cc:	1e83      	subs	r3, r0, #2
 80222ce:	2401      	movs	r4, #1
 80222d0:	3801      	subs	r0, #1
 80222d2:	fa04 f303 	lsl.w	r3, r4, r3
 80222d6:	fb51 330e 	smmla	r3, r1, lr, r3
 80222da:	4103      	asrs	r3, r0
 80222dc:	4463      	add	r3, ip
 80222de:	f303 0307 	ssat	r3, #8, r3
 80222e2:	b25b      	sxtb	r3, r3
 80222e4:	f88a 3000 	strb.w	r3, [sl]
 80222e8:	f937 0c02 	ldrsh.w	r0, [r7, #-2]
 80222ec:	2815      	cmp	r0, #21
 80222ee:	f340 80a0 	ble.w	8022432 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x2a6>
 80222f2:	f858 3c04 	ldr.w	r3, [r8, #-4]
 80222f6:	1e81      	subs	r1, r0, #2
 80222f8:	2401      	movs	r4, #1
 80222fa:	3801      	subs	r0, #1
 80222fc:	fa04 f101 	lsl.w	r1, r4, r1
 8022300:	f859 4c04 	ldr.w	r4, [r9, #-4]
 8022304:	fb52 1204 	smmla	r2, r2, r4, r1
 8022308:	4102      	asrs	r2, r0
 802230a:	4413      	add	r3, r2
 802230c:	f303 0307 	ssat	r3, #8, r3
 8022310:	b25b      	sxtb	r3, r3
 8022312:	f88b 3000 	strb.w	r3, [fp]
 8022316:	9b04      	ldr	r3, [sp, #16]
 8022318:	449a      	add	sl, r3
 802231a:	449b      	add	fp, r3
 802231c:	9b06      	ldr	r3, [sp, #24]
 802231e:	3608      	adds	r6, #8
 8022320:	429e      	cmp	r6, r3
 8022322:	f107 0704 	add.w	r7, r7, #4
 8022326:	f109 0908 	add.w	r9, r9, #8
 802232a:	f108 0808 	add.w	r8, r8, #8
 802232e:	f47f af73 	bne.w	8022218 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x8c>
 8022332:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8022334:	9804      	ldr	r0, [sp, #16]
 8022336:	9c23      	ldr	r4, [sp, #140]	@ 0x8c
 8022338:	9501      	str	r5, [sp, #4]
 802233a:	fb03 4400 	mla	r4, r3, r0, r4
 802233e:	981f      	ldr	r0, [sp, #124]	@ 0x7c
 8022340:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8022344:	901f      	str	r0, [sp, #124]	@ 0x7c
 8022346:	9820      	ldr	r0, [sp, #128]	@ 0x80
 8022348:	e9dd 1c0b 	ldrd	r1, ip, [sp, #44]	@ 0x2c
 802234c:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
 8022350:	9020      	str	r0, [sp, #128]	@ 0x80
 8022352:	9821      	ldr	r0, [sp, #132]	@ 0x84
 8022354:	e9dd e20d 	ldrd	lr, r2, [sp, #52]	@ 0x34
 8022358:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 802235c:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 8022360:	9321      	str	r3, [sp, #132]	@ 0x84
 8022362:	f01c 0f01 	tst.w	ip, #1
 8022366:	d049      	beq.n	80223fc <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x270>
 8022368:	ea5f 089e 	movs.w	r8, lr, lsr #2
 802236c:	680b      	ldr	r3, [r1, #0]
 802236e:	f000 80ac 	beq.w	80224ca <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x33e>
 8022372:	9d01      	ldr	r5, [sp, #4]
 8022374:	9802      	ldr	r0, [sp, #8]
 8022376:	ea4f 07c8 	mov.w	r7, r8, lsl #3
 802237a:	eb05 08c8 	add.w	r8, r5, r8, lsl #3
 802237e:	682e      	ldr	r6, [r5, #0]
 8022380:	6869      	ldr	r1, [r5, #4]
 8022382:	f8d0 9000 	ldr.w	r9, [r0]
 8022386:	3508      	adds	r5, #8
 8022388:	fb26 3309 	smlad	r3, r6, r9, r3
 802238c:	6846      	ldr	r6, [r0, #4]
 802238e:	3008      	adds	r0, #8
 8022390:	fb21 3306 	smlad	r3, r1, r6, r3
 8022394:	45a8      	cmp	r8, r5
 8022396:	d1f2      	bne.n	802237e <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x1f2>
 8022398:	9902      	ldr	r1, [sp, #8]
 802239a:	4439      	add	r1, r7
 802239c:	9102      	str	r1, [sp, #8]
 802239e:	f01e 0103 	ands.w	r1, lr, #3
 80223a2:	d013      	beq.n	80223cc <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x240>
 80223a4:	9e02      	ldr	r6, [sp, #8]
 80223a6:	f8b8 0000 	ldrh.w	r0, [r8]
 80223aa:	8835      	ldrh	r5, [r6, #0]
 80223ac:	2901      	cmp	r1, #1
 80223ae:	fb15 3300 	smlabb	r3, r5, r0, r3
 80223b2:	d00b      	beq.n	80223cc <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x240>
 80223b4:	8875      	ldrh	r5, [r6, #2]
 80223b6:	f8b8 0002 	ldrh.w	r0, [r8, #2]
 80223ba:	2902      	cmp	r1, #2
 80223bc:	fb15 3300 	smlabb	r3, r5, r0, r3
 80223c0:	d004      	beq.n	80223cc <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x240>
 80223c2:	f8b8 0004 	ldrh.w	r0, [r8, #4]
 80223c6:	88b1      	ldrh	r1, [r6, #4]
 80223c8:	fb10 3301 	smlabb	r3, r0, r1, r3
 80223cc:	991f      	ldr	r1, [sp, #124]	@ 0x7c
 80223ce:	9820      	ldr	r0, [sp, #128]	@ 0x80
 80223d0:	f9b1 1000 	ldrsh.w	r1, [r1]
 80223d4:	6805      	ldr	r5, [r0, #0]
 80223d6:	9821      	ldr	r0, [sp, #132]	@ 0x84
 80223d8:	2915      	cmp	r1, #21
 80223da:	6800      	ldr	r0, [r0, #0]
 80223dc:	dd5f      	ble.n	802249e <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x312>
 80223de:	1e8f      	subs	r7, r1, #2
 80223e0:	1e4e      	subs	r6, r1, #1
 80223e2:	2101      	movs	r1, #1
 80223e4:	40b9      	lsls	r1, r7
 80223e6:	fb53 1305 	smmla	r3, r3, r5, r1
 80223ea:	4133      	asrs	r3, r6
 80223ec:	4403      	add	r3, r0
 80223ee:	f303 0307 	ssat	r3, #8, r3
 80223f2:	b25b      	sxtb	r3, r3
 80223f4:	4621      	mov	r1, r4
 80223f6:	f801 3b01 	strb.w	r3, [r1], #1
 80223fa:	460c      	mov	r4, r1
 80223fc:	2a00      	cmp	r2, #0
 80223fe:	d047      	beq.n	8022490 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x304>
 8022400:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8022402:	fb0c f303 	mul.w	r3, ip, r3
 8022406:	f1c3 0301 	rsb	r3, r3, #1
 802240a:	18e0      	adds	r0, r4, r3
 802240c:	b013      	add	sp, #76	@ 0x4c
 802240e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022412:	2800      	cmp	r0, #0
 8022414:	dd1b      	ble.n	802244e <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x2c2>
 8022416:	004b      	lsls	r3, r1, #1
 8022418:	fb53 c30e 	smmla	r3, r3, lr, ip
 802241c:	4103      	asrs	r3, r0
 802241e:	f303 0307 	ssat	r3, #8, r3
 8022422:	b25b      	sxtb	r3, r3
 8022424:	f88a 3000 	strb.w	r3, [sl]
 8022428:	f937 0c02 	ldrsh.w	r0, [r7, #-2]
 802242c:	2815      	cmp	r0, #21
 802242e:	f73f af60 	bgt.w	80222f2 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x166>
 8022432:	2800      	cmp	r0, #0
 8022434:	dd18      	ble.n	8022468 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x2dc>
 8022436:	f859 3c04 	ldr.w	r3, [r9, #-4]
 802243a:	f858 1c04 	ldr.w	r1, [r8, #-4]
 802243e:	0052      	lsls	r2, r2, #1
 8022440:	fb52 1203 	smmla	r2, r2, r3, r1
 8022444:	4102      	asrs	r2, r0
 8022446:	f302 0307 	ssat	r3, #8, r2
 802244a:	b25b      	sxtb	r3, r3
 802244c:	e761      	b.n	8022312 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x186>
 802244e:	f1c0 0301 	rsb	r3, r0, #1
 8022452:	fa01 f303 	lsl.w	r3, r1, r3
 8022456:	f303 031f 	ssat	r3, #32, r3
 802245a:	fb53 f31e 	smmulr	r3, r3, lr
 802245e:	4463      	add	r3, ip
 8022460:	f303 0307 	ssat	r3, #8, r3
 8022464:	b25b      	sxtb	r3, r3
 8022466:	e73d      	b.n	80222e4 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x158>
 8022468:	f1c0 0001 	rsb	r0, r0, #1
 802246c:	4082      	lsls	r2, r0
 802246e:	f302 021f 	ssat	r2, #32, r2
 8022472:	f859 3c04 	ldr.w	r3, [r9, #-4]
 8022476:	fb52 f213 	smmulr	r2, r2, r3
 802247a:	f858 3c04 	ldr.w	r3, [r8, #-4]
 802247e:	4413      	add	r3, r2
 8022480:	f303 0307 	ssat	r3, #8, r3
 8022484:	b25b      	sxtb	r3, r3
 8022486:	e744      	b.n	8022312 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x186>
 8022488:	9b02      	ldr	r3, [sp, #8]
 802248a:	e6f2      	b.n	8022272 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0xe6>
 802248c:	2001      	movs	r0, #1
 802248e:	e692      	b.n	80221b6 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x2a>
 8022490:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8022492:	eba3 030c 	sub.w	r3, r3, ip
 8022496:	18e0      	adds	r0, r4, r3
 8022498:	b013      	add	sp, #76	@ 0x4c
 802249a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802249e:	2900      	cmp	r1, #0
 80224a0:	dd07      	ble.n	80224b2 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x326>
 80224a2:	005b      	lsls	r3, r3, #1
 80224a4:	fb53 0305 	smmla	r3, r3, r5, r0
 80224a8:	410b      	asrs	r3, r1
 80224aa:	f303 0307 	ssat	r3, #8, r3
 80224ae:	b25b      	sxtb	r3, r3
 80224b0:	e7a0      	b.n	80223f4 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x268>
 80224b2:	f1c1 0101 	rsb	r1, r1, #1
 80224b6:	408b      	lsls	r3, r1
 80224b8:	f303 031f 	ssat	r3, #32, r3
 80224bc:	fb53 f315 	smmulr	r3, r3, r5
 80224c0:	4403      	add	r3, r0
 80224c2:	f303 0307 	ssat	r3, #8, r3
 80224c6:	b25b      	sxtb	r3, r3
 80224c8:	e794      	b.n	80223f4 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x268>
 80224ca:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80224ce:	e766      	b.n	802239e <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x212>

080224d0 <weights_2channels_prefetch>:
 80224d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80224d4:	b087      	sub	sp, #28
 80224d6:	2b00      	cmp	r3, #0
 80224d8:	f8dd 8040 	ldr.w	r8, [sp, #64]	@ 0x40
 80224dc:	9302      	str	r3, [sp, #8]
 80224de:	f340 80ed 	ble.w	80226bc <weights_2channels_prefetch+0x1ec>
 80224e2:	f1a8 0310 	sub.w	r3, r8, #16
 80224e6:	091b      	lsrs	r3, r3, #4
 80224e8:	3301      	adds	r3, #1
 80224ea:	460f      	mov	r7, r1
 80224ec:	0119      	lsls	r1, r3, #4
 80224ee:	019b      	lsls	r3, r3, #6
 80224f0:	4616      	mov	r6, r2
 80224f2:	9304      	str	r3, [sp, #16]
 80224f4:	f1a8 0203 	sub.w	r2, r8, #3
 80224f8:	f04f 0e00 	mov.w	lr, #0
 80224fc:	f1a8 0304 	sub.w	r3, r8, #4
 8022500:	460d      	mov	r5, r1
 8022502:	9203      	str	r2, [sp, #12]
 8022504:	9305      	str	r3, [sp, #20]
 8022506:	4671      	mov	r1, lr
 8022508:	f1b8 0f0f 	cmp.w	r8, #15
 802250c:	f340 80db 	ble.w	80226c6 <weights_2channels_prefetch+0x1f6>
 8022510:	1944      	adds	r4, r0, r5
 8022512:	4633      	mov	r3, r6
 8022514:	463a      	mov	r2, r7
 8022516:	f8d0 e000 	ldr.w	lr, [r0]
 802251a:	f8d2 c000 	ldr.w	ip, [r2]
 802251e:	ea4f 293e 	mov.w	r9, lr, ror #8
 8022522:	fa2f fe8e 	sxtb16	lr, lr
 8022526:	f8c3 e000 	str.w	lr, [r3]
 802252a:	fa2f fe89 	sxtb16	lr, r9
 802252e:	f8c3 e004 	str.w	lr, [r3, #4]
 8022532:	ea4f 2e3c 	mov.w	lr, ip, ror #8
 8022536:	fa2f fc8c 	sxtb16	ip, ip
 802253a:	f8c3 c008 	str.w	ip, [r3, #8]
 802253e:	fa2f fc8e 	sxtb16	ip, lr
 8022542:	f8c3 c00c 	str.w	ip, [r3, #12]
 8022546:	f8d0 e004 	ldr.w	lr, [r0, #4]
 802254a:	f8d2 c004 	ldr.w	ip, [r2, #4]
 802254e:	ea4f 293e 	mov.w	r9, lr, ror #8
 8022552:	fa2f fe8e 	sxtb16	lr, lr
 8022556:	f8c3 e010 	str.w	lr, [r3, #16]
 802255a:	fa2f fe89 	sxtb16	lr, r9
 802255e:	f8c3 e014 	str.w	lr, [r3, #20]
 8022562:	ea4f 2e3c 	mov.w	lr, ip, ror #8
 8022566:	fa2f fc8c 	sxtb16	ip, ip
 802256a:	f8c3 c018 	str.w	ip, [r3, #24]
 802256e:	fa2f fc8e 	sxtb16	ip, lr
 8022572:	f8c3 c01c 	str.w	ip, [r3, #28]
 8022576:	f8d0 e008 	ldr.w	lr, [r0, #8]
 802257a:	f8d2 c008 	ldr.w	ip, [r2, #8]
 802257e:	ea4f 293e 	mov.w	r9, lr, ror #8
 8022582:	fa2f fe8e 	sxtb16	lr, lr
 8022586:	f8c3 e020 	str.w	lr, [r3, #32]
 802258a:	fa2f fe89 	sxtb16	lr, r9
 802258e:	f8c3 e024 	str.w	lr, [r3, #36]	@ 0x24
 8022592:	ea4f 2e3c 	mov.w	lr, ip, ror #8
 8022596:	fa2f fc8c 	sxtb16	ip, ip
 802259a:	f8c3 c028 	str.w	ip, [r3, #40]	@ 0x28
 802259e:	fa2f fc8e 	sxtb16	ip, lr
 80225a2:	f8c3 c02c 	str.w	ip, [r3, #44]	@ 0x2c
 80225a6:	f8d0 e00c 	ldr.w	lr, [r0, #12]
 80225aa:	f8d2 c00c 	ldr.w	ip, [r2, #12]
 80225ae:	3010      	adds	r0, #16
 80225b0:	42a0      	cmp	r0, r4
 80225b2:	ea4f 293e 	mov.w	r9, lr, ror #8
 80225b6:	f102 0210 	add.w	r2, r2, #16
 80225ba:	fa2f fe8e 	sxtb16	lr, lr
 80225be:	f103 0340 	add.w	r3, r3, #64	@ 0x40
 80225c2:	f843 ec10 	str.w	lr, [r3, #-16]
 80225c6:	fa2f fe89 	sxtb16	lr, r9
 80225ca:	f843 ec0c 	str.w	lr, [r3, #-12]
 80225ce:	ea4f 2e3c 	mov.w	lr, ip, ror #8
 80225d2:	fa2f fc8c 	sxtb16	ip, ip
 80225d6:	f843 cc08 	str.w	ip, [r3, #-8]
 80225da:	fa2f fc8e 	sxtb16	ip, lr
 80225de:	f843 cc04 	str.w	ip, [r3, #-4]
 80225e2:	d198      	bne.n	8022516 <weights_2channels_prefetch+0x46>
 80225e4:	9b04      	ldr	r3, [sp, #16]
 80225e6:	442f      	add	r7, r5
 80225e8:	441e      	add	r6, r3
 80225ea:	46ae      	mov	lr, r5
 80225ec:	9b03      	ldr	r3, [sp, #12]
 80225ee:	4573      	cmp	r3, lr
 80225f0:	dd67      	ble.n	80226c2 <weights_2channels_prefetch+0x1f2>
 80225f2:	9b05      	ldr	r3, [sp, #20]
 80225f4:	eba3 090e 	sub.w	r9, r3, lr
 80225f8:	ea4f 0999 	mov.w	r9, r9, lsr #2
 80225fc:	e9cd 1900 	strd	r1, r9, [sp]
 8022600:	f109 0a01 	add.w	sl, r9, #1
 8022604:	ea4f 0b8a 	mov.w	fp, sl, lsl #2
 8022608:	eb04 008a 	add.w	r0, r4, sl, lsl #2
 802260c:	4633      	mov	r3, r6
 802260e:	46bc      	mov	ip, r7
 8022610:	f854 1b04 	ldr.w	r1, [r4], #4
 8022614:	f85c 2b04 	ldr.w	r2, [ip], #4
 8022618:	4284      	cmp	r4, r0
 802261a:	ea4f 2931 	mov.w	r9, r1, ror #8
 802261e:	f103 0310 	add.w	r3, r3, #16
 8022622:	fa2f f181 	sxtb16	r1, r1
 8022626:	fa2f f989 	sxtb16	r9, r9
 802262a:	f843 1c10 	str.w	r1, [r3, #-16]
 802262e:	f843 9c0c 	str.w	r9, [r3, #-12]
 8022632:	ea4f 2132 	mov.w	r1, r2, ror #8
 8022636:	fa2f f282 	sxtb16	r2, r2
 802263a:	fa2f f181 	sxtb16	r1, r1
 802263e:	f843 2c08 	str.w	r2, [r3, #-8]
 8022642:	f843 1c04 	str.w	r1, [r3, #-4]
 8022646:	d1e3      	bne.n	8022610 <weights_2channels_prefetch+0x140>
 8022648:	e9dd 1900 	ldrd	r1, r9, [sp]
 802264c:	f10e 0e04 	add.w	lr, lr, #4
 8022650:	eb06 160a 	add.w	r6, r6, sl, lsl #4
 8022654:	445f      	add	r7, fp
 8022656:	eb0e 0e89 	add.w	lr, lr, r9, lsl #2
 802265a:	45f0      	cmp	r8, lr
 802265c:	dd29      	ble.n	80226b2 <weights_2channels_prefetch+0x1e2>
 802265e:	f990 3000 	ldrsb.w	r3, [r0]
 8022662:	8033      	strh	r3, [r6, #0]
 8022664:	f997 3000 	ldrsb.w	r3, [r7]
 8022668:	8073      	strh	r3, [r6, #2]
 802266a:	f10e 0301 	add.w	r3, lr, #1
 802266e:	4598      	cmp	r8, r3
 8022670:	dd19      	ble.n	80226a6 <weights_2channels_prefetch+0x1d6>
 8022672:	f990 3001 	ldrsb.w	r3, [r0, #1]
 8022676:	80b3      	strh	r3, [r6, #4]
 8022678:	f997 3001 	ldrsb.w	r3, [r7, #1]
 802267c:	80f3      	strh	r3, [r6, #6]
 802267e:	f10e 0302 	add.w	r3, lr, #2
 8022682:	4598      	cmp	r8, r3
 8022684:	dd0f      	ble.n	80226a6 <weights_2channels_prefetch+0x1d6>
 8022686:	f990 3002 	ldrsb.w	r3, [r0, #2]
 802268a:	8133      	strh	r3, [r6, #8]
 802268c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8022690:	8173      	strh	r3, [r6, #10]
 8022692:	f10e 0303 	add.w	r3, lr, #3
 8022696:	4598      	cmp	r8, r3
 8022698:	dd05      	ble.n	80226a6 <weights_2channels_prefetch+0x1d6>
 802269a:	f990 3003 	ldrsb.w	r3, [r0, #3]
 802269e:	81b3      	strh	r3, [r6, #12]
 80226a0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80226a4:	81f3      	strh	r3, [r6, #14]
 80226a6:	eba8 0e0e 	sub.w	lr, r8, lr
 80226aa:	4470      	add	r0, lr
 80226ac:	4477      	add	r7, lr
 80226ae:	eb06 068e 	add.w	r6, r6, lr, lsl #2
 80226b2:	9b02      	ldr	r3, [sp, #8]
 80226b4:	3101      	adds	r1, #1
 80226b6:	428b      	cmp	r3, r1
 80226b8:	f47f af26 	bne.w	8022508 <weights_2channels_prefetch+0x38>
 80226bc:	b007      	add	sp, #28
 80226be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80226c2:	4620      	mov	r0, r4
 80226c4:	e7c9      	b.n	802265a <weights_2channels_prefetch+0x18a>
 80226c6:	4604      	mov	r4, r0
 80226c8:	f04f 0e00 	mov.w	lr, #0
 80226cc:	e78e      	b.n	80225ec <weights_2channels_prefetch+0x11c>
 80226ce:	bf00      	nop

080226d0 <st_sssa8_ch_fullW_prefetch>:
 80226d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80226d4:	b087      	sub	sp, #28
 80226d6:	4680      	mov	r8, r0
 80226d8:	f8dd c040 	ldr.w	ip, [sp, #64]	@ 0x40
 80226dc:	f8dd a044 	ldr.w	sl, [sp, #68]	@ 0x44
 80226e0:	eb00 040c 	add.w	r4, r0, ip
 80226e4:	1048      	asrs	r0, r1, #1
 80226e6:	d021      	beq.n	802272c <st_sssa8_ch_fullW_prefetch+0x5c>
 80226e8:	e9cd 0803 	strd	r0, r8, [sp, #12]
 80226ec:	4646      	mov	r6, r8
 80226ee:	4655      	mov	r5, sl
 80226f0:	ea4f 094c 	mov.w	r9, ip, lsl #1
 80226f4:	ea4f 0b8c 	mov.w	fp, ip, lsl #2
 80226f8:	4607      	mov	r7, r0
 80226fa:	9105      	str	r1, [sp, #20]
 80226fc:	4690      	mov	r8, r2
 80226fe:	469a      	mov	sl, r3
 8022700:	462a      	mov	r2, r5
 8022702:	4621      	mov	r1, r4
 8022704:	4630      	mov	r0, r6
 8022706:	f8cd a000 	str.w	sl, [sp]
 802270a:	4643      	mov	r3, r8
 802270c:	f7ff fee0 	bl	80224d0 <weights_2channels_prefetch>
 8022710:	3f01      	subs	r7, #1
 8022712:	445d      	add	r5, fp
 8022714:	444c      	add	r4, r9
 8022716:	444e      	add	r6, r9
 8022718:	d1f2      	bne.n	8022700 <st_sssa8_ch_fullW_prefetch+0x30>
 802271a:	e9dd 0803 	ldrd	r0, r8, [sp, #12]
 802271e:	e9dd ca10 	ldrd	ip, sl, [sp, #64]	@ 0x40
 8022722:	9905      	ldr	r1, [sp, #20]
 8022724:	fb00 aa0b 	mla	sl, r0, fp, sl
 8022728:	fb00 8809 	mla	r8, r0, r9, r8
 802272c:	07cb      	lsls	r3, r1, #31
 802272e:	d509      	bpl.n	8022744 <st_sssa8_ch_fullW_prefetch+0x74>
 8022730:	f1bc 0f00 	cmp.w	ip, #0
 8022734:	dd06      	ble.n	8022744 <st_sssa8_ch_fullW_prefetch+0x74>
 8022736:	44c4      	add	ip, r8
 8022738:	f918 3b01 	ldrsb.w	r3, [r8], #1
 802273c:	f82a 3b02 	strh.w	r3, [sl], #2
 8022740:	45c4      	cmp	ip, r8
 8022742:	d1f9      	bne.n	8022738 <st_sssa8_ch_fullW_prefetch+0x68>
 8022744:	b007      	add	sp, #28
 8022746:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802274a:	bf00      	nop

0802274c <st_int8_to_f32>:
 802274c:	b530      	push	{r4, r5, lr}
 802274e:	0894      	lsrs	r4, r2, #2
 8022750:	d036      	beq.n	80227c0 <st_int8_to_f32+0x74>
 8022752:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 8022810 <st_int8_to_f32+0xc4>
 8022756:	1d03      	adds	r3, r0, #4
 8022758:	f101 0c10 	add.w	ip, r1, #16
 802275c:	eb00 0084 	add.w	r0, r0, r4, lsl #2
 8022760:	f913 ec04 	ldrsb.w	lr, [r3, #-4]
 8022764:	ee07 ea90 	vmov	s15, lr
 8022768:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 802276c:	469e      	mov	lr, r3
 802276e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8022772:	3304      	adds	r3, #4
 8022774:	ed4c 7a04 	vstr	s15, [ip, #-16]
 8022778:	f913 5c07 	ldrsb.w	r5, [r3, #-7]
 802277c:	ee07 5a90 	vmov	s15, r5
 8022780:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8022784:	4586      	cmp	lr, r0
 8022786:	ee67 7a87 	vmul.f32	s15, s15, s14
 802278a:	f10c 0c10 	add.w	ip, ip, #16
 802278e:	ed4c 7a07 	vstr	s15, [ip, #-28]	@ 0xffffffe4
 8022792:	f913 5c06 	ldrsb.w	r5, [r3, #-6]
 8022796:	ee07 5a90 	vmov	s15, r5
 802279a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 802279e:	ee67 7a87 	vmul.f32	s15, s15, s14
 80227a2:	ed4c 7a06 	vstr	s15, [ip, #-24]	@ 0xffffffe8
 80227a6:	f913 5c05 	ldrsb.w	r5, [r3, #-5]
 80227aa:	ee07 5a90 	vmov	s15, r5
 80227ae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80227b2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80227b6:	ed4c 7a05 	vstr	s15, [ip, #-20]	@ 0xffffffec
 80227ba:	d1d1      	bne.n	8022760 <st_int8_to_f32+0x14>
 80227bc:	eb01 1104 	add.w	r1, r1, r4, lsl #4
 80227c0:	f012 0203 	ands.w	r2, r2, #3
 80227c4:	d023      	beq.n	802280e <st_int8_to_f32+0xc2>
 80227c6:	f990 3000 	ldrsb.w	r3, [r0]
 80227ca:	ed9f 7a11 	vldr	s14, [pc, #68]	@ 8022810 <st_int8_to_f32+0xc4>
 80227ce:	ee07 3a90 	vmov	s15, r3
 80227d2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80227d6:	2a01      	cmp	r2, #1
 80227d8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80227dc:	edc1 7a00 	vstr	s15, [r1]
 80227e0:	d015      	beq.n	802280e <st_int8_to_f32+0xc2>
 80227e2:	f990 3001 	ldrsb.w	r3, [r0, #1]
 80227e6:	ee07 3a90 	vmov	s15, r3
 80227ea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80227ee:	2a02      	cmp	r2, #2
 80227f0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80227f4:	edc1 7a01 	vstr	s15, [r1, #4]
 80227f8:	d009      	beq.n	802280e <st_int8_to_f32+0xc2>
 80227fa:	f990 3002 	ldrsb.w	r3, [r0, #2]
 80227fe:	ee07 3a90 	vmov	s15, r3
 8022802:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8022806:	ee67 7a87 	vmul.f32	s15, s15, s14
 802280a:	edc1 7a02 	vstr	s15, [r1, #8]
 802280e:	bd30      	pop	{r4, r5, pc}
 8022810:	3c000000 	.word	0x3c000000
	...

08022820 <st_sssa8_dense_loop>:
 8022820:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022824:	b086      	sub	sp, #24
 8022826:	bf00      	nop
 8022828:	bf00      	nop
 802282a:	f8dd b048 	ldr.w	fp, [sp, #72]	@ 0x48
 802282e:	f1bb 0f00 	cmp.w	fp, #0
 8022832:	bfcc      	ite	gt
 8022834:	f04f 0c00 	movgt.w	ip, #0
 8022838:	f04f 3cff 	movle.w	ip, #4294967295
 802283c:	f1bb 0f15 	cmp.w	fp, #21
 8022840:	bfc8      	it	gt
 8022842:	f04f 0c01 	movgt.w	ip, #1
 8022846:	f8cd c000 	str.w	ip, [sp]
 802284a:	9001      	str	r0, [sp, #4]
 802284c:	4692      	mov	sl, r2
 802284e:	4699      	mov	r9, r3
 8022850:	f8cd 9014 	str.w	r9, [sp, #20]
 8022854:	f8dd b04c 	ldr.w	fp, [sp, #76]	@ 0x4c
 8022858:	460f      	mov	r7, r1
 802285a:	ea4f 06aa 	mov.w	r6, sl, asr #2
 802285e:	9603      	str	r6, [sp, #12]
 8022860:	f00a 0603 	and.w	r6, sl, #3
 8022864:	9604      	str	r6, [sp, #16]
 8022866:	f8bd 403c 	ldrh.w	r4, [sp, #60]	@ 0x3c
 802286a:	eb0b 0284 	add.w	r2, fp, r4, lsl #2
 802286e:	eb02 0244 	add.w	r2, r2, r4, lsl #1
 8022872:	9202      	str	r2, [sp, #8]
 8022874:	2c00      	cmp	r4, #0
 8022876:	f000 8132 	beq.w	8022ade <Exit>

0802287a <MainLoop>:
 802287a:	9e03      	ldr	r6, [sp, #12]
 802287c:	f8dd e014 	ldr.w	lr, [sp, #20]
 8022880:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8022884:	e8be 003f 	ldmia.w	lr!, {r0, r1, r2, r3, r4, r5}
 8022888:	f8cd e014 	str.w	lr, [sp, #20]
 802288c:	3e01      	subs	r6, #1
 802288e:	dd7d      	ble.n	802298c <FinalLoop>

08022890 <Loop4>:
 8022890:	f857 eb04 	ldr.w	lr, [r7], #4
 8022894:	e8b8 0600 	ldmia.w	r8!, {r9, sl}
 8022898:	fa2f fc9e 	sxtb16	ip, lr, ror #8
 802289c:	fa2f fe8e 	sxtb16	lr, lr
 80228a0:	fb2c 000a 	smlad	r0, ip, sl, r0
 80228a4:	fb2e 0009 	smlad	r0, lr, r9, r0
 80228a8:	f857 eb04 	ldr.w	lr, [r7], #4
 80228ac:	fa2f fc9e 	sxtb16	ip, lr, ror #8
 80228b0:	fa2f fe8e 	sxtb16	lr, lr
 80228b4:	fb2c 110a 	smlad	r1, ip, sl, r1
 80228b8:	fb2e 1109 	smlad	r1, lr, r9, r1
 80228bc:	f857 eb04 	ldr.w	lr, [r7], #4
 80228c0:	fa2f fc9e 	sxtb16	ip, lr, ror #8
 80228c4:	fa2f fe8e 	sxtb16	lr, lr
 80228c8:	fb2c 220a 	smlad	r2, ip, sl, r2
 80228cc:	fb2e 2209 	smlad	r2, lr, r9, r2
 80228d0:	f857 eb04 	ldr.w	lr, [r7], #4
 80228d4:	fa2f fc9e 	sxtb16	ip, lr, ror #8
 80228d8:	fa2f fe8e 	sxtb16	lr, lr
 80228dc:	fb2c 330a 	smlad	r3, ip, sl, r3
 80228e0:	fb2e 3309 	smlad	r3, lr, r9, r3
 80228e4:	f857 eb04 	ldr.w	lr, [r7], #4
 80228e8:	fa2f fc9e 	sxtb16	ip, lr, ror #8
 80228ec:	fa2f fe8e 	sxtb16	lr, lr
 80228f0:	fb2c 440a 	smlad	r4, ip, sl, r4
 80228f4:	fb2e 4409 	smlad	r4, lr, r9, r4
 80228f8:	f857 eb04 	ldr.w	lr, [r7], #4
 80228fc:	fa2f fc9e 	sxtb16	ip, lr, ror #8
 8022900:	fa2f fe8e 	sxtb16	lr, lr
 8022904:	fb2c 550a 	smlad	r5, ip, sl, r5
 8022908:	fb2e 5509 	smlad	r5, lr, r9, r5
 802290c:	f857 eb04 	ldr.w	lr, [r7], #4
 8022910:	e8b8 0600 	ldmia.w	r8!, {r9, sl}
 8022914:	fa2f fc9e 	sxtb16	ip, lr, ror #8
 8022918:	fa2f fe8e 	sxtb16	lr, lr
 802291c:	fb2c 000a 	smlad	r0, ip, sl, r0
 8022920:	fb2e 0009 	smlad	r0, lr, r9, r0
 8022924:	f857 eb04 	ldr.w	lr, [r7], #4
 8022928:	fa2f fc9e 	sxtb16	ip, lr, ror #8
 802292c:	fa2f fe8e 	sxtb16	lr, lr
 8022930:	fb2c 110a 	smlad	r1, ip, sl, r1
 8022934:	fb2e 1109 	smlad	r1, lr, r9, r1
 8022938:	f857 eb04 	ldr.w	lr, [r7], #4
 802293c:	fa2f fc9e 	sxtb16	ip, lr, ror #8
 8022940:	fa2f fe8e 	sxtb16	lr, lr
 8022944:	fb2c 220a 	smlad	r2, ip, sl, r2
 8022948:	fb2e 2209 	smlad	r2, lr, r9, r2
 802294c:	f857 eb04 	ldr.w	lr, [r7], #4
 8022950:	fa2f fc9e 	sxtb16	ip, lr, ror #8
 8022954:	fa2f fe8e 	sxtb16	lr, lr
 8022958:	fb2c 330a 	smlad	r3, ip, sl, r3
 802295c:	fb2e 3309 	smlad	r3, lr, r9, r3
 8022960:	f857 eb04 	ldr.w	lr, [r7], #4
 8022964:	fa2f fc9e 	sxtb16	ip, lr, ror #8
 8022968:	fa2f fe8e 	sxtb16	lr, lr
 802296c:	fb2c 440a 	smlad	r4, ip, sl, r4
 8022970:	fb2e 4409 	smlad	r4, lr, r9, r4
 8022974:	f857 eb04 	ldr.w	lr, [r7], #4
 8022978:	fa2f fc9e 	sxtb16	ip, lr, ror #8
 802297c:	fa2f fe8e 	sxtb16	lr, lr
 8022980:	fb2c 550a 	smlad	r5, ip, sl, r5
 8022984:	fb2e 5509 	smlad	r5, lr, r9, r5
 8022988:	3e02      	subs	r6, #2
 802298a:	dc81      	bgt.n	8022890 <Loop4>

0802298c <FinalLoop>:
 802298c:	2e00      	cmp	r6, #0
 802298e:	db3d      	blt.n	8022a0c <EndLoop4>
 8022990:	f857 eb04 	ldr.w	lr, [r7], #4
 8022994:	e8b8 0600 	ldmia.w	r8!, {r9, sl}
 8022998:	fa2f fc9e 	sxtb16	ip, lr, ror #8
 802299c:	fa2f fe8e 	sxtb16	lr, lr
 80229a0:	fb2c 000a 	smlad	r0, ip, sl, r0
 80229a4:	fb2e 0009 	smlad	r0, lr, r9, r0
 80229a8:	f857 eb04 	ldr.w	lr, [r7], #4
 80229ac:	fa2f fc9e 	sxtb16	ip, lr, ror #8
 80229b0:	fa2f fe8e 	sxtb16	lr, lr
 80229b4:	fb2c 110a 	smlad	r1, ip, sl, r1
 80229b8:	fb2e 1109 	smlad	r1, lr, r9, r1
 80229bc:	f857 eb04 	ldr.w	lr, [r7], #4
 80229c0:	fa2f fc9e 	sxtb16	ip, lr, ror #8
 80229c4:	fa2f fe8e 	sxtb16	lr, lr
 80229c8:	fb2c 220a 	smlad	r2, ip, sl, r2
 80229cc:	fb2e 2209 	smlad	r2, lr, r9, r2
 80229d0:	f857 eb04 	ldr.w	lr, [r7], #4
 80229d4:	fa2f fc9e 	sxtb16	ip, lr, ror #8
 80229d8:	fa2f fe8e 	sxtb16	lr, lr
 80229dc:	fb2c 330a 	smlad	r3, ip, sl, r3
 80229e0:	fb2e 3309 	smlad	r3, lr, r9, r3
 80229e4:	f857 eb04 	ldr.w	lr, [r7], #4
 80229e8:	fa2f fc9e 	sxtb16	ip, lr, ror #8
 80229ec:	fa2f fe8e 	sxtb16	lr, lr
 80229f0:	fb2c 440a 	smlad	r4, ip, sl, r4
 80229f4:	fb2e 4409 	smlad	r4, lr, r9, r4
 80229f8:	f857 eb04 	ldr.w	lr, [r7], #4
 80229fc:	fa2f fc9e 	sxtb16	ip, lr, ror #8
 8022a00:	fa2f fe8e 	sxtb16	lr, lr
 8022a04:	fb2c 550a 	smlad	r5, ip, sl, r5
 8022a08:	fb2e 5509 	smlad	r5, lr, r9, r5

08022a0c <EndLoop4>:
 8022a0c:	9e04      	ldr	r6, [sp, #16]
 8022a0e:	b1ee      	cbz	r6, 8022a4c <OutputFormatting>

08022a10 <Loop1>:
 8022a10:	f938 9b02 	ldrsh.w	r9, [r8], #2
 8022a14:	f997 e000 	ldrsb.w	lr, [r7]
 8022a18:	f997 c001 	ldrsb.w	ip, [r7, #1]
 8022a1c:	fb1e 0009 	smlabb	r0, lr, r9, r0
 8022a20:	fb1c 1109 	smlabb	r1, ip, r9, r1
 8022a24:	f997 e002 	ldrsb.w	lr, [r7, #2]
 8022a28:	f997 c003 	ldrsb.w	ip, [r7, #3]
 8022a2c:	fb1e 2209 	smlabb	r2, lr, r9, r2
 8022a30:	fb1c 3309 	smlabb	r3, ip, r9, r3
 8022a34:	f997 e004 	ldrsb.w	lr, [r7, #4]
 8022a38:	f997 c005 	ldrsb.w	ip, [r7, #5]
 8022a3c:	fb1e 4409 	smlabb	r4, lr, r9, r4
 8022a40:	fb1c 5509 	smlabb	r5, ip, r9, r5
 8022a44:	3e01      	subs	r6, #1
 8022a46:	f107 0706 	add.w	r7, r7, #6
 8022a4a:	d1e1      	bne.n	8022a10 <Loop1>

08022a4c <OutputFormatting>:
 8022a4c:	9e00      	ldr	r6, [sp, #0]
 8022a4e:	f8dd e044 	ldr.w	lr, [sp, #68]	@ 0x44
 8022a52:	f8dd c048 	ldr.w	ip, [sp, #72]	@ 0x48
 8022a56:	f8dd a040 	ldr.w	sl, [sp, #64]	@ 0x40
 8022a5a:	2e00      	cmp	r6, #0
 8022a5c:	d142      	bne.n	8022ae4 <OutputFormatting_ex>
 8022a5e:	ea4f 0040 	mov.w	r0, r0, lsl #1
 8022a62:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8022a66:	fb50 a00e 	smmla	r0, r0, lr, sl
 8022a6a:	fb51 a10e 	smmla	r1, r1, lr, sl
 8022a6e:	fa40 f00c 	asr.w	r0, r0, ip
 8022a72:	fa41 f10c 	asr.w	r1, r1, ip
 8022a76:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8022a7a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8022a7e:	fb52 a20e 	smmla	r2, r2, lr, sl
 8022a82:	fb53 a30e 	smmla	r3, r3, lr, sl
 8022a86:	fa42 f20c 	asr.w	r2, r2, ip
 8022a8a:	fa43 f30c 	asr.w	r3, r3, ip
 8022a8e:	ea4f 0444 	mov.w	r4, r4, lsl #1
 8022a92:	ea4f 0545 	mov.w	r5, r5, lsl #1
 8022a96:	fb54 a40e 	smmla	r4, r4, lr, sl
 8022a9a:	fb55 a50e 	smmla	r5, r5, lr, sl
 8022a9e:	fa44 f40c 	asr.w	r4, r4, ip
 8022aa2:	fa45 f50c 	asr.w	r5, r5, ip

08022aa6 <EndScaling>:
 8022aa6:	f300 0007 	ssat	r0, #8, r0
 8022aaa:	f301 0107 	ssat	r1, #8, r1
 8022aae:	f302 0207 	ssat	r2, #8, r2
 8022ab2:	f303 0307 	ssat	r3, #8, r3
 8022ab6:	f304 0407 	ssat	r4, #8, r4
 8022aba:	f305 0507 	ssat	r5, #8, r5
 8022abe:	f80b 0b01 	strb.w	r0, [fp], #1
 8022ac2:	f80b 1b01 	strb.w	r1, [fp], #1
 8022ac6:	f80b 2b01 	strb.w	r2, [fp], #1
 8022aca:	f80b 3b01 	strb.w	r3, [fp], #1
 8022ace:	f80b 4b01 	strb.w	r4, [fp], #1
 8022ad2:	9b02      	ldr	r3, [sp, #8]
 8022ad4:	f80b 5b01 	strb.w	r5, [fp], #1
 8022ad8:	459b      	cmp	fp, r3
 8022ada:	f47f aece 	bne.w	802287a <MainLoop>

08022ade <Exit>:
 8022ade:	b006      	add	sp, #24
 8022ae0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08022ae4 <OutputFormatting_ex>:
 8022ae4:	f116 0801 	adds.w	r8, r6, #1
 8022ae8:	d03c      	beq.n	8022b64 <OutputFormatting_Neg>
 8022aea:	f04f 0801 	mov.w	r8, #1
 8022aee:	fa08 f80c 	lsl.w	r8, r8, ip
 8022af2:	ea4f 08a8 	mov.w	r8, r8, asr #2
 8022af6:	fb50 800e 	smmla	r0, r0, lr, r8
 8022afa:	ea4f 0040 	mov.w	r0, r0, lsl #1
 8022afe:	fa40 f00c 	asr.w	r0, r0, ip
 8022b02:	4450      	add	r0, sl
 8022b04:	fb51 810e 	smmla	r1, r1, lr, r8
 8022b08:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8022b0c:	fa41 f10c 	asr.w	r1, r1, ip
 8022b10:	4451      	add	r1, sl
 8022b12:	f04f 0801 	mov.w	r8, #1
 8022b16:	fa08 f80c 	lsl.w	r8, r8, ip
 8022b1a:	ea4f 08a8 	mov.w	r8, r8, asr #2
 8022b1e:	fb52 820e 	smmla	r2, r2, lr, r8
 8022b22:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8022b26:	fa42 f20c 	asr.w	r2, r2, ip
 8022b2a:	4452      	add	r2, sl
 8022b2c:	fb53 830e 	smmla	r3, r3, lr, r8
 8022b30:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8022b34:	fa43 f30c 	asr.w	r3, r3, ip
 8022b38:	4453      	add	r3, sl
 8022b3a:	f04f 0801 	mov.w	r8, #1
 8022b3e:	fa08 f80c 	lsl.w	r8, r8, ip
 8022b42:	ea4f 08a8 	mov.w	r8, r8, asr #2
 8022b46:	fb54 840e 	smmla	r4, r4, lr, r8
 8022b4a:	ea4f 0444 	mov.w	r4, r4, lsl #1
 8022b4e:	fa44 f40c 	asr.w	r4, r4, ip
 8022b52:	4454      	add	r4, sl
 8022b54:	fb55 850e 	smmla	r5, r5, lr, r8
 8022b58:	ea4f 0545 	mov.w	r5, r5, lsl #1
 8022b5c:	fa45 f50c 	asr.w	r5, r5, ip
 8022b60:	4455      	add	r5, sl
 8022b62:	e7a0      	b.n	8022aa6 <EndScaling>

08022b64 <OutputFormatting_Neg>:
 8022b64:	f1cc 0801 	rsb	r8, ip, #1
 8022b68:	fa00 f008 	lsl.w	r0, r0, r8
 8022b6c:	f300 001f 	ssat	r0, #32, r0
 8022b70:	fb50 f01e 	smmulr	r0, r0, lr
 8022b74:	fa01 f108 	lsl.w	r1, r1, r8
 8022b78:	f301 011f 	ssat	r1, #32, r1
 8022b7c:	fb51 f11e 	smmulr	r1, r1, lr
 8022b80:	4450      	add	r0, sl
 8022b82:	4451      	add	r1, sl
 8022b84:	f1cc 0801 	rsb	r8, ip, #1
 8022b88:	fa02 f208 	lsl.w	r2, r2, r8
 8022b8c:	f302 021f 	ssat	r2, #32, r2
 8022b90:	fb52 f21e 	smmulr	r2, r2, lr
 8022b94:	fa03 f308 	lsl.w	r3, r3, r8
 8022b98:	f303 031f 	ssat	r3, #32, r3
 8022b9c:	fb53 f31e 	smmulr	r3, r3, lr
 8022ba0:	4452      	add	r2, sl
 8022ba2:	4453      	add	r3, sl
 8022ba4:	f1cc 0801 	rsb	r8, ip, #1
 8022ba8:	fa04 f408 	lsl.w	r4, r4, r8
 8022bac:	f304 041f 	ssat	r4, #32, r4
 8022bb0:	fb54 f41e 	smmulr	r4, r4, lr
 8022bb4:	fa05 f508 	lsl.w	r5, r5, r8
 8022bb8:	f305 051f 	ssat	r5, #32, r5
 8022bbc:	fb55 f51e 	smmulr	r5, r5, lr
 8022bc0:	4454      	add	r4, sl
 8022bc2:	4455      	add	r5, sl
 8022bc4:	e76f      	b.n	8022aa6 <EndScaling>
 8022bc6:	bf00      	nop
 8022bc8:	f3af 8000 	nop.w
 8022bcc:	f3af 8000 	nop.w

08022bd0 <st_sssa8_dense_memopt_loop>:
 8022bd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022bd4:	b087      	sub	sp, #28
 8022bd6:	f8dd b050 	ldr.w	fp, [sp, #80]	@ 0x50
 8022bda:	f1bb 0f00 	cmp.w	fp, #0
 8022bde:	bfcc      	ite	gt
 8022be0:	f04f 0c00 	movgt.w	ip, #0
 8022be4:	f04f 3cff 	movle.w	ip, #4294967295
 8022be8:	f1bb 0f15 	cmp.w	fp, #21
 8022bec:	bfc8      	it	gt
 8022bee:	f04f 0c01 	movgt.w	ip, #1
 8022bf2:	f8cd c000 	str.w	ip, [sp]
 8022bf6:	9001      	str	r0, [sp, #4]
 8022bf8:	4692      	mov	sl, r2
 8022bfa:	4699      	mov	r9, r3
 8022bfc:	f8cd 9014 	str.w	r9, [sp, #20]
 8022c00:	f8dd b054 	ldr.w	fp, [sp, #84]	@ 0x54
 8022c04:	460f      	mov	r7, r1
 8022c06:	f8cd b018 	str.w	fp, [sp, #24]
 8022c0a:	ea4f 06aa 	mov.w	r6, sl, asr #2
 8022c0e:	9603      	str	r6, [sp, #12]
 8022c10:	f00a 0603 	and.w	r6, sl, #3
 8022c14:	9604      	str	r6, [sp, #16]
 8022c16:	f8bd 4040 	ldrh.w	r4, [sp, #64]	@ 0x40
 8022c1a:	eb0b 0284 	add.w	r2, fp, r4, lsl #2
 8022c1e:	eb02 0244 	add.w	r2, r2, r4, lsl #1
 8022c22:	9202      	str	r2, [sp, #8]
 8022c24:	9d12      	ldr	r5, [sp, #72]	@ 0x48
 8022c26:	f1c5 0b00 	rsb	fp, r5, #0
 8022c2a:	eacb 4b0b 	pkhbt	fp, fp, fp, lsl #16
 8022c2e:	2c00      	cmp	r4, #0
 8022c30:	f000 814c 	beq.w	8022ecc <Exit_m>

08022c34 <MainLoop_m>:
 8022c34:	9e03      	ldr	r6, [sp, #12]
 8022c36:	f8dd e014 	ldr.w	lr, [sp, #20]
 8022c3a:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8022c3e:	e8be 003f 	ldmia.w	lr!, {r0, r1, r2, r3, r4, r5}
 8022c42:	f8cd e014 	str.w	lr, [sp, #20]
 8022c46:	3e01      	subs	r6, #1
 8022c48:	f340 808b 	ble.w	8022d62 <FinalLoop_m>

08022c4c <Loop4_m>:
 8022c4c:	f857 eb04 	ldr.w	lr, [r7], #4
 8022c50:	f858 9b04 	ldr.w	r9, [r8], #4
 8022c54:	ea4f 2a39 	mov.w	sl, r9, ror #8
 8022c58:	fa2f fc9e 	sxtb16	ip, lr, ror #8
 8022c5c:	fa2f fe8e 	sxtb16	lr, lr
 8022c60:	fa2b f989 	sxtab16	r9, fp, r9
 8022c64:	fa2b fa8a 	sxtab16	sl, fp, sl
 8022c68:	fb2c 000a 	smlad	r0, ip, sl, r0
 8022c6c:	fb2e 0009 	smlad	r0, lr, r9, r0
 8022c70:	f857 eb04 	ldr.w	lr, [r7], #4
 8022c74:	fa2f fc9e 	sxtb16	ip, lr, ror #8
 8022c78:	fa2f fe8e 	sxtb16	lr, lr
 8022c7c:	fb2c 110a 	smlad	r1, ip, sl, r1
 8022c80:	fb2e 1109 	smlad	r1, lr, r9, r1
 8022c84:	f857 eb04 	ldr.w	lr, [r7], #4
 8022c88:	fa2f fc9e 	sxtb16	ip, lr, ror #8
 8022c8c:	fa2f fe8e 	sxtb16	lr, lr
 8022c90:	fb2c 220a 	smlad	r2, ip, sl, r2
 8022c94:	fb2e 2209 	smlad	r2, lr, r9, r2
 8022c98:	f857 eb04 	ldr.w	lr, [r7], #4
 8022c9c:	fa2f fc9e 	sxtb16	ip, lr, ror #8
 8022ca0:	fa2f fe8e 	sxtb16	lr, lr
 8022ca4:	fb2c 330a 	smlad	r3, ip, sl, r3
 8022ca8:	fb2e 3309 	smlad	r3, lr, r9, r3
 8022cac:	f857 eb04 	ldr.w	lr, [r7], #4
 8022cb0:	fa2f fc9e 	sxtb16	ip, lr, ror #8
 8022cb4:	fa2f fe8e 	sxtb16	lr, lr
 8022cb8:	fb2c 440a 	smlad	r4, ip, sl, r4
 8022cbc:	fb2e 4409 	smlad	r4, lr, r9, r4
 8022cc0:	f857 eb04 	ldr.w	lr, [r7], #4
 8022cc4:	fa2f fc9e 	sxtb16	ip, lr, ror #8
 8022cc8:	fa2f fe8e 	sxtb16	lr, lr
 8022ccc:	fb2c 550a 	smlad	r5, ip, sl, r5
 8022cd0:	fb2e 5509 	smlad	r5, lr, r9, r5
 8022cd4:	f857 eb04 	ldr.w	lr, [r7], #4
 8022cd8:	f858 9b04 	ldr.w	r9, [r8], #4
 8022cdc:	ea4f 2a39 	mov.w	sl, r9, ror #8
 8022ce0:	fa2f fc9e 	sxtb16	ip, lr, ror #8
 8022ce4:	fa2f fe8e 	sxtb16	lr, lr
 8022ce8:	fa2b f989 	sxtab16	r9, fp, r9
 8022cec:	fa2b fa8a 	sxtab16	sl, fp, sl
 8022cf0:	fb2c 000a 	smlad	r0, ip, sl, r0
 8022cf4:	fb2e 0009 	smlad	r0, lr, r9, r0
 8022cf8:	f857 eb04 	ldr.w	lr, [r7], #4
 8022cfc:	fa2f fc9e 	sxtb16	ip, lr, ror #8
 8022d00:	fa2f fe8e 	sxtb16	lr, lr
 8022d04:	fb2c 110a 	smlad	r1, ip, sl, r1
 8022d08:	fb2e 1109 	smlad	r1, lr, r9, r1
 8022d0c:	f857 eb04 	ldr.w	lr, [r7], #4
 8022d10:	fa2f fc9e 	sxtb16	ip, lr, ror #8
 8022d14:	fa2f fe8e 	sxtb16	lr, lr
 8022d18:	fb2c 220a 	smlad	r2, ip, sl, r2
 8022d1c:	fb2e 2209 	smlad	r2, lr, r9, r2
 8022d20:	f857 eb04 	ldr.w	lr, [r7], #4
 8022d24:	fa2f fc9e 	sxtb16	ip, lr, ror #8
 8022d28:	fa2f fe8e 	sxtb16	lr, lr
 8022d2c:	fb2c 330a 	smlad	r3, ip, sl, r3
 8022d30:	fb2e 3309 	smlad	r3, lr, r9, r3
 8022d34:	f857 eb04 	ldr.w	lr, [r7], #4
 8022d38:	fa2f fc9e 	sxtb16	ip, lr, ror #8
 8022d3c:	fa2f fe8e 	sxtb16	lr, lr
 8022d40:	fb2c 440a 	smlad	r4, ip, sl, r4
 8022d44:	fb2e 4409 	smlad	r4, lr, r9, r4
 8022d48:	f857 eb04 	ldr.w	lr, [r7], #4
 8022d4c:	fa2f fc9e 	sxtb16	ip, lr, ror #8
 8022d50:	fa2f fe8e 	sxtb16	lr, lr
 8022d54:	fb2c 550a 	smlad	r5, ip, sl, r5
 8022d58:	fb2e 5509 	smlad	r5, lr, r9, r5
 8022d5c:	3e02      	subs	r6, #2
 8022d5e:	f73f af75 	bgt.w	8022c4c <Loop4_m>

08022d62 <FinalLoop_m>:
 8022d62:	2e00      	cmp	r6, #0
 8022d64:	db43      	blt.n	8022dee <EndLoop4_m>
 8022d66:	f857 eb04 	ldr.w	lr, [r7], #4
 8022d6a:	f858 9b04 	ldr.w	r9, [r8], #4
 8022d6e:	ea4f 2a39 	mov.w	sl, r9, ror #8
 8022d72:	fa2f fc9e 	sxtb16	ip, lr, ror #8
 8022d76:	fa2f fe8e 	sxtb16	lr, lr
 8022d7a:	fa2b f989 	sxtab16	r9, fp, r9
 8022d7e:	fa2b fa8a 	sxtab16	sl, fp, sl
 8022d82:	fb2c 000a 	smlad	r0, ip, sl, r0
 8022d86:	fb2e 0009 	smlad	r0, lr, r9, r0
 8022d8a:	f857 eb04 	ldr.w	lr, [r7], #4
 8022d8e:	fa2f fc9e 	sxtb16	ip, lr, ror #8
 8022d92:	fa2f fe8e 	sxtb16	lr, lr
 8022d96:	fb2c 110a 	smlad	r1, ip, sl, r1
 8022d9a:	fb2e 1109 	smlad	r1, lr, r9, r1
 8022d9e:	f857 eb04 	ldr.w	lr, [r7], #4
 8022da2:	fa2f fc9e 	sxtb16	ip, lr, ror #8
 8022da6:	fa2f fe8e 	sxtb16	lr, lr
 8022daa:	fb2c 220a 	smlad	r2, ip, sl, r2
 8022dae:	fb2e 2209 	smlad	r2, lr, r9, r2
 8022db2:	f857 eb04 	ldr.w	lr, [r7], #4
 8022db6:	fa2f fc9e 	sxtb16	ip, lr, ror #8
 8022dba:	fa2f fe8e 	sxtb16	lr, lr
 8022dbe:	fb2c 330a 	smlad	r3, ip, sl, r3
 8022dc2:	fb2e 3309 	smlad	r3, lr, r9, r3
 8022dc6:	f857 eb04 	ldr.w	lr, [r7], #4
 8022dca:	fa2f fc9e 	sxtb16	ip, lr, ror #8
 8022dce:	fa2f fe8e 	sxtb16	lr, lr
 8022dd2:	fb2c 440a 	smlad	r4, ip, sl, r4
 8022dd6:	fb2e 4409 	smlad	r4, lr, r9, r4
 8022dda:	f857 eb04 	ldr.w	lr, [r7], #4
 8022dde:	fa2f fc9e 	sxtb16	ip, lr, ror #8
 8022de2:	fa2f fe8e 	sxtb16	lr, lr
 8022de6:	fb2c 550a 	smlad	r5, ip, sl, r5
 8022dea:	fb2e 5509 	smlad	r5, lr, r9, r5

08022dee <EndLoop4_m>:
 8022dee:	9e04      	ldr	r6, [sp, #16]
 8022df0:	b30e      	cbz	r6, 8022e36 <OutputFormatting_m>
 8022df2:	f8dd a048 	ldr.w	sl, [sp, #72]	@ 0x48

08022df6 <Loop1_m>:
 8022df6:	f918 9b01 	ldrsb.w	r9, [r8], #1
 8022dfa:	f997 e000 	ldrsb.w	lr, [r7]
 8022dfe:	f997 c001 	ldrsb.w	ip, [r7, #1]
 8022e02:	eba9 090a 	sub.w	r9, r9, sl
 8022e06:	fb1e 0009 	smlabb	r0, lr, r9, r0
 8022e0a:	fb1c 1109 	smlabb	r1, ip, r9, r1
 8022e0e:	f997 e002 	ldrsb.w	lr, [r7, #2]
 8022e12:	f997 c003 	ldrsb.w	ip, [r7, #3]
 8022e16:	fb1e 2209 	smlabb	r2, lr, r9, r2
 8022e1a:	fb1c 3309 	smlabb	r3, ip, r9, r3
 8022e1e:	f997 e004 	ldrsb.w	lr, [r7, #4]
 8022e22:	f997 c005 	ldrsb.w	ip, [r7, #5]
 8022e26:	fb1e 4409 	smlabb	r4, lr, r9, r4
 8022e2a:	fb1c 5509 	smlabb	r5, ip, r9, r5
 8022e2e:	3e01      	subs	r6, #1
 8022e30:	f107 0706 	add.w	r7, r7, #6
 8022e34:	dcdf      	bgt.n	8022df6 <Loop1_m>

08022e36 <OutputFormatting_m>:
 8022e36:	9e00      	ldr	r6, [sp, #0]
 8022e38:	f8dd e04c 	ldr.w	lr, [sp, #76]	@ 0x4c
 8022e3c:	f8dd c050 	ldr.w	ip, [sp, #80]	@ 0x50
 8022e40:	f8dd a044 	ldr.w	sl, [sp, #68]	@ 0x44
 8022e44:	2e00      	cmp	r6, #0
 8022e46:	d144      	bne.n	8022ed2 <OutputFormatting_m_ex>
 8022e48:	ea4f 0040 	mov.w	r0, r0, lsl #1
 8022e4c:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8022e50:	fb50 a00e 	smmla	r0, r0, lr, sl
 8022e54:	fb51 a10e 	smmla	r1, r1, lr, sl
 8022e58:	fa40 f00c 	asr.w	r0, r0, ip
 8022e5c:	fa41 f10c 	asr.w	r1, r1, ip
 8022e60:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8022e64:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8022e68:	fb52 a20e 	smmla	r2, r2, lr, sl
 8022e6c:	fb53 a30e 	smmla	r3, r3, lr, sl
 8022e70:	fa42 f20c 	asr.w	r2, r2, ip
 8022e74:	fa43 f30c 	asr.w	r3, r3, ip
 8022e78:	ea4f 0444 	mov.w	r4, r4, lsl #1
 8022e7c:	ea4f 0545 	mov.w	r5, r5, lsl #1
 8022e80:	fb54 a40e 	smmla	r4, r4, lr, sl
 8022e84:	fb55 a50e 	smmla	r5, r5, lr, sl
 8022e88:	fa44 f40c 	asr.w	r4, r4, ip
 8022e8c:	fa45 f50c 	asr.w	r5, r5, ip

08022e90 <EndScaling_m>:
 8022e90:	9e06      	ldr	r6, [sp, #24]
 8022e92:	f300 0007 	ssat	r0, #8, r0
 8022e96:	f301 0107 	ssat	r1, #8, r1
 8022e9a:	f302 0207 	ssat	r2, #8, r2
 8022e9e:	f303 0307 	ssat	r3, #8, r3
 8022ea2:	f304 0407 	ssat	r4, #8, r4
 8022ea6:	f305 0507 	ssat	r5, #8, r5
 8022eaa:	f806 0b01 	strb.w	r0, [r6], #1
 8022eae:	f806 1b01 	strb.w	r1, [r6], #1
 8022eb2:	f806 2b01 	strb.w	r2, [r6], #1
 8022eb6:	f806 3b01 	strb.w	r3, [r6], #1
 8022eba:	f806 4b01 	strb.w	r4, [r6], #1
 8022ebe:	9b02      	ldr	r3, [sp, #8]
 8022ec0:	f806 5b01 	strb.w	r5, [r6], #1
 8022ec4:	9606      	str	r6, [sp, #24]
 8022ec6:	429e      	cmp	r6, r3
 8022ec8:	f47f aeb4 	bne.w	8022c34 <MainLoop_m>

08022ecc <Exit_m>:
 8022ecc:	b007      	add	sp, #28
 8022ece:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08022ed2 <OutputFormatting_m_ex>:
 8022ed2:	f116 0801 	adds.w	r8, r6, #1
 8022ed6:	d03c      	beq.n	8022f52 <OutputFormatting_m_Neg>
 8022ed8:	f04f 0801 	mov.w	r8, #1
 8022edc:	fa08 f80c 	lsl.w	r8, r8, ip
 8022ee0:	ea4f 08a8 	mov.w	r8, r8, asr #2
 8022ee4:	fb50 800e 	smmla	r0, r0, lr, r8
 8022ee8:	ea4f 0040 	mov.w	r0, r0, lsl #1
 8022eec:	fa40 f00c 	asr.w	r0, r0, ip
 8022ef0:	4450      	add	r0, sl
 8022ef2:	fb51 810e 	smmla	r1, r1, lr, r8
 8022ef6:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8022efa:	fa41 f10c 	asr.w	r1, r1, ip
 8022efe:	4451      	add	r1, sl
 8022f00:	f04f 0801 	mov.w	r8, #1
 8022f04:	fa08 f80c 	lsl.w	r8, r8, ip
 8022f08:	ea4f 08a8 	mov.w	r8, r8, asr #2
 8022f0c:	fb52 820e 	smmla	r2, r2, lr, r8
 8022f10:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8022f14:	fa42 f20c 	asr.w	r2, r2, ip
 8022f18:	4452      	add	r2, sl
 8022f1a:	fb53 830e 	smmla	r3, r3, lr, r8
 8022f1e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8022f22:	fa43 f30c 	asr.w	r3, r3, ip
 8022f26:	4453      	add	r3, sl
 8022f28:	f04f 0801 	mov.w	r8, #1
 8022f2c:	fa08 f80c 	lsl.w	r8, r8, ip
 8022f30:	ea4f 08a8 	mov.w	r8, r8, asr #2
 8022f34:	fb54 840e 	smmla	r4, r4, lr, r8
 8022f38:	ea4f 0444 	mov.w	r4, r4, lsl #1
 8022f3c:	fa44 f40c 	asr.w	r4, r4, ip
 8022f40:	4454      	add	r4, sl
 8022f42:	fb55 850e 	smmla	r5, r5, lr, r8
 8022f46:	ea4f 0545 	mov.w	r5, r5, lsl #1
 8022f4a:	fa45 f50c 	asr.w	r5, r5, ip
 8022f4e:	4455      	add	r5, sl
 8022f50:	e79e      	b.n	8022e90 <EndScaling_m>

08022f52 <OutputFormatting_m_Neg>:
 8022f52:	f1cc 0801 	rsb	r8, ip, #1
 8022f56:	fa00 f008 	lsl.w	r0, r0, r8
 8022f5a:	f300 001f 	ssat	r0, #32, r0
 8022f5e:	fb50 f01e 	smmulr	r0, r0, lr
 8022f62:	fa01 f108 	lsl.w	r1, r1, r8
 8022f66:	f301 011f 	ssat	r1, #32, r1
 8022f6a:	fb51 f11e 	smmulr	r1, r1, lr
 8022f6e:	4450      	add	r0, sl
 8022f70:	4451      	add	r1, sl
 8022f72:	f1cc 0801 	rsb	r8, ip, #1
 8022f76:	fa02 f208 	lsl.w	r2, r2, r8
 8022f7a:	f302 021f 	ssat	r2, #32, r2
 8022f7e:	fb52 f21e 	smmulr	r2, r2, lr
 8022f82:	fa03 f308 	lsl.w	r3, r3, r8
 8022f86:	f303 031f 	ssat	r3, #32, r3
 8022f8a:	fb53 f31e 	smmulr	r3, r3, lr
 8022f8e:	4452      	add	r2, sl
 8022f90:	4453      	add	r3, sl
 8022f92:	f1cc 0801 	rsb	r8, ip, #1
 8022f96:	fa04 f408 	lsl.w	r4, r4, r8
 8022f9a:	f304 041f 	ssat	r4, #32, r4
 8022f9e:	fb54 f41e 	smmulr	r4, r4, lr
 8022fa2:	fa05 f508 	lsl.w	r5, r5, r8
 8022fa6:	f305 051f 	ssat	r5, #32, r5
 8022faa:	fb55 f51e 	smmulr	r5, r5, lr
 8022fae:	4454      	add	r4, sl
 8022fb0:	4455      	add	r5, sl
 8022fb2:	e76d      	b.n	8022e90 <EndScaling_m>
	...

08030000 <st_sssa8_ch_nn_mat_mult_deep_conv2d_3x3>:
 8030000:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8030004:	b0a4      	sub	sp, #144	@ 0x90
 8030006:	9e30      	ldr	r6, [sp, #192]	@ 0xc0
 8030008:	9313      	str	r3, [sp, #76]	@ 0x4c
 803000a:	9b35      	ldr	r3, [sp, #212]	@ 0xd4
 803000c:	9011      	str	r0, [sp, #68]	@ 0x44
 803000e:	9112      	str	r1, [sp, #72]	@ 0x48
 8030010:	9210      	str	r2, [sp, #64]	@ 0x40
 8030012:	f013 0801 	ands.w	r8, r3, #1
 8030016:	f8cd 807c 	str.w	r8, [sp, #124]	@ 0x7c
 803001a:	9c31      	ldr	r4, [sp, #196]	@ 0xc4
 803001c:	9d32      	ldr	r5, [sp, #200]	@ 0xc8
 803001e:	bf1c      	itt	ne
 8030020:	3402      	addne	r4, #2
 8030022:	3502      	addne	r5, #2
 8030024:	fb04 f405 	mul.w	r4, r4, r5
 8030028:	f013 0502 	ands.w	r5, r3, #2
 803002c:	9f2f      	ldr	r7, [sp, #188]	@ 0xbc
 803002e:	951e      	str	r5, [sp, #120]	@ 0x78
 8030030:	f04f 0c01 	mov.w	ip, #1
 8030034:	bf19      	ittee	ne
 8030036:	940b      	strne	r4, [sp, #44]	@ 0x2c
 8030038:	f8cd c028 	strne.w	ip, [sp, #40]	@ 0x28
 803003c:	f8cd c02c 	streq.w	ip, [sp, #44]	@ 0x2c
 8030040:	970a      	streq	r7, [sp, #40]	@ 0x28
 8030042:	f003 0803 	and.w	r8, r3, #3
 8030046:	f1b8 0f03 	cmp.w	r8, #3
 803004a:	bf0c      	ite	eq
 803004c:	2302      	moveq	r3, #2
 803004e:	2300      	movne	r3, #0
 8030050:	930c      	str	r3, [sp, #48]	@ 0x30
 8030052:	2f01      	cmp	r7, #1
 8030054:	f340 820f 	ble.w	8030476 <st_sssa8_ch_nn_mat_mult_deep_conv2d_3x3+0x476>
 8030058:	9d33      	ldr	r5, [sp, #204]	@ 0xcc
 803005a:	eba6 0486 	sub.w	r4, r6, r6, lsl #2
 803005e:	eb05 0304 	add.w	r3, r5, r4
 8030062:	4433      	add	r3, r6
 8030064:	931b      	str	r3, [sp, #108]	@ 0x6c
 8030066:	f1c5 0302 	rsb	r3, r5, #2
 803006a:	eba3 0006 	sub.w	r0, r3, r6
 803006e:	eb04 0c43 	add.w	ip, r4, r3, lsl #1
 8030072:	44b4      	add	ip, r6
 8030074:	f8cd c070 	str.w	ip, [sp, #112]	@ 0x70
 8030078:	f1ac 0c03 	sub.w	ip, ip, #3
 803007c:	f8cd c074 	str.w	ip, [sp, #116]	@ 0x74
 8030080:	f006 0c03 	and.w	ip, r6, #3
 8030084:	f8cd c08c 	str.w	ip, [sp, #140]	@ 0x8c
 8030088:	eb0c 03cc 	add.w	r3, ip, ip, lsl #3
 803008c:	9321      	str	r3, [sp, #132]	@ 0x84
 803008e:	ea4f 03a6 	mov.w	r3, r6, asr #2
 8030092:	eb03 0cc3 	add.w	ip, r3, r3, lsl #3
 8030096:	f8cd c080 	str.w	ip, [sp, #128]	@ 0x80
 803009a:	eb06 0cc6 	add.w	ip, r6, r6, lsl #3
 803009e:	f8cd c088 	str.w	ip, [sp, #136]	@ 0x88
 80300a2:	f8dd b0bc 	ldr.w	fp, [sp, #188]	@ 0xbc
 80300a6:	9b2e      	ldr	r3, [sp, #184]	@ 0xb8
 80300a8:	ea4f 0b5b 	mov.w	fp, fp, lsr #1
 80300ac:	eb03 0c8b 	add.w	ip, r3, fp, lsl #2
 80300b0:	f8cd c058 	str.w	ip, [sp, #88]	@ 0x58
 80300b4:	982e      	ldr	r0, [sp, #184]	@ 0xb8
 80300b6:	992d      	ldr	r1, [sp, #180]	@ 0xb4
 80300b8:	9a37      	ldr	r2, [sp, #220]	@ 0xdc
 80300ba:	900e      	str	r0, [sp, #56]	@ 0x38
 80300bc:	910d      	str	r1, [sp, #52]	@ 0x34
 80300be:	920f      	str	r2, [sp, #60]	@ 0x3c
 80300c0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80300c2:	f9b2 3000 	ldrsh.w	r3, [r2]
 80300c6:	f9b2 4002 	ldrsh.w	r4, [r2, #2]
 80300ca:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80300ce:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80300d0:	e9d2 1200 	ldrd	r1, r2, [r2]
 80300d4:	e9cd 1200 	strd	r1, r2, [sp]
 80300d8:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80300da:	e9d2 1200 	ldrd	r1, r2, [r2]
 80300de:	e9cd 1204 	strd	r1, r2, [sp, #16]
 80300e2:	2b00      	cmp	r3, #0
 80300e4:	bfcc      	ite	gt
 80300e6:	2000      	movgt	r0, #0
 80300e8:	f04f 30ff 	movle.w	r0, #4294967295
 80300ec:	2b15      	cmp	r3, #21
 80300ee:	bfc8      	it	gt
 80300f0:	2001      	movgt	r0, #1
 80300f2:	2c00      	cmp	r4, #0
 80300f4:	bfcc      	ite	gt
 80300f6:	2100      	movgt	r1, #0
 80300f8:	f04f 31ff 	movle.w	r1, #4294967295
 80300fc:	2c15      	cmp	r4, #21
 80300fe:	bfc8      	it	gt
 8030100:	2101      	movgt	r1, #1
 8030102:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8030106:	f000 bc37 	b.w	8030978 <st_sssa8_ch_nn_mat_mult_deep_conv2d_3x3+0x978>
 803010a:	9b34      	ldr	r3, [sp, #208]	@ 0xd0
 803010c:	2b00      	cmp	r3, #0
 803010e:	f040 8404 	bne.w	803091a <st_sssa8_ch_nn_mat_mult_deep_conv2d_3x3+0x91a>
 8030112:	4618      	mov	r0, r3
 8030114:	461a      	mov	r2, r3
 8030116:	9d35      	ldr	r5, [sp, #212]	@ 0xd4
 8030118:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 803011a:	e9d4 1300 	ldrd	r1, r3, [r4]
 803011e:	4403      	add	r3, r0
 8030120:	440a      	add	r2, r1
 8030122:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8030126:	2d03      	cmp	r5, #3
 8030128:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 803012a:	d103      	bne.n	8030134 <st_sssa8_ch_nn_mat_mult_deep_conv2d_3x3+0x134>
 803012c:	9b31      	ldr	r3, [sp, #196]	@ 0xc4
 803012e:	f103 0303 	add.w	r3, r3, #3
 8030132:	441a      	add	r2, r3
 8030134:	9215      	str	r2, [sp, #84]	@ 0x54
 8030136:	f8dd 80c8 	ldr.w	r8, [sp, #200]	@ 0xc8
 803013a:	f1b8 0f00 	cmp.w	r8, #0
 803013e:	f000 817b 	beq.w	8030438 <st_sssa8_ch_nn_mat_mult_deep_conv2d_3x3+0x438>
 8030142:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 8030144:	f8cd 8068 	str.w	r8, [sp, #104]	@ 0x68
 8030148:	9417      	str	r4, [sp, #92]	@ 0x5c
 803014a:	9b31      	ldr	r3, [sp, #196]	@ 0xc4
 803014c:	105b      	asrs	r3, r3, #1
 803014e:	f000 8162 	beq.w	8030416 <st_sssa8_ch_nn_mat_mult_deep_conv2d_3x3+0x416>
 8030152:	9418      	str	r4, [sp, #96]	@ 0x60
 8030154:	9319      	str	r3, [sp, #100]	@ 0x64
 8030156:	9c18      	ldr	r4, [sp, #96]	@ 0x60
 8030158:	9d38      	ldr	r5, [sp, #224]	@ 0xe0
 803015a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 803015e:	4610      	mov	r0, r2
 8030160:	4619      	mov	r1, r3
 8030162:	2e04      	cmp	r6, #4
 8030164:	f340 8101 	ble.w	803036a <st_sssa8_ch_nn_mat_mult_deep_conv2d_3x3+0x36a>
 8030168:	ea4f 0ea6 	mov.w	lr, r6, asr #2
 803016c:	f8d4 8000 	ldr.w	r8, [r4]
 8030170:	e8b5 1e00 	ldmia.w	r5!, {r9, sl, fp, ip}
 8030174:	fa2f f788 	sxtb16	r7, r8
 8030178:	fa2f f898 	sxtb16	r8, r8, ror #8
 803017c:	fb27 330b 	smlad	r3, r7, fp, r3
 8030180:	fb27 2209 	smlad	r2, r7, r9, r2
 8030184:	fb28 220a 	smlad	r2, r8, sl, r2
 8030188:	fb28 330c 	smlad	r3, r8, ip, r3
 803018c:	f854 8006 	ldr.w	r8, [r4, r6]
 8030190:	eb04 0446 	add.w	r4, r4, r6, lsl #1
 8030194:	fa2f f788 	sxtb16	r7, r8
 8030198:	fa2f f898 	sxtb16	r8, r8, ror #8
 803019c:	fb27 110b 	smlad	r1, r7, fp, r1
 80301a0:	fb27 0009 	smlad	r0, r7, r9, r0
 80301a4:	fb28 110c 	smlad	r1, r8, ip, r1
 80301a8:	fb28 000a 	smlad	r0, r8, sl, r0
 80301ac:	e8b5 1e00 	ldmia.w	r5!, {r9, sl, fp, ip}
 80301b0:	fb27 2209 	smlad	r2, r7, r9, r2
 80301b4:	fb27 330b 	smlad	r3, r7, fp, r3
 80301b8:	fb28 220a 	smlad	r2, r8, sl, r2
 80301bc:	fb28 330c 	smlad	r3, r8, ip, r3
 80301c0:	f8d4 8000 	ldr.w	r8, [r4]
 80301c4:	fa2f f788 	sxtb16	r7, r8
 80301c8:	fa2f f898 	sxtb16	r8, r8, ror #8
 80301cc:	fb27 0009 	smlad	r0, r7, r9, r0
 80301d0:	fb27 110b 	smlad	r1, r7, fp, r1
 80301d4:	fb28 000a 	smlad	r0, r8, sl, r0
 80301d8:	fb28 110c 	smlad	r1, r8, ip, r1
 80301dc:	e8b5 1e00 	ldmia.w	r5!, {r9, sl, fp, ip}
 80301e0:	fb27 2209 	smlad	r2, r7, r9, r2
 80301e4:	fb27 330b 	smlad	r3, r7, fp, r3
 80301e8:	fb28 220a 	smlad	r2, r8, sl, r2
 80301ec:	fb28 330c 	smlad	r3, r8, ip, r3
 80301f0:	f854 8006 	ldr.w	r8, [r4, r6]
 80301f4:	fa2f f788 	sxtb16	r7, r8
 80301f8:	fa2f f898 	sxtb16	r8, r8, ror #8
 80301fc:	fb27 0009 	smlad	r0, r7, r9, r0
 8030200:	fb27 110b 	smlad	r1, r7, fp, r1
 8030204:	fb28 000a 	smlad	r0, r8, sl, r0
 8030208:	fb28 110c 	smlad	r1, r8, ip, r1
 803020c:	f8dd 806c 	ldr.w	r8, [sp, #108]	@ 0x6c
 8030210:	4444      	add	r4, r8
 8030212:	bf00      	nop
 8030214:	f8d4 8000 	ldr.w	r8, [r4]
 8030218:	e8b5 1e00 	ldmia.w	r5!, {r9, sl, fp, ip}
 803021c:	fa2f f788 	sxtb16	r7, r8
 8030220:	fa2f f898 	sxtb16	r8, r8, ror #8
 8030224:	fb27 330b 	smlad	r3, r7, fp, r3
 8030228:	fb27 2209 	smlad	r2, r7, r9, r2
 803022c:	fb28 220a 	smlad	r2, r8, sl, r2
 8030230:	fb28 330c 	smlad	r3, r8, ip, r3
 8030234:	f854 8006 	ldr.w	r8, [r4, r6]
 8030238:	eb04 0446 	add.w	r4, r4, r6, lsl #1
 803023c:	fa2f f788 	sxtb16	r7, r8
 8030240:	fa2f f898 	sxtb16	r8, r8, ror #8
 8030244:	fb27 110b 	smlad	r1, r7, fp, r1
 8030248:	fb27 0009 	smlad	r0, r7, r9, r0
 803024c:	fb28 110c 	smlad	r1, r8, ip, r1
 8030250:	fb28 000a 	smlad	r0, r8, sl, r0
 8030254:	e8b5 1e00 	ldmia.w	r5!, {r9, sl, fp, ip}
 8030258:	fb27 2209 	smlad	r2, r7, r9, r2
 803025c:	fb27 330b 	smlad	r3, r7, fp, r3
 8030260:	fb28 220a 	smlad	r2, r8, sl, r2
 8030264:	fb28 330c 	smlad	r3, r8, ip, r3
 8030268:	f8d4 8000 	ldr.w	r8, [r4]
 803026c:	fa2f f788 	sxtb16	r7, r8
 8030270:	fa2f f898 	sxtb16	r8, r8, ror #8
 8030274:	fb27 0009 	smlad	r0, r7, r9, r0
 8030278:	fb27 110b 	smlad	r1, r7, fp, r1
 803027c:	fb28 000a 	smlad	r0, r8, sl, r0
 8030280:	fb28 110c 	smlad	r1, r8, ip, r1
 8030284:	e8b5 1e00 	ldmia.w	r5!, {r9, sl, fp, ip}
 8030288:	fb27 2209 	smlad	r2, r7, r9, r2
 803028c:	fb27 330b 	smlad	r3, r7, fp, r3
 8030290:	fb28 220a 	smlad	r2, r8, sl, r2
 8030294:	fb28 330c 	smlad	r3, r8, ip, r3
 8030298:	f854 8006 	ldr.w	r8, [r4, r6]
 803029c:	fa2f f788 	sxtb16	r7, r8
 80302a0:	fa2f f898 	sxtb16	r8, r8, ror #8
 80302a4:	fb27 0009 	smlad	r0, r7, r9, r0
 80302a8:	fb27 110b 	smlad	r1, r7, fp, r1
 80302ac:	fb28 000a 	smlad	r0, r8, sl, r0
 80302b0:	fb28 110c 	smlad	r1, r8, ip, r1
 80302b4:	f8dd 806c 	ldr.w	r8, [sp, #108]	@ 0x6c
 80302b8:	4444      	add	r4, r8
 80302ba:	bf00      	nop
 80302bc:	f8d4 8000 	ldr.w	r8, [r4]
 80302c0:	e8b5 1e00 	ldmia.w	r5!, {r9, sl, fp, ip}
 80302c4:	fa2f f788 	sxtb16	r7, r8
 80302c8:	fa2f f898 	sxtb16	r8, r8, ror #8
 80302cc:	fb27 330b 	smlad	r3, r7, fp, r3
 80302d0:	fb27 2209 	smlad	r2, r7, r9, r2
 80302d4:	fb28 220a 	smlad	r2, r8, sl, r2
 80302d8:	fb28 330c 	smlad	r3, r8, ip, r3
 80302dc:	f854 8006 	ldr.w	r8, [r4, r6]
 80302e0:	eb04 0446 	add.w	r4, r4, r6, lsl #1
 80302e4:	fa2f f788 	sxtb16	r7, r8
 80302e8:	fa2f f898 	sxtb16	r8, r8, ror #8
 80302ec:	fb27 110b 	smlad	r1, r7, fp, r1
 80302f0:	fb27 0009 	smlad	r0, r7, r9, r0
 80302f4:	fb28 110c 	smlad	r1, r8, ip, r1
 80302f8:	fb28 000a 	smlad	r0, r8, sl, r0
 80302fc:	e8b5 1e00 	ldmia.w	r5!, {r9, sl, fp, ip}
 8030300:	fb27 2209 	smlad	r2, r7, r9, r2
 8030304:	fb27 330b 	smlad	r3, r7, fp, r3
 8030308:	fb28 220a 	smlad	r2, r8, sl, r2
 803030c:	fb28 330c 	smlad	r3, r8, ip, r3
 8030310:	f8d4 8000 	ldr.w	r8, [r4]
 8030314:	fa2f f788 	sxtb16	r7, r8
 8030318:	fa2f f898 	sxtb16	r8, r8, ror #8
 803031c:	fb27 0009 	smlad	r0, r7, r9, r0
 8030320:	fb27 110b 	smlad	r1, r7, fp, r1
 8030324:	fb28 000a 	smlad	r0, r8, sl, r0
 8030328:	fb28 110c 	smlad	r1, r8, ip, r1
 803032c:	e8b5 1e00 	ldmia.w	r5!, {r9, sl, fp, ip}
 8030330:	fb27 2209 	smlad	r2, r7, r9, r2
 8030334:	fb27 330b 	smlad	r3, r7, fp, r3
 8030338:	fb28 220a 	smlad	r2, r8, sl, r2
 803033c:	fb28 330c 	smlad	r3, r8, ip, r3
 8030340:	f854 8006 	ldr.w	r8, [r4, r6]
 8030344:	fa2f f788 	sxtb16	r7, r8
 8030348:	fa2f f898 	sxtb16	r8, r8, ror #8
 803034c:	fb27 0009 	smlad	r0, r7, r9, r0
 8030350:	fb27 110b 	smlad	r1, r7, fp, r1
 8030354:	fb28 000a 	smlad	r0, r8, sl, r0
 8030358:	fb28 110c 	smlad	r1, r8, ip, r1
 803035c:	f8dd 8070 	ldr.w	r8, [sp, #112]	@ 0x70
 8030360:	f1be 0e01 	subs.w	lr, lr, #1
 8030364:	4444      	add	r4, r8
 8030366:	f47f af01 	bne.w	803016c <st_sssa8_ch_nn_mat_mult_deep_conv2d_3x3+0x16c>
 803036a:	f016 0703 	ands.w	r7, r6, #3
 803036e:	f300 80ff 	bgt.w	8030570 <st_sssa8_ch_nn_mat_mult_deep_conv2d_3x3+0x570>
 8030372:	f8dd e010 	ldr.w	lr, [sp, #16]
 8030376:	f8dd a000 	ldr.w	sl, [sp]
 803037a:	f8dd b008 	ldr.w	fp, [sp, #8]
 803037e:	f8dd c018 	ldr.w	ip, [sp, #24]
 8030382:	9d15      	ldr	r5, [sp, #84]	@ 0x54
 8030384:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
 8030386:	f8dd 802c 	ldr.w	r8, [sp, #44]	@ 0x2c
 803038a:	44a8      	add	r8, r5
 803038c:	f1bc 0f00 	cmp.w	ip, #0
 8030390:	f040 832d 	bne.w	80309ee <st_sssa8_ch_nn_mat_mult_deep_conv2d_3x3+0x9ee>
 8030394:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8030398:	ea4f 0040 	mov.w	r0, r0, lsl #1
 803039c:	fb52 e20a 	smmla	r2, r2, sl, lr
 80303a0:	fb50 e00a 	smmla	r0, r0, sl, lr
 80303a4:	fa42 f20b 	asr.w	r2, r2, fp
 80303a8:	fa40 f00b 	asr.w	r0, r0, fp
 80303ac:	f302 0207 	ssat	r2, #8, r2
 80303b0:	f300 0007 	ssat	r0, #8, r0
 80303b4:	702a      	strb	r2, [r5, #0]
 80303b6:	55e8      	strb	r0, [r5, r7]
 80303b8:	f8dd e014 	ldr.w	lr, [sp, #20]
 80303bc:	f8dd a004 	ldr.w	sl, [sp, #4]
 80303c0:	f8dd b00c 	ldr.w	fp, [sp, #12]
 80303c4:	f8dd c01c 	ldr.w	ip, [sp, #28]
 80303c8:	f1bc 0f00 	cmp.w	ip, #0
 80303cc:	f040 8338 	bne.w	8030a40 <st_sssa8_ch_nn_mat_mult_deep_conv2d_3x3+0xa40>
 80303d0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80303d4:	ea4f 0141 	mov.w	r1, r1, lsl #1
 80303d8:	fb53 e30a 	smmla	r3, r3, sl, lr
 80303dc:	fb51 e10a 	smmla	r1, r1, sl, lr
 80303e0:	fa43 f30b 	asr.w	r3, r3, fp
 80303e4:	fa41 f10b 	asr.w	r1, r1, fp
 80303e8:	f303 0307 	ssat	r3, #8, r3
 80303ec:	f301 0107 	ssat	r1, #8, r1
 80303f0:	f888 3000 	strb.w	r3, [r8]
 80303f4:	f808 1007 	strb.w	r1, [r8, r7]
 80303f8:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 80303fa:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80303fc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80303fe:	9e30      	ldr	r6, [sp, #192]	@ 0xc0
 8030400:	9d18      	ldr	r5, [sp, #96]	@ 0x60
 8030402:	eb02 0241 	add.w	r2, r2, r1, lsl #1
 8030406:	9215      	str	r2, [sp, #84]	@ 0x54
 8030408:	eb05 0546 	add.w	r5, r5, r6, lsl #1
 803040c:	9518      	str	r5, [sp, #96]	@ 0x60
 803040e:	3b01      	subs	r3, #1
 8030410:	9319      	str	r3, [sp, #100]	@ 0x64
 8030412:	f73f aea0 	bgt.w	8030156 <st_sssa8_ch_nn_mat_mult_deep_conv2d_3x3+0x156>
 8030416:	9b31      	ldr	r3, [sp, #196]	@ 0xc4
 8030418:	f013 0301 	ands.w	r3, r3, #1
 803041c:	f040 8141 	bne.w	80306a2 <st_sssa8_ch_nn_mat_mult_deep_conv2d_3x3+0x6a2>
 8030420:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8030422:	441a      	add	r2, r3
 8030424:	9215      	str	r2, [sp, #84]	@ 0x54
 8030426:	9c17      	ldr	r4, [sp, #92]	@ 0x5c
 8030428:	9933      	ldr	r1, [sp, #204]	@ 0xcc
 803042a:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 803042c:	440c      	add	r4, r1
 803042e:	9417      	str	r4, [sp, #92]	@ 0x5c
 8030430:	3b01      	subs	r3, #1
 8030432:	931a      	str	r3, [sp, #104]	@ 0x68
 8030434:	f47f ae89 	bne.w	803014a <st_sssa8_ch_nn_mat_mult_deep_conv2d_3x3+0x14a>
 8030438:	9922      	ldr	r1, [sp, #136]	@ 0x88
 803043a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 803043c:	eb02 0241 	add.w	r2, r2, r1, lsl #1
 8030440:	9212      	str	r2, [sp, #72]	@ 0x48
 8030442:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8030444:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8030446:	eb02 0241 	add.w	r2, r2, r1, lsl #1
 803044a:	9213      	str	r2, [sp, #76]	@ 0x4c
 803044c:	980d      	ldr	r0, [sp, #52]	@ 0x34
 803044e:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8030450:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8030452:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 8030454:	9d16      	ldr	r5, [sp, #88]	@ 0x58
 8030456:	f100 0008 	add.w	r0, r0, #8
 803045a:	900d      	str	r0, [sp, #52]	@ 0x34
 803045c:	f102 0208 	add.w	r2, r2, #8
 8030460:	920f      	str	r2, [sp, #60]	@ 0x3c
 8030462:	f103 0308 	add.w	r3, r3, #8
 8030466:	9310      	str	r3, [sp, #64]	@ 0x40
 8030468:	f104 0404 	add.w	r4, r4, #4
 803046c:	42a5      	cmp	r5, r4
 803046e:	940e      	str	r4, [sp, #56]	@ 0x38
 8030470:	f47f ae26 	bne.w	80300c0 <st_sssa8_ch_nn_mat_mult_deep_conv2d_3x3+0xc0>
 8030474:	9f13      	ldr	r7, [sp, #76]	@ 0x4c
 8030476:	9b2f      	ldr	r3, [sp, #188]	@ 0xbc
 8030478:	9932      	ldr	r1, [sp, #200]	@ 0xc8
 803047a:	9d31      	ldr	r5, [sp, #196]	@ 0xc4
 803047c:	f013 0301 	ands.w	r3, r3, #1
 8030480:	d071      	beq.n	8030566 <st_sssa8_ch_nn_mat_mult_deep_conv2d_3x3+0x566>
 8030482:	2900      	cmp	r1, #0
 8030484:	d06f      	beq.n	8030566 <st_sssa8_ch_nn_mat_mult_deep_conv2d_3x3+0x566>
 8030486:	911a      	str	r1, [sp, #104]	@ 0x68
 8030488:	2d00      	cmp	r5, #0
 803048a:	d06c      	beq.n	8030566 <st_sssa8_ch_nn_mat_mult_deep_conv2d_3x3+0x566>
 803048c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 803048e:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 8030490:	f8dd 8038 	ldr.w	r8, [sp, #56]	@ 0x38
 8030494:	6818      	ldr	r0, [r3, #0]
 8030496:	6821      	ldr	r1, [r4, #0]
 8030498:	f9b8 b000 	ldrsh.w	fp, [r8]
 803049c:	9100      	str	r1, [sp, #0]
 803049e:	f1bb 0f00 	cmp.w	fp, #0
 80304a2:	bfcc      	ite	gt
 80304a4:	2200      	movgt	r2, #0
 80304a6:	f04f 32ff 	movle.w	r2, #4294967295
 80304aa:	f1bb 0f15 	cmp.w	fp, #21
 80304ae:	bfc8      	it	gt
 80304b0:	2201      	movgt	r2, #1
 80304b2:	9b35      	ldr	r3, [sp, #212]	@ 0xd4
 80304b4:	f003 0303 	and.w	r3, r3, #3
 80304b8:	2b03      	cmp	r3, #3
 80304ba:	bf03      	ittte	eq
 80304bc:	3703      	addeq	r7, #3
 80304be:	197f      	addeq	r7, r7, r5
 80304c0:	2602      	moveq	r6, #2
 80304c2:	2600      	movne	r6, #0
 80304c4:	960b      	str	r6, [sp, #44]	@ 0x2c
 80304c6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80304c8:	f8dd a0cc 	ldr.w	sl, [sp, #204]	@ 0xcc
 80304cc:	9e34      	ldr	r6, [sp, #208]	@ 0xd0
 80304ce:	681c      	ldr	r4, [r3, #0]
 80304d0:	f8dd 90c0 	ldr.w	r9, [sp, #192]	@ 0xc0
 80304d4:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80304d6:	9317      	str	r3, [sp, #92]	@ 0x5c
 80304d8:	9410      	str	r4, [sp, #64]	@ 0x40
 80304da:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 80304de:	f8dd c05c 	ldr.w	ip, [sp, #92]	@ 0x5c
 80304e2:	9931      	ldr	r1, [sp, #196]	@ 0xc4
 80304e4:	9119      	str	r1, [sp, #100]	@ 0x64
 80304e6:	9910      	ldr	r1, [sp, #64]	@ 0x40
 80304e8:	f8dd 8048 	ldr.w	r8, [sp, #72]	@ 0x48
 80304ec:	f1b9 0f00 	cmp.w	r9, #0
 80304f0:	dd1a      	ble.n	8030528 <st_sssa8_ch_nn_mat_mult_deep_conv2d_3x3+0x528>
 80304f2:	464d      	mov	r5, r9
 80304f4:	f91c 301a 	ldrsb.w	r3, [ip, sl, lsl #1]
 80304f8:	f918 4019 	ldrsb.w	r4, [r8, r9, lsl #1]
 80304fc:	eba3 0306 	sub.w	r3, r3, r6
 8030500:	3d01      	subs	r5, #1
 8030502:	fb04 1103 	mla	r1, r4, r3, r1
 8030506:	f91c 300a 	ldrsb.w	r3, [ip, sl]
 803050a:	f918 4009 	ldrsb.w	r4, [r8, r9]
 803050e:	eba3 0306 	sub.w	r3, r3, r6
 8030512:	fb04 1103 	mla	r1, r4, r3, r1
 8030516:	f91c 3b01 	ldrsb.w	r3, [ip], #1
 803051a:	f918 4b01 	ldrsb.w	r4, [r8], #1
 803051e:	eba3 0306 	sub.w	r3, r3, r6
 8030522:	fb04 1103 	mla	r1, r4, r3, r1
 8030526:	d1e5      	bne.n	80304f4 <st_sssa8_ch_nn_mat_mult_deep_conv2d_3x3+0x4f4>
 8030528:	9c00      	ldr	r4, [sp, #0]
 803052a:	2a00      	cmp	r2, #0
 803052c:	f040 82b1 	bne.w	8030a92 <st_sssa8_ch_nn_mat_mult_deep_conv2d_3x3+0xa92>
 8030530:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8030534:	fb51 0104 	smmla	r1, r1, r4, r0
 8030538:	fa41 f10b 	asr.w	r1, r1, fp
 803053c:	f301 0107 	ssat	r1, #8, r1
 8030540:	7039      	strb	r1, [r7, #0]
 8030542:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8030544:	9930      	ldr	r1, [sp, #192]	@ 0xc0
 8030546:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8030548:	4427      	add	r7, r4
 803054a:	ebac 0c41 	sub.w	ip, ip, r1, lsl #1
 803054e:	3b01      	subs	r3, #1
 8030550:	9319      	str	r3, [sp, #100]	@ 0x64
 8030552:	d1c8      	bne.n	80304e6 <st_sssa8_ch_nn_mat_mult_deep_conv2d_3x3+0x4e6>
 8030554:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8030556:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 8030558:	9c17      	ldr	r4, [sp, #92]	@ 0x5c
 803055a:	440f      	add	r7, r1
 803055c:	4454      	add	r4, sl
 803055e:	9417      	str	r4, [sp, #92]	@ 0x5c
 8030560:	3b01      	subs	r3, #1
 8030562:	931a      	str	r3, [sp, #104]	@ 0x68
 8030564:	d1bb      	bne.n	80304de <st_sssa8_ch_nn_mat_mult_deep_conv2d_3x3+0x4de>
 8030566:	f04f 0000 	mov.w	r0, #0
 803056a:	b024      	add	sp, #144	@ 0x90
 803056c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8030570:	9f23      	ldr	r7, [sp, #140]	@ 0x8c
 8030572:	2f00      	cmp	r7, #0
 8030574:	f43f aefd 	beq.w	8030372 <st_sssa8_ch_nn_mat_mult_deep_conv2d_3x3+0x372>
 8030578:	f8dd e06c 	ldr.w	lr, [sp, #108]	@ 0x6c
 803057c:	f8dd 9074 	ldr.w	r9, [sp, #116]	@ 0x74
 8030580:	f994 c000 	ldrsb.w	ip, [r4]
 8030584:	f914 8006 	ldrsb.w	r8, [r4, r6]
 8030588:	f935 bb02 	ldrsh.w	fp, [r5], #2
 803058c:	f935 ab02 	ldrsh.w	sl, [r5], #2
 8030590:	fb1b 220c 	smlabb	r2, fp, ip, r2
 8030594:	fb1b 0008 	smlabb	r0, fp, r8, r0
 8030598:	fb1a 330c 	smlabb	r3, sl, ip, r3
 803059c:	fb1a 1108 	smlabb	r1, sl, r8, r1
 80305a0:	eb04 0446 	add.w	r4, r4, r6, lsl #1
 80305a4:	f935 bb02 	ldrsh.w	fp, [r5], #2
 80305a8:	f935 ab02 	ldrsh.w	sl, [r5], #2
 80305ac:	f994 c000 	ldrsb.w	ip, [r4]
 80305b0:	fb1b 2208 	smlabb	r2, fp, r8, r2
 80305b4:	fb1b 000c 	smlabb	r0, fp, ip, r0
 80305b8:	fb1a 3308 	smlabb	r3, sl, r8, r3
 80305bc:	fb1a 110c 	smlabb	r1, sl, ip, r1
 80305c0:	f914 8006 	ldrsb.w	r8, [r4, r6]
 80305c4:	f935 bb02 	ldrsh.w	fp, [r5], #2
 80305c8:	f935 ab02 	ldrsh.w	sl, [r5], #2
 80305cc:	fb1b 0008 	smlabb	r0, fp, r8, r0
 80305d0:	fb1b 220c 	smlabb	r2, fp, ip, r2
 80305d4:	fb1a 330c 	smlabb	r3, sl, ip, r3
 80305d8:	fb1a 1108 	smlabb	r1, sl, r8, r1
 80305dc:	4474      	add	r4, lr
 80305de:	f994 c000 	ldrsb.w	ip, [r4]
 80305e2:	f914 8006 	ldrsb.w	r8, [r4, r6]
 80305e6:	f935 bb02 	ldrsh.w	fp, [r5], #2
 80305ea:	f935 ab02 	ldrsh.w	sl, [r5], #2
 80305ee:	fb1b 220c 	smlabb	r2, fp, ip, r2
 80305f2:	fb1b 0008 	smlabb	r0, fp, r8, r0
 80305f6:	fb1a 330c 	smlabb	r3, sl, ip, r3
 80305fa:	fb1a 1108 	smlabb	r1, sl, r8, r1
 80305fe:	eb04 0446 	add.w	r4, r4, r6, lsl #1
 8030602:	f935 bb02 	ldrsh.w	fp, [r5], #2
 8030606:	f935 ab02 	ldrsh.w	sl, [r5], #2
 803060a:	f994 c000 	ldrsb.w	ip, [r4]
 803060e:	fb1b 2208 	smlabb	r2, fp, r8, r2
 8030612:	fb1b 000c 	smlabb	r0, fp, ip, r0
 8030616:	fb1a 3308 	smlabb	r3, sl, r8, r3
 803061a:	fb1a 110c 	smlabb	r1, sl, ip, r1
 803061e:	f914 8006 	ldrsb.w	r8, [r4, r6]
 8030622:	f935 bb02 	ldrsh.w	fp, [r5], #2
 8030626:	f935 ab02 	ldrsh.w	sl, [r5], #2
 803062a:	fb1b 0008 	smlabb	r0, fp, r8, r0
 803062e:	fb1b 220c 	smlabb	r2, fp, ip, r2
 8030632:	fb1a 330c 	smlabb	r3, sl, ip, r3
 8030636:	fb1a 1108 	smlabb	r1, sl, r8, r1
 803063a:	4474      	add	r4, lr
 803063c:	f994 c000 	ldrsb.w	ip, [r4]
 8030640:	f914 8006 	ldrsb.w	r8, [r4, r6]
 8030644:	f935 bb02 	ldrsh.w	fp, [r5], #2
 8030648:	f935 ab02 	ldrsh.w	sl, [r5], #2
 803064c:	fb1b 220c 	smlabb	r2, fp, ip, r2
 8030650:	fb1b 0008 	smlabb	r0, fp, r8, r0
 8030654:	fb1a 330c 	smlabb	r3, sl, ip, r3
 8030658:	fb1a 1108 	smlabb	r1, sl, r8, r1
 803065c:	eb04 0446 	add.w	r4, r4, r6, lsl #1
 8030660:	f935 bb02 	ldrsh.w	fp, [r5], #2
 8030664:	f935 ab02 	ldrsh.w	sl, [r5], #2
 8030668:	f994 c000 	ldrsb.w	ip, [r4]
 803066c:	fb1b 2208 	smlabb	r2, fp, r8, r2
 8030670:	fb1b 000c 	smlabb	r0, fp, ip, r0
 8030674:	fb1a 3308 	smlabb	r3, sl, r8, r3
 8030678:	fb1a 110c 	smlabb	r1, sl, ip, r1
 803067c:	f914 8006 	ldrsb.w	r8, [r4, r6]
 8030680:	f935 bb02 	ldrsh.w	fp, [r5], #2
 8030684:	f935 ab02 	ldrsh.w	sl, [r5], #2
 8030688:	fb1b 0008 	smlabb	r0, fp, r8, r0
 803068c:	fb1b 220c 	smlabb	r2, fp, ip, r2
 8030690:	fb1a 330c 	smlabb	r3, sl, ip, r3
 8030694:	fb1a 1108 	smlabb	r1, sl, r8, r1
 8030698:	444c      	add	r4, r9
 803069a:	3f01      	subs	r7, #1
 803069c:	f73f af70 	bgt.w	8030580 <st_sssa8_ch_nn_mat_mult_deep_conv2d_3x3+0x580>
 80306a0:	e667      	b.n	8030372 <st_sssa8_ch_nn_mat_mult_deep_conv2d_3x3+0x372>
 80306a2:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 80306a4:	9b31      	ldr	r3, [sp, #196]	@ 0xc4
 80306a6:	2b01      	cmp	r3, #1
 80306a8:	bf1e      	ittt	ne
 80306aa:	9b1b      	ldrne	r3, [sp, #108]	@ 0x6c
 80306ac:	18c0      	addne	r0, r0, r3
 80306ae:	1b80      	subne	r0, r0, r6
 80306b0:	e9dd e508 	ldrd	lr, r5, [sp, #32]
 80306b4:	f8dd c0cc 	ldr.w	ip, [sp, #204]	@ 0xcc
 80306b8:	ea4f 0a4c 	mov.w	sl, ip, lsl #1
 80306bc:	f1ca 0a04 	rsb	sl, sl, #4
 80306c0:	9b38      	ldr	r3, [sp, #224]	@ 0xe0
 80306c2:	ea5f 0ba6 	movs.w	fp, r6, asr #2
 80306c6:	f000 8091 	beq.w	80307ec <st_sssa8_ch_nn_mat_mult_deep_conv2d_3x3+0x7ec>
 80306ca:	6802      	ldr	r2, [r0, #0]
 80306cc:	e8b3 0390 	ldmia.w	r3!, {r4, r7, r8, r9}
 80306d0:	fa2f f182 	sxtb16	r1, r2
 80306d4:	fa2f f292 	sxtb16	r2, r2, ror #8
 80306d8:	fb21 ee04 	smlad	lr, r1, r4, lr
 80306dc:	fb22 ee07 	smlad	lr, r2, r7, lr
 80306e0:	fb22 5509 	smlad	r5, r2, r9, r5
 80306e4:	fb21 5508 	smlad	r5, r1, r8, r5
 80306e8:	5982      	ldr	r2, [r0, r6]
 80306ea:	e8b3 0390 	ldmia.w	r3!, {r4, r7, r8, r9}
 80306ee:	fa2f f182 	sxtb16	r1, r2
 80306f2:	fa2f f292 	sxtb16	r2, r2, ror #8
 80306f6:	fb21 ee04 	smlad	lr, r1, r4, lr
 80306fa:	fb22 ee07 	smlad	lr, r2, r7, lr
 80306fe:	fb22 5509 	smlad	r5, r2, r9, r5
 8030702:	fb21 5508 	smlad	r5, r1, r8, r5
 8030706:	f850 2016 	ldr.w	r2, [r0, r6, lsl #1]
 803070a:	e8b3 0390 	ldmia.w	r3!, {r4, r7, r8, r9}
 803070e:	fa2f f182 	sxtb16	r1, r2
 8030712:	fa2f f292 	sxtb16	r2, r2, ror #8
 8030716:	fb21 ee04 	smlad	lr, r1, r4, lr
 803071a:	fb22 ee07 	smlad	lr, r2, r7, lr
 803071e:	fb22 5509 	smlad	r5, r2, r9, r5
 8030722:	fb21 5508 	smlad	r5, r1, r8, r5
 8030726:	4460      	add	r0, ip
 8030728:	6802      	ldr	r2, [r0, #0]
 803072a:	e8b3 0390 	ldmia.w	r3!, {r4, r7, r8, r9}
 803072e:	fa2f f182 	sxtb16	r1, r2
 8030732:	fa2f f292 	sxtb16	r2, r2, ror #8
 8030736:	fb21 ee04 	smlad	lr, r1, r4, lr
 803073a:	fb22 ee07 	smlad	lr, r2, r7, lr
 803073e:	fb22 5509 	smlad	r5, r2, r9, r5
 8030742:	fb21 5508 	smlad	r5, r1, r8, r5
 8030746:	5982      	ldr	r2, [r0, r6]
 8030748:	e8b3 0390 	ldmia.w	r3!, {r4, r7, r8, r9}
 803074c:	fa2f f182 	sxtb16	r1, r2
 8030750:	fa2f f292 	sxtb16	r2, r2, ror #8
 8030754:	fb21 ee04 	smlad	lr, r1, r4, lr
 8030758:	fb22 ee07 	smlad	lr, r2, r7, lr
 803075c:	fb22 5509 	smlad	r5, r2, r9, r5
 8030760:	fb21 5508 	smlad	r5, r1, r8, r5
 8030764:	f850 2016 	ldr.w	r2, [r0, r6, lsl #1]
 8030768:	e8b3 0390 	ldmia.w	r3!, {r4, r7, r8, r9}
 803076c:	fa2f f182 	sxtb16	r1, r2
 8030770:	fa2f f292 	sxtb16	r2, r2, ror #8
 8030774:	fb21 ee04 	smlad	lr, r1, r4, lr
 8030778:	fb22 ee07 	smlad	lr, r2, r7, lr
 803077c:	fb22 5509 	smlad	r5, r2, r9, r5
 8030780:	fb21 5508 	smlad	r5, r1, r8, r5
 8030784:	4460      	add	r0, ip
 8030786:	6802      	ldr	r2, [r0, #0]
 8030788:	e8b3 0390 	ldmia.w	r3!, {r4, r7, r8, r9}
 803078c:	fa2f f182 	sxtb16	r1, r2
 8030790:	fa2f f292 	sxtb16	r2, r2, ror #8
 8030794:	fb21 ee04 	smlad	lr, r1, r4, lr
 8030798:	fb22 ee07 	smlad	lr, r2, r7, lr
 803079c:	fb22 5509 	smlad	r5, r2, r9, r5
 80307a0:	fb21 5508 	smlad	r5, r1, r8, r5
 80307a4:	5982      	ldr	r2, [r0, r6]
 80307a6:	e8b3 0390 	ldmia.w	r3!, {r4, r7, r8, r9}
 80307aa:	fa2f f182 	sxtb16	r1, r2
 80307ae:	fa2f f292 	sxtb16	r2, r2, ror #8
 80307b2:	fb21 ee04 	smlad	lr, r1, r4, lr
 80307b6:	fb22 ee07 	smlad	lr, r2, r7, lr
 80307ba:	fb22 5509 	smlad	r5, r2, r9, r5
 80307be:	fb21 5508 	smlad	r5, r1, r8, r5
 80307c2:	f850 2016 	ldr.w	r2, [r0, r6, lsl #1]
 80307c6:	e8b3 0390 	ldmia.w	r3!, {r4, r7, r8, r9}
 80307ca:	fa2f f182 	sxtb16	r1, r2
 80307ce:	fa2f f292 	sxtb16	r2, r2, ror #8
 80307d2:	fb21 ee04 	smlad	lr, r1, r4, lr
 80307d6:	fb22 ee07 	smlad	lr, r2, r7, lr
 80307da:	fb22 5509 	smlad	r5, r2, r9, r5
 80307de:	fb21 5508 	smlad	r5, r1, r8, r5
 80307e2:	4450      	add	r0, sl
 80307e4:	f1bb 0b01 	subs.w	fp, fp, #1
 80307e8:	f73f af6f 	bgt.w	80306ca <st_sssa8_ch_nn_mat_mult_deep_conv2d_3x3+0x6ca>
 80307ec:	f016 0b03 	ands.w	fp, r6, #3
 80307f0:	d05f      	beq.n	80308b2 <st_sssa8_ch_nn_mat_mult_deep_conv2d_3x3+0x8b2>
 80307f2:	f990 1000 	ldrsb.w	r1, [r0]
 80307f6:	5782      	ldrsb	r2, [r0, r6]
 80307f8:	f910 a016 	ldrsb.w	sl, [r0, r6, lsl #1]
 80307fc:	f933 4b02 	ldrsh.w	r4, [r3], #2
 8030800:	f933 7b02 	ldrsh.w	r7, [r3], #2
 8030804:	f933 8b02 	ldrsh.w	r8, [r3], #2
 8030808:	f933 9b02 	ldrsh.w	r9, [r3], #2
 803080c:	fb11 ee04 	smlabb	lr, r1, r4, lr
 8030810:	fb11 5507 	smlabb	r5, r1, r7, r5
 8030814:	fb12 ee08 	smlabb	lr, r2, r8, lr
 8030818:	fb12 5509 	smlabb	r5, r2, r9, r5
 803081c:	f933 4b02 	ldrsh.w	r4, [r3], #2
 8030820:	f933 7b02 	ldrsh.w	r7, [r3], #2
 8030824:	fb1a ee04 	smlabb	lr, sl, r4, lr
 8030828:	fb1a 5507 	smlabb	r5, sl, r7, r5
 803082c:	4460      	add	r0, ip
 803082e:	f990 1000 	ldrsb.w	r1, [r0]
 8030832:	5782      	ldrsb	r2, [r0, r6]
 8030834:	f910 a016 	ldrsb.w	sl, [r0, r6, lsl #1]
 8030838:	f933 4b02 	ldrsh.w	r4, [r3], #2
 803083c:	f933 7b02 	ldrsh.w	r7, [r3], #2
 8030840:	f933 8b02 	ldrsh.w	r8, [r3], #2
 8030844:	f933 9b02 	ldrsh.w	r9, [r3], #2
 8030848:	fb11 ee04 	smlabb	lr, r1, r4, lr
 803084c:	fb11 5507 	smlabb	r5, r1, r7, r5
 8030850:	fb12 ee08 	smlabb	lr, r2, r8, lr
 8030854:	fb12 5509 	smlabb	r5, r2, r9, r5
 8030858:	f933 4b02 	ldrsh.w	r4, [r3], #2
 803085c:	f933 7b02 	ldrsh.w	r7, [r3], #2
 8030860:	fb1a ee04 	smlabb	lr, sl, r4, lr
 8030864:	fb1a 5507 	smlabb	r5, sl, r7, r5
 8030868:	4460      	add	r0, ip
 803086a:	f990 1000 	ldrsb.w	r1, [r0]
 803086e:	5782      	ldrsb	r2, [r0, r6]
 8030870:	f910 a016 	ldrsb.w	sl, [r0, r6, lsl #1]
 8030874:	f933 4b02 	ldrsh.w	r4, [r3], #2
 8030878:	f933 7b02 	ldrsh.w	r7, [r3], #2
 803087c:	f933 8b02 	ldrsh.w	r8, [r3], #2
 8030880:	f933 9b02 	ldrsh.w	r9, [r3], #2
 8030884:	fb11 ee04 	smlabb	lr, r1, r4, lr
 8030888:	fb11 5507 	smlabb	r5, r1, r7, r5
 803088c:	fb12 ee08 	smlabb	lr, r2, r8, lr
 8030890:	fb12 5509 	smlabb	r5, r2, r9, r5
 8030894:	f933 4b02 	ldrsh.w	r4, [r3], #2
 8030898:	f933 7b02 	ldrsh.w	r7, [r3], #2
 803089c:	fb1a ee04 	smlabb	lr, sl, r4, lr
 80308a0:	fb1a 5507 	smlabb	r5, sl, r7, r5
 80308a4:	eba0 004c 	sub.w	r0, r0, ip, lsl #1
 80308a8:	f100 0001 	add.w	r0, r0, #1
 80308ac:	f1bb 0b01 	subs.w	fp, fp, #1
 80308b0:	dc9f      	bgt.n	80307f2 <st_sssa8_ch_nn_mat_mult_deep_conv2d_3x3+0x7f2>
 80308b2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80308b4:	9915      	ldr	r1, [sp, #84]	@ 0x54
 80308b6:	eb01 0203 	add.w	r2, r1, r3
 80308ba:	f8dd a000 	ldr.w	sl, [sp]
 80308be:	9c04      	ldr	r4, [sp, #16]
 80308c0:	9b02      	ldr	r3, [sp, #8]
 80308c2:	9806      	ldr	r0, [sp, #24]
 80308c4:	2800      	cmp	r0, #0
 80308c6:	f040 8118 	bne.w	8030afa <st_sssa8_ch_nn_mat_mult_deep_conv2d_3x3+0xafa>
 80308ca:	ea4f 0e4e 	mov.w	lr, lr, lsl #1
 80308ce:	fb5e 4e0a 	smmla	lr, lr, sl, r4
 80308d2:	fa4e fe03 	asr.w	lr, lr, r3
 80308d6:	f30e 0e07 	ssat	lr, #8, lr
 80308da:	f881 e000 	strb.w	lr, [r1]
 80308de:	f8dd a004 	ldr.w	sl, [sp, #4]
 80308e2:	9c05      	ldr	r4, [sp, #20]
 80308e4:	9b03      	ldr	r3, [sp, #12]
 80308e6:	9807      	ldr	r0, [sp, #28]
 80308e8:	2800      	cmp	r0, #0
 80308ea:	f040 80ec 	bne.w	8030ac6 <st_sssa8_ch_nn_mat_mult_deep_conv2d_3x3+0xac6>
 80308ee:	ea4f 0545 	mov.w	r5, r5, lsl #1
 80308f2:	fb55 450a 	smmla	r5, r5, sl, r4
 80308f6:	fa45 f503 	asr.w	r5, r5, r3
 80308fa:	f305 0507 	ssat	r5, #8, r5
 80308fe:	7015      	strb	r5, [r2, #0]
 8030900:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8030902:	9d1e      	ldr	r5, [sp, #120]	@ 0x78
 8030904:	2b00      	cmp	r3, #0
 8030906:	bf14      	ite	ne
 8030908:	2303      	movne	r3, #3
 803090a:	2301      	moveq	r3, #1
 803090c:	2d00      	cmp	r5, #0
 803090e:	bf08      	it	eq
 8030910:	9b2f      	ldreq	r3, [sp, #188]	@ 0xbc
 8030912:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8030914:	441a      	add	r2, r3
 8030916:	9215      	str	r2, [sp, #84]	@ 0x54
 8030918:	e585      	b.n	8030426 <st_sssa8_ch_nn_mat_mult_deep_conv2d_3x3+0x426>
 803091a:	9938      	ldr	r1, [sp, #224]	@ 0xe0
 803091c:	f04f 0300 	mov.w	r3, #0
 8030920:	461a      	mov	r2, r3
 8030922:	9820      	ldr	r0, [sp, #128]	@ 0x80
 8030924:	b198      	cbz	r0, 803094e <st_sssa8_ch_nn_mat_mult_deep_conv2d_3x3+0x94e>
 8030926:	e8b1 1e00 	ldmia.w	r1!, {r9, sl, fp, ip}
 803092a:	fa02 f289 	sxtah	r2, r2, r9
 803092e:	fa02 f2a9 	sxtah	r2, r2, r9, ror #16
 8030932:	fa02 f28a 	sxtah	r2, r2, sl
 8030936:	fa02 f2aa 	sxtah	r2, r2, sl, ror #16
 803093a:	fa03 f38b 	sxtah	r3, r3, fp
 803093e:	fa03 f3ab 	sxtah	r3, r3, fp, ror #16
 8030942:	fa03 f38c 	sxtah	r3, r3, ip
 8030946:	fa03 f3ac 	sxtah	r3, r3, ip, ror #16
 803094a:	3801      	subs	r0, #1
 803094c:	d1eb      	bne.n	8030926 <st_sssa8_ch_nn_mat_mult_deep_conv2d_3x3+0x926>
 803094e:	9821      	ldr	r0, [sp, #132]	@ 0x84
 8030950:	b138      	cbz	r0, 8030962 <st_sssa8_ch_nn_mat_mult_deep_conv2d_3x3+0x962>
 8030952:	f851 4b04 	ldr.w	r4, [r1], #4
 8030956:	fa02 f284 	sxtah	r2, r2, r4
 803095a:	fa03 f3a4 	sxtah	r3, r3, r4, ror #16
 803095e:	3801      	subs	r0, #1
 8030960:	d1f7      	bne.n	8030952 <st_sssa8_ch_nn_mat_mult_deep_conv2d_3x3+0x952>
 8030962:	f1c2 0200 	rsb	r2, r2, #0
 8030966:	f1c3 0300 	rsb	r3, r3, #0
 803096a:	9934      	ldr	r1, [sp, #208]	@ 0xd0
 803096c:	fb01 f202 	mul.w	r2, r1, r2
 8030970:	fb01 f003 	mul.w	r0, r1, r3
 8030974:	f7ff bbcf 	b.w	8030116 <st_sssa8_ch_nn_mat_mult_deep_conv2d_3x3+0x116>
 8030978:	9812      	ldr	r0, [sp, #72]	@ 0x48
 803097a:	9c22      	ldr	r4, [sp, #136]	@ 0x88
 803097c:	9a38      	ldr	r2, [sp, #224]	@ 0xe0
 803097e:	ea5f 0ba6 	movs.w	fp, r6, asr #2
 8030982:	d019      	beq.n	80309b8 <st_sssa8_ch_nn_mat_mult_deep_conv2d_3x3+0x9b8>
 8030984:	f04f 0a09 	mov.w	sl, #9
 8030988:	6805      	ldr	r5, [r0, #0]
 803098a:	f850 8004 	ldr.w	r8, [r0, r4]
 803098e:	fa2f f795 	sxtb16	r7, r5, ror #8
 8030992:	fa2f f585 	sxtb16	r5, r5
 8030996:	fa2f f998 	sxtb16	r9, r8, ror #8
 803099a:	fa2f f888 	sxtb16	r8, r8
 803099e:	e8a2 03a0 	stmia.w	r2!, {r5, r7, r8, r9}
 80309a2:	4430      	add	r0, r6
 80309a4:	f1ba 0a01 	subs.w	sl, sl, #1
 80309a8:	dcee      	bgt.n	8030988 <st_sssa8_ch_nn_mat_mult_deep_conv2d_3x3+0x988>
 80309aa:	eba0 0004 	sub.w	r0, r0, r4
 80309ae:	f100 0004 	add.w	r0, r0, #4
 80309b2:	f1bb 0b01 	subs.w	fp, fp, #1
 80309b6:	dce5      	bgt.n	8030984 <st_sssa8_ch_nn_mat_mult_deep_conv2d_3x3+0x984>
 80309b8:	f016 0b03 	ands.w	fp, r6, #3
 80309bc:	f43f aba5 	beq.w	803010a <st_sssa8_ch_nn_mat_mult_deep_conv2d_3x3+0x10a>
 80309c0:	f04f 0a09 	mov.w	sl, #9
 80309c4:	f990 5000 	ldrsb.w	r5, [r0]
 80309c8:	f910 8004 	ldrsb.w	r8, [r0, r4]
 80309cc:	f822 5b02 	strh.w	r5, [r2], #2
 80309d0:	f822 8b02 	strh.w	r8, [r2], #2
 80309d4:	4430      	add	r0, r6
 80309d6:	f1ba 0a01 	subs.w	sl, sl, #1
 80309da:	dcf3      	bgt.n	80309c4 <st_sssa8_ch_nn_mat_mult_deep_conv2d_3x3+0x9c4>
 80309dc:	eba0 0004 	sub.w	r0, r0, r4
 80309e0:	f100 0001 	add.w	r0, r0, #1
 80309e4:	f1bb 0b01 	subs.w	fp, fp, #1
 80309e8:	dcea      	bgt.n	80309c0 <st_sssa8_ch_nn_mat_mult_deep_conv2d_3x3+0x9c0>
 80309ea:	f7ff bb8e 	b.w	803010a <st_sssa8_ch_nn_mat_mult_deep_conv2d_3x3+0x10a>
 80309ee:	f11c 0c01 	adds.w	ip, ip, #1
 80309f2:	d014      	beq.n	8030a1e <st_sssa8_ch_nn_mat_mult_deep_conv2d_3x3+0xa1e>
 80309f4:	f04f 0c01 	mov.w	ip, #1
 80309f8:	fa0c fc0b 	lsl.w	ip, ip, fp
 80309fc:	ea4f 0cac 	mov.w	ip, ip, asr #2
 8030a00:	fb52 c20a 	smmla	r2, r2, sl, ip
 8030a04:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8030a08:	fa42 f20b 	asr.w	r2, r2, fp
 8030a0c:	4472      	add	r2, lr
 8030a0e:	fb50 c00a 	smmla	r0, r0, sl, ip
 8030a12:	ea4f 0040 	mov.w	r0, r0, lsl #1
 8030a16:	fa40 f00b 	asr.w	r0, r0, fp
 8030a1a:	4470      	add	r0, lr
 8030a1c:	e4c6      	b.n	80303ac <st_sssa8_ch_nn_mat_mult_deep_conv2d_3x3+0x3ac>
 8030a1e:	f1cb 0c01 	rsb	ip, fp, #1
 8030a22:	fa02 f20c 	lsl.w	r2, r2, ip
 8030a26:	f302 021f 	ssat	r2, #32, r2
 8030a2a:	fb52 f21a 	smmulr	r2, r2, sl
 8030a2e:	fa00 f00c 	lsl.w	r0, r0, ip
 8030a32:	f300 001f 	ssat	r0, #32, r0
 8030a36:	fb50 f01a 	smmulr	r0, r0, sl
 8030a3a:	4472      	add	r2, lr
 8030a3c:	4470      	add	r0, lr
 8030a3e:	e4b5      	b.n	80303ac <st_sssa8_ch_nn_mat_mult_deep_conv2d_3x3+0x3ac>
 8030a40:	f11c 0c01 	adds.w	ip, ip, #1
 8030a44:	d014      	beq.n	8030a70 <st_sssa8_ch_nn_mat_mult_deep_conv2d_3x3+0xa70>
 8030a46:	f04f 0c01 	mov.w	ip, #1
 8030a4a:	fa0c fc0b 	lsl.w	ip, ip, fp
 8030a4e:	ea4f 0cac 	mov.w	ip, ip, asr #2
 8030a52:	fb53 c30a 	smmla	r3, r3, sl, ip
 8030a56:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8030a5a:	fa43 f30b 	asr.w	r3, r3, fp
 8030a5e:	4473      	add	r3, lr
 8030a60:	fb51 c10a 	smmla	r1, r1, sl, ip
 8030a64:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8030a68:	fa41 f10b 	asr.w	r1, r1, fp
 8030a6c:	4471      	add	r1, lr
 8030a6e:	e4bb      	b.n	80303e8 <st_sssa8_ch_nn_mat_mult_deep_conv2d_3x3+0x3e8>
 8030a70:	f1cb 0c01 	rsb	ip, fp, #1
 8030a74:	fa03 f30c 	lsl.w	r3, r3, ip
 8030a78:	f303 031f 	ssat	r3, #32, r3
 8030a7c:	fb53 f31a 	smmulr	r3, r3, sl
 8030a80:	fa01 f10c 	lsl.w	r1, r1, ip
 8030a84:	f301 011f 	ssat	r1, #32, r1
 8030a88:	fb51 f11a 	smmulr	r1, r1, sl
 8030a8c:	4473      	add	r3, lr
 8030a8e:	4471      	add	r1, lr
 8030a90:	e4aa      	b.n	80303e8 <st_sssa8_ch_nn_mat_mult_deep_conv2d_3x3+0x3e8>
 8030a92:	1c53      	adds	r3, r2, #1
 8030a94:	d00d      	beq.n	8030ab2 <st_sssa8_ch_nn_mat_mult_deep_conv2d_3x3+0xab2>
 8030a96:	f04f 0301 	mov.w	r3, #1
 8030a9a:	fa03 f30b 	lsl.w	r3, r3, fp
 8030a9e:	ea4f 03a3 	mov.w	r3, r3, asr #2
 8030aa2:	fb51 3104 	smmla	r1, r1, r4, r3
 8030aa6:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8030aaa:	fa41 f10b 	asr.w	r1, r1, fp
 8030aae:	4401      	add	r1, r0
 8030ab0:	e544      	b.n	803053c <st_sssa8_ch_nn_mat_mult_deep_conv2d_3x3+0x53c>
 8030ab2:	f1cb 0301 	rsb	r3, fp, #1
 8030ab6:	fa01 f103 	lsl.w	r1, r1, r3
 8030aba:	f301 011f 	ssat	r1, #32, r1
 8030abe:	fb51 f114 	smmulr	r1, r1, r4
 8030ac2:	4401      	add	r1, r0
 8030ac4:	e53a      	b.n	803053c <st_sssa8_ch_nn_mat_mult_deep_conv2d_3x3+0x53c>
 8030ac6:	3001      	adds	r0, #1
 8030ac8:	d00d      	beq.n	8030ae6 <st_sssa8_ch_nn_mat_mult_deep_conv2d_3x3+0xae6>
 8030aca:	f04f 0001 	mov.w	r0, #1
 8030ace:	fa00 f003 	lsl.w	r0, r0, r3
 8030ad2:	ea4f 00a0 	mov.w	r0, r0, asr #2
 8030ad6:	fb55 050a 	smmla	r5, r5, sl, r0
 8030ada:	ea4f 0545 	mov.w	r5, r5, lsl #1
 8030ade:	fa45 f503 	asr.w	r5, r5, r3
 8030ae2:	4425      	add	r5, r4
 8030ae4:	e709      	b.n	80308fa <st_sssa8_ch_nn_mat_mult_deep_conv2d_3x3+0x8fa>
 8030ae6:	f1c3 0001 	rsb	r0, r3, #1
 8030aea:	fa05 f500 	lsl.w	r5, r5, r0
 8030aee:	f305 051f 	ssat	r5, #32, r5
 8030af2:	fb55 f51a 	smmulr	r5, r5, sl
 8030af6:	4425      	add	r5, r4
 8030af8:	e6ff      	b.n	80308fa <st_sssa8_ch_nn_mat_mult_deep_conv2d_3x3+0x8fa>
 8030afa:	3001      	adds	r0, #1
 8030afc:	d00d      	beq.n	8030b1a <st_sssa8_ch_nn_mat_mult_deep_conv2d_3x3+0xb1a>
 8030afe:	f04f 0001 	mov.w	r0, #1
 8030b02:	fa00 f003 	lsl.w	r0, r0, r3
 8030b06:	ea4f 00a0 	mov.w	r0, r0, asr #2
 8030b0a:	fb5e 0e0a 	smmla	lr, lr, sl, r0
 8030b0e:	ea4f 0e4e 	mov.w	lr, lr, lsl #1
 8030b12:	fa4e fe03 	asr.w	lr, lr, r3
 8030b16:	44a6      	add	lr, r4
 8030b18:	e6dd      	b.n	80308d6 <st_sssa8_ch_nn_mat_mult_deep_conv2d_3x3+0x8d6>
 8030b1a:	f1c3 0001 	rsb	r0, r3, #1
 8030b1e:	fa0e fe00 	lsl.w	lr, lr, r0
 8030b22:	f30e 0e1f 	ssat	lr, #32, lr
 8030b26:	fb5e fe1a 	smmulr	lr, lr, sl
 8030b2a:	44a6      	add	lr, r4
 8030b2c:	e6d3      	b.n	80308d6 <st_sssa8_ch_nn_mat_mult_deep_conv2d_3x3+0x8d6>
 8030b2e:	bf00      	nop

08030b30 <st_sssa8_ch_nn_mat_mult_kernel_opt>:
 8030b30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8030b34:	b086      	sub	sp, #24
 8030b36:	f89d 7058 	ldrb.w	r7, [sp, #88]	@ 0x58
 8030b3a:	9100      	str	r1, [sp, #0]
 8030b3c:	9203      	str	r2, [sp, #12]
 8030b3e:	2f00      	cmp	r7, #0
 8030b40:	9305      	str	r3, [sp, #20]
 8030b42:	bf18      	it	ne
 8030b44:	2301      	movne	r3, #1
 8030b46:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 8030b48:	fb04 3303 	mla	r3, r4, r3, r3
 8030b4c:	9304      	str	r3, [sp, #16]
 8030b4e:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 8030b50:	bf14      	ite	ne
 8030b52:	462f      	movne	r7, r5
 8030b54:	2701      	moveq	r7, #1
 8030b56:	9701      	str	r7, [sp, #4]
 8030b58:	f8bd 3044 	ldrh.w	r3, [sp, #68]	@ 0x44
 8030b5c:	085b      	lsrs	r3, r3, #1
 8030b5e:	f000 809f 	beq.w	8030ca0 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x170>
 8030b62:	f8dd b050 	ldr.w	fp, [sp, #80]	@ 0x50
 8030b66:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8030b68:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8030b6c:	9302      	str	r3, [sp, #8]
 8030b6e:	f8dd e048 	ldr.w	lr, [sp, #72]	@ 0x48
 8030b72:	9f03      	ldr	r7, [sp, #12]
 8030b74:	ea5f 089e 	movs.w	r8, lr, lsr #2
 8030b78:	f8dd c000 	ldr.w	ip, [sp]
 8030b7c:	f857 6b04 	ldr.w	r6, [r7], #4
 8030b80:	f857 3b04 	ldr.w	r3, [r7], #4
 8030b84:	9703      	str	r7, [sp, #12]
 8030b86:	461a      	mov	r2, r3
 8030b88:	4631      	mov	r1, r6
 8030b8a:	d022      	beq.n	8030bd2 <st_sssa8_ch_nn_mat_mult_kernel_opt+0xa2>
 8030b8c:	f85c 701e 	ldr.w	r7, [ip, lr, lsl #1]
 8030b90:	f85c 9b04 	ldr.w	r9, [ip], #4
 8030b94:	f850 ab04 	ldr.w	sl, [r0], #4
 8030b98:	f850 5b04 	ldr.w	r5, [r0], #4
 8030b9c:	fb2a 6609 	smlad	r6, sl, r9, r6
 8030ba0:	fb2a 1107 	smlad	r1, sl, r7, r1
 8030ba4:	fb25 3309 	smlad	r3, r5, r9, r3
 8030ba8:	fb25 2207 	smlad	r2, r5, r7, r2
 8030bac:	f85c 701e 	ldr.w	r7, [ip, lr, lsl #1]
 8030bb0:	f85c 9b04 	ldr.w	r9, [ip], #4
 8030bb4:	f850 ab04 	ldr.w	sl, [r0], #4
 8030bb8:	f850 5b04 	ldr.w	r5, [r0], #4
 8030bbc:	fb2a 6609 	smlad	r6, sl, r9, r6
 8030bc0:	fb2a 1107 	smlad	r1, sl, r7, r1
 8030bc4:	fb25 3309 	smlad	r3, r5, r9, r3
 8030bc8:	fb25 2207 	smlad	r2, r5, r7, r2
 8030bcc:	f1b8 0801 	subs.w	r8, r8, #1
 8030bd0:	d1dc      	bne.n	8030b8c <st_sssa8_ch_nn_mat_mult_kernel_opt+0x5c>
 8030bd2:	f00e 0703 	and.w	r7, lr, #3
 8030bd6:	b18f      	cbz	r7, 8030bfc <st_sssa8_ch_nn_mat_mult_kernel_opt+0xcc>
 8030bd8:	f93c 801e 	ldrsh.w	r8, [ip, lr, lsl #1]
 8030bdc:	f93c ab02 	ldrsh.w	sl, [ip], #2
 8030be0:	f930 5b02 	ldrsh.w	r5, [r0], #2
 8030be4:	f930 9b02 	ldrsh.w	r9, [r0], #2
 8030be8:	fb0a 6605 	mla	r6, sl, r5, r6
 8030bec:	fb09 330a 	mla	r3, r9, sl, r3
 8030bf0:	fb08 1105 	mla	r1, r8, r5, r1
 8030bf4:	fb09 2208 	mla	r2, r9, r8, r2
 8030bf8:	3f01      	subs	r7, #1
 8030bfa:	dced      	bgt.n	8030bd8 <st_sssa8_ch_nn_mat_mult_kernel_opt+0xa8>
 8030bfc:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 8030c00:	9f15      	ldr	r7, [sp, #84]	@ 0x54
 8030c02:	f93a 4b02 	ldrsh.w	r4, [sl], #2
 8030c06:	f857 cb04 	ldr.w	ip, [r7], #4
 8030c0a:	f85b 5b04 	ldr.w	r5, [fp], #4
 8030c0e:	f1c4 0915 	rsb	r9, r4, #21
 8030c12:	ea99 0904 	eors.w	r9, r9, r4
 8030c16:	f340 80c8 	ble.w	8030daa <st_sssa8_ch_nn_mat_mult_kernel_opt+0x27a>
 8030c1a:	ea4f 0646 	mov.w	r6, r6, lsl #1
 8030c1e:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8030c22:	fb56 c605 	smmla	r6, r6, r5, ip
 8030c26:	fb51 c105 	smmla	r1, r1, r5, ip
 8030c2a:	fa46 f604 	asr.w	r6, r6, r4
 8030c2e:	fa41 f104 	asr.w	r1, r1, r4
 8030c32:	f93a 4b02 	ldrsh.w	r4, [sl], #2
 8030c36:	f857 cb04 	ldr.w	ip, [r7], #4
 8030c3a:	f85b 5b04 	ldr.w	r5, [fp], #4
 8030c3e:	f1c4 0915 	rsb	r9, r4, #21
 8030c42:	ea99 0904 	eors.w	r9, r9, r4
 8030c46:	f340 8099 	ble.w	8030d7c <st_sssa8_ch_nn_mat_mult_kernel_opt+0x24c>
 8030c4a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8030c4e:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8030c52:	fb53 c305 	smmla	r3, r3, r5, ip
 8030c56:	fb52 c205 	smmla	r2, r2, r5, ip
 8030c5a:	fa43 f304 	asr.w	r3, r3, r4
 8030c5e:	fa42 f204 	asr.w	r2, r2, r4
 8030c62:	f306 0607 	ssat	r6, #8, r6
 8030c66:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8030c6a:	9c17      	ldr	r4, [sp, #92]	@ 0x5c
 8030c6c:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8030c70:	7026      	strb	r6, [r4, #0]
 8030c72:	44a0      	add	r8, r4
 8030c74:	f301 0107 	ssat	r1, #8, r1
 8030c78:	f888 1000 	strb.w	r1, [r8]
 8030c7c:	f303 0307 	ssat	r3, #8, r3
 8030c80:	f804 3009 	strb.w	r3, [r4, r9]
 8030c84:	f302 0207 	ssat	r2, #8, r2
 8030c88:	f808 2009 	strb.w	r2, [r8, r9]
 8030c8c:	eb04 0249 	add.w	r2, r4, r9, lsl #1
 8030c90:	9217      	str	r2, [sp, #92]	@ 0x5c
 8030c92:	f8cd a04c 	str.w	sl, [sp, #76]	@ 0x4c
 8030c96:	9c02      	ldr	r4, [sp, #8]
 8030c98:	9715      	str	r7, [sp, #84]	@ 0x54
 8030c9a:	45a2      	cmp	sl, r4
 8030c9c:	f47f af67 	bne.w	8030b6e <st_sssa8_ch_nn_mat_mult_kernel_opt+0x3e>
 8030ca0:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8030ca2:	f013 0301 	ands.w	r3, r3, #1
 8030ca6:	d054      	beq.n	8030d52 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x222>
 8030ca8:	f8bd e048 	ldrh.w	lr, [sp, #72]	@ 0x48
 8030cac:	9b03      	ldr	r3, [sp, #12]
 8030cae:	f8dd c000 	ldr.w	ip, [sp]
 8030cb2:	6819      	ldr	r1, [r3, #0]
 8030cb4:	ea5f 079e 	movs.w	r7, lr, lsr #2
 8030cb8:	eb0c 044e 	add.w	r4, ip, lr, lsl #1
 8030cbc:	460e      	mov	r6, r1
 8030cbe:	d015      	beq.n	8030cec <st_sssa8_ch_nn_mat_mult_kernel_opt+0x1bc>
 8030cc0:	f85c 501e 	ldr.w	r5, [ip, lr, lsl #1]
 8030cc4:	f85c 8b04 	ldr.w	r8, [ip], #4
 8030cc8:	f850 ab04 	ldr.w	sl, [r0], #4
 8030ccc:	f850 3b04 	ldr.w	r3, [r0], #4
 8030cd0:	fb2a 6608 	smlad	r6, sl, r8, r6
 8030cd4:	fb2a 1105 	smlad	r1, sl, r5, r1
 8030cd8:	f85c a01e 	ldr.w	sl, [ip, lr, lsl #1]
 8030cdc:	f85c 8b04 	ldr.w	r8, [ip], #4
 8030ce0:	fb23 6608 	smlad	r6, r3, r8, r6
 8030ce4:	fb23 110a 	smlad	r1, r3, sl, r1
 8030ce8:	3f01      	subs	r7, #1
 8030cea:	d1e9      	bne.n	8030cc0 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x190>
 8030cec:	f01e 0703 	ands.w	r7, lr, #3
 8030cf0:	d00b      	beq.n	8030d0a <st_sssa8_ch_nn_mat_mult_kernel_opt+0x1da>
 8030cf2:	f83c 301e 	ldrh.w	r3, [ip, lr, lsl #1]
 8030cf6:	f83c 9b02 	ldrh.w	r9, [ip], #2
 8030cfa:	f930 ab02 	ldrsh.w	sl, [r0], #2
 8030cfe:	fb19 660a 	smlabb	r6, r9, sl, r6
 8030d02:	3f01      	subs	r7, #1
 8030d04:	fb13 110a 	smlabb	r1, r3, sl, r1
 8030d08:	dcf3      	bgt.n	8030cf2 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x1c2>
 8030d0a:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 8030d0e:	9f15      	ldr	r7, [sp, #84]	@ 0x54
 8030d10:	f9ba 4000 	ldrsh.w	r4, [sl]
 8030d14:	f8d7 c000 	ldr.w	ip, [r7]
 8030d18:	f8db 5000 	ldr.w	r5, [fp]
 8030d1c:	f1c4 0915 	rsb	r9, r4, #21
 8030d20:	ea99 0904 	eors.w	r9, r9, r4
 8030d24:	dd58      	ble.n	8030dd8 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x2a8>
 8030d26:	ea4f 0646 	mov.w	r6, r6, lsl #1
 8030d2a:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8030d2e:	fb56 c605 	smmla	r6, r6, r5, ip
 8030d32:	fb51 c105 	smmla	r1, r1, r5, ip
 8030d36:	fa46 f604 	asr.w	r6, r6, r4
 8030d3a:	fa41 f104 	asr.w	r1, r1, r4
 8030d3e:	f306 0607 	ssat	r6, #8, r6
 8030d42:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8030d44:	9c04      	ldr	r4, [sp, #16]
 8030d46:	7016      	strb	r6, [r2, #0]
 8030d48:	f301 0107 	ssat	r1, #8, r1
 8030d4c:	5511      	strb	r1, [r2, r4]
 8030d4e:	9b01      	ldr	r3, [sp, #4]
 8030d50:	441a      	add	r2, r3
 8030d52:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8030d54:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8030d56:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 8030d58:	b133      	cbz	r3, 8030d68 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x238>
 8030d5a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8030d5c:	f104 0002 	add.w	r0, r4, #2
 8030d60:	fb03 0011 	mls	r0, r3, r1, r0
 8030d64:	4410      	add	r0, r2
 8030d66:	e006      	b.n	8030d76 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x246>
 8030d68:	eba2 0001 	sub.w	r0, r2, r1
 8030d6c:	9a05      	ldr	r2, [sp, #20]
 8030d6e:	f104 0402 	add.w	r4, r4, #2
 8030d72:	fb02 0004 	mla	r0, r2, r4, r0
 8030d76:	b006      	add	sp, #24
 8030d78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8030d7c:	2c00      	cmp	r4, #0
 8030d7e:	dd42      	ble.n	8030e06 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x2d6>
 8030d80:	f04f 0901 	mov.w	r9, #1
 8030d84:	fa09 f904 	lsl.w	r9, r9, r4
 8030d88:	ea4f 09a9 	mov.w	r9, r9, asr #2
 8030d8c:	fb53 9305 	smmla	r3, r3, r5, r9
 8030d90:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8030d94:	fa43 f304 	asr.w	r3, r3, r4
 8030d98:	4463      	add	r3, ip
 8030d9a:	fb52 9205 	smmla	r2, r2, r5, r9
 8030d9e:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8030da2:	fa42 f204 	asr.w	r2, r2, r4
 8030da6:	4462      	add	r2, ip
 8030da8:	e75b      	b.n	8030c62 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x132>
 8030daa:	2c00      	cmp	r4, #0
 8030dac:	dd3c      	ble.n	8030e28 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x2f8>
 8030dae:	f04f 0901 	mov.w	r9, #1
 8030db2:	fa09 f904 	lsl.w	r9, r9, r4
 8030db6:	ea4f 09a9 	mov.w	r9, r9, asr #2
 8030dba:	fb56 9605 	smmla	r6, r6, r5, r9
 8030dbe:	ea4f 0646 	mov.w	r6, r6, lsl #1
 8030dc2:	fa46 f604 	asr.w	r6, r6, r4
 8030dc6:	4466      	add	r6, ip
 8030dc8:	fb51 9105 	smmla	r1, r1, r5, r9
 8030dcc:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8030dd0:	fa41 f104 	asr.w	r1, r1, r4
 8030dd4:	4461      	add	r1, ip
 8030dd6:	e72c      	b.n	8030c32 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x102>
 8030dd8:	2c00      	cmp	r4, #0
 8030dda:	dd36      	ble.n	8030e4a <st_sssa8_ch_nn_mat_mult_kernel_opt+0x31a>
 8030ddc:	f04f 0901 	mov.w	r9, #1
 8030de0:	fa09 f904 	lsl.w	r9, r9, r4
 8030de4:	ea4f 09a9 	mov.w	r9, r9, asr #2
 8030de8:	fb56 9605 	smmla	r6, r6, r5, r9
 8030dec:	ea4f 0646 	mov.w	r6, r6, lsl #1
 8030df0:	fa46 f604 	asr.w	r6, r6, r4
 8030df4:	4466      	add	r6, ip
 8030df6:	fb51 9105 	smmla	r1, r1, r5, r9
 8030dfa:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8030dfe:	fa41 f104 	asr.w	r1, r1, r4
 8030e02:	4461      	add	r1, ip
 8030e04:	e79b      	b.n	8030d3e <st_sssa8_ch_nn_mat_mult_kernel_opt+0x20e>
 8030e06:	f1c4 0901 	rsb	r9, r4, #1
 8030e0a:	fa03 f309 	lsl.w	r3, r3, r9
 8030e0e:	f303 031f 	ssat	r3, #32, r3
 8030e12:	fb53 f315 	smmulr	r3, r3, r5
 8030e16:	fa02 f209 	lsl.w	r2, r2, r9
 8030e1a:	f302 021f 	ssat	r2, #32, r2
 8030e1e:	fb52 f215 	smmulr	r2, r2, r5
 8030e22:	4463      	add	r3, ip
 8030e24:	4462      	add	r2, ip
 8030e26:	e71c      	b.n	8030c62 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x132>
 8030e28:	f1c4 0901 	rsb	r9, r4, #1
 8030e2c:	fa06 f609 	lsl.w	r6, r6, r9
 8030e30:	f306 061f 	ssat	r6, #32, r6
 8030e34:	fb56 f615 	smmulr	r6, r6, r5
 8030e38:	fa01 f109 	lsl.w	r1, r1, r9
 8030e3c:	f301 011f 	ssat	r1, #32, r1
 8030e40:	fb51 f115 	smmulr	r1, r1, r5
 8030e44:	4466      	add	r6, ip
 8030e46:	4461      	add	r1, ip
 8030e48:	e6f3      	b.n	8030c32 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x102>
 8030e4a:	f1c4 0901 	rsb	r9, r4, #1
 8030e4e:	fa06 f609 	lsl.w	r6, r6, r9
 8030e52:	f306 061f 	ssat	r6, #32, r6
 8030e56:	fb56 f615 	smmulr	r6, r6, r5
 8030e5a:	fa01 f109 	lsl.w	r1, r1, r9
 8030e5e:	f301 011f 	ssat	r1, #32, r1
 8030e62:	fb51 f115 	smmulr	r1, r1, r5
 8030e66:	4466      	add	r6, ip
 8030e68:	4461      	add	r1, ip
 8030e6a:	e768      	b.n	8030d3e <st_sssa8_ch_nn_mat_mult_kernel_opt+0x20e>
 8030e6c:	0000      	movs	r0, r0
	...

08030e70 <st_sssa8_ch_nn_mat_mult_pw_nt_t>:
 8030e70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8030e74:	b099      	sub	sp, #100	@ 0x64
 8030e76:	9014      	str	r0, [sp, #80]	@ 0x50
 8030e78:	9113      	str	r1, [sp, #76]	@ 0x4c
 8030e7a:	9216      	str	r2, [sp, #88]	@ 0x58
 8030e7c:	9312      	str	r3, [sp, #72]	@ 0x48
 8030e7e:	9829      	ldr	r0, [sp, #164]	@ 0xa4
 8030e80:	f000 0303 	and.w	r3, r0, #3
 8030e84:	2b03      	cmp	r3, #3
 8030e86:	bf0c      	ite	eq
 8030e88:	2601      	moveq	r6, #1
 8030e8a:	2600      	movne	r6, #0
 8030e8c:	9617      	str	r6, [sp, #92]	@ 0x5c
 8030e8e:	2803      	cmp	r0, #3
 8030e90:	bf0c      	ite	eq
 8030e92:	2601      	moveq	r6, #1
 8030e94:	2600      	movne	r6, #0
 8030e96:	9618      	str	r6, [sp, #96]	@ 0x60
 8030e98:	f010 0002 	ands.w	r0, r0, #2
 8030e9c:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 8030e9e:	2800      	cmp	r0, #0
 8030ea0:	bf14      	ite	ne
 8030ea2:	4618      	movne	r0, r3
 8030ea4:	2001      	moveq	r0, #1
 8030ea6:	9010      	str	r0, [sp, #64]	@ 0x40
 8030ea8:	9826      	ldr	r0, [sp, #152]	@ 0x98
 8030eaa:	bf0c      	ite	eq
 8030eac:	4606      	moveq	r6, r0
 8030eae:	2601      	movne	r6, #1
 8030eb0:	9611      	str	r6, [sp, #68]	@ 0x44
 8030eb2:	e9dd 042c 	ldrd	r0, r4, [sp, #176]	@ 0xb0
 8030eb6:	2c00      	cmp	r4, #0
 8030eb8:	bf18      	it	ne
 8030eba:	4620      	movne	r0, r4
 8030ebc:	902c      	str	r0, [sp, #176]	@ 0xb0
 8030ebe:	9826      	ldr	r0, [sp, #152]	@ 0x98
 8030ec0:	2801      	cmp	r0, #1
 8030ec2:	f340 81be 	ble.w	8031242 <st_sssa8_ch_nn_mat_mult_pw_nt_t+0x3d2>
 8030ec6:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8030eca:	9c29      	ldr	r4, [sp, #164]	@ 0xa4
 8030ecc:	f014 0f02 	tst.w	r4, #2
 8030ed0:	d101      	bne.n	8030ed6 <st_sssa8_ch_nn_mat_mult_pw_nt_t+0x66>
 8030ed2:	f04f 0302 	mov.w	r3, #2
 8030ed6:	9315      	str	r3, [sp, #84]	@ 0x54
 8030ed8:	f04f 0800 	mov.w	r8, #0
 8030edc:	f8cd 8034 	str.w	r8, [sp, #52]	@ 0x34
 8030ee0:	f8dd b034 	ldr.w	fp, [sp, #52]	@ 0x34
 8030ee4:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8030ee6:	eb02 028b 	add.w	r2, r2, fp, lsl #2
 8030eea:	f9b2 3000 	ldrsh.w	r3, [r2]
 8030eee:	f9b2 4002 	ldrsh.w	r4, [r2, #2]
 8030ef2:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8030ef6:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8030ef8:	eb02 02cb 	add.w	r2, r2, fp, lsl #3
 8030efc:	e9d2 1200 	ldrd	r1, r2, [r2]
 8030f00:	e9cd 1202 	strd	r1, r2, [sp, #8]
 8030f04:	9a2b      	ldr	r2, [sp, #172]	@ 0xac
 8030f06:	eb02 02cb 	add.w	r2, r2, fp, lsl #3
 8030f0a:	e9d2 1200 	ldrd	r1, r2, [r2]
 8030f0e:	e9cd 1200 	strd	r1, r2, [sp]
 8030f12:	2b00      	cmp	r3, #0
 8030f14:	bfcc      	ite	gt
 8030f16:	2000      	movgt	r0, #0
 8030f18:	f04f 30ff 	movle.w	r0, #4294967295
 8030f1c:	2b15      	cmp	r3, #21
 8030f1e:	bfc8      	it	gt
 8030f20:	2001      	movgt	r0, #1
 8030f22:	2c00      	cmp	r4, #0
 8030f24:	bfcc      	ite	gt
 8030f26:	2100      	movgt	r1, #0
 8030f28:	f04f 31ff 	movle.w	r1, #4294967295
 8030f2c:	2c15      	cmp	r4, #21
 8030f2e:	bfc8      	it	gt
 8030f30:	2101      	movgt	r1, #1
 8030f32:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8030f36:	9b2d      	ldr	r3, [sp, #180]	@ 0xb4
 8030f38:	2b00      	cmp	r3, #0
 8030f3a:	f000 8297 	beq.w	803146c <st_sssa8_ch_nn_mat_mult_pw_nt_t+0x5fc>
 8030f3e:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8030f40:	2b00      	cmp	r3, #0
 8030f42:	f040 82bb 	bne.w	80314bc <st_sssa8_ch_nn_mat_mult_pw_nt_t+0x64c>
 8030f46:	461a      	mov	r2, r3
 8030f48:	4618      	mov	r0, r3
 8030f4a:	9916      	ldr	r1, [sp, #88]	@ 0x58
 8030f4c:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
 8030f50:	e9d1 3400 	ldrd	r3, r4, [r1]
 8030f54:	4403      	add	r3, r0
 8030f56:	4414      	add	r4, r2
 8030f58:	e9cd 3409 	strd	r3, r4, [sp, #36]	@ 0x24
 8030f5c:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8030f5e:	9824      	ldr	r0, [sp, #144]	@ 0x90
 8030f60:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8030f62:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 8030f64:	2900      	cmp	r1, #0
 8030f66:	bf1c      	itt	ne
 8030f68:	3203      	addne	r2, #3
 8030f6a:	18d2      	addne	r2, r2, r3
 8030f6c:	f8dd 9050 	ldr.w	r9, [sp, #80]	@ 0x50
 8030f70:	920b      	str	r2, [sp, #44]	@ 0x2c
 8030f72:	1040      	asrs	r0, r0, #1
 8030f74:	f000 8144 	beq.w	8031200 <st_sssa8_ch_nn_mat_mult_pw_nt_t+0x390>
 8030f78:	930f      	str	r3, [sp, #60]	@ 0x3c
 8030f7a:	900e      	str	r0, [sp, #56]	@ 0x38
 8030f7c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8030f7e:	9f27      	ldr	r7, [sp, #156]	@ 0x9c
 8030f80:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8030f82:	9e2c      	ldr	r6, [sp, #176]	@ 0xb0
 8030f84:	e9dd ce09 	ldrd	ip, lr, [sp, #36]	@ 0x24
 8030f88:	46e2      	mov	sl, ip
 8030f8a:	46f3      	mov	fp, lr
 8030f8c:	4413      	add	r3, r2
 8030f8e:	930c      	str	r3, [sp, #48]	@ 0x30
 8030f90:	ea5f 1827 	movs.w	r8, r7, asr #4
 8030f94:	f000 8094 	beq.w	80310c0 <st_sssa8_ch_nn_mat_mult_pw_nt_t+0x250>
 8030f98:	f859 5007 	ldr.w	r5, [r9, r7]
 8030f9c:	f856 0b04 	ldr.w	r0, [r6], #4
 8030fa0:	f856 1b04 	ldr.w	r1, [r6], #4
 8030fa4:	f856 2b04 	ldr.w	r2, [r6], #4
 8030fa8:	f856 3b04 	ldr.w	r3, [r6], #4
 8030fac:	fa2f f485 	sxtb16	r4, r5
 8030fb0:	fa2f f595 	sxtb16	r5, r5, ror #8
 8030fb4:	fb24 aa00 	smlad	sl, r4, r0, sl
 8030fb8:	fb24 bb02 	smlad	fp, r4, r2, fp
 8030fbc:	fb25 aa01 	smlad	sl, r5, r1, sl
 8030fc0:	fb25 bb03 	smlad	fp, r5, r3, fp
 8030fc4:	f859 4b04 	ldr.w	r4, [r9], #4
 8030fc8:	fa2f f584 	sxtb16	r5, r4
 8030fcc:	fa2f f494 	sxtb16	r4, r4, ror #8
 8030fd0:	fb25 cc00 	smlad	ip, r5, r0, ip
 8030fd4:	fb25 ee02 	smlad	lr, r5, r2, lr
 8030fd8:	fb24 cc01 	smlad	ip, r4, r1, ip
 8030fdc:	fb24 ee03 	smlad	lr, r4, r3, lr
 8030fe0:	f859 5007 	ldr.w	r5, [r9, r7]
 8030fe4:	f856 0b04 	ldr.w	r0, [r6], #4
 8030fe8:	f856 1b04 	ldr.w	r1, [r6], #4
 8030fec:	f856 2b04 	ldr.w	r2, [r6], #4
 8030ff0:	f856 3b04 	ldr.w	r3, [r6], #4
 8030ff4:	fa2f f485 	sxtb16	r4, r5
 8030ff8:	fa2f f595 	sxtb16	r5, r5, ror #8
 8030ffc:	fb24 aa00 	smlad	sl, r4, r0, sl
 8031000:	fb24 bb02 	smlad	fp, r4, r2, fp
 8031004:	fb25 aa01 	smlad	sl, r5, r1, sl
 8031008:	fb25 bb03 	smlad	fp, r5, r3, fp
 803100c:	f859 4b04 	ldr.w	r4, [r9], #4
 8031010:	fa2f f584 	sxtb16	r5, r4
 8031014:	fa2f f494 	sxtb16	r4, r4, ror #8
 8031018:	fb25 cc00 	smlad	ip, r5, r0, ip
 803101c:	fb25 ee02 	smlad	lr, r5, r2, lr
 8031020:	fb24 cc01 	smlad	ip, r4, r1, ip
 8031024:	fb24 ee03 	smlad	lr, r4, r3, lr
 8031028:	f859 5007 	ldr.w	r5, [r9, r7]
 803102c:	f856 0b04 	ldr.w	r0, [r6], #4
 8031030:	f856 1b04 	ldr.w	r1, [r6], #4
 8031034:	f856 2b04 	ldr.w	r2, [r6], #4
 8031038:	f856 3b04 	ldr.w	r3, [r6], #4
 803103c:	fa2f f485 	sxtb16	r4, r5
 8031040:	fa2f f595 	sxtb16	r5, r5, ror #8
 8031044:	fb24 aa00 	smlad	sl, r4, r0, sl
 8031048:	fb24 bb02 	smlad	fp, r4, r2, fp
 803104c:	fb25 aa01 	smlad	sl, r5, r1, sl
 8031050:	fb25 bb03 	smlad	fp, r5, r3, fp
 8031054:	f859 4b04 	ldr.w	r4, [r9], #4
 8031058:	fa2f f584 	sxtb16	r5, r4
 803105c:	fa2f f494 	sxtb16	r4, r4, ror #8
 8031060:	fb25 cc00 	smlad	ip, r5, r0, ip
 8031064:	fb25 ee02 	smlad	lr, r5, r2, lr
 8031068:	fb24 cc01 	smlad	ip, r4, r1, ip
 803106c:	fb24 ee03 	smlad	lr, r4, r3, lr
 8031070:	f859 5007 	ldr.w	r5, [r9, r7]
 8031074:	f856 0b04 	ldr.w	r0, [r6], #4
 8031078:	f856 1b04 	ldr.w	r1, [r6], #4
 803107c:	f856 2b04 	ldr.w	r2, [r6], #4
 8031080:	f856 3b04 	ldr.w	r3, [r6], #4
 8031084:	fa2f f485 	sxtb16	r4, r5
 8031088:	fa2f f595 	sxtb16	r5, r5, ror #8
 803108c:	fb24 aa00 	smlad	sl, r4, r0, sl
 8031090:	fb24 bb02 	smlad	fp, r4, r2, fp
 8031094:	fb25 aa01 	smlad	sl, r5, r1, sl
 8031098:	fb25 bb03 	smlad	fp, r5, r3, fp
 803109c:	f859 4b04 	ldr.w	r4, [r9], #4
 80310a0:	fa2f f584 	sxtb16	r5, r4
 80310a4:	fa2f f494 	sxtb16	r4, r4, ror #8
 80310a8:	fb25 cc00 	smlad	ip, r5, r0, ip
 80310ac:	fb25 ee02 	smlad	lr, r5, r2, lr
 80310b0:	fb24 cc01 	smlad	ip, r4, r1, ip
 80310b4:	fb24 ee03 	smlad	lr, r4, r3, lr
 80310b8:	f1b8 0801 	subs.w	r8, r8, #1
 80310bc:	f73f af6c 	bgt.w	8030f98 <st_sssa8_ch_nn_mat_mult_pw_nt_t+0x128>
 80310c0:	f017 000f 	ands.w	r0, r7, #15
 80310c4:	d046      	beq.n	8031154 <st_sssa8_ch_nn_mat_mult_pw_nt_t+0x2e4>
 80310c6:	f3c7 0881 	ubfx	r8, r7, #2, #2
 80310ca:	f1b8 0f00 	cmp.w	r8, #0
 80310ce:	d026      	beq.n	803111e <st_sssa8_ch_nn_mat_mult_pw_nt_t+0x2ae>
 80310d0:	f859 5007 	ldr.w	r5, [r9, r7]
 80310d4:	f856 0b04 	ldr.w	r0, [r6], #4
 80310d8:	f856 1b04 	ldr.w	r1, [r6], #4
 80310dc:	f856 2b04 	ldr.w	r2, [r6], #4
 80310e0:	f856 3b04 	ldr.w	r3, [r6], #4
 80310e4:	fa2f f485 	sxtb16	r4, r5
 80310e8:	fa2f f595 	sxtb16	r5, r5, ror #8
 80310ec:	fb24 aa00 	smlad	sl, r4, r0, sl
 80310f0:	fb24 bb02 	smlad	fp, r4, r2, fp
 80310f4:	fb25 aa01 	smlad	sl, r5, r1, sl
 80310f8:	fb25 bb03 	smlad	fp, r5, r3, fp
 80310fc:	f859 4b04 	ldr.w	r4, [r9], #4
 8031100:	fa2f f584 	sxtb16	r5, r4
 8031104:	fa2f f494 	sxtb16	r4, r4, ror #8
 8031108:	fb25 cc00 	smlad	ip, r5, r0, ip
 803110c:	fb25 ee02 	smlad	lr, r5, r2, lr
 8031110:	fb24 cc01 	smlad	ip, r4, r1, ip
 8031114:	fb24 ee03 	smlad	lr, r4, r3, lr
 8031118:	f1b8 0801 	subs.w	r8, r8, #1
 803111c:	dcd8      	bgt.n	80310d0 <st_sssa8_ch_nn_mat_mult_pw_nt_t+0x260>
 803111e:	f017 0803 	ands.w	r8, r7, #3
 8031122:	f1b8 0f00 	cmp.w	r8, #0
 8031126:	d015      	beq.n	8031154 <st_sssa8_ch_nn_mat_mult_pw_nt_t+0x2e4>
 8031128:	9827      	ldr	r0, [sp, #156]	@ 0x9c
 803112a:	f936 3b02 	ldrsh.w	r3, [r6], #2
 803112e:	f936 5b02 	ldrsh.w	r5, [r6], #2
 8031132:	f999 1000 	ldrsb.w	r1, [r9]
 8031136:	fb13 cc01 	smlabb	ip, r3, r1, ip
 803113a:	fb15 ee01 	smlabb	lr, r5, r1, lr
 803113e:	f919 1000 	ldrsb.w	r1, [r9, r0]
 8031142:	fb13 aa01 	smlabb	sl, r3, r1, sl
 8031146:	fb15 bb01 	smlabb	fp, r5, r1, fp
 803114a:	f109 0901 	add.w	r9, r9, #1
 803114e:	f1b8 0801 	subs.w	r8, r8, #1
 8031152:	dcea      	bgt.n	803112a <st_sssa8_ch_nn_mat_mult_pw_nt_t+0x2ba>
 8031154:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8031156:	462e      	mov	r6, r5
 8031158:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 803115a:	b168      	cbz	r0, 8031178 <st_sssa8_ch_nn_mat_mult_pw_nt_t+0x308>
 803115c:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 803115e:	1e90      	subs	r0, r2, #2
 8031160:	dc09      	bgt.n	8031176 <st_sssa8_ch_nn_mat_mult_pw_nt_t+0x306>
 8031162:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8031164:	f1c2 0202 	rsb	r2, r2, #2
 8031168:	eb04 0242 	add.w	r2, r4, r2, lsl #1
 803116c:	920c      	str	r2, [sp, #48]	@ 0x30
 803116e:	9a2a      	ldr	r2, [sp, #168]	@ 0xa8
 8031170:	4410      	add	r0, r2
 8031172:	f105 0502 	add.w	r5, r5, #2
 8031176:	900f      	str	r0, [sp, #60]	@ 0x3c
 8031178:	9800      	ldr	r0, [sp, #0]
 803117a:	9902      	ldr	r1, [sp, #8]
 803117c:	9a04      	ldr	r2, [sp, #16]
 803117e:	9b06      	ldr	r3, [sp, #24]
 8031180:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
 8031182:	2b00      	cmp	r3, #0
 8031184:	f040 80c9 	bne.w	803131a <st_sssa8_ch_nn_mat_mult_pw_nt_t+0x4aa>
 8031188:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 803118c:	ea4f 0a4a 	mov.w	sl, sl, lsl #1
 8031190:	fb5c 0c01 	smmla	ip, ip, r1, r0
 8031194:	fb5a 0a01 	smmla	sl, sl, r1, r0
 8031198:	fa4c fc02 	asr.w	ip, ip, r2
 803119c:	fa4a fa02 	asr.w	sl, sl, r2
 80311a0:	f30c 0c07 	ssat	ip, #8, ip
 80311a4:	f30a 0a07 	ssat	sl, #8, sl
 80311a8:	f886 c000 	strb.w	ip, [r6]
 80311ac:	f887 a000 	strb.w	sl, [r7]
 80311b0:	9801      	ldr	r0, [sp, #4]
 80311b2:	9903      	ldr	r1, [sp, #12]
 80311b4:	9a05      	ldr	r2, [sp, #20]
 80311b6:	9b07      	ldr	r3, [sp, #28]
 80311b8:	f8dd 8040 	ldr.w	r8, [sp, #64]	@ 0x40
 80311bc:	2b00      	cmp	r3, #0
 80311be:	f040 80d4 	bne.w	803136a <st_sssa8_ch_nn_mat_mult_pw_nt_t+0x4fa>
 80311c2:	ea4f 0e4e 	mov.w	lr, lr, lsl #1
 80311c6:	ea4f 0b4b 	mov.w	fp, fp, lsl #1
 80311ca:	fb5e 0e01 	smmla	lr, lr, r1, r0
 80311ce:	fb5b 0b01 	smmla	fp, fp, r1, r0
 80311d2:	fa4e fe02 	asr.w	lr, lr, r2
 80311d6:	fa4b fb02 	asr.w	fp, fp, r2
 80311da:	f30e 0e07 	ssat	lr, #8, lr
 80311de:	f30b 0b07 	ssat	fp, #8, fp
 80311e2:	f806 e008 	strb.w	lr, [r6, r8]
 80311e6:	f807 b008 	strb.w	fp, [r7, r8]
 80311ea:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80311ec:	9a27      	ldr	r2, [sp, #156]	@ 0x9c
 80311ee:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 80311f2:	930b      	str	r3, [sp, #44]	@ 0x2c
 80311f4:	4491      	add	r9, r2
 80311f6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80311f8:	3b01      	subs	r3, #1
 80311fa:	930e      	str	r3, [sp, #56]	@ 0x38
 80311fc:	f47f aebe 	bne.w	8030f7c <st_sssa8_ch_nn_mat_mult_pw_nt_t+0x10c>
 8031200:	f8cd 9020 	str.w	r9, [sp, #32]
 8031204:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8031206:	f013 0f01 	tst.w	r3, #1
 803120a:	f040 80d6 	bne.w	80313ba <st_sssa8_ch_nn_mat_mult_pw_nt_t+0x54a>
 803120e:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8031210:	9a27      	ldr	r2, [sp, #156]	@ 0x9c
 8031212:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 8031216:	9313      	str	r3, [sp, #76]	@ 0x4c
 8031218:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 803121a:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 803121c:	4413      	add	r3, r2
 803121e:	9312      	str	r3, [sp, #72]	@ 0x48
 8031220:	9b2d      	ldr	r3, [sp, #180]	@ 0xb4
 8031222:	b123      	cbz	r3, 803122e <st_sssa8_ch_nn_mat_mult_pw_nt_t+0x3be>
 8031224:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 8031226:	9a27      	ldr	r2, [sp, #156]	@ 0x9c
 8031228:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 803122c:	932c      	str	r3, [sp, #176]	@ 0xb0
 803122e:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8031230:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8031232:	ea4f 0363 	mov.w	r3, r3, asr #1
 8031236:	f102 0201 	add.w	r2, r2, #1
 803123a:	920d      	str	r2, [sp, #52]	@ 0x34
 803123c:	4293      	cmp	r3, r2
 803123e:	f73f ae4f 	bgt.w	8030ee0 <st_sssa8_ch_nn_mat_mult_pw_nt_t+0x70>
 8031242:	9d26      	ldr	r5, [sp, #152]	@ 0x98
 8031244:	f015 0501 	ands.w	r5, r5, #1
 8031248:	d060      	beq.n	803130c <st_sssa8_ch_nn_mat_mult_pw_nt_t+0x49c>
 803124a:	f8dd 80a8 	ldr.w	r8, [sp, #168]	@ 0xa8
 803124e:	9d18      	ldr	r5, [sp, #96]	@ 0x60
 8031250:	9e12      	ldr	r6, [sp, #72]	@ 0x48
 8031252:	2d00      	cmp	r5, #0
 8031254:	bf1c      	itt	ne
 8031256:	3603      	addne	r6, #3
 8031258:	4446      	addne	r6, r8
 803125a:	9924      	ldr	r1, [sp, #144]	@ 0x90
 803125c:	2900      	cmp	r1, #0
 803125e:	dd55      	ble.n	803130c <st_sssa8_ch_nn_mat_mult_pw_nt_t+0x49c>
 8031260:	f8cd 803c 	str.w	r8, [sp, #60]	@ 0x3c
 8031264:	9d16      	ldr	r5, [sp, #88]	@ 0x58
 8031266:	9f26      	ldr	r7, [sp, #152]	@ 0x98
 8031268:	f1a7 0701 	sub.w	r7, r7, #1
 803126c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8031270:	f8dc c000 	ldr.w	ip, [ip]
 8031274:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8031276:	eb03 0487 	add.w	r4, r3, r7, lsl #2
 803127a:	6824      	ldr	r4, [r4, #0]
 803127c:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
 803127e:	eb03 0087 	add.w	r0, r3, r7, lsl #2
 8031282:	6800      	ldr	r0, [r0, #0]
 8031284:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8031286:	eb03 0747 	add.w	r7, r3, r7, lsl #1
 803128a:	f9b7 7000 	ldrsh.w	r7, [r7]
 803128e:	9a28      	ldr	r2, [sp, #160]	@ 0xa0
 8031290:	2f00      	cmp	r7, #0
 8031292:	bfcc      	ite	gt
 8031294:	f04f 0900 	movgt.w	r9, #0
 8031298:	f04f 39ff 	movle.w	r9, #4294967295
 803129c:	2f15      	cmp	r7, #21
 803129e:	bfc8      	it	gt
 80312a0:	f04f 0901 	movgt.w	r9, #1
 80312a4:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 80312a6:	f8dd b09c 	ldr.w	fp, [sp, #156]	@ 0x9c
 80312aa:	f1bb 0f00 	cmp.w	fp, #0
 80312ae:	46e6      	mov	lr, ip
 80312b0:	dd0c      	ble.n	80312cc <st_sssa8_ch_nn_mat_mult_pw_nt_t+0x45c>
 80312b2:	f8dd 804c 	ldr.w	r8, [sp, #76]	@ 0x4c
 80312b6:	f915 3b01 	ldrsb.w	r3, [r5], #1
 80312ba:	f918 ab01 	ldrsb.w	sl, [r8], #1
 80312be:	eba3 0302 	sub.w	r3, r3, r2
 80312c2:	fb0a ee03 	mla	lr, sl, r3, lr
 80312c6:	f1bb 0b01 	subs.w	fp, fp, #1
 80312ca:	dcf4      	bgt.n	80312b6 <st_sssa8_ch_nn_mat_mult_pw_nt_t+0x446>
 80312cc:	f1b9 0f00 	cmp.w	r9, #0
 80312d0:	f040 8164 	bne.w	803159c <st_sssa8_ch_nn_mat_mult_pw_nt_t+0x72c>
 80312d4:	ea4f 0e4e 	mov.w	lr, lr, lsl #1
 80312d8:	fb5e 0e04 	smmla	lr, lr, r4, r0
 80312dc:	fa4e fe07 	asr.w	lr, lr, r7
 80312e0:	f30e 0e07 	ssat	lr, #8, lr
 80312e4:	f886 e000 	strb.w	lr, [r6]
 80312e8:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 80312ea:	f013 0f02 	tst.w	r3, #2
 80312ee:	d011      	beq.n	8031314 <st_sssa8_ch_nn_mat_mult_pw_nt_t+0x4a4>
 80312f0:	f013 0f01 	tst.w	r3, #1
 80312f4:	d005      	beq.n	8031302 <st_sssa8_ch_nn_mat_mult_pw_nt_t+0x492>
 80312f6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80312f8:	3b01      	subs	r3, #1
 80312fa:	d102      	bne.n	8031302 <st_sssa8_ch_nn_mat_mult_pw_nt_t+0x492>
 80312fc:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 80312fe:	f106 0602 	add.w	r6, r6, #2
 8031302:	f106 0601 	add.w	r6, r6, #1
 8031306:	930f      	str	r3, [sp, #60]	@ 0x3c
 8031308:	3901      	subs	r1, #1
 803130a:	dccc      	bgt.n	80312a6 <st_sssa8_ch_nn_mat_mult_pw_nt_t+0x436>
 803130c:	2000      	movs	r0, #0
 803130e:	b019      	add	sp, #100	@ 0x64
 8031310:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8031314:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8031316:	441e      	add	r6, r3
 8031318:	e7f6      	b.n	8031308 <st_sssa8_ch_nn_mat_mult_pw_nt_t+0x498>
 803131a:	3301      	adds	r3, #1
 803131c:	d014      	beq.n	8031348 <st_sssa8_ch_nn_mat_mult_pw_nt_t+0x4d8>
 803131e:	f04f 0301 	mov.w	r3, #1
 8031322:	fa03 f302 	lsl.w	r3, r3, r2
 8031326:	ea4f 03a3 	mov.w	r3, r3, asr #2
 803132a:	fb5c 3c01 	smmla	ip, ip, r1, r3
 803132e:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 8031332:	fa4c fc02 	asr.w	ip, ip, r2
 8031336:	4484      	add	ip, r0
 8031338:	fb5a 3a01 	smmla	sl, sl, r1, r3
 803133c:	ea4f 0a4a 	mov.w	sl, sl, lsl #1
 8031340:	fa4a fa02 	asr.w	sl, sl, r2
 8031344:	4482      	add	sl, r0
 8031346:	e72b      	b.n	80311a0 <st_sssa8_ch_nn_mat_mult_pw_nt_t+0x330>
 8031348:	f1c2 0301 	rsb	r3, r2, #1
 803134c:	fa0c fc03 	lsl.w	ip, ip, r3
 8031350:	f30c 0c1f 	ssat	ip, #32, ip
 8031354:	fb5c fc11 	smmulr	ip, ip, r1
 8031358:	fa0a fa03 	lsl.w	sl, sl, r3
 803135c:	f30a 0a1f 	ssat	sl, #32, sl
 8031360:	fb5a fa11 	smmulr	sl, sl, r1
 8031364:	4484      	add	ip, r0
 8031366:	4482      	add	sl, r0
 8031368:	e71a      	b.n	80311a0 <st_sssa8_ch_nn_mat_mult_pw_nt_t+0x330>
 803136a:	3301      	adds	r3, #1
 803136c:	d014      	beq.n	8031398 <st_sssa8_ch_nn_mat_mult_pw_nt_t+0x528>
 803136e:	f04f 0301 	mov.w	r3, #1
 8031372:	fa03 f302 	lsl.w	r3, r3, r2
 8031376:	ea4f 03a3 	mov.w	r3, r3, asr #2
 803137a:	fb5e 3e01 	smmla	lr, lr, r1, r3
 803137e:	ea4f 0e4e 	mov.w	lr, lr, lsl #1
 8031382:	fa4e fe02 	asr.w	lr, lr, r2
 8031386:	4486      	add	lr, r0
 8031388:	fb5b 3b01 	smmla	fp, fp, r1, r3
 803138c:	ea4f 0b4b 	mov.w	fp, fp, lsl #1
 8031390:	fa4b fb02 	asr.w	fp, fp, r2
 8031394:	4483      	add	fp, r0
 8031396:	e720      	b.n	80311da <st_sssa8_ch_nn_mat_mult_pw_nt_t+0x36a>
 8031398:	f1c2 0301 	rsb	r3, r2, #1
 803139c:	fa0e fe03 	lsl.w	lr, lr, r3
 80313a0:	f30e 0e1f 	ssat	lr, #32, lr
 80313a4:	fb5e fe11 	smmulr	lr, lr, r1
 80313a8:	fa0b fb03 	lsl.w	fp, fp, r3
 80313ac:	f30b 0b1f 	ssat	fp, #32, fp
 80313b0:	fb5b fb11 	smmulr	fp, fp, r1
 80313b4:	4486      	add	lr, r0
 80313b6:	4483      	add	fp, r0
 80313b8:	e70f      	b.n	80311da <st_sssa8_ch_nn_mat_mult_pw_nt_t+0x36a>
 80313ba:	9f27      	ldr	r7, [sp, #156]	@ 0x9c
 80313bc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80313c0:	9e2c      	ldr	r6, [sp, #176]	@ 0xb0
 80313c2:	e9dd ce09 	ldrd	ip, lr, [sp, #36]	@ 0x24
 80313c6:	ea5f 08a7 	movs.w	r8, r7, asr #2
 80313ca:	d018      	beq.n	80313fe <st_sssa8_ch_nn_mat_mult_pw_nt_t+0x58e>
 80313cc:	f859 4b04 	ldr.w	r4, [r9], #4
 80313d0:	f856 0b04 	ldr.w	r0, [r6], #4
 80313d4:	f856 1b04 	ldr.w	r1, [r6], #4
 80313d8:	f856 2b04 	ldr.w	r2, [r6], #4
 80313dc:	f856 3b04 	ldr.w	r3, [r6], #4
 80313e0:	fa2f f584 	sxtb16	r5, r4
 80313e4:	fa2f f494 	sxtb16	r4, r4, ror #8
 80313e8:	fb25 cc00 	smlad	ip, r5, r0, ip
 80313ec:	fb25 ee02 	smlad	lr, r5, r2, lr
 80313f0:	fb24 cc01 	smlad	ip, r4, r1, ip
 80313f4:	fb24 ee03 	smlad	lr, r4, r3, lr
 80313f8:	f1b8 0801 	subs.w	r8, r8, #1
 80313fc:	dce6      	bgt.n	80313cc <st_sssa8_ch_nn_mat_mult_pw_nt_t+0x55c>
 80313fe:	f017 0803 	ands.w	r8, r7, #3
 8031402:	f1b8 0f00 	cmp.w	r8, #0
 8031406:	d00c      	beq.n	8031422 <st_sssa8_ch_nn_mat_mult_pw_nt_t+0x5b2>
 8031408:	f936 3b02 	ldrsh.w	r3, [r6], #2
 803140c:	f936 5b02 	ldrsh.w	r5, [r6], #2
 8031410:	f919 1b01 	ldrsb.w	r1, [r9], #1
 8031414:	fb13 cc01 	smlabb	ip, r3, r1, ip
 8031418:	fb15 ee01 	smlabb	lr, r5, r1, lr
 803141c:	f1b8 0801 	subs.w	r8, r8, #1
 8031420:	dcf2      	bgt.n	8031408 <st_sssa8_ch_nn_mat_mult_pw_nt_t+0x598>
 8031422:	9800      	ldr	r0, [sp, #0]
 8031424:	9902      	ldr	r1, [sp, #8]
 8031426:	9a04      	ldr	r2, [sp, #16]
 8031428:	9b06      	ldr	r3, [sp, #24]
 803142a:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 803142c:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 803142e:	4437      	add	r7, r6
 8031430:	2b00      	cmp	r3, #0
 8031432:	f040 8099 	bne.w	8031568 <st_sssa8_ch_nn_mat_mult_pw_nt_t+0x6f8>
 8031436:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 803143a:	fb5c 0c01 	smmla	ip, ip, r1, r0
 803143e:	fa4c fc02 	asr.w	ip, ip, r2
 8031442:	f30c 0c07 	ssat	ip, #8, ip
 8031446:	f886 c000 	strb.w	ip, [r6]
 803144a:	9801      	ldr	r0, [sp, #4]
 803144c:	9903      	ldr	r1, [sp, #12]
 803144e:	9a05      	ldr	r2, [sp, #20]
 8031450:	9b07      	ldr	r3, [sp, #28]
 8031452:	2b00      	cmp	r3, #0
 8031454:	d166      	bne.n	8031524 <st_sssa8_ch_nn_mat_mult_pw_nt_t+0x6b4>
 8031456:	ea4f 0e4e 	mov.w	lr, lr, lsl #1
 803145a:	fb5e 0e01 	smmla	lr, lr, r1, r0
 803145e:	fa4e fe02 	asr.w	lr, lr, r2
 8031462:	f30e 0e07 	ssat	lr, #8, lr
 8031466:	f887 e000 	strb.w	lr, [r7]
 803146a:	e6d0      	b.n	803120e <st_sssa8_ch_nn_mat_mult_pw_nt_t+0x39e>
 803146c:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 803146e:	9f27      	ldr	r7, [sp, #156]	@ 0x9c
 8031470:	eb00 0907 	add.w	r9, r0, r7
 8031474:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 8031476:	2f03      	cmp	r7, #3
 8031478:	dd11      	ble.n	803149e <st_sssa8_ch_nn_mat_mult_pw_nt_t+0x62e>
 803147a:	ea4f 06a7 	mov.w	r6, r7, asr #2
 803147e:	f850 1b04 	ldr.w	r1, [r0], #4
 8031482:	f859 4b04 	ldr.w	r4, [r9], #4
 8031486:	fa2f f291 	sxtb16	r2, r1, ror #8
 803148a:	fa2f f181 	sxtb16	r1, r1
 803148e:	fa2f f894 	sxtb16	r8, r4, ror #8
 8031492:	fa2f f484 	sxtb16	r4, r4
 8031496:	e8a3 0116 	stmia.w	r3!, {r1, r2, r4, r8}
 803149a:	3e01      	subs	r6, #1
 803149c:	dcef      	bgt.n	803147e <st_sssa8_ch_nn_mat_mult_pw_nt_t+0x60e>
 803149e:	f017 0603 	ands.w	r6, r7, #3
 80314a2:	f77f ad4c 	ble.w	8030f3e <st_sssa8_ch_nn_mat_mult_pw_nt_t+0xce>
 80314a6:	f910 1b01 	ldrsb.w	r1, [r0], #1
 80314aa:	f823 1b02 	strh.w	r1, [r3], #2
 80314ae:	f919 1b01 	ldrsb.w	r1, [r9], #1
 80314b2:	f823 1b02 	strh.w	r1, [r3], #2
 80314b6:	3e01      	subs	r6, #1
 80314b8:	dcf5      	bgt.n	80314a6 <st_sssa8_ch_nn_mat_mult_pw_nt_t+0x636>
 80314ba:	e540      	b.n	8030f3e <st_sssa8_ch_nn_mat_mult_pw_nt_t+0xce>
 80314bc:	9e27      	ldr	r6, [sp, #156]	@ 0x9c
 80314be:	9a2c      	ldr	r2, [sp, #176]	@ 0xb0
 80314c0:	f04f 0300 	mov.w	r3, #0
 80314c4:	4618      	mov	r0, r3
 80314c6:	10b1      	asrs	r1, r6, #2
 80314c8:	d017      	beq.n	80314fa <st_sssa8_ch_nn_mat_mult_pw_nt_t+0x68a>
 80314ca:	e8b2 1680 	ldmia.w	r2!, {r7, r9, sl, ip}
 80314ce:	fa00 f087 	sxtah	r0, r0, r7
 80314d2:	fa00 f0a7 	sxtah	r0, r0, r7, ror #16
 80314d6:	fa00 f089 	sxtah	r0, r0, r9
 80314da:	fa00 f0a9 	sxtah	r0, r0, r9, ror #16
 80314de:	fa03 f38a 	sxtah	r3, r3, sl
 80314e2:	fa03 f3aa 	sxtah	r3, r3, sl, ror #16
 80314e6:	fa03 f38c 	sxtah	r3, r3, ip
 80314ea:	fa03 f3ac 	sxtah	r3, r3, ip, ror #16
 80314ee:	3901      	subs	r1, #1
 80314f0:	dceb      	bgt.n	80314ca <st_sssa8_ch_nn_mat_mult_pw_nt_t+0x65a>
 80314f2:	f1c0 0000 	rsb	r0, r0, #0
 80314f6:	f1c3 0300 	rsb	r3, r3, #0
 80314fa:	f016 0103 	ands.w	r1, r6, #3
 80314fe:	d00b      	beq.n	8031518 <st_sssa8_ch_nn_mat_mult_pw_nt_t+0x6a8>
 8031500:	f9b2 4000 	ldrsh.w	r4, [r2]
 8031504:	eba0 0004 	sub.w	r0, r0, r4
 8031508:	f9b2 4002 	ldrsh.w	r4, [r2, #2]
 803150c:	eba3 0304 	sub.w	r3, r3, r4
 8031510:	3901      	subs	r1, #1
 8031512:	f102 0204 	add.w	r2, r2, #4
 8031516:	dcf3      	bgt.n	8031500 <st_sssa8_ch_nn_mat_mult_pw_nt_t+0x690>
 8031518:	9a28      	ldr	r2, [sp, #160]	@ 0xa0
 803151a:	fb02 f000 	mul.w	r0, r2, r0
 803151e:	fb03 f202 	mul.w	r2, r3, r2
 8031522:	e512      	b.n	8030f4a <st_sssa8_ch_nn_mat_mult_pw_nt_t+0xda>
 8031524:	3301      	adds	r3, #1
 8031526:	d011      	beq.n	803154c <st_sssa8_ch_nn_mat_mult_pw_nt_t+0x6dc>
 8031528:	f04f 0301 	mov.w	r3, #1
 803152c:	fa03 f302 	lsl.w	r3, r3, r2
 8031530:	ea4f 03a3 	mov.w	r3, r3, asr #2
 8031534:	fb5e 3e01 	smmla	lr, lr, r1, r3
 8031538:	ea4f 0e4e 	mov.w	lr, lr, lsl #1
 803153c:	fa4e fe02 	asr.w	lr, lr, r2
 8031540:	4486      	add	lr, r0
 8031542:	f30e 0e07 	ssat	lr, #8, lr
 8031546:	f887 e000 	strb.w	lr, [r7]
 803154a:	e660      	b.n	803120e <st_sssa8_ch_nn_mat_mult_pw_nt_t+0x39e>
 803154c:	f1c2 0301 	rsb	r3, r2, #1
 8031550:	fa0e fe03 	lsl.w	lr, lr, r3
 8031554:	f30e 0e1f 	ssat	lr, #32, lr
 8031558:	fb5e fe11 	smmulr	lr, lr, r1
 803155c:	4486      	add	lr, r0
 803155e:	f30e 0e07 	ssat	lr, #8, lr
 8031562:	f887 e000 	strb.w	lr, [r7]
 8031566:	e652      	b.n	803120e <st_sssa8_ch_nn_mat_mult_pw_nt_t+0x39e>
 8031568:	3301      	adds	r3, #1
 803156a:	d00d      	beq.n	8031588 <st_sssa8_ch_nn_mat_mult_pw_nt_t+0x718>
 803156c:	f04f 0301 	mov.w	r3, #1
 8031570:	fa03 f302 	lsl.w	r3, r3, r2
 8031574:	ea4f 03a3 	mov.w	r3, r3, asr #2
 8031578:	fb5c 3c01 	smmla	ip, ip, r1, r3
 803157c:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 8031580:	fa4c fc02 	asr.w	ip, ip, r2
 8031584:	4484      	add	ip, r0
 8031586:	e75c      	b.n	8031442 <st_sssa8_ch_nn_mat_mult_pw_nt_t+0x5d2>
 8031588:	f1c2 0301 	rsb	r3, r2, #1
 803158c:	fa0c fc03 	lsl.w	ip, ip, r3
 8031590:	f30c 0c1f 	ssat	ip, #32, ip
 8031594:	fb5c fc11 	smmulr	ip, ip, r1
 8031598:	4484      	add	ip, r0
 803159a:	e752      	b.n	8031442 <st_sssa8_ch_nn_mat_mult_pw_nt_t+0x5d2>
 803159c:	1c7b      	adds	r3, r7, #1
 803159e:	d00d      	beq.n	80315bc <st_sssa8_ch_nn_mat_mult_pw_nt_t+0x74c>
 80315a0:	f04f 0301 	mov.w	r3, #1
 80315a4:	fa03 f307 	lsl.w	r3, r3, r7
 80315a8:	ea4f 03a3 	mov.w	r3, r3, asr #2
 80315ac:	fb5e 3e04 	smmla	lr, lr, r4, r3
 80315b0:	ea4f 0e4e 	mov.w	lr, lr, lsl #1
 80315b4:	fa4e fe07 	asr.w	lr, lr, r7
 80315b8:	4486      	add	lr, r0
 80315ba:	e691      	b.n	80312e0 <st_sssa8_ch_nn_mat_mult_pw_nt_t+0x470>
 80315bc:	f1c7 0301 	rsb	r3, r7, #1
 80315c0:	fa0e fe03 	lsl.w	lr, lr, r3
 80315c4:	f30e 0e1f 	ssat	lr, #32, lr
 80315c8:	fb5e fe14 	smmulr	lr, lr, r4
 80315cc:	4486      	add	lr, r0
 80315ce:	e687      	b.n	80312e0 <st_sssa8_ch_nn_mat_mult_pw_nt_t+0x470>

080315d0 <st_sssa8_ch_nn_mat_mult_pw_nt_t_KWS>:
 80315d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80315d4:	b099      	sub	sp, #100	@ 0x64
 80315d6:	bf00      	nop
 80315d8:	9014      	str	r0, [sp, #80]	@ 0x50
 80315da:	9113      	str	r1, [sp, #76]	@ 0x4c
 80315dc:	9216      	str	r2, [sp, #88]	@ 0x58
 80315de:	9312      	str	r3, [sp, #72]	@ 0x48
 80315e0:	f04f 0800 	mov.w	r8, #0
 80315e4:	f8cd 8034 	str.w	r8, [sp, #52]	@ 0x34
 80315e8:	f8dd b034 	ldr.w	fp, [sp, #52]	@ 0x34
 80315ec:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80315ee:	eb02 028b 	add.w	r2, r2, fp, lsl #2
 80315f2:	f9b2 3000 	ldrsh.w	r3, [r2]
 80315f6:	f9b2 4002 	ldrsh.w	r4, [r2, #2]
 80315fa:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80315fe:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8031600:	eb02 02cb 	add.w	r2, r2, fp, lsl #3
 8031604:	e9d2 1200 	ldrd	r1, r2, [r2]
 8031608:	e9cd 1202 	strd	r1, r2, [sp, #8]
 803160c:	9a2b      	ldr	r2, [sp, #172]	@ 0xac
 803160e:	eb02 02cb 	add.w	r2, r2, fp, lsl #3
 8031612:	e9d2 1200 	ldrd	r1, r2, [r2]
 8031616:	e9cd 1200 	strd	r1, r2, [sp]
 803161a:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 803161c:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 803161e:	f04f 0610 	mov.w	r6, #16
 8031622:	6c04      	ldr	r4, [r0, #64]	@ 0x40
 8031624:	f850 1b04 	ldr.w	r1, [r0], #4
 8031628:	fa2f f291 	sxtb16	r2, r1, ror #8
 803162c:	fa2f f181 	sxtb16	r1, r1
 8031630:	fa2f f894 	sxtb16	r8, r4, ror #8
 8031634:	fa2f f484 	sxtb16	r4, r4
 8031638:	e8a3 0116 	stmia.w	r3!, {r1, r2, r4, r8}
 803163c:	3e01      	subs	r6, #1
 803163e:	dcf0      	bgt.n	8031622 <st_sssa8_ch_nn_mat_mult_pw_nt_t_KWS+0x52>
 8031640:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8031642:	9a2c      	ldr	r2, [sp, #176]	@ 0xb0
 8031644:	f04f 0300 	mov.w	r3, #0
 8031648:	4618      	mov	r0, r3
 803164a:	f04f 0110 	mov.w	r1, #16
 803164e:	e8b2 1700 	ldmia.w	r2!, {r8, r9, sl, ip}
 8031652:	fa00 f088 	sxtah	r0, r0, r8
 8031656:	fa00 f0a8 	sxtah	r0, r0, r8, ror #16
 803165a:	fa00 f089 	sxtah	r0, r0, r9
 803165e:	fa00 f0a9 	sxtah	r0, r0, r9, ror #16
 8031662:	fa03 f38a 	sxtah	r3, r3, sl
 8031666:	fa03 f3aa 	sxtah	r3, r3, sl, ror #16
 803166a:	fa03 f38c 	sxtah	r3, r3, ip
 803166e:	fa03 f3ac 	sxtah	r3, r3, ip, ror #16
 8031672:	3901      	subs	r1, #1
 8031674:	dceb      	bgt.n	803164e <st_sssa8_ch_nn_mat_mult_pw_nt_t_KWS+0x7e>
 8031676:	f1c0 0000 	rsb	r0, r0, #0
 803167a:	f1c3 0300 	rsb	r3, r3, #0
 803167e:	9a28      	ldr	r2, [sp, #160]	@ 0xa0
 8031680:	fb02 f000 	mul.w	r0, r2, r0
 8031684:	fb03 f202 	mul.w	r2, r3, r2
 8031688:	9916      	ldr	r1, [sp, #88]	@ 0x58
 803168a:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
 803168e:	e9d1 3400 	ldrd	r3, r4, [r1]
 8031692:	4403      	add	r3, r0
 8031694:	4414      	add	r4, r2
 8031696:	e9cd 3409 	strd	r3, r4, [sp, #36]	@ 0x24
 803169a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 803169c:	f04f 0305 	mov.w	r3, #5
 80316a0:	f102 0203 	add.w	r2, r2, #3
 80316a4:	441a      	add	r2, r3
 80316a6:	f8dd 9050 	ldr.w	r9, [sp, #80]	@ 0x50
 80316aa:	920b      	str	r2, [sp, #44]	@ 0x2c
 80316ac:	f04f 073e 	mov.w	r7, #62	@ 0x3e
 80316b0:	930f      	str	r3, [sp, #60]	@ 0x3c
 80316b2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80316b4:	9e2c      	ldr	r6, [sp, #176]	@ 0xb0
 80316b6:	e9dd ce09 	ldrd	ip, lr, [sp, #36]	@ 0x24
 80316ba:	46e2      	mov	sl, ip
 80316bc:	46f3      	mov	fp, lr
 80316be:	f103 0301 	add.w	r3, r3, #1
 80316c2:	930c      	str	r3, [sp, #48]	@ 0x30
 80316c4:	f04f 0802 	mov.w	r8, #2
 80316c8:	f8d9 5040 	ldr.w	r5, [r9, #64]	@ 0x40
 80316cc:	f856 0b04 	ldr.w	r0, [r6], #4
 80316d0:	f856 1b04 	ldr.w	r1, [r6], #4
 80316d4:	f856 2b04 	ldr.w	r2, [r6], #4
 80316d8:	f856 3b04 	ldr.w	r3, [r6], #4
 80316dc:	fa2f f485 	sxtb16	r4, r5
 80316e0:	fa2f f595 	sxtb16	r5, r5, ror #8
 80316e4:	fb24 aa00 	smlad	sl, r4, r0, sl
 80316e8:	fb24 bb02 	smlad	fp, r4, r2, fp
 80316ec:	fb25 aa01 	smlad	sl, r5, r1, sl
 80316f0:	fb25 bb03 	smlad	fp, r5, r3, fp
 80316f4:	f859 4b04 	ldr.w	r4, [r9], #4
 80316f8:	fa2f f584 	sxtb16	r5, r4
 80316fc:	fa2f f494 	sxtb16	r4, r4, ror #8
 8031700:	fb25 cc00 	smlad	ip, r5, r0, ip
 8031704:	fb25 ee02 	smlad	lr, r5, r2, lr
 8031708:	fb24 cc01 	smlad	ip, r4, r1, ip
 803170c:	fb24 ee03 	smlad	lr, r4, r3, lr
 8031710:	f8d9 5040 	ldr.w	r5, [r9, #64]	@ 0x40
 8031714:	f856 0b04 	ldr.w	r0, [r6], #4
 8031718:	f856 1b04 	ldr.w	r1, [r6], #4
 803171c:	f856 2b04 	ldr.w	r2, [r6], #4
 8031720:	f856 3b04 	ldr.w	r3, [r6], #4
 8031724:	fa2f f485 	sxtb16	r4, r5
 8031728:	fa2f f595 	sxtb16	r5, r5, ror #8
 803172c:	fb24 aa00 	smlad	sl, r4, r0, sl
 8031730:	fb24 bb02 	smlad	fp, r4, r2, fp
 8031734:	fb25 aa01 	smlad	sl, r5, r1, sl
 8031738:	fb25 bb03 	smlad	fp, r5, r3, fp
 803173c:	f859 4b04 	ldr.w	r4, [r9], #4
 8031740:	fa2f f584 	sxtb16	r5, r4
 8031744:	fa2f f494 	sxtb16	r4, r4, ror #8
 8031748:	fb25 cc00 	smlad	ip, r5, r0, ip
 803174c:	fb25 ee02 	smlad	lr, r5, r2, lr
 8031750:	fb24 cc01 	smlad	ip, r4, r1, ip
 8031754:	fb24 ee03 	smlad	lr, r4, r3, lr
 8031758:	f8d9 5040 	ldr.w	r5, [r9, #64]	@ 0x40
 803175c:	f856 0b04 	ldr.w	r0, [r6], #4
 8031760:	f856 1b04 	ldr.w	r1, [r6], #4
 8031764:	f856 2b04 	ldr.w	r2, [r6], #4
 8031768:	f856 3b04 	ldr.w	r3, [r6], #4
 803176c:	fa2f f485 	sxtb16	r4, r5
 8031770:	fa2f f595 	sxtb16	r5, r5, ror #8
 8031774:	fb24 aa00 	smlad	sl, r4, r0, sl
 8031778:	fb24 bb02 	smlad	fp, r4, r2, fp
 803177c:	fb25 aa01 	smlad	sl, r5, r1, sl
 8031780:	fb25 bb03 	smlad	fp, r5, r3, fp
 8031784:	f859 4b04 	ldr.w	r4, [r9], #4
 8031788:	fa2f f584 	sxtb16	r5, r4
 803178c:	fa2f f494 	sxtb16	r4, r4, ror #8
 8031790:	fb25 cc00 	smlad	ip, r5, r0, ip
 8031794:	fb25 ee02 	smlad	lr, r5, r2, lr
 8031798:	fb24 cc01 	smlad	ip, r4, r1, ip
 803179c:	fb24 ee03 	smlad	lr, r4, r3, lr
 80317a0:	f8d9 5040 	ldr.w	r5, [r9, #64]	@ 0x40
 80317a4:	f856 0b04 	ldr.w	r0, [r6], #4
 80317a8:	f856 1b04 	ldr.w	r1, [r6], #4
 80317ac:	f856 2b04 	ldr.w	r2, [r6], #4
 80317b0:	f856 3b04 	ldr.w	r3, [r6], #4
 80317b4:	fa2f f485 	sxtb16	r4, r5
 80317b8:	fa2f f595 	sxtb16	r5, r5, ror #8
 80317bc:	fb24 aa00 	smlad	sl, r4, r0, sl
 80317c0:	fb24 bb02 	smlad	fp, r4, r2, fp
 80317c4:	fb25 aa01 	smlad	sl, r5, r1, sl
 80317c8:	fb25 bb03 	smlad	fp, r5, r3, fp
 80317cc:	f859 4b04 	ldr.w	r4, [r9], #4
 80317d0:	fa2f f584 	sxtb16	r5, r4
 80317d4:	fa2f f494 	sxtb16	r4, r4, ror #8
 80317d8:	fb25 cc00 	smlad	ip, r5, r0, ip
 80317dc:	fb25 ee02 	smlad	lr, r5, r2, lr
 80317e0:	fb24 cc01 	smlad	ip, r4, r1, ip
 80317e4:	fb24 ee03 	smlad	lr, r4, r3, lr
 80317e8:	f8d9 5040 	ldr.w	r5, [r9, #64]	@ 0x40
 80317ec:	f856 0b04 	ldr.w	r0, [r6], #4
 80317f0:	f856 1b04 	ldr.w	r1, [r6], #4
 80317f4:	f856 2b04 	ldr.w	r2, [r6], #4
 80317f8:	f856 3b04 	ldr.w	r3, [r6], #4
 80317fc:	fa2f f485 	sxtb16	r4, r5
 8031800:	fa2f f595 	sxtb16	r5, r5, ror #8
 8031804:	fb24 aa00 	smlad	sl, r4, r0, sl
 8031808:	fb24 bb02 	smlad	fp, r4, r2, fp
 803180c:	fb25 aa01 	smlad	sl, r5, r1, sl
 8031810:	fb25 bb03 	smlad	fp, r5, r3, fp
 8031814:	f859 4b04 	ldr.w	r4, [r9], #4
 8031818:	fa2f f584 	sxtb16	r5, r4
 803181c:	fa2f f494 	sxtb16	r4, r4, ror #8
 8031820:	fb25 cc00 	smlad	ip, r5, r0, ip
 8031824:	fb25 ee02 	smlad	lr, r5, r2, lr
 8031828:	fb24 cc01 	smlad	ip, r4, r1, ip
 803182c:	fb24 ee03 	smlad	lr, r4, r3, lr
 8031830:	f8d9 5040 	ldr.w	r5, [r9, #64]	@ 0x40
 8031834:	f856 0b04 	ldr.w	r0, [r6], #4
 8031838:	f856 1b04 	ldr.w	r1, [r6], #4
 803183c:	f856 2b04 	ldr.w	r2, [r6], #4
 8031840:	f856 3b04 	ldr.w	r3, [r6], #4
 8031844:	fa2f f485 	sxtb16	r4, r5
 8031848:	fa2f f595 	sxtb16	r5, r5, ror #8
 803184c:	fb24 aa00 	smlad	sl, r4, r0, sl
 8031850:	fb24 bb02 	smlad	fp, r4, r2, fp
 8031854:	fb25 aa01 	smlad	sl, r5, r1, sl
 8031858:	fb25 bb03 	smlad	fp, r5, r3, fp
 803185c:	f859 4b04 	ldr.w	r4, [r9], #4
 8031860:	fa2f f584 	sxtb16	r5, r4
 8031864:	fa2f f494 	sxtb16	r4, r4, ror #8
 8031868:	fb25 cc00 	smlad	ip, r5, r0, ip
 803186c:	fb25 ee02 	smlad	lr, r5, r2, lr
 8031870:	fb24 cc01 	smlad	ip, r4, r1, ip
 8031874:	fb24 ee03 	smlad	lr, r4, r3, lr
 8031878:	f8d9 5040 	ldr.w	r5, [r9, #64]	@ 0x40
 803187c:	f856 0b04 	ldr.w	r0, [r6], #4
 8031880:	f856 1b04 	ldr.w	r1, [r6], #4
 8031884:	f856 2b04 	ldr.w	r2, [r6], #4
 8031888:	f856 3b04 	ldr.w	r3, [r6], #4
 803188c:	fa2f f485 	sxtb16	r4, r5
 8031890:	fa2f f595 	sxtb16	r5, r5, ror #8
 8031894:	fb24 aa00 	smlad	sl, r4, r0, sl
 8031898:	fb24 bb02 	smlad	fp, r4, r2, fp
 803189c:	fb25 aa01 	smlad	sl, r5, r1, sl
 80318a0:	fb25 bb03 	smlad	fp, r5, r3, fp
 80318a4:	f859 4b04 	ldr.w	r4, [r9], #4
 80318a8:	fa2f f584 	sxtb16	r5, r4
 80318ac:	fa2f f494 	sxtb16	r4, r4, ror #8
 80318b0:	fb25 cc00 	smlad	ip, r5, r0, ip
 80318b4:	fb25 ee02 	smlad	lr, r5, r2, lr
 80318b8:	fb24 cc01 	smlad	ip, r4, r1, ip
 80318bc:	fb24 ee03 	smlad	lr, r4, r3, lr
 80318c0:	f8d9 5040 	ldr.w	r5, [r9, #64]	@ 0x40
 80318c4:	f856 0b04 	ldr.w	r0, [r6], #4
 80318c8:	f856 1b04 	ldr.w	r1, [r6], #4
 80318cc:	f856 2b04 	ldr.w	r2, [r6], #4
 80318d0:	f856 3b04 	ldr.w	r3, [r6], #4
 80318d4:	fa2f f485 	sxtb16	r4, r5
 80318d8:	fa2f f595 	sxtb16	r5, r5, ror #8
 80318dc:	fb24 aa00 	smlad	sl, r4, r0, sl
 80318e0:	fb24 bb02 	smlad	fp, r4, r2, fp
 80318e4:	fb25 aa01 	smlad	sl, r5, r1, sl
 80318e8:	fb25 bb03 	smlad	fp, r5, r3, fp
 80318ec:	f859 4b04 	ldr.w	r4, [r9], #4
 80318f0:	fa2f f584 	sxtb16	r5, r4
 80318f4:	fa2f f494 	sxtb16	r4, r4, ror #8
 80318f8:	fb25 cc00 	smlad	ip, r5, r0, ip
 80318fc:	fb25 ee02 	smlad	lr, r5, r2, lr
 8031900:	fb24 cc01 	smlad	ip, r4, r1, ip
 8031904:	fb24 ee03 	smlad	lr, r4, r3, lr
 8031908:	f1b8 0801 	subs.w	r8, r8, #1
 803190c:	f73f aedc 	bgt.w	80316c8 <st_sssa8_ch_nn_mat_mult_pw_nt_t_KWS+0xf8>
 8031910:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8031912:	462e      	mov	r6, r5
 8031914:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8031916:	1e90      	subs	r0, r2, #2
 8031918:	dc09      	bgt.n	803192e <st_sssa8_ch_nn_mat_mult_pw_nt_t_KWS+0x35e>
 803191a:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 803191c:	f1c2 0202 	rsb	r2, r2, #2
 8031920:	eb04 0242 	add.w	r2, r4, r2, lsl #1
 8031924:	920c      	str	r2, [sp, #48]	@ 0x30
 8031926:	f100 0005 	add.w	r0, r0, #5
 803192a:	f105 0502 	add.w	r5, r5, #2
 803192e:	900f      	str	r0, [sp, #60]	@ 0x3c
 8031930:	9800      	ldr	r0, [sp, #0]
 8031932:	9902      	ldr	r1, [sp, #8]
 8031934:	9a04      	ldr	r2, [sp, #16]
 8031936:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8031938:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 803193c:	ea4f 0a4a 	mov.w	sl, sl, lsl #1
 8031940:	fb5c 0c01 	smmla	ip, ip, r1, r0
 8031944:	fb5a 0a01 	smmla	sl, sl, r1, r0
 8031948:	fa4c fc02 	asr.w	ip, ip, r2
 803194c:	fa4a fa02 	asr.w	sl, sl, r2
 8031950:	f30c 0c07 	ssat	ip, #8, ip
 8031954:	f30a 0a07 	ssat	sl, #8, sl
 8031958:	f886 c000 	strb.w	ip, [r6]
 803195c:	f884 a000 	strb.w	sl, [r4]
 8031960:	9801      	ldr	r0, [sp, #4]
 8031962:	9903      	ldr	r1, [sp, #12]
 8031964:	9a05      	ldr	r2, [sp, #20]
 8031966:	ea4f 0e4e 	mov.w	lr, lr, lsl #1
 803196a:	ea4f 0b4b 	mov.w	fp, fp, lsl #1
 803196e:	fb5e 0e01 	smmla	lr, lr, r1, r0
 8031972:	fb5b 0b01 	smmla	fp, fp, r1, r0
 8031976:	fa4e fe02 	asr.w	lr, lr, r2
 803197a:	fa4b fb02 	asr.w	fp, fp, r2
 803197e:	f30e 0e07 	ssat	lr, #8, lr
 8031982:	f30b 0b07 	ssat	fp, #8, fp
 8031986:	f886 e0bd 	strb.w	lr, [r6, #189]	@ 0xbd
 803198a:	f884 b0bd 	strb.w	fp, [r4, #189]	@ 0xbd
 803198e:	f105 0302 	add.w	r3, r5, #2
 8031992:	930b      	str	r3, [sp, #44]	@ 0x2c
 8031994:	f109 0940 	add.w	r9, r9, #64	@ 0x40
 8031998:	3f01      	subs	r7, #1
 803199a:	f47f ae8a 	bne.w	80316b2 <st_sssa8_ch_nn_mat_mult_pw_nt_t_KWS+0xe2>
 803199e:	f8cd 9020 	str.w	r9, [sp, #32]
 80319a2:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80319a6:	9e2c      	ldr	r6, [sp, #176]	@ 0xb0
 80319a8:	e9dd ce09 	ldrd	ip, lr, [sp, #36]	@ 0x24
 80319ac:	f04f 0810 	mov.w	r8, #16
 80319b0:	f859 4b04 	ldr.w	r4, [r9], #4
 80319b4:	f856 0b04 	ldr.w	r0, [r6], #4
 80319b8:	f856 1b04 	ldr.w	r1, [r6], #4
 80319bc:	f856 2b04 	ldr.w	r2, [r6], #4
 80319c0:	f856 3b04 	ldr.w	r3, [r6], #4
 80319c4:	fa2f f584 	sxtb16	r5, r4
 80319c8:	fa2f f494 	sxtb16	r4, r4, ror #8
 80319cc:	fb25 cc00 	smlad	ip, r5, r0, ip
 80319d0:	fb25 ee02 	smlad	lr, r5, r2, lr
 80319d4:	fb24 cc01 	smlad	ip, r4, r1, ip
 80319d8:	fb24 ee03 	smlad	lr, r4, r3, lr
 80319dc:	f1b8 0801 	subs.w	r8, r8, #1
 80319e0:	dce6      	bgt.n	80319b0 <st_sssa8_ch_nn_mat_mult_pw_nt_t_KWS+0x3e0>
 80319e2:	9800      	ldr	r0, [sp, #0]
 80319e4:	9902      	ldr	r1, [sp, #8]
 80319e6:	9a04      	ldr	r2, [sp, #16]
 80319e8:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 80319ea:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 80319ee:	fb5c 0c01 	smmla	ip, ip, r1, r0
 80319f2:	fa4c fc02 	asr.w	ip, ip, r2
 80319f6:	f30c 0c07 	ssat	ip, #8, ip
 80319fa:	f886 c000 	strb.w	ip, [r6]
 80319fe:	9801      	ldr	r0, [sp, #4]
 8031a00:	9903      	ldr	r1, [sp, #12]
 8031a02:	9a05      	ldr	r2, [sp, #20]
 8031a04:	ea4f 0e4e 	mov.w	lr, lr, lsl #1
 8031a08:	fb5e 0e01 	smmla	lr, lr, r1, r0
 8031a0c:	fa4e fe02 	asr.w	lr, lr, r2
 8031a10:	f30e 0e07 	ssat	lr, #8, lr
 8031a14:	f886 e0bd 	strb.w	lr, [r6, #189]	@ 0xbd
 8031a18:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8031a1a:	f103 0380 	add.w	r3, r3, #128	@ 0x80
 8031a1e:	9313      	str	r3, [sp, #76]	@ 0x4c
 8031a20:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8031a22:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8031a24:	f503 73bd 	add.w	r3, r3, #378	@ 0x17a
 8031a28:	9312      	str	r3, [sp, #72]	@ 0x48
 8031a2a:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8031a2c:	f102 0201 	add.w	r2, r2, #1
 8031a30:	920d      	str	r2, [sp, #52]	@ 0x34
 8031a32:	2a20      	cmp	r2, #32
 8031a34:	f6ff add8 	blt.w	80315e8 <st_sssa8_ch_nn_mat_mult_pw_nt_t_KWS+0x18>
 8031a38:	2000      	movs	r0, #0
 8031a3a:	b019      	add	sp, #100	@ 0x64
 8031a3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08031a40 <ai_array_to_buffer_fmt>:
 8031a40:	f3c0 4343 	ubfx	r3, r0, #17, #4
 8031a44:	2b02      	cmp	r3, #2
 8031a46:	d055      	beq.n	8031af4 <ai_array_to_buffer_fmt+0xb4>
 8031a48:	4a2d      	ldr	r2, [pc, #180]	@ (8031b00 <ai_array_to_buffer_fmt+0xc0>)
 8031a4a:	f020 437e 	bic.w	r3, r0, #4261412864	@ 0xfe000000
 8031a4e:	4293      	cmp	r3, r2
 8031a50:	d010      	beq.n	8031a74 <ai_array_to_buffer_fmt+0x34>
 8031a52:	dc21      	bgt.n	8031a98 <ai_array_to_buffer_fmt+0x58>
 8031a54:	4a2b      	ldr	r2, [pc, #172]	@ (8031b04 <ai_array_to_buffer_fmt+0xc4>)
 8031a56:	4293      	cmp	r3, r2
 8031a58:	d00c      	beq.n	8031a74 <ai_array_to_buffer_fmt+0x34>
 8031a5a:	dd0f      	ble.n	8031a7c <ai_array_to_buffer_fmt+0x3c>
 8031a5c:	4a2a      	ldr	r2, [pc, #168]	@ (8031b08 <ai_array_to_buffer_fmt+0xc8>)
 8031a5e:	4293      	cmp	r3, r2
 8031a60:	d008      	beq.n	8031a74 <ai_array_to_buffer_fmt+0x34>
 8031a62:	f502 32fa 	add.w	r2, r2, #128000	@ 0x1f400
 8031a66:	4293      	cmp	r3, r2
 8031a68:	d004      	beq.n	8031a74 <ai_array_to_buffer_fmt+0x34>
 8031a6a:	4a28      	ldr	r2, [pc, #160]	@ (8031b0c <ai_array_to_buffer_fmt+0xcc>)
 8031a6c:	4293      	cmp	r3, r2
 8031a6e:	bf0c      	ite	eq
 8031a70:	4613      	moveq	r3, r2
 8031a72:	2340      	movne	r3, #64	@ 0x40
 8031a74:	f000 40d0 	and.w	r0, r0, #1744830464	@ 0x68000000
 8031a78:	4318      	orrs	r0, r3
 8031a7a:	4770      	bx	lr
 8031a7c:	f5a2 6280 	sub.w	r2, r2, #1024	@ 0x400
 8031a80:	4293      	cmp	r3, r2
 8031a82:	d0f7      	beq.n	8031a74 <ai_array_to_buffer_fmt+0x34>
 8031a84:	dd2c      	ble.n	8031ae0 <ai_array_to_buffer_fmt+0xa0>
 8031a86:	4a22      	ldr	r2, [pc, #136]	@ (8031b10 <ai_array_to_buffer_fmt+0xd0>)
 8031a88:	f000 40d0 	and.w	r0, r0, #1744830464	@ 0x68000000
 8031a8c:	4293      	cmp	r3, r2
 8031a8e:	bf0c      	ite	eq
 8031a90:	4613      	moveq	r3, r2
 8031a92:	2340      	movne	r3, #64	@ 0x40
 8031a94:	4318      	orrs	r0, r3
 8031a96:	4770      	bx	lr
 8031a98:	4a1e      	ldr	r2, [pc, #120]	@ (8031b14 <ai_array_to_buffer_fmt+0xd4>)
 8031a9a:	4293      	cmp	r3, r2
 8031a9c:	d0ea      	beq.n	8031a74 <ai_array_to_buffer_fmt+0x34>
 8031a9e:	dd10      	ble.n	8031ac2 <ai_array_to_buffer_fmt+0x82>
 8031aa0:	4a1d      	ldr	r2, [pc, #116]	@ (8031b18 <ai_array_to_buffer_fmt+0xd8>)
 8031aa2:	4293      	cmp	r3, r2
 8031aa4:	d0e6      	beq.n	8031a74 <ai_array_to_buffer_fmt+0x34>
 8031aa6:	f202 72f1 	addw	r2, r2, #2033	@ 0x7f1
 8031aaa:	4293      	cmp	r3, r2
 8031aac:	d0e2      	beq.n	8031a74 <ai_array_to_buffer_fmt+0x34>
 8031aae:	f5a2 6200 	sub.w	r2, r2, #2048	@ 0x800
 8031ab2:	4293      	cmp	r3, r2
 8031ab4:	bf0c      	ite	eq
 8031ab6:	4613      	moveq	r3, r2
 8031ab8:	2340      	movne	r3, #64	@ 0x40
 8031aba:	f000 40d0 	and.w	r0, r0, #1744830464	@ 0x68000000
 8031abe:	4318      	orrs	r0, r3
 8031ac0:	4770      	bx	lr
 8031ac2:	f2a2 3287 	subw	r2, r2, #903	@ 0x387
 8031ac6:	4293      	cmp	r3, r2
 8031ac8:	d0d4      	beq.n	8031a74 <ai_array_to_buffer_fmt+0x34>
 8031aca:	f502 7260 	add.w	r2, r2, #896	@ 0x380
 8031ace:	4293      	cmp	r3, r2
 8031ad0:	d0d0      	beq.n	8031a74 <ai_array_to_buffer_fmt+0x34>
 8031ad2:	f5a2 6280 	sub.w	r2, r2, #1024	@ 0x400
 8031ad6:	4293      	cmp	r3, r2
 8031ad8:	bf0c      	ite	eq
 8031ada:	4613      	moveq	r3, r2
 8031adc:	2340      	movne	r3, #64	@ 0x40
 8031ade:	e7c9      	b.n	8031a74 <ai_array_to_buffer_fmt+0x34>
 8031ae0:	f5a2 6280 	sub.w	r2, r2, #1024	@ 0x400
 8031ae4:	4293      	cmp	r3, r2
 8031ae6:	d0c5      	beq.n	8031a74 <ai_array_to_buffer_fmt+0x34>
 8031ae8:	3280      	adds	r2, #128	@ 0x80
 8031aea:	4293      	cmp	r3, r2
 8031aec:	bf0c      	ite	eq
 8031aee:	4613      	moveq	r3, r2
 8031af0:	2340      	movne	r3, #64	@ 0x40
 8031af2:	e7bf      	b.n	8031a74 <ai_array_to_buffer_fmt+0x34>
 8031af4:	4b09      	ldr	r3, [pc, #36]	@ (8031b1c <ai_array_to_buffer_fmt+0xdc>)
 8031af6:	4003      	ands	r3, r0
 8031af8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8031afc:	e7ba      	b.n	8031a74 <ai_array_to_buffer_fmt+0x34>
 8031afe:	bf00      	nop
 8031b00:	00821040 	.word	0x00821040
 8031b04:	00040840 	.word	0x00040840
 8031b08:	00041040 	.word	0x00041040
 8031b0c:	0004084f 	.word	0x0004084f
 8031b10:	00040447 	.word	0x00040447
 8031b14:	00840447 	.word	0x00840447
 8031b18:	0084084f 	.word	0x0084084f
 8031b1c:	00803fff 	.word	0x00803fff

08031b20 <ai_array_get_byte_size>:
 8031b20:	b1d1      	cbz	r1, 8031b58 <ai_array_get_byte_size+0x38>
 8031b22:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 8031b26:	fb03 f101 	mul.w	r1, r3, r1
 8031b2a:	f3c0 4c43 	ubfx	ip, r0, #17, #4
 8031b2e:	f46f 7288 	mvn.w	r2, #272	@ 0x110
 8031b32:	fa42 f20c 	asr.w	r2, r2, ip
 8031b36:	3107      	adds	r1, #7
 8031b38:	f3c0 5041 	ubfx	r0, r0, #21, #2
 8031b3c:	07d2      	lsls	r2, r2, #31
 8031b3e:	f021 0107 	bic.w	r1, r1, #7
 8031b42:	fa21 f100 	lsr.w	r1, r1, r0
 8031b46:	bf5a      	itte	pl
 8031b48:	fa43 f000 	asrpl.w	r0, r3, r0
 8031b4c:	4083      	lslpl	r3, r0
 8031b4e:	2300      	movmi	r3, #0
 8031b50:	3107      	adds	r1, #7
 8031b52:	4419      	add	r1, r3
 8031b54:	08c8      	lsrs	r0, r1, #3
 8031b56:	4770      	bx	lr
 8031b58:	4608      	mov	r0, r1
 8031b5a:	4770      	bx	lr

08031b5c <ai_array_get_data_byte_size>:
 8031b5c:	b169      	cbz	r1, 8031b7a <ai_array_get_data_byte_size+0x1e>
 8031b5e:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 8031b62:	fb01 f303 	mul.w	r3, r1, r3
 8031b66:	3307      	adds	r3, #7
 8031b68:	f023 0307 	bic.w	r3, r3, #7
 8031b6c:	f3c0 5041 	ubfx	r0, r0, #21, #2
 8031b70:	fa23 f000 	lsr.w	r0, r3, r0
 8031b74:	3007      	adds	r0, #7
 8031b76:	08c0      	lsrs	r0, r0, #3
 8031b78:	4770      	bx	lr
 8031b7a:	4608      	mov	r0, r1
 8031b7c:	4770      	bx	lr
 8031b7e:	bf00      	nop

08031b80 <ai_version_get>:
 8031b80:	0212      	lsls	r2, r2, #8
 8031b82:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8031b86:	ea42 6000 	orr.w	r0, r2, r0, lsl #24
 8031b8a:	4770      	bx	lr

08031b8c <get_tensor_byte_size>:
 8031b8c:	b410      	push	{r4}
 8031b8e:	6983      	ldr	r3, [r0, #24]
 8031b90:	68c4      	ldr	r4, [r0, #12]
 8031b92:	6941      	ldr	r1, [r0, #20]
 8031b94:	681b      	ldr	r3, [r3, #0]
 8031b96:	68e0      	ldr	r0, [r4, #12]
 8031b98:	4a07      	ldr	r2, [pc, #28]	@ (8031bb8 <get_tensor_byte_size+0x2c>)
 8031b9a:	68c9      	ldr	r1, [r1, #12]
 8031b9c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8031ba0:	f023 437e 	bic.w	r3, r3, #4261412864	@ 0xfe000000
 8031ba4:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8031ba8:	fb01 f000 	mul.w	r0, r1, r0
 8031bac:	4293      	cmp	r3, r2
 8031bae:	bf04      	itt	eq
 8031bb0:	3007      	addeq	r0, #7
 8031bb2:	08c0      	lsreq	r0, r0, #3
 8031bb4:	4770      	bx	lr
 8031bb6:	bf00      	nop
 8031bb8:	000400c0 	.word	0x000400c0

08031bbc <_lite_kernel_nl_softmax_is8os8>:
 8031bbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8031bc0:	b08b      	sub	sp, #44	@ 0x2c
 8031bc2:	469a      	mov	sl, r3
 8031bc4:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8031bc6:	f513 7f80 	cmn.w	r3, #256	@ 0x100
 8031bca:	4689      	mov	r9, r1
 8031bcc:	4617      	mov	r7, r2
 8031bce:	4684      	mov	ip, r0
 8031bd0:	fb0a f102 	mul.w	r1, sl, r2
 8031bd4:	f280 83b7 	bge.w	8032346 <_lite_kernel_nl_softmax_is8os8+0x78a>
 8031bd8:	2901      	cmp	r1, #1
 8031bda:	f44f 7b80 	mov.w	fp, #256	@ 0x100
 8031bde:	f240 83bb 	bls.w	8032358 <_lite_kernel_nl_softmax_is8os8+0x79c>
 8031be2:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8031be4:	f8cd 900c 	str.w	r9, [sp, #12]
 8031be8:	e9cd bc01 	strd	fp, ip, [sp, #4]
 8031bec:	e9cd 7a04 	strd	r7, sl, [sp, #16]
 8031bf0:	3b04      	subs	r3, #4
 8031bf2:	f04f 0e00 	mov.w	lr, #0
 8031bf6:	f04f 4880 	mov.w	r8, #1073741824	@ 0x40000000
 8031bfa:	4699      	mov	r9, r3
 8031bfc:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8031bfe:	9815      	ldr	r0, [sp, #84]	@ 0x54
 8031c00:	fa0e f103 	lsl.w	r1, lr, r3
 8031c04:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8031c06:	4249      	negs	r1, r1
 8031c08:	404b      	eors	r3, r1
 8031c0a:	0fdb      	lsrs	r3, r3, #31
 8031c0c:	2b00      	cmp	r3, #0
 8031c0e:	4bd4      	ldr	r3, [pc, #848]	@ (8031f60 <_lite_kernel_nl_softmax_is8os8+0x3a4>)
 8031c10:	bf12      	itee	ne
 8031c12:	f04f 32ff 	movne.w	r2, #4294967295
 8031c16:	f04f 4380 	moveq.w	r3, #1073741824	@ 0x40000000
 8031c1a:	2200      	moveq	r2, #0
 8031c1c:	fbc0 3201 	smlal	r3, r2, r0, r1
 8031c20:	2a00      	cmp	r2, #0
 8031c22:	da04      	bge.n	8031c2e <_lite_kernel_nl_softmax_is8os8+0x72>
 8031c24:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8031c28:	185b      	adds	r3, r3, r1
 8031c2a:	f142 0200 	adc.w	r2, r2, #0
 8031c2e:	0fdb      	lsrs	r3, r3, #31
 8031c30:	ea43 0342 	orr.w	r3, r3, r2, lsl #1
 8031c34:	f043 427f 	orr.w	r2, r3, #4278190080	@ 0xff000000
 8031c38:	0154      	lsls	r4, r2, #5
 8031c3a:	f104 5480 	add.w	r4, r4, #268435456	@ 0x10000000
 8031c3e:	f04f 0c00 	mov.w	ip, #0
 8031c42:	4641      	mov	r1, r8
 8031c44:	fbc4 1c04 	smlal	r1, ip, r4, r4
 8031c48:	f1bc 0f00 	cmp.w	ip, #0
 8031c4c:	eba2 0203 	sub.w	r2, r2, r3
 8031c50:	ea4f 75e4 	mov.w	r5, r4, asr #31
 8031c54:	da05      	bge.n	8031c62 <_lite_kernel_nl_softmax_is8os8+0xa6>
 8031c56:	f06f 4000 	mvn.w	r0, #2147483648	@ 0x80000000
 8031c5a:	1808      	adds	r0, r1, r0
 8031c5c:	4601      	mov	r1, r0
 8031c5e:	f14c 0c00 	adc.w	ip, ip, #0
 8031c62:	0fc9      	lsrs	r1, r1, #31
 8031c64:	ea41 014c 	orr.w	r1, r1, ip, lsl #1
 8031c68:	fba1 0701 	umull	r0, r7, r1, r1
 8031c6c:	ea4f 7cec 	mov.w	ip, ip, asr #31
 8031c70:	f110 4080 	adds.w	r0, r0, #1073741824	@ 0x40000000
 8031c74:	fb01 fa0c 	mul.w	sl, r1, ip
 8031c78:	eb47 074a 	adc.w	r7, r7, sl, lsl #1
 8031c7c:	2f00      	cmp	r7, #0
 8031c7e:	da06      	bge.n	8031c8e <_lite_kernel_nl_softmax_is8os8+0xd2>
 8031c80:	f06f 4a00 	mvn.w	sl, #2147483648	@ 0x80000000
 8031c84:	eb10 0a0a 	adds.w	sl, r0, sl
 8031c88:	4650      	mov	r0, sl
 8031c8a:	f147 0700 	adc.w	r7, r7, #0
 8031c8e:	0fc0      	lsrs	r0, r0, #31
 8031c90:	ea40 0047 	orr.w	r0, r0, r7, lsl #1
 8031c94:	1087      	asrs	r7, r0, #2
 8031c96:	bf54      	ite	pl
 8031c98:	f04f 0a01 	movpl.w	sl, #1
 8031c9c:	f04f 0a02 	movmi.w	sl, #2
 8031ca0:	f000 0003 	and.w	r0, r0, #3
 8031ca4:	4582      	cmp	sl, r0
 8031ca6:	ea81 0004 	eor.w	r0, r1, r4
 8031caa:	ea4f 70d0 	mov.w	r0, r0, lsr #31
 8031cae:	bfb8      	it	lt
 8031cb0:	3701      	addlt	r7, #1
 8031cb2:	2800      	cmp	r0, #0
 8031cb4:	48aa      	ldr	r0, [pc, #680]	@ (8031f60 <_lite_kernel_nl_softmax_is8os8+0x3a4>)
 8031cb6:	fb01 f505 	mul.w	r5, r1, r5
 8031cba:	fb04 550c 	mla	r5, r4, ip, r5
 8031cbe:	bf14      	ite	ne
 8031cc0:	4684      	movne	ip, r0
 8031cc2:	f04f 4c80 	moveq.w	ip, #1073741824	@ 0x40000000
 8031cc6:	fba1 0b04 	umull	r0, fp, r1, r4
 8031cca:	bf14      	ite	ne
 8031ccc:	f04f 3aff 	movne.w	sl, #4294967295
 8031cd0:	f04f 0a00 	moveq.w	sl, #0
 8031cd4:	445d      	add	r5, fp
 8031cd6:	eb10 000c 	adds.w	r0, r0, ip
 8031cda:	eb45 050a 	adc.w	r5, r5, sl
 8031cde:	2d00      	cmp	r5, #0
 8031ce0:	da06      	bge.n	8031cf0 <_lite_kernel_nl_softmax_is8os8+0x134>
 8031ce2:	f06f 4c00 	mvn.w	ip, #2147483648	@ 0x80000000
 8031ce6:	eb10 0c0c 	adds.w	ip, r0, ip
 8031cea:	4660      	mov	r0, ip
 8031cec:	f145 0500 	adc.w	r5, r5, #0
 8031cf0:	0fc0      	lsrs	r0, r0, #31
 8031cf2:	ea40 0045 	orr.w	r0, r0, r5, lsl #1
 8031cf6:	4438      	add	r0, r7
 8031cf8:	0fc5      	lsrs	r5, r0, #31
 8031cfa:	2d00      	cmp	r5, #0
 8031cfc:	4e99      	ldr	r6, [pc, #612]	@ (8031f64 <_lite_kernel_nl_softmax_is8os8+0x3a8>)
 8031cfe:	4d98      	ldr	r5, [pc, #608]	@ (8031f60 <_lite_kernel_nl_softmax_is8os8+0x3a4>)
 8031d00:	bf12      	itee	ne
 8031d02:	f04f 37ff 	movne.w	r7, #4294967295
 8031d06:	f04f 4580 	moveq.w	r5, #1073741824	@ 0x40000000
 8031d0a:	2700      	moveq	r7, #0
 8031d0c:	fbc0 5706 	smlal	r5, r7, r0, r6
 8031d10:	2f00      	cmp	r7, #0
 8031d12:	da05      	bge.n	8031d20 <_lite_kernel_nl_softmax_is8os8+0x164>
 8031d14:	f06f 4000 	mvn.w	r0, #2147483648	@ 0x80000000
 8031d18:	1828      	adds	r0, r5, r0
 8031d1a:	4605      	mov	r5, r0
 8031d1c:	f147 0700 	adc.w	r7, r7, #0
 8031d20:	0fed      	lsrs	r5, r5, #31
 8031d22:	ea45 0547 	orr.w	r5, r5, r7, lsl #1
 8031d26:	4429      	add	r1, r5
 8031d28:	1048      	asrs	r0, r1, #1
 8031d2a:	d402      	bmi.n	8031d32 <_lite_kernel_nl_softmax_is8os8+0x176>
 8031d2c:	07c9      	lsls	r1, r1, #31
 8031d2e:	bf48      	it	mi
 8031d30:	3001      	addmi	r0, #1
 8031d32:	4420      	add	r0, r4
 8031d34:	0fc1      	lsrs	r1, r0, #31
 8031d36:	2900      	cmp	r1, #0
 8031d38:	4d8b      	ldr	r5, [pc, #556]	@ (8031f68 <_lite_kernel_nl_softmax_is8os8+0x3ac>)
 8031d3a:	4989      	ldr	r1, [pc, #548]	@ (8031f60 <_lite_kernel_nl_softmax_is8os8+0x3a4>)
 8031d3c:	bf12      	itee	ne
 8031d3e:	f04f 34ff 	movne.w	r4, #4294967295
 8031d42:	f04f 4180 	moveq.w	r1, #1073741824	@ 0x40000000
 8031d46:	2400      	moveq	r4, #0
 8031d48:	fbc0 1405 	smlal	r1, r4, r0, r5
 8031d4c:	2c00      	cmp	r4, #0
 8031d4e:	da05      	bge.n	8031d5c <_lite_kernel_nl_softmax_is8os8+0x1a0>
 8031d50:	f06f 4000 	mvn.w	r0, #2147483648	@ 0x80000000
 8031d54:	1808      	adds	r0, r1, r0
 8031d56:	4601      	mov	r1, r0
 8031d58:	f144 0400 	adc.w	r4, r4, #0
 8031d5c:	4882      	ldr	r0, [pc, #520]	@ (8031f68 <_lite_kernel_nl_softmax_is8os8+0x3ac>)
 8031d5e:	4e83      	ldr	r6, [pc, #524]	@ (8031f6c <_lite_kernel_nl_softmax_is8os8+0x3b0>)
 8031d60:	0fc9      	lsrs	r1, r1, #31
 8031d62:	ea41 0144 	orr.w	r1, r1, r4, lsl #1
 8031d66:	1808      	adds	r0, r1, r0
 8031d68:	2100      	movs	r1, #0
 8031d6a:	460f      	mov	r7, r1
 8031d6c:	4645      	mov	r5, r8
 8031d6e:	fbc0 5706 	smlal	r5, r7, r0, r6
 8031d72:	f3c2 6400 	ubfx	r4, r2, #24, #1
 8031d76:	3c01      	subs	r4, #1
 8031d78:	0fed      	lsrs	r5, r5, #31
 8031d7a:	4004      	ands	r4, r0
 8031d7c:	ea45 0547 	orr.w	r5, r5, r7, lsl #1
 8031d80:	f342 6000 	sbfx	r0, r2, #24, #1
 8031d84:	4e7a      	ldr	r6, [pc, #488]	@ (8031f70 <_lite_kernel_nl_softmax_is8os8+0x3b4>)
 8031d86:	4028      	ands	r0, r5
 8031d88:	4060      	eors	r0, r4
 8031d8a:	460f      	mov	r7, r1
 8031d8c:	4645      	mov	r5, r8
 8031d8e:	fbc0 5706 	smlal	r5, r7, r0, r6
 8031d92:	f3c2 6440 	ubfx	r4, r2, #25, #1
 8031d96:	3c01      	subs	r4, #1
 8031d98:	0fed      	lsrs	r5, r5, #31
 8031d9a:	4004      	ands	r4, r0
 8031d9c:	ea45 0547 	orr.w	r5, r5, r7, lsl #1
 8031da0:	f342 6040 	sbfx	r0, r2, #25, #1
 8031da4:	4e73      	ldr	r6, [pc, #460]	@ (8031f74 <_lite_kernel_nl_softmax_is8os8+0x3b8>)
 8031da6:	4028      	ands	r0, r5
 8031da8:	4060      	eors	r0, r4
 8031daa:	460f      	mov	r7, r1
 8031dac:	4645      	mov	r5, r8
 8031dae:	fbc0 5706 	smlal	r5, r7, r0, r6
 8031db2:	f3c2 6480 	ubfx	r4, r2, #26, #1
 8031db6:	3c01      	subs	r4, #1
 8031db8:	0fed      	lsrs	r5, r5, #31
 8031dba:	4004      	ands	r4, r0
 8031dbc:	ea45 0547 	orr.w	r5, r5, r7, lsl #1
 8031dc0:	f342 6080 	sbfx	r0, r2, #26, #1
 8031dc4:	4e6c      	ldr	r6, [pc, #432]	@ (8031f78 <_lite_kernel_nl_softmax_is8os8+0x3bc>)
 8031dc6:	4028      	ands	r0, r5
 8031dc8:	4060      	eors	r0, r4
 8031dca:	460f      	mov	r7, r1
 8031dcc:	4644      	mov	r4, r8
 8031dce:	fbc0 4706 	smlal	r4, r7, r0, r6
 8031dd2:	f3c2 65c0 	ubfx	r5, r2, #27, #1
 8031dd6:	3d01      	subs	r5, #1
 8031dd8:	0fe4      	lsrs	r4, r4, #31
 8031dda:	4005      	ands	r5, r0
 8031ddc:	ea44 0447 	orr.w	r4, r4, r7, lsl #1
 8031de0:	f342 60c0 	sbfx	r0, r2, #27, #1
 8031de4:	4020      	ands	r0, r4
 8031de6:	4e65      	ldr	r6, [pc, #404]	@ (8031f7c <_lite_kernel_nl_softmax_is8os8+0x3c0>)
 8031de8:	ea85 0400 	eor.w	r4, r5, r0
 8031dec:	460f      	mov	r7, r1
 8031dee:	4645      	mov	r5, r8
 8031df0:	fbc4 5706 	smlal	r5, r7, r4, r6
 8031df4:	f3c2 7000 	ubfx	r0, r2, #28, #1
 8031df8:	3801      	subs	r0, #1
 8031dfa:	0fed      	lsrs	r5, r5, #31
 8031dfc:	ea45 0547 	orr.w	r5, r5, r7, lsl #1
 8031e00:	4020      	ands	r0, r4
 8031e02:	f342 7400 	sbfx	r4, r2, #28, #1
 8031e06:	402c      	ands	r4, r5
 8031e08:	4f5d      	ldr	r7, [pc, #372]	@ (8031f80 <_lite_kernel_nl_softmax_is8os8+0x3c4>)
 8031e0a:	4060      	eors	r0, r4
 8031e0c:	468c      	mov	ip, r1
 8031e0e:	4645      	mov	r5, r8
 8031e10:	fbc0 5c07 	smlal	r5, ip, r0, r7
 8031e14:	f3c2 7440 	ubfx	r4, r2, #29, #1
 8031e18:	3c01      	subs	r4, #1
 8031e1a:	0fed      	lsrs	r5, r5, #31
 8031e1c:	4004      	ands	r4, r0
 8031e1e:	ea45 054c 	orr.w	r5, r5, ip, lsl #1
 8031e22:	f342 7040 	sbfx	r0, r2, #29, #1
 8031e26:	4028      	ands	r0, r5
 8031e28:	4060      	eors	r0, r4
 8031e2a:	4645      	mov	r5, r8
 8031e2c:	24f2      	movs	r4, #242	@ 0xf2
 8031e2e:	fbc0 5104 	smlal	r5, r1, r0, r4
 8031e32:	0fed      	lsrs	r5, r5, #31
 8031e34:	ea45 0541 	orr.w	r5, r5, r1, lsl #1
 8031e38:	f3c2 7180 	ubfx	r1, r2, #30, #1
 8031e3c:	fab3 f383 	clz	r3, r3
 8031e40:	f342 7280 	sbfx	r2, r2, #30, #1
 8031e44:	3901      	subs	r1, #1
 8031e46:	095b      	lsrs	r3, r3, #5
 8031e48:	4001      	ands	r1, r0
 8031e4a:	402a      	ands	r2, r5
 8031e4c:	404a      	eors	r2, r1
 8031e4e:	1e59      	subs	r1, r3, #1
 8031e50:	425b      	negs	r3, r3
 8031e52:	400a      	ands	r2, r1
 8031e54:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8031e58:	4053      	eors	r3, r2
 8031e5a:	f849 3f04 	str.w	r3, [r9, #4]!
 8031e5e:	9b01      	ldr	r3, [sp, #4]
 8031e60:	f10e 0e01 	add.w	lr, lr, #1
 8031e64:	4573      	cmp	r3, lr
 8031e66:	f63f aec9 	bhi.w	8031bfc <_lite_kernel_nl_softmax_is8os8+0x40>
 8031e6a:	e9dd c902 	ldrd	ip, r9, [sp, #8]
 8031e6e:	e9dd 7a04 	ldrd	r7, sl, [sp, #16]
 8031e72:	469b      	mov	fp, r3
 8031e74:	2f00      	cmp	r7, #0
 8031e76:	f000 8199 	beq.w	80321ac <_lite_kernel_nl_softmax_is8os8+0x5f0>
 8031e7a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8031e7c:	fb03 f30a 	mul.w	r3, r3, sl
 8031e80:	f1ba 0f00 	cmp.w	sl, #0
 8031e84:	f000 8192 	beq.w	80321ac <_lite_kernel_nl_softmax_is8os8+0x5f0>
 8031e88:	eb09 020a 	add.w	r2, r9, sl
 8031e8c:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 8031e8e:	9204      	str	r2, [sp, #16]
 8031e90:	464d      	mov	r5, r9
 8031e92:	2200      	movs	r2, #0
 8031e94:	9709      	str	r7, [sp, #36]	@ 0x24
 8031e96:	46d1      	mov	r9, sl
 8031e98:	e9cd 3205 	strd	r3, r2, [sp, #20]
 8031e9c:	46e2      	mov	sl, ip
 8031e9e:	f8cd c01c 	str.w	ip, [sp, #28]
 8031ea2:	9508      	str	r5, [sp, #32]
 8031ea4:	46ac      	mov	ip, r5
 8031ea6:	2c01      	cmp	r4, #1
 8031ea8:	f99c 1000 	ldrsb.w	r1, [ip]
 8031eac:	f240 8243 	bls.w	8032336 <_lite_kernel_nl_softmax_is8os8+0x77a>
 8031eb0:	eb0c 0209 	add.w	r2, ip, r9
 8031eb4:	2301      	movs	r3, #1
 8031eb6:	f992 0000 	ldrsb.w	r0, [r2]
 8031eba:	3301      	adds	r3, #1
 8031ebc:	4281      	cmp	r1, r0
 8031ebe:	bfb8      	it	lt
 8031ec0:	4601      	movlt	r1, r0
 8031ec2:	429c      	cmp	r4, r3
 8031ec4:	444a      	add	r2, r9
 8031ec6:	d1f6      	bne.n	8031eb6 <_lite_kernel_nl_softmax_is8os8+0x2fa>
 8031ec8:	2500      	movs	r5, #0
 8031eca:	9e18      	ldr	r6, [sp, #96]	@ 0x60
 8031ecc:	4662      	mov	r2, ip
 8031ece:	462b      	mov	r3, r5
 8031ed0:	f992 0000 	ldrsb.w	r0, [r2]
 8031ed4:	1a08      	subs	r0, r1, r0
 8031ed6:	4558      	cmp	r0, fp
 8031ed8:	f103 0301 	add.w	r3, r3, #1
 8031edc:	444a      	add	r2, r9
 8031ede:	da0d      	bge.n	8031efc <_lite_kernel_nl_softmax_is8os8+0x340>
 8031ee0:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 8031ee4:	1307      	asrs	r7, r0, #12
 8031ee6:	f240 7eff 	movw	lr, #2047	@ 0x7ff
 8031eea:	f3c0 000b 	ubfx	r0, r0, #0, #12
 8031eee:	bf48      	it	mi
 8031ef0:	f44f 6e00 	movmi.w	lr, #2048	@ 0x800
 8031ef4:	4570      	cmp	r0, lr
 8031ef6:	bfc8      	it	gt
 8031ef8:	3701      	addgt	r7, #1
 8031efa:	443d      	add	r5, r7
 8031efc:	429c      	cmp	r4, r3
 8031efe:	d1e7      	bne.n	8031ed0 <_lite_kernel_nl_softmax_is8os8+0x314>
 8031f00:	2d00      	cmp	r5, #0
 8031f02:	f000 821b 	beq.w	803233c <_lite_kernel_nl_softmax_is8os8+0x780>
 8031f06:	fab5 f085 	clz	r0, r5
 8031f0a:	4085      	lsls	r5, r0
 8031f0c:	f105 4200 	add.w	r2, r5, #2147483648	@ 0x80000000
 8031f10:	17d3      	asrs	r3, r2, #31
 8031f12:	9002      	str	r0, [sp, #8]
 8031f14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8031f18:	bf08      	it	eq
 8031f1a:	2d00      	cmpeq	r5, #0
 8031f1c:	f1c0 0023 	rsb	r0, r0, #35	@ 0x23
 8031f20:	9001      	str	r0, [sp, #4]
 8031f22:	f000 8153 	beq.w	80321cc <_lite_kernel_nl_softmax_is8os8+0x610>
 8031f26:	f112 4200 	adds.w	r2, r2, #2147483648	@ 0x80000000
 8031f2a:	f143 0500 	adc.w	r5, r3, #0
 8031f2e:	0852      	lsrs	r2, r2, #1
 8031f30:	ea42 72c5 	orr.w	r2, r2, r5, lsl #31
 8031f34:	4b13      	ldr	r3, [pc, #76]	@ (8031f84 <_lite_kernel_nl_softmax_is8os8+0x3c8>)
 8031f36:	9203      	str	r2, [sp, #12]
 8031f38:	106d      	asrs	r5, r5, #1
 8031f3a:	4250      	negs	r0, r2
 8031f3c:	fb03 0005 	mla	r0, r3, r5, r0
 8031f40:	fba2 3603 	umull	r3, r6, r2, r3
 8031f44:	4406      	add	r6, r0
 8031f46:	4806      	ldr	r0, [pc, #24]	@ (8031f60 <_lite_kernel_nl_softmax_is8os8+0x3a4>)
 8031f48:	181b      	adds	r3, r3, r0
 8031f4a:	f166 0600 	sbc.w	r6, r6, #0
 8031f4e:	2e00      	cmp	r6, #0
 8031f50:	da1a      	bge.n	8031f88 <_lite_kernel_nl_softmax_is8os8+0x3cc>
 8031f52:	f06f 4000 	mvn.w	r0, #2147483648	@ 0x80000000
 8031f56:	1818      	adds	r0, r3, r0
 8031f58:	4603      	mov	r3, r0
 8031f5a:	f146 0600 	adc.w	r6, r6, #0
 8031f5e:	e013      	b.n	8031f88 <_lite_kernel_nl_softmax_is8os8+0x3cc>
 8031f60:	c0000001 	.word	0xc0000001
 8031f64:	2aaaaaab 	.word	0x2aaaaaab
 8031f68:	70f5a894 	.word	0x70f5a894
 8031f6c:	63afbe7b 	.word	0x63afbe7b
 8031f70:	4da2cbf2 	.word	0x4da2cbf2
 8031f74:	2f16ac6c 	.word	0x2f16ac6c
 8031f78:	1152aaa4 	.word	0x1152aaa4
 8031f7c:	02582ab7 	.word	0x02582ab7
 8031f80:	000afe11 	.word	0x000afe11
 8031f84:	c3c3c3c4 	.word	0xc3c3c3c4
 8031f88:	0fdb      	lsrs	r3, r3, #31
 8031f8a:	ea43 0046 	orr.w	r0, r3, r6, lsl #1
 8031f8e:	f100 305a 	add.w	r0, r0, #1515870810	@ 0x5a5a5a5a
 8031f92:	17c3      	asrs	r3, r0, #31
 8031f94:	fb00 f605 	mul.w	r6, r0, r5
 8031f98:	fb02 6603 	mla	r6, r2, r3, r6
 8031f9c:	fba0 7302 	umull	r7, r3, r0, r2
 8031fa0:	f117 4780 	adds.w	r7, r7, #1073741824	@ 0x40000000
 8031fa4:	eb46 0303 	adc.w	r3, r6, r3
 8031fa8:	0fff      	lsrs	r7, r7, #31
 8031faa:	ea47 0743 	orr.w	r7, r7, r3, lsl #1
 8031fae:	f1c7 5700 	rsb	r7, r7, #536870912	@ 0x20000000
 8031fb2:	ea97 0f00 	teq	r7, r0
 8031fb6:	fb80 3607 	smull	r3, r6, r0, r7
 8031fba:	f140 819d 	bpl.w	80322f8 <_lite_kernel_nl_softmax_is8os8+0x73c>
 8031fbe:	4fcc      	ldr	r7, [pc, #816]	@ (80322f0 <_lite_kernel_nl_softmax_is8os8+0x734>)
 8031fc0:	19db      	adds	r3, r3, r7
 8031fc2:	f166 0600 	sbc.w	r6, r6, #0
 8031fc6:	2e00      	cmp	r6, #0
 8031fc8:	f2c0 819d 	blt.w	8032306 <_lite_kernel_nl_softmax_is8os8+0x74a>
 8031fcc:	0fdb      	lsrs	r3, r3, #31
 8031fce:	ea43 0346 	orr.w	r3, r3, r6, lsl #1
 8031fd2:	f1b3 4f60 	cmp.w	r3, #3758096384	@ 0xe0000000
 8031fd6:	ea4f 0683 	mov.w	r6, r3, lsl #2
 8031fda:	f300 819b 	bgt.w	8032314 <_lite_kernel_nl_softmax_is8os8+0x758>
 8031fde:	f100 4000 	add.w	r0, r0, #2147483648	@ 0x80000000
 8031fe2:	17c6      	asrs	r6, r0, #31
 8031fe4:	fb02 fe06 	mul.w	lr, r2, r6
 8031fe8:	fba2 3700 	umull	r3, r7, r2, r0
 8031fec:	fb00 ee05 	mla	lr, r0, r5, lr
 8031ff0:	44be      	add	lr, r7
 8031ff2:	4fbf      	ldr	r7, [pc, #764]	@ (80322f0 <_lite_kernel_nl_softmax_is8os8+0x734>)
 8031ff4:	19db      	adds	r3, r3, r7
 8031ff6:	f16e 0700 	sbc.w	r7, lr, #0
 8031ffa:	2f00      	cmp	r7, #0
 8031ffc:	da06      	bge.n	803200c <_lite_kernel_nl_softmax_is8os8+0x450>
 8031ffe:	f06f 4e00 	mvn.w	lr, #2147483648	@ 0x80000000
 8032002:	eb13 0e0e 	adds.w	lr, r3, lr
 8032006:	4673      	mov	r3, lr
 8032008:	f147 0700 	adc.w	r7, r7, #0
 803200c:	0fdb      	lsrs	r3, r3, #31
 803200e:	ea43 0347 	orr.w	r3, r3, r7, lsl #1
 8032012:	4fb7      	ldr	r7, [pc, #732]	@ (80322f0 <_lite_kernel_nl_softmax_is8os8+0x734>)
 8032014:	f1c3 5300 	rsb	r3, r3, #536870912	@ 0x20000000
 8032018:	f04f 3eff 	mov.w	lr, #4294967295
 803201c:	fb03 f606 	mul.w	r6, r3, r6
 8032020:	ea4f 78e3 	mov.w	r8, r3, asr #31
 8032024:	fb00 6608 	mla	r6, r0, r8, r6
 8032028:	fba3 3800 	umull	r3, r8, r3, r0
 803202c:	19db      	adds	r3, r3, r7
 803202e:	4446      	add	r6, r8
 8032030:	eb46 060e 	adc.w	r6, r6, lr
 8032034:	2e00      	cmp	r6, #0
 8032036:	da05      	bge.n	8032044 <_lite_kernel_nl_softmax_is8os8+0x488>
 8032038:	f06f 4700 	mvn.w	r7, #2147483648	@ 0x80000000
 803203c:	19df      	adds	r7, r3, r7
 803203e:	463b      	mov	r3, r7
 8032040:	f146 0600 	adc.w	r6, r6, #0
 8032044:	0fdb      	lsrs	r3, r3, #31
 8032046:	ea43 0346 	orr.w	r3, r3, r6, lsl #1
 803204a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 803204e:	f280 8145 	bge.w	80322dc <_lite_kernel_nl_softmax_is8os8+0x720>
 8032052:	f1b3 4f60 	cmp.w	r3, #3758096384	@ 0xe0000000
 8032056:	f300 816c 	bgt.w	8032332 <_lite_kernel_nl_softmax_is8os8+0x776>
 803205a:	f100 4300 	add.w	r3, r0, #2147483648	@ 0x80000000
 803205e:	ea93 0f02 	teq	r3, r2
 8032062:	f140 80fb 	bpl.w	803225c <_lite_kernel_nl_softmax_is8os8+0x6a0>
 8032066:	fb03 f505 	mul.w	r5, r3, r5
 803206a:	17d8      	asrs	r0, r3, #31
 803206c:	fb02 5000 	mla	r0, r2, r0, r5
 8032070:	fba3 2502 	umull	r2, r5, r3, r2
 8032074:	4405      	add	r5, r0
 8032076:	489e      	ldr	r0, [pc, #632]	@ (80322f0 <_lite_kernel_nl_softmax_is8os8+0x734>)
 8032078:	1812      	adds	r2, r2, r0
 803207a:	f165 0500 	sbc.w	r5, r5, #0
 803207e:	2d00      	cmp	r5, #0
 8032080:	da05      	bge.n	803208e <_lite_kernel_nl_softmax_is8os8+0x4d2>
 8032082:	f06f 4000 	mvn.w	r0, #2147483648	@ 0x80000000
 8032086:	1810      	adds	r0, r2, r0
 8032088:	4602      	mov	r2, r0
 803208a:	f145 0500 	adc.w	r5, r5, #0
 803208e:	0fd2      	lsrs	r2, r2, #31
 8032090:	ea42 0245 	orr.w	r2, r2, r5, lsl #1
 8032094:	f1c2 5000 	rsb	r0, r2, #536870912	@ 0x20000000
 8032098:	4a95      	ldr	r2, [pc, #596]	@ (80322f0 <_lite_kernel_nl_softmax_is8os8+0x734>)
 803209a:	f04f 35ff 	mov.w	r5, #4294967295
 803209e:	fbc0 2503 	smlal	r2, r5, r0, r3
 80320a2:	2d00      	cmp	r5, #0
 80320a4:	da05      	bge.n	80320b2 <_lite_kernel_nl_softmax_is8os8+0x4f6>
 80320a6:	f06f 4000 	mvn.w	r0, #2147483648	@ 0x80000000
 80320aa:	1810      	adds	r0, r2, r0
 80320ac:	4602      	mov	r2, r0
 80320ae:	f145 0500 	adc.w	r5, r5, #0
 80320b2:	0fd2      	lsrs	r2, r2, #31
 80320b4:	ea42 0045 	orr.w	r0, r2, r5, lsl #1
 80320b8:	f1b0 4f60 	cmp.w	r0, #3758096384	@ 0xe0000000
 80320bc:	f300 82b5 	bgt.w	803262a <_lite_kernel_nl_softmax_is8os8+0xa6e>
 80320c0:	f103 4200 	add.w	r2, r3, #2147483648	@ 0x80000000
 80320c4:	005e      	lsls	r6, r3, #1
 80320c6:	f1b2 4f40 	cmp.w	r2, #3221225472	@ 0xc0000000
 80320ca:	bfd8      	it	le
 80320cc:	f04f 4600 	movle.w	r6, #2147483648	@ 0x80000000
 80320d0:	9b01      	ldr	r3, [sp, #4]
 80320d2:	2b1f      	cmp	r3, #31
 80320d4:	dd05      	ble.n	80320e2 <_lite_kernel_nl_softmax_is8os8+0x526>
 80320d6:	9b02      	ldr	r3, [sp, #8]
 80320d8:	f1c3 0304 	rsb	r3, r3, #4
 80320dc:	411e      	asrs	r6, r3
 80320de:	231f      	movs	r3, #31
 80320e0:	9301      	str	r3, [sp, #4]
 80320e2:	2c00      	cmp	r4, #0
 80320e4:	d065      	beq.n	80321b2 <_lite_kernel_nl_softmax_is8os8+0x5f6>
 80320e6:	9b01      	ldr	r3, [sp, #4]
 80320e8:	f04f 0e01 	mov.w	lr, #1
 80320ec:	fa0e fe03 	lsl.w	lr, lr, r3
 80320f0:	f10e 3eff 	add.w	lr, lr, #4294967295
 80320f4:	ea4f 086e 	mov.w	r8, lr, asr #1
 80320f8:	2200      	movs	r2, #0
 80320fa:	e9cd 1801 	strd	r1, r8, [sp, #4]
 80320fe:	4610      	mov	r0, r2
 8032100:	4698      	mov	r8, r3
 8032102:	e02f      	b.n	8032164 <_lite_kernel_nl_softmax_is8os8+0x5a8>
 8032104:	9d18      	ldr	r5, [sp, #96]	@ 0x60
 8032106:	f855 7023 	ldr.w	r7, [r5, r3, lsl #2]
 803210a:	ea87 0306 	eor.w	r3, r7, r6
 803210e:	0fdb      	lsrs	r3, r3, #31
 8032110:	2b00      	cmp	r3, #0
 8032112:	4b77      	ldr	r3, [pc, #476]	@ (80322f0 <_lite_kernel_nl_softmax_is8os8+0x734>)
 8032114:	bf12      	itee	ne
 8032116:	f04f 35ff 	movne.w	r5, #4294967295
 803211a:	f04f 4380 	moveq.w	r3, #1073741824	@ 0x40000000
 803211e:	2500      	moveq	r5, #0
 8032120:	fbc6 3507 	smlal	r3, r5, r6, r7
 8032124:	2d00      	cmp	r5, #0
 8032126:	da04      	bge.n	8032132 <_lite_kernel_nl_softmax_is8os8+0x576>
 8032128:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 803212c:	185b      	adds	r3, r3, r1
 803212e:	f145 0500 	adc.w	r5, r5, #0
 8032132:	0fdb      	lsrs	r3, r3, #31
 8032134:	42b7      	cmp	r7, r6
 8032136:	ea43 0345 	orr.w	r3, r3, r5, lsl #1
 803213a:	d079      	beq.n	8032230 <_lite_kernel_nl_softmax_is8os8+0x674>
 803213c:	fa53 f508 	asrs.w	r5, r3, r8
 8032140:	d416      	bmi.n	8032170 <_lite_kernel_nl_softmax_is8os8+0x5b4>
 8032142:	9f02      	ldr	r7, [sp, #8]
 8032144:	ea03 030e 	and.w	r3, r3, lr
 8032148:	429f      	cmp	r7, r3
 803214a:	da7e      	bge.n	803224a <_lite_kernel_nl_softmax_is8os8+0x68e>
 803214c:	3501      	adds	r5, #1
 803214e:	2dfe      	cmp	r5, #254	@ 0xfe
 8032150:	f300 8082 	bgt.w	8032258 <_lite_kernel_nl_softmax_is8os8+0x69c>
 8032154:	3d80      	subs	r5, #128	@ 0x80
 8032156:	b26d      	sxtb	r5, r5
 8032158:	3001      	adds	r0, #1
 803215a:	4284      	cmp	r4, r0
 803215c:	f80a 5002 	strb.w	r5, [sl, r2]
 8032160:	444a      	add	r2, r9
 8032162:	d00d      	beq.n	8032180 <_lite_kernel_nl_softmax_is8os8+0x5c4>
 8032164:	f91c 3002 	ldrsb.w	r3, [ip, r2]
 8032168:	9901      	ldr	r1, [sp, #4]
 803216a:	1acb      	subs	r3, r1, r3
 803216c:	455b      	cmp	r3, fp
 803216e:	dbc9      	blt.n	8032104 <_lite_kernel_nl_softmax_is8os8+0x548>
 8032170:	f06f 057f 	mvn.w	r5, #127	@ 0x7f
 8032174:	3001      	adds	r0, #1
 8032176:	4284      	cmp	r4, r0
 8032178:	f80a 5002 	strb.w	r5, [sl, r2]
 803217c:	444a      	add	r2, r9
 803217e:	d1f1      	bne.n	8032164 <_lite_kernel_nl_softmax_is8os8+0x5a8>
 8032180:	9b04      	ldr	r3, [sp, #16]
 8032182:	f10c 0c01 	add.w	ip, ip, #1
 8032186:	459c      	cmp	ip, r3
 8032188:	f10a 0a01 	add.w	sl, sl, #1
 803218c:	f47f ae8b 	bne.w	8031ea6 <_lite_kernel_nl_softmax_is8os8+0x2ea>
 8032190:	e9dd 3205 	ldrd	r3, r2, [sp, #20]
 8032194:	9904      	ldr	r1, [sp, #16]
 8032196:	4419      	add	r1, r3
 8032198:	e9dd c507 	ldrd	ip, r5, [sp, #28]
 803219c:	9104      	str	r1, [sp, #16]
 803219e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80321a0:	3201      	adds	r2, #1
 80321a2:	4291      	cmp	r1, r2
 80321a4:	441d      	add	r5, r3
 80321a6:	449c      	add	ip, r3
 80321a8:	f47f ae76 	bne.w	8031e98 <_lite_kernel_nl_softmax_is8os8+0x2dc>
 80321ac:	b00b      	add	sp, #44	@ 0x2c
 80321ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80321b2:	9b04      	ldr	r3, [sp, #16]
 80321b4:	f10c 0c01 	add.w	ip, ip, #1
 80321b8:	459c      	cmp	ip, r3
 80321ba:	f10a 0a01 	add.w	sl, sl, #1
 80321be:	d0e7      	beq.n	8032190 <_lite_kernel_nl_softmax_is8os8+0x5d4>
 80321c0:	2003      	movs	r0, #3
 80321c2:	2320      	movs	r3, #32
 80321c4:	e9cd 0301 	strd	r0, r3, [sp, #4]
 80321c8:	f99c 1000 	ldrsb.w	r1, [ip]
 80321cc:	4849      	ldr	r0, [pc, #292]	@ (80322f4 <_lite_kernel_nl_softmax_is8os8+0x738>)
 80321ce:	f04f 32ff 	mov.w	r2, #4294967295
 80321d2:	2300      	movs	r3, #0
 80321d4:	4615      	mov	r5, r2
 80321d6:	f04f 4e80 	mov.w	lr, #1073741824	@ 0x40000000
 80321da:	9303      	str	r3, [sp, #12]
 80321dc:	17c6      	asrs	r6, r0, #31
 80321de:	fba2 3800 	umull	r3, r8, r2, r0
 80321e2:	fb02 f706 	mul.w	r7, r2, r6
 80321e6:	eb13 0e0e 	adds.w	lr, r3, lr
 80321ea:	fb00 7705 	mla	r7, r0, r5, r7
 80321ee:	9b03      	ldr	r3, [sp, #12]
 80321f0:	4447      	add	r7, r8
 80321f2:	eb47 0703 	adc.w	r7, r7, r3
 80321f6:	2f00      	cmp	r7, #0
 80321f8:	4673      	mov	r3, lr
 80321fa:	da06      	bge.n	803220a <_lite_kernel_nl_softmax_is8os8+0x64e>
 80321fc:	f06f 4e00 	mvn.w	lr, #2147483648	@ 0x80000000
 8032200:	eb13 0e0e 	adds.w	lr, r3, lr
 8032204:	4673      	mov	r3, lr
 8032206:	f147 0700 	adc.w	r7, r7, #0
 803220a:	0fdb      	lsrs	r3, r3, #31
 803220c:	ea43 0347 	orr.w	r3, r3, r7, lsl #1
 8032210:	f1c3 5300 	rsb	r3, r3, #536870912	@ 0x20000000
 8032214:	ea80 0703 	eor.w	r7, r0, r3
 8032218:	0fff      	lsrs	r7, r7, #31
 803221a:	2f00      	cmp	r7, #0
 803221c:	bf18      	it	ne
 803221e:	f04f 3eff 	movne.w	lr, #4294967295
 8032222:	4f33      	ldr	r7, [pc, #204]	@ (80322f0 <_lite_kernel_nl_softmax_is8os8+0x734>)
 8032224:	bf04      	itt	eq
 8032226:	f04f 0e00 	moveq.w	lr, #0
 803222a:	f04f 4780 	moveq.w	r7, #1073741824	@ 0x40000000
 803222e:	e6f5      	b.n	803201c <_lite_kernel_nl_softmax_is8os8+0x460>
 8032230:	f1b6 4f00 	cmp.w	r6, #2147483648	@ 0x80000000
 8032234:	d182      	bne.n	803213c <_lite_kernel_nl_softmax_is8os8+0x580>
 8032236:	f02e 4300 	bic.w	r3, lr, #2147483648	@ 0x80000000
 803223a:	ea4f 076e 	mov.w	r7, lr, asr #1
 803223e:	f06f 4500 	mvn.w	r5, #2147483648	@ 0x80000000
 8032242:	429f      	cmp	r7, r3
 8032244:	fa45 f508 	asr.w	r5, r5, r8
 8032248:	db80      	blt.n	803214c <_lite_kernel_nl_softmax_is8os8+0x590>
 803224a:	2dfe      	cmp	r5, #254	@ 0xfe
 803224c:	dc04      	bgt.n	8032258 <_lite_kernel_nl_softmax_is8os8+0x69c>
 803224e:	2d00      	cmp	r5, #0
 8032250:	d180      	bne.n	8032154 <_lite_kernel_nl_softmax_is8os8+0x598>
 8032252:	f06f 057f 	mvn.w	r5, #127	@ 0x7f
 8032256:	e78d      	b.n	8032174 <_lite_kernel_nl_softmax_is8os8+0x5b8>
 8032258:	257f      	movs	r5, #127	@ 0x7f
 803225a:	e77d      	b.n	8032158 <_lite_kernel_nl_softmax_is8os8+0x59c>
 803225c:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8032260:	2600      	movs	r6, #0
 8032262:	17df      	asrs	r7, r3, #31
 8032264:	fb03 f505 	mul.w	r5, r3, r5
 8032268:	fb02 5507 	mla	r5, r2, r7, r5
 803226c:	fba3 2702 	umull	r2, r7, r3, r2
 8032270:	1812      	adds	r2, r2, r0
 8032272:	443d      	add	r5, r7
 8032274:	eb45 0506 	adc.w	r5, r5, r6
 8032278:	2d00      	cmp	r5, #0
 803227a:	da05      	bge.n	8032288 <_lite_kernel_nl_softmax_is8os8+0x6cc>
 803227c:	f06f 4000 	mvn.w	r0, #2147483648	@ 0x80000000
 8032280:	1810      	adds	r0, r2, r0
 8032282:	4602      	mov	r2, r0
 8032284:	f145 0500 	adc.w	r5, r5, #0
 8032288:	0fd2      	lsrs	r2, r2, #31
 803228a:	ea42 0245 	orr.w	r2, r2, r5, lsl #1
 803228e:	f1c2 5200 	rsb	r2, r2, #536870912	@ 0x20000000
 8032292:	ea82 0003 	eor.w	r0, r2, r3
 8032296:	0fc0      	lsrs	r0, r0, #31
 8032298:	2800      	cmp	r0, #0
 803229a:	4815      	ldr	r0, [pc, #84]	@ (80322f0 <_lite_kernel_nl_softmax_is8os8+0x734>)
 803229c:	bf12      	itee	ne
 803229e:	f04f 35ff 	movne.w	r5, #4294967295
 80322a2:	f04f 4080 	moveq.w	r0, #1073741824	@ 0x40000000
 80322a6:	2500      	moveq	r5, #0
 80322a8:	fbc3 0502 	smlal	r0, r5, r3, r2
 80322ac:	2d00      	cmp	r5, #0
 80322ae:	da05      	bge.n	80322bc <_lite_kernel_nl_softmax_is8os8+0x700>
 80322b0:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 80322b4:	1882      	adds	r2, r0, r2
 80322b6:	4610      	mov	r0, r2
 80322b8:	f145 0500 	adc.w	r5, r5, #0
 80322bc:	0fc0      	lsrs	r0, r0, #31
 80322be:	ea40 0045 	orr.w	r0, r0, r5, lsl #1
 80322c2:	f1b0 5f00 	cmp.w	r0, #536870912	@ 0x20000000
 80322c6:	f6ff aef7 	blt.w	80320b8 <_lite_kernel_nl_softmax_is8os8+0x4fc>
 80322ca:	f06f 4600 	mvn.w	r6, #2147483648	@ 0x80000000
 80322ce:	4433      	add	r3, r6
 80322d0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80322d4:	f6bf aefc 	bge.w	80320d0 <_lite_kernel_nl_softmax_is8os8+0x514>
 80322d8:	005e      	lsls	r6, r3, #1
 80322da:	e6f9      	b.n	80320d0 <_lite_kernel_nl_softmax_is8os8+0x514>
 80322dc:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 80322e0:	4403      	add	r3, r0
 80322e2:	ea92 0f03 	teq	r2, r3
 80322e6:	d5b9      	bpl.n	803225c <_lite_kernel_nl_softmax_is8os8+0x6a0>
 80322e8:	4801      	ldr	r0, [pc, #4]	@ (80322f0 <_lite_kernel_nl_softmax_is8os8+0x734>)
 80322ea:	f04f 36ff 	mov.w	r6, #4294967295
 80322ee:	e7b8      	b.n	8032262 <_lite_kernel_nl_softmax_is8os8+0x6a6>
 80322f0:	c0000001 	.word	0xc0000001
 80322f4:	b4b4b4b6 	.word	0xb4b4b4b6
 80322f8:	f113 4380 	adds.w	r3, r3, #1073741824	@ 0x40000000
 80322fc:	f146 0600 	adc.w	r6, r6, #0
 8032300:	2e00      	cmp	r6, #0
 8032302:	f6bf ae63 	bge.w	8031fcc <_lite_kernel_nl_softmax_is8os8+0x410>
 8032306:	f06f 4700 	mvn.w	r7, #2147483648	@ 0x80000000
 803230a:	19df      	adds	r7, r3, r7
 803230c:	463b      	mov	r3, r7
 803230e:	f146 0600 	adc.w	r6, r6, #0
 8032312:	e65b      	b.n	8031fcc <_lite_kernel_nl_softmax_is8os8+0x410>
 8032314:	4430      	add	r0, r6
 8032316:	ea80 0302 	eor.w	r3, r0, r2
 803231a:	0fdb      	lsrs	r3, r3, #31
 803231c:	2b00      	cmp	r3, #0
 803231e:	4bc8      	ldr	r3, [pc, #800]	@ (8032640 <_lite_kernel_nl_softmax_is8os8+0xa84>)
 8032320:	bf0d      	iteet	eq
 8032322:	2300      	moveq	r3, #0
 8032324:	469e      	movne	lr, r3
 8032326:	f04f 33ff 	movne.w	r3, #4294967295
 803232a:	f04f 4e80 	moveq.w	lr, #1073741824	@ 0x40000000
 803232e:	9303      	str	r3, [sp, #12]
 8032330:	e754      	b.n	80321dc <_lite_kernel_nl_softmax_is8os8+0x620>
 8032332:	009b      	lsls	r3, r3, #2
 8032334:	e7d4      	b.n	80322e0 <_lite_kernel_nl_softmax_is8os8+0x724>
 8032336:	2c00      	cmp	r4, #0
 8032338:	f47f adc6 	bne.w	8031ec8 <_lite_kernel_nl_softmax_is8os8+0x30c>
 803233c:	2203      	movs	r2, #3
 803233e:	2320      	movs	r3, #32
 8032340:	e9cd 2301 	strd	r2, r3, [sp, #4]
 8032344:	e742      	b.n	80321cc <_lite_kernel_nl_softmax_is8os8+0x610>
 8032346:	2901      	cmp	r1, #1
 8032348:	f1c3 0b00 	rsb	fp, r3, #0
 803234c:	d904      	bls.n	8032358 <_lite_kernel_nl_softmax_is8os8+0x79c>
 803234e:	f1bb 0f00 	cmp.w	fp, #0
 8032352:	f47f ac46 	bne.w	8031be2 <_lite_kernel_nl_softmax_is8os8+0x26>
 8032356:	e58d      	b.n	8031e74 <_lite_kernel_nl_softmax_is8os8+0x2b8>
 8032358:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 803235a:	f999 2000 	ldrsb.w	r2, [r9]
 803235e:	fb03 f101 	mul.w	r1, r3, r1
 8032362:	2901      	cmp	r1, #1
 8032364:	f240 815b 	bls.w	803261e <_lite_kernel_nl_softmax_is8os8+0xa62>
 8032368:	f109 34ff 	add.w	r4, r9, #4294967295
 803236c:	464b      	mov	r3, r9
 803236e:	1860      	adds	r0, r4, r1
 8032370:	f913 5f01 	ldrsb.w	r5, [r3, #1]!
 8032374:	42aa      	cmp	r2, r5
 8032376:	bfb8      	it	lt
 8032378:	462a      	movlt	r2, r5
 803237a:	4283      	cmp	r3, r0
 803237c:	d1f8      	bne.n	8032370 <_lite_kernel_nl_softmax_is8os8+0x7b4>
 803237e:	e9cd c903 	strd	ip, r9, [sp, #12]
 8032382:	1863      	adds	r3, r4, r1
 8032384:	e9cd 7a05 	strd	r7, sl, [sp, #20]
 8032388:	46a0      	mov	r8, r4
 803238a:	9301      	str	r3, [sp, #4]
 803238c:	4692      	mov	sl, r2
 803238e:	f918 6f01 	ldrsb.w	r6, [r8, #1]!
 8032392:	ebaa 0606 	sub.w	r6, sl, r6
 8032396:	45b3      	cmp	fp, r6
 8032398:	f240 8138 	bls.w	803260c <_lite_kernel_nl_softmax_is8os8+0xa50>
 803239c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 803239e:	9815      	ldr	r0, [sp, #84]	@ 0x54
 80323a0:	fa06 f203 	lsl.w	r2, r6, r3
 80323a4:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80323a6:	4252      	negs	r2, r2
 80323a8:	4053      	eors	r3, r2
 80323aa:	0fdb      	lsrs	r3, r3, #31
 80323ac:	2b00      	cmp	r3, #0
 80323ae:	4ba4      	ldr	r3, [pc, #656]	@ (8032640 <_lite_kernel_nl_softmax_is8os8+0xa84>)
 80323b0:	bf12      	itee	ne
 80323b2:	f04f 31ff 	movne.w	r1, #4294967295
 80323b6:	f04f 4380 	moveq.w	r3, #1073741824	@ 0x40000000
 80323ba:	2100      	moveq	r1, #0
 80323bc:	fbc2 3100 	smlal	r3, r1, r2, r0
 80323c0:	2900      	cmp	r1, #0
 80323c2:	da05      	bge.n	80323d0 <_lite_kernel_nl_softmax_is8os8+0x814>
 80323c4:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 80323c8:	189a      	adds	r2, r3, r2
 80323ca:	4613      	mov	r3, r2
 80323cc:	f141 0100 	adc.w	r1, r1, #0
 80323d0:	0fdb      	lsrs	r3, r3, #31
 80323d2:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
 80323d6:	f043 417f 	orr.w	r1, r3, #4278190080	@ 0xff000000
 80323da:	014d      	lsls	r5, r1, #5
 80323dc:	f105 5580 	add.w	r5, r5, #268435456	@ 0x10000000
 80323e0:	9302      	str	r3, [sp, #8]
 80323e2:	1ac9      	subs	r1, r1, r3
 80323e4:	2400      	movs	r4, #0
 80323e6:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80323ea:	fbc5 3405 	smlal	r3, r4, r5, r5
 80323ee:	2c00      	cmp	r4, #0
 80323f0:	ea4f 7ce5 	mov.w	ip, r5, asr #31
 80323f4:	da05      	bge.n	8032402 <_lite_kernel_nl_softmax_is8os8+0x846>
 80323f6:	f06f 4000 	mvn.w	r0, #2147483648	@ 0x80000000
 80323fa:	1818      	adds	r0, r3, r0
 80323fc:	4603      	mov	r3, r0
 80323fe:	f144 0400 	adc.w	r4, r4, #0
 8032402:	0fdb      	lsrs	r3, r3, #31
 8032404:	ea43 0344 	orr.w	r3, r3, r4, lsl #1
 8032408:	fba3 0703 	umull	r0, r7, r3, r3
 803240c:	17e4      	asrs	r4, r4, #31
 803240e:	f110 4080 	adds.w	r0, r0, #1073741824	@ 0x40000000
 8032412:	fb03 fe04 	mul.w	lr, r3, r4
 8032416:	eb47 074e 	adc.w	r7, r7, lr, lsl #1
 803241a:	2f00      	cmp	r7, #0
 803241c:	da06      	bge.n	803242c <_lite_kernel_nl_softmax_is8os8+0x870>
 803241e:	f06f 4e00 	mvn.w	lr, #2147483648	@ 0x80000000
 8032422:	eb10 0e0e 	adds.w	lr, r0, lr
 8032426:	4670      	mov	r0, lr
 8032428:	f147 0700 	adc.w	r7, r7, #0
 803242c:	0fc0      	lsrs	r0, r0, #31
 803242e:	ea40 0047 	orr.w	r0, r0, r7, lsl #1
 8032432:	1087      	asrs	r7, r0, #2
 8032434:	bf54      	ite	pl
 8032436:	f04f 0e01 	movpl.w	lr, #1
 803243a:	f04f 0e02 	movmi.w	lr, #2
 803243e:	f000 0003 	and.w	r0, r0, #3
 8032442:	4570      	cmp	r0, lr
 8032444:	fb05 f004 	mul.w	r0, r5, r4
 8032448:	ea85 0403 	eor.w	r4, r5, r3
 803244c:	ea4f 74d4 	mov.w	r4, r4, lsr #31
 8032450:	bfc8      	it	gt
 8032452:	3701      	addgt	r7, #1
 8032454:	2c00      	cmp	r4, #0
 8032456:	4c7a      	ldr	r4, [pc, #488]	@ (8032640 <_lite_kernel_nl_softmax_is8os8+0xa84>)
 8032458:	fb03 000c 	mla	r0, r3, ip, r0
 803245c:	bf14      	ite	ne
 803245e:	46a4      	movne	ip, r4
 8032460:	f04f 4c80 	moveq.w	ip, #1073741824	@ 0x40000000
 8032464:	fba5 4903 	umull	r4, r9, r5, r3
 8032468:	bf14      	ite	ne
 803246a:	f04f 3eff 	movne.w	lr, #4294967295
 803246e:	f04f 0e00 	moveq.w	lr, #0
 8032472:	4448      	add	r0, r9
 8032474:	eb14 040c 	adds.w	r4, r4, ip
 8032478:	eb40 000e 	adc.w	r0, r0, lr
 803247c:	2800      	cmp	r0, #0
 803247e:	da06      	bge.n	803248e <_lite_kernel_nl_softmax_is8os8+0x8d2>
 8032480:	f06f 4c00 	mvn.w	ip, #2147483648	@ 0x80000000
 8032484:	eb14 0c0c 	adds.w	ip, r4, ip
 8032488:	4664      	mov	r4, ip
 803248a:	f140 0000 	adc.w	r0, r0, #0
 803248e:	0fe4      	lsrs	r4, r4, #31
 8032490:	ea44 0440 	orr.w	r4, r4, r0, lsl #1
 8032494:	1938      	adds	r0, r7, r4
 8032496:	0fc4      	lsrs	r4, r0, #31
 8032498:	2c00      	cmp	r4, #0
 803249a:	4a6a      	ldr	r2, [pc, #424]	@ (8032644 <_lite_kernel_nl_softmax_is8os8+0xa88>)
 803249c:	4c68      	ldr	r4, [pc, #416]	@ (8032640 <_lite_kernel_nl_softmax_is8os8+0xa84>)
 803249e:	bf12      	itee	ne
 80324a0:	f04f 37ff 	movne.w	r7, #4294967295
 80324a4:	f04f 4480 	moveq.w	r4, #1073741824	@ 0x40000000
 80324a8:	2700      	moveq	r7, #0
 80324aa:	fbc0 4702 	smlal	r4, r7, r0, r2
 80324ae:	2f00      	cmp	r7, #0
 80324b0:	da05      	bge.n	80324be <_lite_kernel_nl_softmax_is8os8+0x902>
 80324b2:	f06f 4000 	mvn.w	r0, #2147483648	@ 0x80000000
 80324b6:	1820      	adds	r0, r4, r0
 80324b8:	4604      	mov	r4, r0
 80324ba:	f147 0700 	adc.w	r7, r7, #0
 80324be:	0fe4      	lsrs	r4, r4, #31
 80324c0:	ea44 0447 	orr.w	r4, r4, r7, lsl #1
 80324c4:	4423      	add	r3, r4
 80324c6:	1058      	asrs	r0, r3, #1
 80324c8:	d402      	bmi.n	80324d0 <_lite_kernel_nl_softmax_is8os8+0x914>
 80324ca:	07df      	lsls	r7, r3, #31
 80324cc:	bf48      	it	mi
 80324ce:	3001      	addmi	r0, #1
 80324d0:	4428      	add	r0, r5
 80324d2:	0fc3      	lsrs	r3, r0, #31
 80324d4:	2b00      	cmp	r3, #0
 80324d6:	4a5c      	ldr	r2, [pc, #368]	@ (8032648 <_lite_kernel_nl_softmax_is8os8+0xa8c>)
 80324d8:	4b59      	ldr	r3, [pc, #356]	@ (8032640 <_lite_kernel_nl_softmax_is8os8+0xa84>)
 80324da:	bf12      	itee	ne
 80324dc:	f04f 34ff 	movne.w	r4, #4294967295
 80324e0:	f04f 4380 	moveq.w	r3, #1073741824	@ 0x40000000
 80324e4:	2400      	moveq	r4, #0
 80324e6:	fbc0 3402 	smlal	r3, r4, r0, r2
 80324ea:	2c00      	cmp	r4, #0
 80324ec:	da05      	bge.n	80324fa <_lite_kernel_nl_softmax_is8os8+0x93e>
 80324ee:	f06f 4000 	mvn.w	r0, #2147483648	@ 0x80000000
 80324f2:	1818      	adds	r0, r3, r0
 80324f4:	4603      	mov	r3, r0
 80324f6:	f144 0400 	adc.w	r4, r4, #0
 80324fa:	4853      	ldr	r0, [pc, #332]	@ (8032648 <_lite_kernel_nl_softmax_is8os8+0xa8c>)
 80324fc:	4f53      	ldr	r7, [pc, #332]	@ (803264c <_lite_kernel_nl_softmax_is8os8+0xa90>)
 80324fe:	0fdb      	lsrs	r3, r3, #31
 8032500:	ea43 0344 	orr.w	r3, r3, r4, lsl #1
 8032504:	1818      	adds	r0, r3, r0
 8032506:	9b02      	ldr	r3, [sp, #8]
 8032508:	2400      	movs	r4, #0
 803250a:	fab3 f283 	clz	r2, r3
 803250e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8032512:	469e      	mov	lr, r3
 8032514:	46a4      	mov	ip, r4
 8032516:	fbc0 ec07 	smlal	lr, ip, r0, r7
 803251a:	f3c1 6500 	ubfx	r5, r1, #24, #1
 803251e:	4677      	mov	r7, lr
 8032520:	3d01      	subs	r5, #1
 8032522:	0fff      	lsrs	r7, r7, #31
 8032524:	4005      	ands	r5, r0
 8032526:	ea47 074c 	orr.w	r7, r7, ip, lsl #1
 803252a:	f341 6000 	sbfx	r0, r1, #24, #1
 803252e:	4038      	ands	r0, r7
 8032530:	4f47      	ldr	r7, [pc, #284]	@ (8032650 <_lite_kernel_nl_softmax_is8os8+0xa94>)
 8032532:	4068      	eors	r0, r5
 8032534:	469e      	mov	lr, r3
 8032536:	46a4      	mov	ip, r4
 8032538:	fbc0 ec07 	smlal	lr, ip, r0, r7
 803253c:	f3c1 6540 	ubfx	r5, r1, #25, #1
 8032540:	4677      	mov	r7, lr
 8032542:	3d01      	subs	r5, #1
 8032544:	0fff      	lsrs	r7, r7, #31
 8032546:	4005      	ands	r5, r0
 8032548:	ea47 074c 	orr.w	r7, r7, ip, lsl #1
 803254c:	f341 6040 	sbfx	r0, r1, #25, #1
 8032550:	4038      	ands	r0, r7
 8032552:	4f40      	ldr	r7, [pc, #256]	@ (8032654 <_lite_kernel_nl_softmax_is8os8+0xa98>)
 8032554:	4068      	eors	r0, r5
 8032556:	469e      	mov	lr, r3
 8032558:	46a4      	mov	ip, r4
 803255a:	fbc0 ec07 	smlal	lr, ip, r0, r7
 803255e:	f3c1 6580 	ubfx	r5, r1, #26, #1
 8032562:	4677      	mov	r7, lr
 8032564:	3d01      	subs	r5, #1
 8032566:	0fff      	lsrs	r7, r7, #31
 8032568:	4005      	ands	r5, r0
 803256a:	ea47 074c 	orr.w	r7, r7, ip, lsl #1
 803256e:	f341 6080 	sbfx	r0, r1, #26, #1
 8032572:	4038      	ands	r0, r7
 8032574:	4f38      	ldr	r7, [pc, #224]	@ (8032658 <_lite_kernel_nl_softmax_is8os8+0xa9c>)
 8032576:	4068      	eors	r0, r5
 8032578:	469e      	mov	lr, r3
 803257a:	46a4      	mov	ip, r4
 803257c:	fbc0 ec07 	smlal	lr, ip, r0, r7
 8032580:	f3c1 65c0 	ubfx	r5, r1, #27, #1
 8032584:	4677      	mov	r7, lr
 8032586:	3d01      	subs	r5, #1
 8032588:	0fff      	lsrs	r7, r7, #31
 803258a:	4005      	ands	r5, r0
 803258c:	ea47 074c 	orr.w	r7, r7, ip, lsl #1
 8032590:	f341 60c0 	sbfx	r0, r1, #27, #1
 8032594:	4038      	ands	r0, r7
 8032596:	4f31      	ldr	r7, [pc, #196]	@ (803265c <_lite_kernel_nl_softmax_is8os8+0xaa0>)
 8032598:	4068      	eors	r0, r5
 803259a:	469e      	mov	lr, r3
 803259c:	46a4      	mov	ip, r4
 803259e:	fbc0 ec07 	smlal	lr, ip, r0, r7
 80325a2:	f3c1 7500 	ubfx	r5, r1, #28, #1
 80325a6:	4677      	mov	r7, lr
 80325a8:	3d01      	subs	r5, #1
 80325aa:	0fff      	lsrs	r7, r7, #31
 80325ac:	4005      	ands	r5, r0
 80325ae:	ea47 074c 	orr.w	r7, r7, ip, lsl #1
 80325b2:	f341 7000 	sbfx	r0, r1, #28, #1
 80325b6:	4038      	ands	r0, r7
 80325b8:	4f29      	ldr	r7, [pc, #164]	@ (8032660 <_lite_kernel_nl_softmax_is8os8+0xaa4>)
 80325ba:	4068      	eors	r0, r5
 80325bc:	469e      	mov	lr, r3
 80325be:	46a4      	mov	ip, r4
 80325c0:	fbc0 ec07 	smlal	lr, ip, r0, r7
 80325c4:	f3c1 7540 	ubfx	r5, r1, #29, #1
 80325c8:	4677      	mov	r7, lr
 80325ca:	3d01      	subs	r5, #1
 80325cc:	0fff      	lsrs	r7, r7, #31
 80325ce:	4005      	ands	r5, r0
 80325d0:	ea47 074c 	orr.w	r7, r7, ip, lsl #1
 80325d4:	f341 7040 	sbfx	r0, r1, #29, #1
 80325d8:	4038      	ands	r0, r7
 80325da:	4068      	eors	r0, r5
 80325dc:	25f2      	movs	r5, #242	@ 0xf2
 80325de:	fbc0 3405 	smlal	r3, r4, r0, r5
 80325e2:	0fdb      	lsrs	r3, r3, #31
 80325e4:	ea43 0344 	orr.w	r3, r3, r4, lsl #1
 80325e8:	f3c1 7480 	ubfx	r4, r1, #30, #1
 80325ec:	3c01      	subs	r4, #1
 80325ee:	f341 7180 	sbfx	r1, r1, #30, #1
 80325f2:	0952      	lsrs	r2, r2, #5
 80325f4:	4019      	ands	r1, r3
 80325f6:	4004      	ands	r4, r0
 80325f8:	1e53      	subs	r3, r2, #1
 80325fa:	4061      	eors	r1, r4
 80325fc:	4252      	negs	r2, r2
 80325fe:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8032602:	400b      	ands	r3, r1
 8032604:	4053      	eors	r3, r2
 8032606:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8032608:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 803260c:	9b01      	ldr	r3, [sp, #4]
 803260e:	4598      	cmp	r8, r3
 8032610:	f47f aebd 	bne.w	803238e <_lite_kernel_nl_softmax_is8os8+0x7d2>
 8032614:	e9dd c903 	ldrd	ip, r9, [sp, #12]
 8032618:	e9dd 7a05 	ldrd	r7, sl, [sp, #20]
 803261c:	e42a      	b.n	8031e74 <_lite_kernel_nl_softmax_is8os8+0x2b8>
 803261e:	2900      	cmp	r1, #0
 8032620:	f43f ac28 	beq.w	8031e74 <_lite_kernel_nl_softmax_is8os8+0x2b8>
 8032624:	f109 34ff 	add.w	r4, r9, #4294967295
 8032628:	e6a9      	b.n	803237e <_lite_kernel_nl_softmax_is8os8+0x7c2>
 803262a:	eb03 0280 	add.w	r2, r3, r0, lsl #2
 803262e:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 8032632:	ea4f 0642 	mov.w	r6, r2, lsl #1
 8032636:	f6ff ad46 	blt.w	80320c6 <_lite_kernel_nl_softmax_is8os8+0x50a>
 803263a:	f06f 4600 	mvn.w	r6, #2147483648	@ 0x80000000
 803263e:	e547      	b.n	80320d0 <_lite_kernel_nl_softmax_is8os8+0x514>
 8032640:	c0000001 	.word	0xc0000001
 8032644:	2aaaaaab 	.word	0x2aaaaaab
 8032648:	70f5a894 	.word	0x70f5a894
 803264c:	63afbe7b 	.word	0x63afbe7b
 8032650:	4da2cbf2 	.word	0x4da2cbf2
 8032654:	2f16ac6c 	.word	0x2f16ac6c
 8032658:	1152aaa4 	.word	0x1152aaa4
 803265c:	02582ab7 	.word	0x02582ab7
 8032660:	000afe11 	.word	0x000afe11

08032664 <_lite_kernel_nl_softmax_iu8ou8>:
 8032664:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8032668:	b09d      	sub	sp, #116	@ 0x74
 803266a:	469b      	mov	fp, r3
 803266c:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 803266e:	2a00      	cmp	r2, #0
 8032670:	f000 8317 	beq.w	8032ca2 <_lite_kernel_nl_softmax_iu8ou8+0x63e>
 8032674:	4614      	mov	r4, r2
 8032676:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8032678:	fb02 f20b 	mul.w	r2, r2, fp
 803267c:	f1bb 0f00 	cmp.w	fp, #0
 8032680:	f000 830f 	beq.w	8032ca2 <_lite_kernel_nl_softmax_iu8ou8+0x63e>
 8032684:	9d26      	ldr	r5, [sp, #152]	@ 0x98
 8032686:	941b      	str	r4, [sp, #108]	@ 0x6c
 8032688:	3b04      	subs	r3, #4
 803268a:	9313      	str	r3, [sp, #76]	@ 0x4c
 803268c:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 8032690:	9304      	str	r3, [sp, #16]
 8032692:	46d9      	mov	r9, fp
 8032694:	2300      	movs	r3, #0
 8032696:	46aa      	mov	sl, r5
 8032698:	eb01 0409 	add.w	r4, r1, r9
 803269c:	e9cd 4216 	strd	r4, r2, [sp, #88]	@ 0x58
 80326a0:	e9cd 0119 	strd	r0, r1, [sp, #100]	@ 0x64
 80326a4:	9318      	str	r3, [sp, #96]	@ 0x60
 80326a6:	9112      	str	r1, [sp, #72]	@ 0x48
 80326a8:	4683      	mov	fp, r0
 80326aa:	4653      	mov	r3, sl
 80326ac:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80326ae:	2b01      	cmp	r3, #1
 80326b0:	7810      	ldrb	r0, [r2, #0]
 80326b2:	9011      	str	r0, [sp, #68]	@ 0x44
 80326b4:	f240 83a7 	bls.w	8032e06 <_lite_kernel_nl_softmax_iu8ou8+0x7a2>
 80326b8:	eb02 0109 	add.w	r1, r2, r9
 80326bc:	2201      	movs	r2, #1
 80326be:	780c      	ldrb	r4, [r1, #0]
 80326c0:	3201      	adds	r2, #1
 80326c2:	42a0      	cmp	r0, r4
 80326c4:	bfb8      	it	lt
 80326c6:	4620      	movlt	r0, r4
 80326c8:	4293      	cmp	r3, r2
 80326ca:	4449      	add	r1, r9
 80326cc:	d1f7      	bne.n	80326be <_lite_kernel_nl_softmax_iu8ou8+0x5a>
 80326ce:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
 80326d0:	9011      	str	r0, [sp, #68]	@ 0x44
 80326d2:	4402      	add	r2, r0
 80326d4:	9203      	str	r2, [sp, #12]
 80326d6:	2200      	movs	r2, #0
 80326d8:	e9dd ea12 	ldrd	lr, sl, [sp, #72]	@ 0x48
 80326dc:	9201      	str	r2, [sp, #4]
 80326de:	f8cd b050 	str.w	fp, [sp, #80]	@ 0x50
 80326e2:	f8cd 9008 	str.w	r9, [sp, #8]
 80326e6:	9315      	str	r3, [sp, #84]	@ 0x54
 80326e8:	e15f      	b.n	80329aa <_lite_kernel_nl_softmax_iu8ou8+0x346>
 80326ea:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80326ec:	9927      	ldr	r1, [sp, #156]	@ 0x9c
 80326ee:	1a9b      	subs	r3, r3, r2
 80326f0:	9a28      	ldr	r2, [sp, #160]	@ 0xa0
 80326f2:	4093      	lsls	r3, r2
 80326f4:	9a27      	ldr	r2, [sp, #156]	@ 0x9c
 80326f6:	405a      	eors	r2, r3
 80326f8:	0fd2      	lsrs	r2, r2, #31
 80326fa:	2a00      	cmp	r2, #0
 80326fc:	4ac2      	ldr	r2, [pc, #776]	@ (8032a08 <_lite_kernel_nl_softmax_iu8ou8+0x3a4>)
 80326fe:	bf0b      	itete	eq
 8032700:	f04f 4080 	moveq.w	r0, #1073741824	@ 0x40000000
 8032704:	4610      	movne	r0, r2
 8032706:	2200      	moveq	r2, #0
 8032708:	f04f 32ff 	movne.w	r2, #4294967295
 803270c:	fbc1 0203 	smlal	r0, r2, r1, r3
 8032710:	2a00      	cmp	r2, #0
 8032712:	da05      	bge.n	8032720 <_lite_kernel_nl_softmax_iu8ou8+0xbc>
 8032714:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8032718:	1841      	adds	r1, r0, r1
 803271a:	4608      	mov	r0, r1
 803271c:	f142 0200 	adc.w	r2, r2, #0
 8032720:	0fc0      	lsrs	r0, r0, #31
 8032722:	ea40 0042 	orr.w	r0, r0, r2, lsl #1
 8032726:	9a27      	ldr	r2, [sp, #156]	@ 0x9c
 8032728:	429a      	cmp	r2, r3
 803272a:	f000 814b 	beq.w	80329c4 <_lite_kernel_nl_softmax_iu8ou8+0x360>
 803272e:	f040 427f 	orr.w	r2, r0, #4278190080	@ 0xff000000
 8032732:	0154      	lsls	r4, r2, #5
 8032734:	1a12      	subs	r2, r2, r0
 8032736:	f104 5480 	add.w	r4, r4, #268435456	@ 0x10000000
 803273a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 803273e:	2600      	movs	r6, #0
 8032740:	f3c2 7840 	ubfx	r8, r2, #29, #1
 8032744:	f108 31ff 	add.w	r1, r8, #4294967295
 8032748:	fbc4 3604 	smlal	r3, r6, r4, r4
 803274c:	f3c2 7c80 	ubfx	ip, r2, #30, #1
 8032750:	910c      	str	r1, [sp, #48]	@ 0x30
 8032752:	2e00      	cmp	r6, #0
 8032754:	f10c 31ff 	add.w	r1, ip, #4294967295
 8032758:	910b      	str	r1, [sp, #44]	@ 0x2c
 803275a:	da05      	bge.n	8032768 <_lite_kernel_nl_softmax_iu8ou8+0x104>
 803275c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8032760:	1859      	adds	r1, r3, r1
 8032762:	460b      	mov	r3, r1
 8032764:	f146 0600 	adc.w	r6, r6, #0
 8032768:	0fdb      	lsrs	r3, r3, #31
 803276a:	ea43 0346 	orr.w	r3, r3, r6, lsl #1
 803276e:	fba3 1703 	umull	r1, r7, r3, r3
 8032772:	17f6      	asrs	r6, r6, #31
 8032774:	f111 4180 	adds.w	r1, r1, #1073741824	@ 0x40000000
 8032778:	fb03 f906 	mul.w	r9, r3, r6
 803277c:	eb47 0749 	adc.w	r7, r7, r9, lsl #1
 8032780:	2f00      	cmp	r7, #0
 8032782:	461d      	mov	r5, r3
 8032784:	da06      	bge.n	8032794 <_lite_kernel_nl_softmax_iu8ou8+0x130>
 8032786:	f06f 4900 	mvn.w	r9, #2147483648	@ 0x80000000
 803278a:	eb11 0909 	adds.w	r9, r1, r9
 803278e:	4649      	mov	r1, r9
 8032790:	f147 0700 	adc.w	r7, r7, #0
 8032794:	0fc9      	lsrs	r1, r1, #31
 8032796:	ea41 0147 	orr.w	r1, r1, r7, lsl #1
 803279a:	f1c8 0700 	rsb	r7, r8, #0
 803279e:	9707      	str	r7, [sp, #28]
 80327a0:	f1cc 0700 	rsb	r7, ip, #0
 80327a4:	fb04 f606 	mul.w	r6, r4, r6
 80327a8:	970d      	str	r7, [sp, #52]	@ 0x34
 80327aa:	17e7      	asrs	r7, r4, #31
 80327ac:	fb03 6607 	mla	r6, r3, r7, r6
 80327b0:	ea83 0804 	eor.w	r8, r3, r4
 80327b4:	fba4 c303 	umull	ip, r3, r4, r3
 80327b8:	4433      	add	r3, r6
 80327ba:	f3c2 6640 	ubfx	r6, r2, #25, #1
 80327be:	3e01      	subs	r6, #1
 80327c0:	9608      	str	r6, [sp, #32]
 80327c2:	f3c2 7600 	ubfx	r6, r2, #28, #1
 80327c6:	3e01      	subs	r6, #1
 80327c8:	960e      	str	r6, [sp, #56]	@ 0x38
 80327ca:	f3c2 6680 	ubfx	r6, r2, #26, #1
 80327ce:	3e01      	subs	r6, #1
 80327d0:	9606      	str	r6, [sp, #24]
 80327d2:	f342 6640 	sbfx	r6, r2, #25, #1
 80327d6:	f3c2 6bc0 	ubfx	fp, r2, #27, #1
 80327da:	960a      	str	r6, [sp, #40]	@ 0x28
 80327dc:	f342 6600 	sbfx	r6, r2, #24, #1
 80327e0:	9609      	str	r6, [sp, #36]	@ 0x24
 80327e2:	f10b 36ff 	add.w	r6, fp, #4294967295
 80327e6:	9605      	str	r6, [sp, #20]
 80327e8:	f1cb 0600 	rsb	r6, fp, #0
 80327ec:	ea5f 09a1 	movs.w	r9, r1, asr #2
 80327f0:	f3c2 6700 	ubfx	r7, r2, #24, #1
 80327f4:	960f      	str	r6, [sp, #60]	@ 0x3c
 80327f6:	f342 7600 	sbfx	r6, r2, #28, #1
 80327fa:	ea4f 78d8 	mov.w	r8, r8, lsr #31
 80327fe:	f107 37ff 	add.w	r7, r7, #4294967295
 8032802:	f001 0103 	and.w	r1, r1, #3
 8032806:	9610      	str	r6, [sp, #64]	@ 0x40
 8032808:	f342 6280 	sbfx	r2, r2, #26, #1
 803280c:	bf54      	ite	pl
 803280e:	f04f 0b01 	movpl.w	fp, #1
 8032812:	f04f 0b02 	movmi.w	fp, #2
 8032816:	4559      	cmp	r1, fp
 8032818:	bfc8      	it	gt
 803281a:	f109 0901 	addgt.w	r9, r9, #1
 803281e:	497a      	ldr	r1, [pc, #488]	@ (8032a08 <_lite_kernel_nl_softmax_iu8ou8+0x3a4>)
 8032820:	f1b8 0f00 	cmp.w	r8, #0
 8032824:	bf0a      	itet	eq
 8032826:	f04f 4180 	moveq.w	r1, #1073741824	@ 0x40000000
 803282a:	f04f 38ff 	movne.w	r8, #4294967295
 803282e:	f04f 0800 	moveq.w	r8, #0
 8032832:	eb1c 0101 	adds.w	r1, ip, r1
 8032836:	eb43 0808 	adc.w	r8, r3, r8
 803283a:	f1b8 0f00 	cmp.w	r8, #0
 803283e:	da05      	bge.n	803284c <_lite_kernel_nl_softmax_iu8ou8+0x1e8>
 8032840:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8032844:	18cb      	adds	r3, r1, r3
 8032846:	4619      	mov	r1, r3
 8032848:	f148 0800 	adc.w	r8, r8, #0
 803284c:	0fc9      	lsrs	r1, r1, #31
 803284e:	ea41 0148 	orr.w	r1, r1, r8, lsl #1
 8032852:	4449      	add	r1, r9
 8032854:	0fcb      	lsrs	r3, r1, #31
 8032856:	2b00      	cmp	r3, #0
 8032858:	4e6c      	ldr	r6, [pc, #432]	@ (8032a0c <_lite_kernel_nl_softmax_iu8ou8+0x3a8>)
 803285a:	4b6b      	ldr	r3, [pc, #428]	@ (8032a08 <_lite_kernel_nl_softmax_iu8ou8+0x3a4>)
 803285c:	bf12      	itee	ne
 803285e:	f04f 3cff 	movne.w	ip, #4294967295
 8032862:	f04f 4380 	moveq.w	r3, #1073741824	@ 0x40000000
 8032866:	f04f 0c00 	moveq.w	ip, #0
 803286a:	fbc1 3c06 	smlal	r3, ip, r1, r6
 803286e:	f1bc 0f00 	cmp.w	ip, #0
 8032872:	da05      	bge.n	8032880 <_lite_kernel_nl_softmax_iu8ou8+0x21c>
 8032874:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8032878:	1859      	adds	r1, r3, r1
 803287a:	460b      	mov	r3, r1
 803287c:	f14c 0c00 	adc.w	ip, ip, #0
 8032880:	0fdb      	lsrs	r3, r3, #31
 8032882:	ea43 034c 	orr.w	r3, r3, ip, lsl #1
 8032886:	441d      	add	r5, r3
 8032888:	106b      	asrs	r3, r5, #1
 803288a:	d402      	bmi.n	8032892 <_lite_kernel_nl_softmax_iu8ou8+0x22e>
 803288c:	07ed      	lsls	r5, r5, #31
 803288e:	bf48      	it	mi
 8032890:	3301      	addmi	r3, #1
 8032892:	4423      	add	r3, r4
 8032894:	0fd9      	lsrs	r1, r3, #31
 8032896:	2900      	cmp	r1, #0
 8032898:	bf18      	it	ne
 803289a:	f04f 34ff 	movne.w	r4, #4294967295
 803289e:	495a      	ldr	r1, [pc, #360]	@ (8032a08 <_lite_kernel_nl_softmax_iu8ou8+0x3a4>)
 80328a0:	bf04      	itt	eq
 80328a2:	2400      	moveq	r4, #0
 80328a4:	f04f 4180 	moveq.w	r1, #1073741824	@ 0x40000000
 80328a8:	2800      	cmp	r0, #0
 80328aa:	f000 8086 	beq.w	80329ba <_lite_kernel_nl_softmax_iu8ou8+0x356>
 80328ae:	4858      	ldr	r0, [pc, #352]	@ (8032a10 <_lite_kernel_nl_softmax_iu8ou8+0x3ac>)
 80328b0:	fbc3 1400 	smlal	r1, r4, r3, r0
 80328b4:	2c00      	cmp	r4, #0
 80328b6:	da05      	bge.n	80328c4 <_lite_kernel_nl_softmax_iu8ou8+0x260>
 80328b8:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 80328bc:	18cb      	adds	r3, r1, r3
 80328be:	4619      	mov	r1, r3
 80328c0:	f144 0400 	adc.w	r4, r4, #0
 80328c4:	0fc9      	lsrs	r1, r1, #31
 80328c6:	ea41 0144 	orr.w	r1, r1, r4, lsl #1
 80328ca:	f101 41e2 	add.w	r1, r1, #1895825408	@ 0x71000000
 80328ce:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80328d2:	2000      	movs	r0, #0
 80328d4:	4e4f      	ldr	r6, [pc, #316]	@ (8032a14 <_lite_kernel_nl_softmax_iu8ou8+0x3b0>)
 80328d6:	f5a1 2125 	sub.w	r1, r1, #675840	@ 0xa5000
 80328da:	f2a1 716c 	subw	r1, r1, #1900	@ 0x76c
 80328de:	461c      	mov	r4, r3
 80328e0:	4605      	mov	r5, r0
 80328e2:	fbc1 4506 	smlal	r4, r5, r1, r6
 80328e6:	0fe4      	lsrs	r4, r4, #31
 80328e8:	9e09      	ldr	r6, [sp, #36]	@ 0x24
 80328ea:	ea44 0445 	orr.w	r4, r4, r5, lsl #1
 80328ee:	400f      	ands	r7, r1
 80328f0:	4026      	ands	r6, r4
 80328f2:	407e      	eors	r6, r7
 80328f4:	4f48      	ldr	r7, [pc, #288]	@ (8032a18 <_lite_kernel_nl_softmax_iu8ou8+0x3b4>)
 80328f6:	9c08      	ldr	r4, [sp, #32]
 80328f8:	4619      	mov	r1, r3
 80328fa:	4605      	mov	r5, r0
 80328fc:	fbc6 1507 	smlal	r1, r5, r6, r7
 8032900:	0fc9      	lsrs	r1, r1, #31
 8032902:	ea41 0145 	orr.w	r1, r1, r5, lsl #1
 8032906:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 8032908:	4f44      	ldr	r7, [pc, #272]	@ (8032a1c <_lite_kernel_nl_softmax_iu8ou8+0x3b8>)
 803290a:	400d      	ands	r5, r1
 803290c:	4034      	ands	r4, r6
 803290e:	4629      	mov	r1, r5
 8032910:	4061      	eors	r1, r4
 8032912:	4606      	mov	r6, r0
 8032914:	461c      	mov	r4, r3
 8032916:	fbc1 4607 	smlal	r4, r6, r1, r7
 803291a:	9d06      	ldr	r5, [sp, #24]
 803291c:	0fe4      	lsrs	r4, r4, #31
 803291e:	ea44 0446 	orr.w	r4, r4, r6, lsl #1
 8032922:	400d      	ands	r5, r1
 8032924:	4e3e      	ldr	r6, [pc, #248]	@ (8032a20 <_lite_kernel_nl_softmax_iu8ou8+0x3bc>)
 8032926:	4022      	ands	r2, r4
 8032928:	406a      	eors	r2, r5
 803292a:	4619      	mov	r1, r3
 803292c:	4605      	mov	r5, r0
 803292e:	9c05      	ldr	r4, [sp, #20]
 8032930:	fbc2 1506 	smlal	r1, r5, r2, r6
 8032934:	4014      	ands	r4, r2
 8032936:	0fc9      	lsrs	r1, r1, #31
 8032938:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 803293a:	4e3a      	ldr	r6, [pc, #232]	@ (8032a24 <_lite_kernel_nl_softmax_iu8ou8+0x3c0>)
 803293c:	ea41 0145 	orr.w	r1, r1, r5, lsl #1
 8032940:	400a      	ands	r2, r1
 8032942:	4062      	eors	r2, r4
 8032944:	4619      	mov	r1, r3
 8032946:	4605      	mov	r5, r0
 8032948:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 803294a:	fbc2 1506 	smlal	r1, r5, r2, r6
 803294e:	4014      	ands	r4, r2
 8032950:	0fc9      	lsrs	r1, r1, #31
 8032952:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8032954:	4e34      	ldr	r6, [pc, #208]	@ (8032a28 <_lite_kernel_nl_softmax_iu8ou8+0x3c4>)
 8032956:	ea41 0145 	orr.w	r1, r1, r5, lsl #1
 803295a:	400a      	ands	r2, r1
 803295c:	4062      	eors	r2, r4
 803295e:	4619      	mov	r1, r3
 8032960:	4605      	mov	r5, r0
 8032962:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8032964:	fbc2 1506 	smlal	r1, r5, r2, r6
 8032968:	4014      	ands	r4, r2
 803296a:	0fc9      	lsrs	r1, r1, #31
 803296c:	9a07      	ldr	r2, [sp, #28]
 803296e:	ea41 0145 	orr.w	r1, r1, r5, lsl #1
 8032972:	400a      	ands	r2, r1
 8032974:	4062      	eors	r2, r4
 8032976:	21f2      	movs	r1, #242	@ 0xf2
 8032978:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 803297a:	fbc2 3001 	smlal	r3, r0, r2, r1
 803297e:	4014      	ands	r4, r2
 8032980:	0fdb      	lsrs	r3, r3, #31
 8032982:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8032984:	ea43 0340 	orr.w	r3, r3, r0, lsl #1
 8032988:	401a      	ands	r2, r3
 803298a:	4613      	mov	r3, r2
 803298c:	4063      	eors	r3, r4
 803298e:	131a      	asrs	r2, r3, #12
 8032990:	0519      	lsls	r1, r3, #20
 8032992:	bf48      	it	mi
 8032994:	3201      	addmi	r2, #1
 8032996:	9901      	ldr	r1, [sp, #4]
 8032998:	4411      	add	r1, r2
 803299a:	9101      	str	r1, [sp, #4]
 803299c:	f84a 3f04 	str.w	r3, [sl, #4]!
 80329a0:	9b02      	ldr	r3, [sp, #8]
 80329a2:	449e      	add	lr, r3
 80329a4:	9b04      	ldr	r3, [sp, #16]
 80329a6:	459a      	cmp	sl, r3
 80329a8:	d048      	beq.n	8032a3c <_lite_kernel_nl_softmax_iu8ou8+0x3d8>
 80329aa:	f89e 3000 	ldrb.w	r3, [lr]
 80329ae:	9a03      	ldr	r2, [sp, #12]
 80329b0:	429a      	cmp	r2, r3
 80329b2:	f77f ae9a 	ble.w	80326ea <_lite_kernel_nl_softmax_iu8ou8+0x86>
 80329b6:	2300      	movs	r3, #0
 80329b8:	e7f0      	b.n	803299c <_lite_kernel_nl_softmax_iu8ou8+0x338>
 80329ba:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80329be:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 80329c2:	e7e8      	b.n	8032996 <_lite_kernel_nl_softmax_iu8ou8+0x332>
 80329c4:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 80329c8:	f47f aeb1 	bne.w	803272e <_lite_kernel_nl_softmax_iu8ou8+0xca>
 80329cc:	f04f 36ff 	mov.w	r6, #4294967295
 80329d0:	2100      	movs	r1, #0
 80329d2:	e9cd 1109 	strd	r1, r1, [sp, #36]	@ 0x24
 80329d6:	e9cd 110f 	strd	r1, r1, [sp, #60]	@ 0x3c
 80329da:	4c14      	ldr	r4, [pc, #80]	@ (8032a2c <_lite_kernel_nl_softmax_iu8ou8+0x3c8>)
 80329dc:	4d14      	ldr	r5, [pc, #80]	@ (8032a30 <_lite_kernel_nl_softmax_iu8ou8+0x3cc>)
 80329de:	f8df c058 	ldr.w	ip, [pc, #88]	@ 8032a38 <_lite_kernel_nl_softmax_iu8ou8+0x3d4>
 80329e2:	4b14      	ldr	r3, [pc, #80]	@ (8032a34 <_lite_kernel_nl_softmax_iu8ou8+0x3d0>)
 80329e4:	960c      	str	r6, [sp, #48]	@ 0x30
 80329e6:	f06f 4000 	mvn.w	r0, #2147483648	@ 0x80000000
 80329ea:	960b      	str	r6, [sp, #44]	@ 0x2c
 80329ec:	f44f 3900 	mov.w	r9, #131072	@ 0x20000
 80329f0:	4688      	mov	r8, r1
 80329f2:	4637      	mov	r7, r6
 80329f4:	9608      	str	r6, [sp, #32]
 80329f6:	9605      	str	r6, [sp, #20]
 80329f8:	460a      	mov	r2, r1
 80329fa:	9606      	str	r6, [sp, #24]
 80329fc:	960e      	str	r6, [sp, #56]	@ 0x38
 80329fe:	9107      	str	r1, [sp, #28]
 8032a00:	910d      	str	r1, [sp, #52]	@ 0x34
 8032a02:	f04f 0b01 	mov.w	fp, #1
 8032a06:	e706      	b.n	8032816 <_lite_kernel_nl_softmax_iu8ou8+0x1b2>
 8032a08:	c0000001 	.word	0xc0000001
 8032a0c:	2aaaaaab 	.word	0x2aaaaaab
 8032a10:	70f5a894 	.word	0x70f5a894
 8032a14:	63afbe7b 	.word	0x63afbe7b
 8032a18:	4da2cbf2 	.word	0x4da2cbf2
 8032a1c:	2f16ac6c 	.word	0x2f16ac6c
 8032a20:	1152aaa4 	.word	0x1152aaa4
 8032a24:	02582ab7 	.word	0x02582ab7
 8032a28:	000afe11 	.word	0x000afe11
 8032a2c:	0fffffe0 	.word	0x0fffffe0
 8032a30:	01fffff8 	.word	0x01fffff8
 8032a34:	001fffff 	.word	0x001fffff
 8032a38:	40000100 	.word	0x40000100
 8032a3c:	9a01      	ldr	r2, [sp, #4]
 8032a3e:	f8dd b050 	ldr.w	fp, [sp, #80]	@ 0x50
 8032a42:	f8dd 9008 	ldr.w	r9, [sp, #8]
 8032a46:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8032a48:	2a00      	cmp	r2, #0
 8032a4a:	f000 8183 	beq.w	8032d54 <_lite_kernel_nl_softmax_iu8ou8+0x6f0>
 8032a4e:	fab2 f882 	clz	r8, r2
 8032a52:	fa02 f108 	lsl.w	r1, r2, r8
 8032a56:	f101 4200 	add.w	r2, r1, #2147483648	@ 0x80000000
 8032a5a:	17d0      	asrs	r0, r2, #31
 8032a5c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8032a60:	bf08      	it	eq
 8032a62:	2900      	cmpeq	r1, #0
 8032a64:	f1c8 0623 	rsb	r6, r8, #35	@ 0x23
 8032a68:	f000 8177 	beq.w	8032d5a <_lite_kernel_nl_softmax_iu8ou8+0x6f6>
 8032a6c:	f112 4200 	adds.w	r2, r2, #2147483648	@ 0x80000000
 8032a70:	f140 0000 	adc.w	r0, r0, #0
 8032a74:	0852      	lsrs	r2, r2, #1
 8032a76:	ea42 72c0 	orr.w	r2, r2, r0, lsl #31
 8032a7a:	49b4      	ldr	r1, [pc, #720]	@ (8032d4c <_lite_kernel_nl_softmax_iu8ou8+0x6e8>)
 8032a7c:	4fb4      	ldr	r7, [pc, #720]	@ (8032d50 <_lite_kernel_nl_softmax_iu8ou8+0x6ec>)
 8032a7e:	1040      	asrs	r0, r0, #1
 8032a80:	4254      	negs	r4, r2
 8032a82:	fb01 4400 	mla	r4, r1, r0, r4
 8032a86:	fba2 1501 	umull	r1, r5, r2, r1
 8032a8a:	19c9      	adds	r1, r1, r7
 8032a8c:	442c      	add	r4, r5
 8032a8e:	f164 0400 	sbc.w	r4, r4, #0
 8032a92:	2c00      	cmp	r4, #0
 8032a94:	4694      	mov	ip, r2
 8032a96:	da05      	bge.n	8032aa4 <_lite_kernel_nl_softmax_iu8ou8+0x440>
 8032a98:	f06f 4500 	mvn.w	r5, #2147483648	@ 0x80000000
 8032a9c:	194d      	adds	r5, r1, r5
 8032a9e:	4629      	mov	r1, r5
 8032aa0:	f144 0400 	adc.w	r4, r4, #0
 8032aa4:	0fc9      	lsrs	r1, r1, #31
 8032aa6:	ea41 0144 	orr.w	r1, r1, r4, lsl #1
 8032aaa:	f101 315a 	add.w	r1, r1, #1515870810	@ 0x5a5a5a5a
 8032aae:	17cc      	asrs	r4, r1, #31
 8032ab0:	fb01 f700 	mul.w	r7, r1, r0
 8032ab4:	fb02 7704 	mla	r7, r2, r4, r7
 8032ab8:	fba1 4502 	umull	r4, r5, r1, r2
 8032abc:	f114 4480 	adds.w	r4, r4, #1073741824	@ 0x40000000
 8032ac0:	eb47 0505 	adc.w	r5, r7, r5
 8032ac4:	0fe4      	lsrs	r4, r4, #31
 8032ac6:	ea44 0445 	orr.w	r4, r4, r5, lsl #1
 8032aca:	f1c4 5400 	rsb	r4, r4, #536870912	@ 0x20000000
 8032ace:	ea94 0f01 	teq	r4, r1
 8032ad2:	fb81 7504 	smull	r7, r5, r1, r4
 8032ad6:	f140 812a 	bpl.w	8032d2e <_lite_kernel_nl_softmax_iu8ou8+0x6ca>
 8032ada:	4c9d      	ldr	r4, [pc, #628]	@ (8032d50 <_lite_kernel_nl_softmax_iu8ou8+0x6ec>)
 8032adc:	193c      	adds	r4, r7, r4
 8032ade:	f165 0500 	sbc.w	r5, r5, #0
 8032ae2:	2d00      	cmp	r5, #0
 8032ae4:	f2c0 812a 	blt.w	8032d3c <_lite_kernel_nl_softmax_iu8ou8+0x6d8>
 8032ae8:	0fe4      	lsrs	r4, r4, #31
 8032aea:	ea44 0445 	orr.w	r4, r4, r5, lsl #1
 8032aee:	f1b4 4f60 	cmp.w	r4, #3758096384	@ 0xe0000000
 8032af2:	ea4f 0584 	mov.w	r5, r4, lsl #2
 8032af6:	f300 8178 	bgt.w	8032dea <_lite_kernel_nl_softmax_iu8ou8+0x786>
 8032afa:	f101 4100 	add.w	r1, r1, #2147483648	@ 0x80000000
 8032afe:	17cc      	asrs	r4, r1, #31
 8032b00:	4f93      	ldr	r7, [pc, #588]	@ (8032d50 <_lite_kernel_nl_softmax_iu8ou8+0x6ec>)
 8032b02:	fb01 f500 	mul.w	r5, r1, r0
 8032b06:	fb02 5504 	mla	r5, r2, r4, r5
 8032b0a:	fba1 4e02 	umull	r4, lr, r1, r2
 8032b0e:	19e4      	adds	r4, r4, r7
 8032b10:	4475      	add	r5, lr
 8032b12:	f165 0500 	sbc.w	r5, r5, #0
 8032b16:	2d00      	cmp	r5, #0
 8032b18:	da05      	bge.n	8032b26 <_lite_kernel_nl_softmax_iu8ou8+0x4c2>
 8032b1a:	f06f 4700 	mvn.w	r7, #2147483648	@ 0x80000000
 8032b1e:	19e7      	adds	r7, r4, r7
 8032b20:	463c      	mov	r4, r7
 8032b22:	f145 0500 	adc.w	r5, r5, #0
 8032b26:	0fe4      	lsrs	r4, r4, #31
 8032b28:	ea44 0445 	orr.w	r4, r4, r5, lsl #1
 8032b2c:	f1c4 5500 	rsb	r5, r4, #536870912	@ 0x20000000
 8032b30:	4c87      	ldr	r4, [pc, #540]	@ (8032d50 <_lite_kernel_nl_softmax_iu8ou8+0x6ec>)
 8032b32:	f04f 37ff 	mov.w	r7, #4294967295
 8032b36:	fbc5 4701 	smlal	r4, r7, r5, r1
 8032b3a:	2f00      	cmp	r7, #0
 8032b3c:	da05      	bge.n	8032b4a <_lite_kernel_nl_softmax_iu8ou8+0x4e6>
 8032b3e:	f06f 4500 	mvn.w	r5, #2147483648	@ 0x80000000
 8032b42:	1965      	adds	r5, r4, r5
 8032b44:	462c      	mov	r4, r5
 8032b46:	f147 0700 	adc.w	r7, r7, #0
 8032b4a:	0fe4      	lsrs	r4, r4, #31
 8032b4c:	ea44 0547 	orr.w	r5, r4, r7, lsl #1
 8032b50:	f1b5 4f60 	cmp.w	r5, #3758096384	@ 0xe0000000
 8032b54:	f300 815d 	bgt.w	8032e12 <_lite_kernel_nl_softmax_iu8ou8+0x7ae>
 8032b58:	f101 4100 	add.w	r1, r1, #2147483648	@ 0x80000000
 8032b5c:	ea91 0f0c 	teq	r1, ip
 8032b60:	f140 80bd 	bpl.w	8032cde <_lite_kernel_nl_softmax_iu8ou8+0x67a>
 8032b64:	4d7a      	ldr	r5, [pc, #488]	@ (8032d50 <_lite_kernel_nl_softmax_iu8ou8+0x6ec>)
 8032b66:	fb01 f000 	mul.w	r0, r1, r0
 8032b6a:	17cc      	asrs	r4, r1, #31
 8032b6c:	fb02 0004 	mla	r0, r2, r4, r0
 8032b70:	fba1 2702 	umull	r2, r7, r1, r2
 8032b74:	1952      	adds	r2, r2, r5
 8032b76:	4438      	add	r0, r7
 8032b78:	f160 0000 	sbc.w	r0, r0, #0
 8032b7c:	2800      	cmp	r0, #0
 8032b7e:	da05      	bge.n	8032b8c <_lite_kernel_nl_softmax_iu8ou8+0x528>
 8032b80:	f06f 4500 	mvn.w	r5, #2147483648	@ 0x80000000
 8032b84:	1955      	adds	r5, r2, r5
 8032b86:	462a      	mov	r2, r5
 8032b88:	f140 0000 	adc.w	r0, r0, #0
 8032b8c:	0fd2      	lsrs	r2, r2, #31
 8032b8e:	ea42 0240 	orr.w	r2, r2, r0, lsl #1
 8032b92:	486f      	ldr	r0, [pc, #444]	@ (8032d50 <_lite_kernel_nl_softmax_iu8ou8+0x6ec>)
 8032b94:	f1c2 5200 	rsb	r2, r2, #536870912	@ 0x20000000
 8032b98:	f04f 35ff 	mov.w	r5, #4294967295
 8032b9c:	fb02 f404 	mul.w	r4, r2, r4
 8032ba0:	17d7      	asrs	r7, r2, #31
 8032ba2:	fb01 4407 	mla	r4, r1, r7, r4
 8032ba6:	fba2 2701 	umull	r2, r7, r2, r1
 8032baa:	1812      	adds	r2, r2, r0
 8032bac:	443c      	add	r4, r7
 8032bae:	eb44 0405 	adc.w	r4, r4, r5
 8032bb2:	2c00      	cmp	r4, #0
 8032bb4:	da05      	bge.n	8032bc2 <_lite_kernel_nl_softmax_iu8ou8+0x55e>
 8032bb6:	f06f 4000 	mvn.w	r0, #2147483648	@ 0x80000000
 8032bba:	1810      	adds	r0, r2, r0
 8032bbc:	4602      	mov	r2, r0
 8032bbe:	f144 0400 	adc.w	r4, r4, #0
 8032bc2:	0fd2      	lsrs	r2, r2, #31
 8032bc4:	ea42 0244 	orr.w	r2, r2, r4, lsl #1
 8032bc8:	f1b2 5f00 	cmp.w	r2, #536870912	@ 0x20000000
 8032bcc:	da7f      	bge.n	8032cce <_lite_kernel_nl_softmax_iu8ou8+0x66a>
 8032bce:	f1b2 4f60 	cmp.w	r2, #3758096384	@ 0xe0000000
 8032bd2:	f300 8120 	bgt.w	8032e16 <_lite_kernel_nl_softmax_iu8ou8+0x7b2>
 8032bd6:	f101 4200 	add.w	r2, r1, #2147483648	@ 0x80000000
 8032bda:	0048      	lsls	r0, r1, #1
 8032bdc:	f1b2 4f40 	cmp.w	r2, #3221225472	@ 0xc0000000
 8032be0:	bfd8      	it	le
 8032be2:	f04f 4000 	movle.w	r0, #2147483648	@ 0x80000000
 8032be6:	2e1f      	cmp	r6, #31
 8032be8:	dd03      	ble.n	8032bf2 <_lite_kernel_nl_softmax_iu8ou8+0x58e>
 8032bea:	f1c8 0204 	rsb	r2, r8, #4
 8032bee:	4110      	asrs	r0, r2
 8032bf0:	261f      	movs	r6, #31
 8032bf2:	2b00      	cmp	r3, #0
 8032bf4:	d040      	beq.n	8032c78 <_lite_kernel_nl_softmax_iu8ou8+0x614>
 8032bf6:	2701      	movs	r7, #1
 8032bf8:	40b7      	lsls	r7, r6
 8032bfa:	3f01      	subs	r7, #1
 8032bfc:	465c      	mov	r4, fp
 8032bfe:	f8cd b004 	str.w	fp, [sp, #4]
 8032c02:	f8df c14c 	ldr.w	ip, [pc, #332]	@ 8032d50 <_lite_kernel_nl_softmax_iu8ou8+0x6ec>
 8032c06:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 8032c08:	f8dd b010 	ldr.w	fp, [sp, #16]
 8032c0c:	ea4f 0867 	mov.w	r8, r7, asr #1
 8032c10:	f06f 4e00 	mvn.w	lr, #2147483648	@ 0x80000000
 8032c14:	4682      	mov	sl, r0
 8032c16:	e00b      	b.n	8032c30 <_lite_kernel_nl_softmax_iu8ou8+0x5cc>
 8032c18:	403a      	ands	r2, r7
 8032c1a:	4640      	mov	r0, r8
 8032c1c:	4290      	cmp	r0, r2
 8032c1e:	da4f      	bge.n	8032cc0 <_lite_kernel_nl_softmax_iu8ou8+0x65c>
 8032c20:	3101      	adds	r1, #1
 8032c22:	29fe      	cmp	r1, #254	@ 0xfe
 8032c24:	dc51      	bgt.n	8032cca <_lite_kernel_nl_softmax_iu8ou8+0x666>
 8032c26:	b2c9      	uxtb	r1, r1
 8032c28:	455d      	cmp	r5, fp
 8032c2a:	7021      	strb	r1, [r4, #0]
 8032c2c:	444c      	add	r4, r9
 8032c2e:	d021      	beq.n	8032c74 <_lite_kernel_nl_softmax_iu8ou8+0x610>
 8032c30:	f855 0f04 	ldr.w	r0, [r5, #4]!
 8032c34:	ea80 020a 	eor.w	r2, r0, sl
 8032c38:	0fd2      	lsrs	r2, r2, #31
 8032c3a:	2a00      	cmp	r2, #0
 8032c3c:	bf15      	itete	ne
 8032c3e:	4662      	movne	r2, ip
 8032c40:	f04f 4280 	moveq.w	r2, #1073741824	@ 0x40000000
 8032c44:	f04f 31ff 	movne.w	r1, #4294967295
 8032c48:	2100      	moveq	r1, #0
 8032c4a:	fbc0 210a 	smlal	r2, r1, r0, sl
 8032c4e:	2900      	cmp	r1, #0
 8032c50:	da03      	bge.n	8032c5a <_lite_kernel_nl_softmax_iu8ou8+0x5f6>
 8032c52:	eb12 020e 	adds.w	r2, r2, lr
 8032c56:	f141 0100 	adc.w	r1, r1, #0
 8032c5a:	0fd2      	lsrs	r2, r2, #31
 8032c5c:	4550      	cmp	r0, sl
 8032c5e:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 8032c62:	d021      	beq.n	8032ca8 <_lite_kernel_nl_softmax_iu8ou8+0x644>
 8032c64:	fa52 f106 	asrs.w	r1, r2, r6
 8032c68:	d5d6      	bpl.n	8032c18 <_lite_kernel_nl_softmax_iu8ou8+0x5b4>
 8032c6a:	2100      	movs	r1, #0
 8032c6c:	455d      	cmp	r5, fp
 8032c6e:	7021      	strb	r1, [r4, #0]
 8032c70:	444c      	add	r4, r9
 8032c72:	d1dd      	bne.n	8032c30 <_lite_kernel_nl_softmax_iu8ou8+0x5cc>
 8032c74:	f8dd b004 	ldr.w	fp, [sp, #4]
 8032c78:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8032c7a:	9916      	ldr	r1, [sp, #88]	@ 0x58
 8032c7c:	3201      	adds	r2, #1
 8032c7e:	428a      	cmp	r2, r1
 8032c80:	9212      	str	r2, [sp, #72]	@ 0x48
 8032c82:	f10b 0b01 	add.w	fp, fp, #1
 8032c86:	f47f ad11 	bne.w	80326ac <_lite_kernel_nl_softmax_iu8ou8+0x48>
 8032c8a:	469a      	mov	sl, r3
 8032c8c:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8032c8e:	9c1b      	ldr	r4, [sp, #108]	@ 0x6c
 8032c90:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8032c92:	e9dd 0119 	ldrd	r0, r1, [sp, #100]	@ 0x64
 8032c96:	3301      	adds	r3, #1
 8032c98:	429c      	cmp	r4, r3
 8032c9a:	4411      	add	r1, r2
 8032c9c:	4410      	add	r0, r2
 8032c9e:	f47f acfb 	bne.w	8032698 <_lite_kernel_nl_softmax_iu8ou8+0x34>
 8032ca2:	b01d      	add	sp, #116	@ 0x74
 8032ca4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8032ca8:	f1ba 4f00 	cmp.w	sl, #2147483648	@ 0x80000000
 8032cac:	d1da      	bne.n	8032c64 <_lite_kernel_nl_softmax_iu8ou8+0x600>
 8032cae:	f027 4200 	bic.w	r2, r7, #2147483648	@ 0x80000000
 8032cb2:	1078      	asrs	r0, r7, #1
 8032cb4:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8032cb8:	4290      	cmp	r0, r2
 8032cba:	fa41 f106 	asr.w	r1, r1, r6
 8032cbe:	dbaf      	blt.n	8032c20 <_lite_kernel_nl_softmax_iu8ou8+0x5bc>
 8032cc0:	29fe      	cmp	r1, #254	@ 0xfe
 8032cc2:	dc02      	bgt.n	8032cca <_lite_kernel_nl_softmax_iu8ou8+0x666>
 8032cc4:	2900      	cmp	r1, #0
 8032cc6:	d1ae      	bne.n	8032c26 <_lite_kernel_nl_softmax_iu8ou8+0x5c2>
 8032cc8:	e7ae      	b.n	8032c28 <_lite_kernel_nl_softmax_iu8ou8+0x5c4>
 8032cca:	21ff      	movs	r1, #255	@ 0xff
 8032ccc:	e7ac      	b.n	8032c28 <_lite_kernel_nl_softmax_iu8ou8+0x5c4>
 8032cce:	f06f 4000 	mvn.w	r0, #2147483648	@ 0x80000000
 8032cd2:	4401      	add	r1, r0
 8032cd4:	f1b1 4f80 	cmp.w	r1, #1073741824	@ 0x40000000
 8032cd8:	da85      	bge.n	8032be6 <_lite_kernel_nl_softmax_iu8ou8+0x582>
 8032cda:	0048      	lsls	r0, r1, #1
 8032cdc:	e783      	b.n	8032be6 <_lite_kernel_nl_softmax_iu8ou8+0x582>
 8032cde:	f04f 4580 	mov.w	r5, #1073741824	@ 0x40000000
 8032ce2:	2700      	movs	r7, #0
 8032ce4:	fb01 f000 	mul.w	r0, r1, r0
 8032ce8:	17cc      	asrs	r4, r1, #31
 8032cea:	fb02 0004 	mla	r0, r2, r4, r0
 8032cee:	fba1 2c02 	umull	r2, ip, r1, r2
 8032cf2:	1952      	adds	r2, r2, r5
 8032cf4:	4460      	add	r0, ip
 8032cf6:	eb40 0007 	adc.w	r0, r0, r7
 8032cfa:	2800      	cmp	r0, #0
 8032cfc:	da05      	bge.n	8032d0a <_lite_kernel_nl_softmax_iu8ou8+0x6a6>
 8032cfe:	f06f 4500 	mvn.w	r5, #2147483648	@ 0x80000000
 8032d02:	1955      	adds	r5, r2, r5
 8032d04:	462a      	mov	r2, r5
 8032d06:	f140 0000 	adc.w	r0, r0, #0
 8032d0a:	0fd2      	lsrs	r2, r2, #31
 8032d0c:	ea42 0240 	orr.w	r2, r2, r0, lsl #1
 8032d10:	f1c2 5200 	rsb	r2, r2, #536870912	@ 0x20000000
 8032d14:	ea82 0001 	eor.w	r0, r2, r1
 8032d18:	0fc0      	lsrs	r0, r0, #31
 8032d1a:	2800      	cmp	r0, #0
 8032d1c:	bf18      	it	ne
 8032d1e:	f04f 35ff 	movne.w	r5, #4294967295
 8032d22:	480b      	ldr	r0, [pc, #44]	@ (8032d50 <_lite_kernel_nl_softmax_iu8ou8+0x6ec>)
 8032d24:	bf04      	itt	eq
 8032d26:	2500      	moveq	r5, #0
 8032d28:	f04f 4080 	moveq.w	r0, #1073741824	@ 0x40000000
 8032d2c:	e736      	b.n	8032b9c <_lite_kernel_nl_softmax_iu8ou8+0x538>
 8032d2e:	f117 4480 	adds.w	r4, r7, #1073741824	@ 0x40000000
 8032d32:	f145 0500 	adc.w	r5, r5, #0
 8032d36:	2d00      	cmp	r5, #0
 8032d38:	f6bf aed6 	bge.w	8032ae8 <_lite_kernel_nl_softmax_iu8ou8+0x484>
 8032d3c:	f06f 4700 	mvn.w	r7, #2147483648	@ 0x80000000
 8032d40:	19e7      	adds	r7, r4, r7
 8032d42:	463c      	mov	r4, r7
 8032d44:	f145 0500 	adc.w	r5, r5, #0
 8032d48:	e6ce      	b.n	8032ae8 <_lite_kernel_nl_softmax_iu8ou8+0x484>
 8032d4a:	bf00      	nop
 8032d4c:	c3c3c3c4 	.word	0xc3c3c3c4
 8032d50:	c0000001 	.word	0xc0000001
 8032d54:	2603      	movs	r6, #3
 8032d56:	f04f 0820 	mov.w	r8, #32
 8032d5a:	f04f 32ff 	mov.w	r2, #4294967295
 8032d5e:	4933      	ldr	r1, [pc, #204]	@ (8032e2c <_lite_kernel_nl_softmax_iu8ou8+0x7c8>)
 8032d60:	4610      	mov	r0, r2
 8032d62:	4694      	mov	ip, r2
 8032d64:	f04f 4780 	mov.w	r7, #1073741824	@ 0x40000000
 8032d68:	f04f 0a00 	mov.w	sl, #0
 8032d6c:	17cc      	asrs	r4, r1, #31
 8032d6e:	fb01 f500 	mul.w	r5, r1, r0
 8032d72:	fb02 5504 	mla	r5, r2, r4, r5
 8032d76:	fba1 4e02 	umull	r4, lr, r1, r2
 8032d7a:	19e4      	adds	r4, r4, r7
 8032d7c:	4475      	add	r5, lr
 8032d7e:	eb45 050a 	adc.w	r5, r5, sl
 8032d82:	2d00      	cmp	r5, #0
 8032d84:	da05      	bge.n	8032d92 <_lite_kernel_nl_softmax_iu8ou8+0x72e>
 8032d86:	f06f 4700 	mvn.w	r7, #2147483648	@ 0x80000000
 8032d8a:	19e7      	adds	r7, r4, r7
 8032d8c:	463c      	mov	r4, r7
 8032d8e:	f145 0500 	adc.w	r5, r5, #0
 8032d92:	0fe4      	lsrs	r4, r4, #31
 8032d94:	ea44 0445 	orr.w	r4, r4, r5, lsl #1
 8032d98:	f1c4 5400 	rsb	r4, r4, #536870912	@ 0x20000000
 8032d9c:	ea84 0501 	eor.w	r5, r4, r1
 8032da0:	0fed      	lsrs	r5, r5, #31
 8032da2:	2d00      	cmp	r5, #0
 8032da4:	4d22      	ldr	r5, [pc, #136]	@ (8032e30 <_lite_kernel_nl_softmax_iu8ou8+0x7cc>)
 8032da6:	bf12      	itee	ne
 8032da8:	f04f 37ff 	movne.w	r7, #4294967295
 8032dac:	f04f 4580 	moveq.w	r5, #1073741824	@ 0x40000000
 8032db0:	2700      	moveq	r7, #0
 8032db2:	fbc1 5704 	smlal	r5, r7, r1, r4
 8032db6:	2f00      	cmp	r7, #0
 8032db8:	da05      	bge.n	8032dc6 <_lite_kernel_nl_softmax_iu8ou8+0x762>
 8032dba:	f06f 4400 	mvn.w	r4, #2147483648	@ 0x80000000
 8032dbe:	192c      	adds	r4, r5, r4
 8032dc0:	4625      	mov	r5, r4
 8032dc2:	f147 0700 	adc.w	r7, r7, #0
 8032dc6:	0fed      	lsrs	r5, r5, #31
 8032dc8:	ea45 0547 	orr.w	r5, r5, r7, lsl #1
 8032dcc:	f1b5 5f00 	cmp.w	r5, #536870912	@ 0x20000000
 8032dd0:	f6ff aebe 	blt.w	8032b50 <_lite_kernel_nl_softmax_iu8ou8+0x4ec>
 8032dd4:	f06f 4500 	mvn.w	r5, #2147483648	@ 0x80000000
 8032dd8:	4429      	add	r1, r5
 8032dda:	ea91 0f0c 	teq	r1, ip
 8032dde:	f57f af7e 	bpl.w	8032cde <_lite_kernel_nl_softmax_iu8ou8+0x67a>
 8032de2:	4d13      	ldr	r5, [pc, #76]	@ (8032e30 <_lite_kernel_nl_softmax_iu8ou8+0x7cc>)
 8032de4:	f04f 37ff 	mov.w	r7, #4294967295
 8032de8:	e77c      	b.n	8032ce4 <_lite_kernel_nl_softmax_iu8ou8+0x680>
 8032dea:	4429      	add	r1, r5
 8032dec:	ea81 0402 	eor.w	r4, r1, r2
 8032df0:	0fe4      	lsrs	r4, r4, #31
 8032df2:	2c00      	cmp	r4, #0
 8032df4:	4f0e      	ldr	r7, [pc, #56]	@ (8032e30 <_lite_kernel_nl_softmax_iu8ou8+0x7cc>)
 8032df6:	bf12      	itee	ne
 8032df8:	f04f 3aff 	movne.w	sl, #4294967295
 8032dfc:	f04f 4780 	moveq.w	r7, #1073741824	@ 0x40000000
 8032e00:	f04f 0a00 	moveq.w	sl, #0
 8032e04:	e7b2      	b.n	8032d6c <_lite_kernel_nl_softmax_iu8ou8+0x708>
 8032e06:	2b00      	cmp	r3, #0
 8032e08:	d0a4      	beq.n	8032d54 <_lite_kernel_nl_softmax_iu8ou8+0x6f0>
 8032e0a:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
 8032e0c:	4402      	add	r2, r0
 8032e0e:	9203      	str	r2, [sp, #12]
 8032e10:	e461      	b.n	80326d6 <_lite_kernel_nl_softmax_iu8ou8+0x72>
 8032e12:	00ad      	lsls	r5, r5, #2
 8032e14:	e7e0      	b.n	8032dd8 <_lite_kernel_nl_softmax_iu8ou8+0x774>
 8032e16:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 8032e1a:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 8032e1e:	ea4f 0042 	mov.w	r0, r2, lsl #1
 8032e22:	f6ff aedb 	blt.w	8032bdc <_lite_kernel_nl_softmax_iu8ou8+0x578>
 8032e26:	f06f 4000 	mvn.w	r0, #2147483648	@ 0x80000000
 8032e2a:	e6dc      	b.n	8032be6 <_lite_kernel_nl_softmax_iu8ou8+0x582>
 8032e2c:	b4b4b4b6 	.word	0xb4b4b4b6
 8032e30:	c0000001 	.word	0xc0000001

08032e34 <malloc>:
 8032e34:	4b02      	ldr	r3, [pc, #8]	@ (8032e40 <malloc+0xc>)
 8032e36:	4601      	mov	r1, r0
 8032e38:	6818      	ldr	r0, [r3, #0]
 8032e3a:	f000 b825 	b.w	8032e88 <_malloc_r>
 8032e3e:	bf00      	nop
 8032e40:	200011a8 	.word	0x200011a8

08032e44 <sbrk_aligned>:
 8032e44:	b570      	push	{r4, r5, r6, lr}
 8032e46:	4e0f      	ldr	r6, [pc, #60]	@ (8032e84 <sbrk_aligned+0x40>)
 8032e48:	460c      	mov	r4, r1
 8032e4a:	6831      	ldr	r1, [r6, #0]
 8032e4c:	4605      	mov	r5, r0
 8032e4e:	b911      	cbnz	r1, 8032e56 <sbrk_aligned+0x12>
 8032e50:	f000 ffc4 	bl	8033ddc <_sbrk_r>
 8032e54:	6030      	str	r0, [r6, #0]
 8032e56:	4621      	mov	r1, r4
 8032e58:	4628      	mov	r0, r5
 8032e5a:	f000 ffbf 	bl	8033ddc <_sbrk_r>
 8032e5e:	1c43      	adds	r3, r0, #1
 8032e60:	d103      	bne.n	8032e6a <sbrk_aligned+0x26>
 8032e62:	f04f 34ff 	mov.w	r4, #4294967295
 8032e66:	4620      	mov	r0, r4
 8032e68:	bd70      	pop	{r4, r5, r6, pc}
 8032e6a:	1cc4      	adds	r4, r0, #3
 8032e6c:	f024 0403 	bic.w	r4, r4, #3
 8032e70:	42a0      	cmp	r0, r4
 8032e72:	d0f8      	beq.n	8032e66 <sbrk_aligned+0x22>
 8032e74:	1a21      	subs	r1, r4, r0
 8032e76:	4628      	mov	r0, r5
 8032e78:	f000 ffb0 	bl	8033ddc <_sbrk_r>
 8032e7c:	3001      	adds	r0, #1
 8032e7e:	d1f2      	bne.n	8032e66 <sbrk_aligned+0x22>
 8032e80:	e7ef      	b.n	8032e62 <sbrk_aligned+0x1e>
 8032e82:	bf00      	nop
 8032e84:	200056a8 	.word	0x200056a8

08032e88 <_malloc_r>:
 8032e88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8032e8c:	1ccd      	adds	r5, r1, #3
 8032e8e:	f025 0503 	bic.w	r5, r5, #3
 8032e92:	3508      	adds	r5, #8
 8032e94:	2d0c      	cmp	r5, #12
 8032e96:	bf38      	it	cc
 8032e98:	250c      	movcc	r5, #12
 8032e9a:	2d00      	cmp	r5, #0
 8032e9c:	4606      	mov	r6, r0
 8032e9e:	db01      	blt.n	8032ea4 <_malloc_r+0x1c>
 8032ea0:	42a9      	cmp	r1, r5
 8032ea2:	d904      	bls.n	8032eae <_malloc_r+0x26>
 8032ea4:	230c      	movs	r3, #12
 8032ea6:	6033      	str	r3, [r6, #0]
 8032ea8:	2000      	movs	r0, #0
 8032eaa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8032eae:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8032f84 <_malloc_r+0xfc>
 8032eb2:	f000 f869 	bl	8032f88 <__malloc_lock>
 8032eb6:	f8d8 3000 	ldr.w	r3, [r8]
 8032eba:	461c      	mov	r4, r3
 8032ebc:	bb44      	cbnz	r4, 8032f10 <_malloc_r+0x88>
 8032ebe:	4629      	mov	r1, r5
 8032ec0:	4630      	mov	r0, r6
 8032ec2:	f7ff ffbf 	bl	8032e44 <sbrk_aligned>
 8032ec6:	1c43      	adds	r3, r0, #1
 8032ec8:	4604      	mov	r4, r0
 8032eca:	d158      	bne.n	8032f7e <_malloc_r+0xf6>
 8032ecc:	f8d8 4000 	ldr.w	r4, [r8]
 8032ed0:	4627      	mov	r7, r4
 8032ed2:	2f00      	cmp	r7, #0
 8032ed4:	d143      	bne.n	8032f5e <_malloc_r+0xd6>
 8032ed6:	2c00      	cmp	r4, #0
 8032ed8:	d04b      	beq.n	8032f72 <_malloc_r+0xea>
 8032eda:	6823      	ldr	r3, [r4, #0]
 8032edc:	4639      	mov	r1, r7
 8032ede:	4630      	mov	r0, r6
 8032ee0:	eb04 0903 	add.w	r9, r4, r3
 8032ee4:	f000 ff7a 	bl	8033ddc <_sbrk_r>
 8032ee8:	4581      	cmp	r9, r0
 8032eea:	d142      	bne.n	8032f72 <_malloc_r+0xea>
 8032eec:	6821      	ldr	r1, [r4, #0]
 8032eee:	1a6d      	subs	r5, r5, r1
 8032ef0:	4629      	mov	r1, r5
 8032ef2:	4630      	mov	r0, r6
 8032ef4:	f7ff ffa6 	bl	8032e44 <sbrk_aligned>
 8032ef8:	3001      	adds	r0, #1
 8032efa:	d03a      	beq.n	8032f72 <_malloc_r+0xea>
 8032efc:	6823      	ldr	r3, [r4, #0]
 8032efe:	442b      	add	r3, r5
 8032f00:	6023      	str	r3, [r4, #0]
 8032f02:	f8d8 3000 	ldr.w	r3, [r8]
 8032f06:	685a      	ldr	r2, [r3, #4]
 8032f08:	bb62      	cbnz	r2, 8032f64 <_malloc_r+0xdc>
 8032f0a:	f8c8 7000 	str.w	r7, [r8]
 8032f0e:	e00f      	b.n	8032f30 <_malloc_r+0xa8>
 8032f10:	6822      	ldr	r2, [r4, #0]
 8032f12:	1b52      	subs	r2, r2, r5
 8032f14:	d420      	bmi.n	8032f58 <_malloc_r+0xd0>
 8032f16:	2a0b      	cmp	r2, #11
 8032f18:	d917      	bls.n	8032f4a <_malloc_r+0xc2>
 8032f1a:	1961      	adds	r1, r4, r5
 8032f1c:	42a3      	cmp	r3, r4
 8032f1e:	6025      	str	r5, [r4, #0]
 8032f20:	bf18      	it	ne
 8032f22:	6059      	strne	r1, [r3, #4]
 8032f24:	6863      	ldr	r3, [r4, #4]
 8032f26:	bf08      	it	eq
 8032f28:	f8c8 1000 	streq.w	r1, [r8]
 8032f2c:	5162      	str	r2, [r4, r5]
 8032f2e:	604b      	str	r3, [r1, #4]
 8032f30:	4630      	mov	r0, r6
 8032f32:	f000 f82f 	bl	8032f94 <__malloc_unlock>
 8032f36:	f104 000b 	add.w	r0, r4, #11
 8032f3a:	1d23      	adds	r3, r4, #4
 8032f3c:	f020 0007 	bic.w	r0, r0, #7
 8032f40:	1ac2      	subs	r2, r0, r3
 8032f42:	bf1c      	itt	ne
 8032f44:	1a1b      	subne	r3, r3, r0
 8032f46:	50a3      	strne	r3, [r4, r2]
 8032f48:	e7af      	b.n	8032eaa <_malloc_r+0x22>
 8032f4a:	6862      	ldr	r2, [r4, #4]
 8032f4c:	42a3      	cmp	r3, r4
 8032f4e:	bf0c      	ite	eq
 8032f50:	f8c8 2000 	streq.w	r2, [r8]
 8032f54:	605a      	strne	r2, [r3, #4]
 8032f56:	e7eb      	b.n	8032f30 <_malloc_r+0xa8>
 8032f58:	4623      	mov	r3, r4
 8032f5a:	6864      	ldr	r4, [r4, #4]
 8032f5c:	e7ae      	b.n	8032ebc <_malloc_r+0x34>
 8032f5e:	463c      	mov	r4, r7
 8032f60:	687f      	ldr	r7, [r7, #4]
 8032f62:	e7b6      	b.n	8032ed2 <_malloc_r+0x4a>
 8032f64:	461a      	mov	r2, r3
 8032f66:	685b      	ldr	r3, [r3, #4]
 8032f68:	42a3      	cmp	r3, r4
 8032f6a:	d1fb      	bne.n	8032f64 <_malloc_r+0xdc>
 8032f6c:	2300      	movs	r3, #0
 8032f6e:	6053      	str	r3, [r2, #4]
 8032f70:	e7de      	b.n	8032f30 <_malloc_r+0xa8>
 8032f72:	230c      	movs	r3, #12
 8032f74:	6033      	str	r3, [r6, #0]
 8032f76:	4630      	mov	r0, r6
 8032f78:	f000 f80c 	bl	8032f94 <__malloc_unlock>
 8032f7c:	e794      	b.n	8032ea8 <_malloc_r+0x20>
 8032f7e:	6005      	str	r5, [r0, #0]
 8032f80:	e7d6      	b.n	8032f30 <_malloc_r+0xa8>
 8032f82:	bf00      	nop
 8032f84:	200056ac 	.word	0x200056ac

08032f88 <__malloc_lock>:
 8032f88:	4801      	ldr	r0, [pc, #4]	@ (8032f90 <__malloc_lock+0x8>)
 8032f8a:	f000 bf74 	b.w	8033e76 <__retarget_lock_acquire_recursive>
 8032f8e:	bf00      	nop
 8032f90:	200057f0 	.word	0x200057f0

08032f94 <__malloc_unlock>:
 8032f94:	4801      	ldr	r0, [pc, #4]	@ (8032f9c <__malloc_unlock+0x8>)
 8032f96:	f000 bf6f 	b.w	8033e78 <__retarget_lock_release_recursive>
 8032f9a:	bf00      	nop
 8032f9c:	200057f0 	.word	0x200057f0

08032fa0 <_realloc_r>:
 8032fa0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8032fa4:	4607      	mov	r7, r0
 8032fa6:	4614      	mov	r4, r2
 8032fa8:	460d      	mov	r5, r1
 8032faa:	b921      	cbnz	r1, 8032fb6 <_realloc_r+0x16>
 8032fac:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8032fb0:	4611      	mov	r1, r2
 8032fb2:	f7ff bf69 	b.w	8032e88 <_malloc_r>
 8032fb6:	b92a      	cbnz	r2, 8032fc4 <_realloc_r+0x24>
 8032fb8:	f001 fdc6 	bl	8034b48 <_free_r>
 8032fbc:	4625      	mov	r5, r4
 8032fbe:	4628      	mov	r0, r5
 8032fc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8032fc4:	f002 f984 	bl	80352d0 <_malloc_usable_size_r>
 8032fc8:	4284      	cmp	r4, r0
 8032fca:	4606      	mov	r6, r0
 8032fcc:	d802      	bhi.n	8032fd4 <_realloc_r+0x34>
 8032fce:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8032fd2:	d8f4      	bhi.n	8032fbe <_realloc_r+0x1e>
 8032fd4:	4621      	mov	r1, r4
 8032fd6:	4638      	mov	r0, r7
 8032fd8:	f7ff ff56 	bl	8032e88 <_malloc_r>
 8032fdc:	4680      	mov	r8, r0
 8032fde:	b908      	cbnz	r0, 8032fe4 <_realloc_r+0x44>
 8032fe0:	4645      	mov	r5, r8
 8032fe2:	e7ec      	b.n	8032fbe <_realloc_r+0x1e>
 8032fe4:	42b4      	cmp	r4, r6
 8032fe6:	4622      	mov	r2, r4
 8032fe8:	4629      	mov	r1, r5
 8032fea:	bf28      	it	cs
 8032fec:	4632      	movcs	r2, r6
 8032fee:	f000 ff44 	bl	8033e7a <memcpy>
 8032ff2:	4629      	mov	r1, r5
 8032ff4:	4638      	mov	r0, r7
 8032ff6:	f001 fda7 	bl	8034b48 <_free_r>
 8032ffa:	e7f1      	b.n	8032fe0 <_realloc_r+0x40>

08032ffc <__cvt>:
 8032ffc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8033000:	ec57 6b10 	vmov	r6, r7, d0
 8033004:	2f00      	cmp	r7, #0
 8033006:	460c      	mov	r4, r1
 8033008:	4619      	mov	r1, r3
 803300a:	463b      	mov	r3, r7
 803300c:	bfbb      	ittet	lt
 803300e:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8033012:	461f      	movlt	r7, r3
 8033014:	2300      	movge	r3, #0
 8033016:	232d      	movlt	r3, #45	@ 0x2d
 8033018:	700b      	strb	r3, [r1, #0]
 803301a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 803301c:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8033020:	4691      	mov	r9, r2
 8033022:	f023 0820 	bic.w	r8, r3, #32
 8033026:	bfbc      	itt	lt
 8033028:	4632      	movlt	r2, r6
 803302a:	4616      	movlt	r6, r2
 803302c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8033030:	d005      	beq.n	803303e <__cvt+0x42>
 8033032:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8033036:	d100      	bne.n	803303a <__cvt+0x3e>
 8033038:	3401      	adds	r4, #1
 803303a:	2102      	movs	r1, #2
 803303c:	e000      	b.n	8033040 <__cvt+0x44>
 803303e:	2103      	movs	r1, #3
 8033040:	ab03      	add	r3, sp, #12
 8033042:	9301      	str	r3, [sp, #4]
 8033044:	ab02      	add	r3, sp, #8
 8033046:	9300      	str	r3, [sp, #0]
 8033048:	ec47 6b10 	vmov	d0, r6, r7
 803304c:	4653      	mov	r3, sl
 803304e:	4622      	mov	r2, r4
 8033050:	f000 ffaa 	bl	8033fa8 <_dtoa_r>
 8033054:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8033058:	4605      	mov	r5, r0
 803305a:	d119      	bne.n	8033090 <__cvt+0x94>
 803305c:	f019 0f01 	tst.w	r9, #1
 8033060:	d00e      	beq.n	8033080 <__cvt+0x84>
 8033062:	eb00 0904 	add.w	r9, r0, r4
 8033066:	2200      	movs	r2, #0
 8033068:	2300      	movs	r3, #0
 803306a:	4630      	mov	r0, r6
 803306c:	4639      	mov	r1, r7
 803306e:	f7dd fc63 	bl	8010938 <__aeabi_dcmpeq>
 8033072:	b108      	cbz	r0, 8033078 <__cvt+0x7c>
 8033074:	f8cd 900c 	str.w	r9, [sp, #12]
 8033078:	2230      	movs	r2, #48	@ 0x30
 803307a:	9b03      	ldr	r3, [sp, #12]
 803307c:	454b      	cmp	r3, r9
 803307e:	d31e      	bcc.n	80330be <__cvt+0xc2>
 8033080:	9b03      	ldr	r3, [sp, #12]
 8033082:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8033084:	1b5b      	subs	r3, r3, r5
 8033086:	4628      	mov	r0, r5
 8033088:	6013      	str	r3, [r2, #0]
 803308a:	b004      	add	sp, #16
 803308c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8033090:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8033094:	eb00 0904 	add.w	r9, r0, r4
 8033098:	d1e5      	bne.n	8033066 <__cvt+0x6a>
 803309a:	7803      	ldrb	r3, [r0, #0]
 803309c:	2b30      	cmp	r3, #48	@ 0x30
 803309e:	d10a      	bne.n	80330b6 <__cvt+0xba>
 80330a0:	2200      	movs	r2, #0
 80330a2:	2300      	movs	r3, #0
 80330a4:	4630      	mov	r0, r6
 80330a6:	4639      	mov	r1, r7
 80330a8:	f7dd fc46 	bl	8010938 <__aeabi_dcmpeq>
 80330ac:	b918      	cbnz	r0, 80330b6 <__cvt+0xba>
 80330ae:	f1c4 0401 	rsb	r4, r4, #1
 80330b2:	f8ca 4000 	str.w	r4, [sl]
 80330b6:	f8da 3000 	ldr.w	r3, [sl]
 80330ba:	4499      	add	r9, r3
 80330bc:	e7d3      	b.n	8033066 <__cvt+0x6a>
 80330be:	1c59      	adds	r1, r3, #1
 80330c0:	9103      	str	r1, [sp, #12]
 80330c2:	701a      	strb	r2, [r3, #0]
 80330c4:	e7d9      	b.n	803307a <__cvt+0x7e>

080330c6 <__exponent>:
 80330c6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80330c8:	2900      	cmp	r1, #0
 80330ca:	bfba      	itte	lt
 80330cc:	4249      	neglt	r1, r1
 80330ce:	232d      	movlt	r3, #45	@ 0x2d
 80330d0:	232b      	movge	r3, #43	@ 0x2b
 80330d2:	2909      	cmp	r1, #9
 80330d4:	7002      	strb	r2, [r0, #0]
 80330d6:	7043      	strb	r3, [r0, #1]
 80330d8:	dd29      	ble.n	803312e <__exponent+0x68>
 80330da:	f10d 0307 	add.w	r3, sp, #7
 80330de:	461d      	mov	r5, r3
 80330e0:	270a      	movs	r7, #10
 80330e2:	461a      	mov	r2, r3
 80330e4:	fbb1 f6f7 	udiv	r6, r1, r7
 80330e8:	fb07 1416 	mls	r4, r7, r6, r1
 80330ec:	3430      	adds	r4, #48	@ 0x30
 80330ee:	f802 4c01 	strb.w	r4, [r2, #-1]
 80330f2:	460c      	mov	r4, r1
 80330f4:	2c63      	cmp	r4, #99	@ 0x63
 80330f6:	f103 33ff 	add.w	r3, r3, #4294967295
 80330fa:	4631      	mov	r1, r6
 80330fc:	dcf1      	bgt.n	80330e2 <__exponent+0x1c>
 80330fe:	3130      	adds	r1, #48	@ 0x30
 8033100:	1e94      	subs	r4, r2, #2
 8033102:	f803 1c01 	strb.w	r1, [r3, #-1]
 8033106:	1c41      	adds	r1, r0, #1
 8033108:	4623      	mov	r3, r4
 803310a:	42ab      	cmp	r3, r5
 803310c:	d30a      	bcc.n	8033124 <__exponent+0x5e>
 803310e:	f10d 0309 	add.w	r3, sp, #9
 8033112:	1a9b      	subs	r3, r3, r2
 8033114:	42ac      	cmp	r4, r5
 8033116:	bf88      	it	hi
 8033118:	2300      	movhi	r3, #0
 803311a:	3302      	adds	r3, #2
 803311c:	4403      	add	r3, r0
 803311e:	1a18      	subs	r0, r3, r0
 8033120:	b003      	add	sp, #12
 8033122:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8033124:	f813 6b01 	ldrb.w	r6, [r3], #1
 8033128:	f801 6f01 	strb.w	r6, [r1, #1]!
 803312c:	e7ed      	b.n	803310a <__exponent+0x44>
 803312e:	2330      	movs	r3, #48	@ 0x30
 8033130:	3130      	adds	r1, #48	@ 0x30
 8033132:	7083      	strb	r3, [r0, #2]
 8033134:	70c1      	strb	r1, [r0, #3]
 8033136:	1d03      	adds	r3, r0, #4
 8033138:	e7f1      	b.n	803311e <__exponent+0x58>
	...

0803313c <_printf_float>:
 803313c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8033140:	b08d      	sub	sp, #52	@ 0x34
 8033142:	460c      	mov	r4, r1
 8033144:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8033148:	4616      	mov	r6, r2
 803314a:	461f      	mov	r7, r3
 803314c:	4605      	mov	r5, r0
 803314e:	f000 fe0d 	bl	8033d6c <_localeconv_r>
 8033152:	6803      	ldr	r3, [r0, #0]
 8033154:	9304      	str	r3, [sp, #16]
 8033156:	4618      	mov	r0, r3
 8033158:	f7dc ffc2 	bl	80100e0 <strlen>
 803315c:	2300      	movs	r3, #0
 803315e:	930a      	str	r3, [sp, #40]	@ 0x28
 8033160:	f8d8 3000 	ldr.w	r3, [r8]
 8033164:	9005      	str	r0, [sp, #20]
 8033166:	3307      	adds	r3, #7
 8033168:	f023 0307 	bic.w	r3, r3, #7
 803316c:	f103 0208 	add.w	r2, r3, #8
 8033170:	f894 a018 	ldrb.w	sl, [r4, #24]
 8033174:	f8d4 b000 	ldr.w	fp, [r4]
 8033178:	f8c8 2000 	str.w	r2, [r8]
 803317c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8033180:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8033184:	9307      	str	r3, [sp, #28]
 8033186:	f8cd 8018 	str.w	r8, [sp, #24]
 803318a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 803318e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8033192:	4b9c      	ldr	r3, [pc, #624]	@ (8033404 <_printf_float+0x2c8>)
 8033194:	f04f 32ff 	mov.w	r2, #4294967295
 8033198:	f7dd fc00 	bl	801099c <__aeabi_dcmpun>
 803319c:	bb70      	cbnz	r0, 80331fc <_printf_float+0xc0>
 803319e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80331a2:	4b98      	ldr	r3, [pc, #608]	@ (8033404 <_printf_float+0x2c8>)
 80331a4:	f04f 32ff 	mov.w	r2, #4294967295
 80331a8:	f7dd fbda 	bl	8010960 <__aeabi_dcmple>
 80331ac:	bb30      	cbnz	r0, 80331fc <_printf_float+0xc0>
 80331ae:	2200      	movs	r2, #0
 80331b0:	2300      	movs	r3, #0
 80331b2:	4640      	mov	r0, r8
 80331b4:	4649      	mov	r1, r9
 80331b6:	f7dd fbc9 	bl	801094c <__aeabi_dcmplt>
 80331ba:	b110      	cbz	r0, 80331c2 <_printf_float+0x86>
 80331bc:	232d      	movs	r3, #45	@ 0x2d
 80331be:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80331c2:	4a91      	ldr	r2, [pc, #580]	@ (8033408 <_printf_float+0x2cc>)
 80331c4:	4b91      	ldr	r3, [pc, #580]	@ (803340c <_printf_float+0x2d0>)
 80331c6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80331ca:	bf8c      	ite	hi
 80331cc:	4690      	movhi	r8, r2
 80331ce:	4698      	movls	r8, r3
 80331d0:	2303      	movs	r3, #3
 80331d2:	6123      	str	r3, [r4, #16]
 80331d4:	f02b 0304 	bic.w	r3, fp, #4
 80331d8:	6023      	str	r3, [r4, #0]
 80331da:	f04f 0900 	mov.w	r9, #0
 80331de:	9700      	str	r7, [sp, #0]
 80331e0:	4633      	mov	r3, r6
 80331e2:	aa0b      	add	r2, sp, #44	@ 0x2c
 80331e4:	4621      	mov	r1, r4
 80331e6:	4628      	mov	r0, r5
 80331e8:	f000 f9d2 	bl	8033590 <_printf_common>
 80331ec:	3001      	adds	r0, #1
 80331ee:	f040 808d 	bne.w	803330c <_printf_float+0x1d0>
 80331f2:	f04f 30ff 	mov.w	r0, #4294967295
 80331f6:	b00d      	add	sp, #52	@ 0x34
 80331f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80331fc:	4642      	mov	r2, r8
 80331fe:	464b      	mov	r3, r9
 8033200:	4640      	mov	r0, r8
 8033202:	4649      	mov	r1, r9
 8033204:	f7dd fbca 	bl	801099c <__aeabi_dcmpun>
 8033208:	b140      	cbz	r0, 803321c <_printf_float+0xe0>
 803320a:	464b      	mov	r3, r9
 803320c:	2b00      	cmp	r3, #0
 803320e:	bfbc      	itt	lt
 8033210:	232d      	movlt	r3, #45	@ 0x2d
 8033212:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8033216:	4a7e      	ldr	r2, [pc, #504]	@ (8033410 <_printf_float+0x2d4>)
 8033218:	4b7e      	ldr	r3, [pc, #504]	@ (8033414 <_printf_float+0x2d8>)
 803321a:	e7d4      	b.n	80331c6 <_printf_float+0x8a>
 803321c:	6863      	ldr	r3, [r4, #4]
 803321e:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8033222:	9206      	str	r2, [sp, #24]
 8033224:	1c5a      	adds	r2, r3, #1
 8033226:	d13b      	bne.n	80332a0 <_printf_float+0x164>
 8033228:	2306      	movs	r3, #6
 803322a:	6063      	str	r3, [r4, #4]
 803322c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8033230:	2300      	movs	r3, #0
 8033232:	6022      	str	r2, [r4, #0]
 8033234:	9303      	str	r3, [sp, #12]
 8033236:	ab0a      	add	r3, sp, #40	@ 0x28
 8033238:	e9cd a301 	strd	sl, r3, [sp, #4]
 803323c:	ab09      	add	r3, sp, #36	@ 0x24
 803323e:	9300      	str	r3, [sp, #0]
 8033240:	6861      	ldr	r1, [r4, #4]
 8033242:	ec49 8b10 	vmov	d0, r8, r9
 8033246:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 803324a:	4628      	mov	r0, r5
 803324c:	f7ff fed6 	bl	8032ffc <__cvt>
 8033250:	9b06      	ldr	r3, [sp, #24]
 8033252:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8033254:	2b47      	cmp	r3, #71	@ 0x47
 8033256:	4680      	mov	r8, r0
 8033258:	d129      	bne.n	80332ae <_printf_float+0x172>
 803325a:	1cc8      	adds	r0, r1, #3
 803325c:	db02      	blt.n	8033264 <_printf_float+0x128>
 803325e:	6863      	ldr	r3, [r4, #4]
 8033260:	4299      	cmp	r1, r3
 8033262:	dd41      	ble.n	80332e8 <_printf_float+0x1ac>
 8033264:	f1aa 0a02 	sub.w	sl, sl, #2
 8033268:	fa5f fa8a 	uxtb.w	sl, sl
 803326c:	3901      	subs	r1, #1
 803326e:	4652      	mov	r2, sl
 8033270:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8033274:	9109      	str	r1, [sp, #36]	@ 0x24
 8033276:	f7ff ff26 	bl	80330c6 <__exponent>
 803327a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 803327c:	1813      	adds	r3, r2, r0
 803327e:	2a01      	cmp	r2, #1
 8033280:	4681      	mov	r9, r0
 8033282:	6123      	str	r3, [r4, #16]
 8033284:	dc02      	bgt.n	803328c <_printf_float+0x150>
 8033286:	6822      	ldr	r2, [r4, #0]
 8033288:	07d2      	lsls	r2, r2, #31
 803328a:	d501      	bpl.n	8033290 <_printf_float+0x154>
 803328c:	3301      	adds	r3, #1
 803328e:	6123      	str	r3, [r4, #16]
 8033290:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8033294:	2b00      	cmp	r3, #0
 8033296:	d0a2      	beq.n	80331de <_printf_float+0xa2>
 8033298:	232d      	movs	r3, #45	@ 0x2d
 803329a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 803329e:	e79e      	b.n	80331de <_printf_float+0xa2>
 80332a0:	9a06      	ldr	r2, [sp, #24]
 80332a2:	2a47      	cmp	r2, #71	@ 0x47
 80332a4:	d1c2      	bne.n	803322c <_printf_float+0xf0>
 80332a6:	2b00      	cmp	r3, #0
 80332a8:	d1c0      	bne.n	803322c <_printf_float+0xf0>
 80332aa:	2301      	movs	r3, #1
 80332ac:	e7bd      	b.n	803322a <_printf_float+0xee>
 80332ae:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80332b2:	d9db      	bls.n	803326c <_printf_float+0x130>
 80332b4:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80332b8:	d118      	bne.n	80332ec <_printf_float+0x1b0>
 80332ba:	2900      	cmp	r1, #0
 80332bc:	6863      	ldr	r3, [r4, #4]
 80332be:	dd0b      	ble.n	80332d8 <_printf_float+0x19c>
 80332c0:	6121      	str	r1, [r4, #16]
 80332c2:	b913      	cbnz	r3, 80332ca <_printf_float+0x18e>
 80332c4:	6822      	ldr	r2, [r4, #0]
 80332c6:	07d0      	lsls	r0, r2, #31
 80332c8:	d502      	bpl.n	80332d0 <_printf_float+0x194>
 80332ca:	3301      	adds	r3, #1
 80332cc:	440b      	add	r3, r1
 80332ce:	6123      	str	r3, [r4, #16]
 80332d0:	65a1      	str	r1, [r4, #88]	@ 0x58
 80332d2:	f04f 0900 	mov.w	r9, #0
 80332d6:	e7db      	b.n	8033290 <_printf_float+0x154>
 80332d8:	b913      	cbnz	r3, 80332e0 <_printf_float+0x1a4>
 80332da:	6822      	ldr	r2, [r4, #0]
 80332dc:	07d2      	lsls	r2, r2, #31
 80332de:	d501      	bpl.n	80332e4 <_printf_float+0x1a8>
 80332e0:	3302      	adds	r3, #2
 80332e2:	e7f4      	b.n	80332ce <_printf_float+0x192>
 80332e4:	2301      	movs	r3, #1
 80332e6:	e7f2      	b.n	80332ce <_printf_float+0x192>
 80332e8:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80332ec:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80332ee:	4299      	cmp	r1, r3
 80332f0:	db05      	blt.n	80332fe <_printf_float+0x1c2>
 80332f2:	6823      	ldr	r3, [r4, #0]
 80332f4:	6121      	str	r1, [r4, #16]
 80332f6:	07d8      	lsls	r0, r3, #31
 80332f8:	d5ea      	bpl.n	80332d0 <_printf_float+0x194>
 80332fa:	1c4b      	adds	r3, r1, #1
 80332fc:	e7e7      	b.n	80332ce <_printf_float+0x192>
 80332fe:	2900      	cmp	r1, #0
 8033300:	bfd4      	ite	le
 8033302:	f1c1 0202 	rsble	r2, r1, #2
 8033306:	2201      	movgt	r2, #1
 8033308:	4413      	add	r3, r2
 803330a:	e7e0      	b.n	80332ce <_printf_float+0x192>
 803330c:	6823      	ldr	r3, [r4, #0]
 803330e:	055a      	lsls	r2, r3, #21
 8033310:	d407      	bmi.n	8033322 <_printf_float+0x1e6>
 8033312:	6923      	ldr	r3, [r4, #16]
 8033314:	4642      	mov	r2, r8
 8033316:	4631      	mov	r1, r6
 8033318:	4628      	mov	r0, r5
 803331a:	47b8      	blx	r7
 803331c:	3001      	adds	r0, #1
 803331e:	d12b      	bne.n	8033378 <_printf_float+0x23c>
 8033320:	e767      	b.n	80331f2 <_printf_float+0xb6>
 8033322:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8033326:	f240 80dd 	bls.w	80334e4 <_printf_float+0x3a8>
 803332a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 803332e:	2200      	movs	r2, #0
 8033330:	2300      	movs	r3, #0
 8033332:	f7dd fb01 	bl	8010938 <__aeabi_dcmpeq>
 8033336:	2800      	cmp	r0, #0
 8033338:	d033      	beq.n	80333a2 <_printf_float+0x266>
 803333a:	4a37      	ldr	r2, [pc, #220]	@ (8033418 <_printf_float+0x2dc>)
 803333c:	2301      	movs	r3, #1
 803333e:	4631      	mov	r1, r6
 8033340:	4628      	mov	r0, r5
 8033342:	47b8      	blx	r7
 8033344:	3001      	adds	r0, #1
 8033346:	f43f af54 	beq.w	80331f2 <_printf_float+0xb6>
 803334a:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 803334e:	4543      	cmp	r3, r8
 8033350:	db02      	blt.n	8033358 <_printf_float+0x21c>
 8033352:	6823      	ldr	r3, [r4, #0]
 8033354:	07d8      	lsls	r0, r3, #31
 8033356:	d50f      	bpl.n	8033378 <_printf_float+0x23c>
 8033358:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 803335c:	4631      	mov	r1, r6
 803335e:	4628      	mov	r0, r5
 8033360:	47b8      	blx	r7
 8033362:	3001      	adds	r0, #1
 8033364:	f43f af45 	beq.w	80331f2 <_printf_float+0xb6>
 8033368:	f04f 0900 	mov.w	r9, #0
 803336c:	f108 38ff 	add.w	r8, r8, #4294967295
 8033370:	f104 0a1a 	add.w	sl, r4, #26
 8033374:	45c8      	cmp	r8, r9
 8033376:	dc09      	bgt.n	803338c <_printf_float+0x250>
 8033378:	6823      	ldr	r3, [r4, #0]
 803337a:	079b      	lsls	r3, r3, #30
 803337c:	f100 8103 	bmi.w	8033586 <_printf_float+0x44a>
 8033380:	68e0      	ldr	r0, [r4, #12]
 8033382:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8033384:	4298      	cmp	r0, r3
 8033386:	bfb8      	it	lt
 8033388:	4618      	movlt	r0, r3
 803338a:	e734      	b.n	80331f6 <_printf_float+0xba>
 803338c:	2301      	movs	r3, #1
 803338e:	4652      	mov	r2, sl
 8033390:	4631      	mov	r1, r6
 8033392:	4628      	mov	r0, r5
 8033394:	47b8      	blx	r7
 8033396:	3001      	adds	r0, #1
 8033398:	f43f af2b 	beq.w	80331f2 <_printf_float+0xb6>
 803339c:	f109 0901 	add.w	r9, r9, #1
 80333a0:	e7e8      	b.n	8033374 <_printf_float+0x238>
 80333a2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80333a4:	2b00      	cmp	r3, #0
 80333a6:	dc39      	bgt.n	803341c <_printf_float+0x2e0>
 80333a8:	4a1b      	ldr	r2, [pc, #108]	@ (8033418 <_printf_float+0x2dc>)
 80333aa:	2301      	movs	r3, #1
 80333ac:	4631      	mov	r1, r6
 80333ae:	4628      	mov	r0, r5
 80333b0:	47b8      	blx	r7
 80333b2:	3001      	adds	r0, #1
 80333b4:	f43f af1d 	beq.w	80331f2 <_printf_float+0xb6>
 80333b8:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80333bc:	ea59 0303 	orrs.w	r3, r9, r3
 80333c0:	d102      	bne.n	80333c8 <_printf_float+0x28c>
 80333c2:	6823      	ldr	r3, [r4, #0]
 80333c4:	07d9      	lsls	r1, r3, #31
 80333c6:	d5d7      	bpl.n	8033378 <_printf_float+0x23c>
 80333c8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80333cc:	4631      	mov	r1, r6
 80333ce:	4628      	mov	r0, r5
 80333d0:	47b8      	blx	r7
 80333d2:	3001      	adds	r0, #1
 80333d4:	f43f af0d 	beq.w	80331f2 <_printf_float+0xb6>
 80333d8:	f04f 0a00 	mov.w	sl, #0
 80333dc:	f104 0b1a 	add.w	fp, r4, #26
 80333e0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80333e2:	425b      	negs	r3, r3
 80333e4:	4553      	cmp	r3, sl
 80333e6:	dc01      	bgt.n	80333ec <_printf_float+0x2b0>
 80333e8:	464b      	mov	r3, r9
 80333ea:	e793      	b.n	8033314 <_printf_float+0x1d8>
 80333ec:	2301      	movs	r3, #1
 80333ee:	465a      	mov	r2, fp
 80333f0:	4631      	mov	r1, r6
 80333f2:	4628      	mov	r0, r5
 80333f4:	47b8      	blx	r7
 80333f6:	3001      	adds	r0, #1
 80333f8:	f43f aefb 	beq.w	80331f2 <_printf_float+0xb6>
 80333fc:	f10a 0a01 	add.w	sl, sl, #1
 8033400:	e7ee      	b.n	80333e0 <_printf_float+0x2a4>
 8033402:	bf00      	nop
 8033404:	7fefffff 	.word	0x7fefffff
 8033408:	0803b974 	.word	0x0803b974
 803340c:	0803b970 	.word	0x0803b970
 8033410:	0803b97c 	.word	0x0803b97c
 8033414:	0803b978 	.word	0x0803b978
 8033418:	0803b980 	.word	0x0803b980
 803341c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 803341e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8033422:	4553      	cmp	r3, sl
 8033424:	bfa8      	it	ge
 8033426:	4653      	movge	r3, sl
 8033428:	2b00      	cmp	r3, #0
 803342a:	4699      	mov	r9, r3
 803342c:	dc36      	bgt.n	803349c <_printf_float+0x360>
 803342e:	f04f 0b00 	mov.w	fp, #0
 8033432:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8033436:	f104 021a 	add.w	r2, r4, #26
 803343a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 803343c:	9306      	str	r3, [sp, #24]
 803343e:	eba3 0309 	sub.w	r3, r3, r9
 8033442:	455b      	cmp	r3, fp
 8033444:	dc31      	bgt.n	80334aa <_printf_float+0x36e>
 8033446:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8033448:	459a      	cmp	sl, r3
 803344a:	dc3a      	bgt.n	80334c2 <_printf_float+0x386>
 803344c:	6823      	ldr	r3, [r4, #0]
 803344e:	07da      	lsls	r2, r3, #31
 8033450:	d437      	bmi.n	80334c2 <_printf_float+0x386>
 8033452:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8033454:	ebaa 0903 	sub.w	r9, sl, r3
 8033458:	9b06      	ldr	r3, [sp, #24]
 803345a:	ebaa 0303 	sub.w	r3, sl, r3
 803345e:	4599      	cmp	r9, r3
 8033460:	bfa8      	it	ge
 8033462:	4699      	movge	r9, r3
 8033464:	f1b9 0f00 	cmp.w	r9, #0
 8033468:	dc33      	bgt.n	80334d2 <_printf_float+0x396>
 803346a:	f04f 0800 	mov.w	r8, #0
 803346e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8033472:	f104 0b1a 	add.w	fp, r4, #26
 8033476:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8033478:	ebaa 0303 	sub.w	r3, sl, r3
 803347c:	eba3 0309 	sub.w	r3, r3, r9
 8033480:	4543      	cmp	r3, r8
 8033482:	f77f af79 	ble.w	8033378 <_printf_float+0x23c>
 8033486:	2301      	movs	r3, #1
 8033488:	465a      	mov	r2, fp
 803348a:	4631      	mov	r1, r6
 803348c:	4628      	mov	r0, r5
 803348e:	47b8      	blx	r7
 8033490:	3001      	adds	r0, #1
 8033492:	f43f aeae 	beq.w	80331f2 <_printf_float+0xb6>
 8033496:	f108 0801 	add.w	r8, r8, #1
 803349a:	e7ec      	b.n	8033476 <_printf_float+0x33a>
 803349c:	4642      	mov	r2, r8
 803349e:	4631      	mov	r1, r6
 80334a0:	4628      	mov	r0, r5
 80334a2:	47b8      	blx	r7
 80334a4:	3001      	adds	r0, #1
 80334a6:	d1c2      	bne.n	803342e <_printf_float+0x2f2>
 80334a8:	e6a3      	b.n	80331f2 <_printf_float+0xb6>
 80334aa:	2301      	movs	r3, #1
 80334ac:	4631      	mov	r1, r6
 80334ae:	4628      	mov	r0, r5
 80334b0:	9206      	str	r2, [sp, #24]
 80334b2:	47b8      	blx	r7
 80334b4:	3001      	adds	r0, #1
 80334b6:	f43f ae9c 	beq.w	80331f2 <_printf_float+0xb6>
 80334ba:	9a06      	ldr	r2, [sp, #24]
 80334bc:	f10b 0b01 	add.w	fp, fp, #1
 80334c0:	e7bb      	b.n	803343a <_printf_float+0x2fe>
 80334c2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80334c6:	4631      	mov	r1, r6
 80334c8:	4628      	mov	r0, r5
 80334ca:	47b8      	blx	r7
 80334cc:	3001      	adds	r0, #1
 80334ce:	d1c0      	bne.n	8033452 <_printf_float+0x316>
 80334d0:	e68f      	b.n	80331f2 <_printf_float+0xb6>
 80334d2:	9a06      	ldr	r2, [sp, #24]
 80334d4:	464b      	mov	r3, r9
 80334d6:	4442      	add	r2, r8
 80334d8:	4631      	mov	r1, r6
 80334da:	4628      	mov	r0, r5
 80334dc:	47b8      	blx	r7
 80334de:	3001      	adds	r0, #1
 80334e0:	d1c3      	bne.n	803346a <_printf_float+0x32e>
 80334e2:	e686      	b.n	80331f2 <_printf_float+0xb6>
 80334e4:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80334e8:	f1ba 0f01 	cmp.w	sl, #1
 80334ec:	dc01      	bgt.n	80334f2 <_printf_float+0x3b6>
 80334ee:	07db      	lsls	r3, r3, #31
 80334f0:	d536      	bpl.n	8033560 <_printf_float+0x424>
 80334f2:	2301      	movs	r3, #1
 80334f4:	4642      	mov	r2, r8
 80334f6:	4631      	mov	r1, r6
 80334f8:	4628      	mov	r0, r5
 80334fa:	47b8      	blx	r7
 80334fc:	3001      	adds	r0, #1
 80334fe:	f43f ae78 	beq.w	80331f2 <_printf_float+0xb6>
 8033502:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8033506:	4631      	mov	r1, r6
 8033508:	4628      	mov	r0, r5
 803350a:	47b8      	blx	r7
 803350c:	3001      	adds	r0, #1
 803350e:	f43f ae70 	beq.w	80331f2 <_printf_float+0xb6>
 8033512:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8033516:	2200      	movs	r2, #0
 8033518:	2300      	movs	r3, #0
 803351a:	f10a 3aff 	add.w	sl, sl, #4294967295
 803351e:	f7dd fa0b 	bl	8010938 <__aeabi_dcmpeq>
 8033522:	b9c0      	cbnz	r0, 8033556 <_printf_float+0x41a>
 8033524:	4653      	mov	r3, sl
 8033526:	f108 0201 	add.w	r2, r8, #1
 803352a:	4631      	mov	r1, r6
 803352c:	4628      	mov	r0, r5
 803352e:	47b8      	blx	r7
 8033530:	3001      	adds	r0, #1
 8033532:	d10c      	bne.n	803354e <_printf_float+0x412>
 8033534:	e65d      	b.n	80331f2 <_printf_float+0xb6>
 8033536:	2301      	movs	r3, #1
 8033538:	465a      	mov	r2, fp
 803353a:	4631      	mov	r1, r6
 803353c:	4628      	mov	r0, r5
 803353e:	47b8      	blx	r7
 8033540:	3001      	adds	r0, #1
 8033542:	f43f ae56 	beq.w	80331f2 <_printf_float+0xb6>
 8033546:	f108 0801 	add.w	r8, r8, #1
 803354a:	45d0      	cmp	r8, sl
 803354c:	dbf3      	blt.n	8033536 <_printf_float+0x3fa>
 803354e:	464b      	mov	r3, r9
 8033550:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8033554:	e6df      	b.n	8033316 <_printf_float+0x1da>
 8033556:	f04f 0800 	mov.w	r8, #0
 803355a:	f104 0b1a 	add.w	fp, r4, #26
 803355e:	e7f4      	b.n	803354a <_printf_float+0x40e>
 8033560:	2301      	movs	r3, #1
 8033562:	4642      	mov	r2, r8
 8033564:	e7e1      	b.n	803352a <_printf_float+0x3ee>
 8033566:	2301      	movs	r3, #1
 8033568:	464a      	mov	r2, r9
 803356a:	4631      	mov	r1, r6
 803356c:	4628      	mov	r0, r5
 803356e:	47b8      	blx	r7
 8033570:	3001      	adds	r0, #1
 8033572:	f43f ae3e 	beq.w	80331f2 <_printf_float+0xb6>
 8033576:	f108 0801 	add.w	r8, r8, #1
 803357a:	68e3      	ldr	r3, [r4, #12]
 803357c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 803357e:	1a5b      	subs	r3, r3, r1
 8033580:	4543      	cmp	r3, r8
 8033582:	dcf0      	bgt.n	8033566 <_printf_float+0x42a>
 8033584:	e6fc      	b.n	8033380 <_printf_float+0x244>
 8033586:	f04f 0800 	mov.w	r8, #0
 803358a:	f104 0919 	add.w	r9, r4, #25
 803358e:	e7f4      	b.n	803357a <_printf_float+0x43e>

08033590 <_printf_common>:
 8033590:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8033594:	4616      	mov	r6, r2
 8033596:	4698      	mov	r8, r3
 8033598:	688a      	ldr	r2, [r1, #8]
 803359a:	690b      	ldr	r3, [r1, #16]
 803359c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80335a0:	4293      	cmp	r3, r2
 80335a2:	bfb8      	it	lt
 80335a4:	4613      	movlt	r3, r2
 80335a6:	6033      	str	r3, [r6, #0]
 80335a8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80335ac:	4607      	mov	r7, r0
 80335ae:	460c      	mov	r4, r1
 80335b0:	b10a      	cbz	r2, 80335b6 <_printf_common+0x26>
 80335b2:	3301      	adds	r3, #1
 80335b4:	6033      	str	r3, [r6, #0]
 80335b6:	6823      	ldr	r3, [r4, #0]
 80335b8:	0699      	lsls	r1, r3, #26
 80335ba:	bf42      	ittt	mi
 80335bc:	6833      	ldrmi	r3, [r6, #0]
 80335be:	3302      	addmi	r3, #2
 80335c0:	6033      	strmi	r3, [r6, #0]
 80335c2:	6825      	ldr	r5, [r4, #0]
 80335c4:	f015 0506 	ands.w	r5, r5, #6
 80335c8:	d106      	bne.n	80335d8 <_printf_common+0x48>
 80335ca:	f104 0a19 	add.w	sl, r4, #25
 80335ce:	68e3      	ldr	r3, [r4, #12]
 80335d0:	6832      	ldr	r2, [r6, #0]
 80335d2:	1a9b      	subs	r3, r3, r2
 80335d4:	42ab      	cmp	r3, r5
 80335d6:	dc26      	bgt.n	8033626 <_printf_common+0x96>
 80335d8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80335dc:	6822      	ldr	r2, [r4, #0]
 80335de:	3b00      	subs	r3, #0
 80335e0:	bf18      	it	ne
 80335e2:	2301      	movne	r3, #1
 80335e4:	0692      	lsls	r2, r2, #26
 80335e6:	d42b      	bmi.n	8033640 <_printf_common+0xb0>
 80335e8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80335ec:	4641      	mov	r1, r8
 80335ee:	4638      	mov	r0, r7
 80335f0:	47c8      	blx	r9
 80335f2:	3001      	adds	r0, #1
 80335f4:	d01e      	beq.n	8033634 <_printf_common+0xa4>
 80335f6:	6823      	ldr	r3, [r4, #0]
 80335f8:	6922      	ldr	r2, [r4, #16]
 80335fa:	f003 0306 	and.w	r3, r3, #6
 80335fe:	2b04      	cmp	r3, #4
 8033600:	bf02      	ittt	eq
 8033602:	68e5      	ldreq	r5, [r4, #12]
 8033604:	6833      	ldreq	r3, [r6, #0]
 8033606:	1aed      	subeq	r5, r5, r3
 8033608:	68a3      	ldr	r3, [r4, #8]
 803360a:	bf0c      	ite	eq
 803360c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8033610:	2500      	movne	r5, #0
 8033612:	4293      	cmp	r3, r2
 8033614:	bfc4      	itt	gt
 8033616:	1a9b      	subgt	r3, r3, r2
 8033618:	18ed      	addgt	r5, r5, r3
 803361a:	2600      	movs	r6, #0
 803361c:	341a      	adds	r4, #26
 803361e:	42b5      	cmp	r5, r6
 8033620:	d11a      	bne.n	8033658 <_printf_common+0xc8>
 8033622:	2000      	movs	r0, #0
 8033624:	e008      	b.n	8033638 <_printf_common+0xa8>
 8033626:	2301      	movs	r3, #1
 8033628:	4652      	mov	r2, sl
 803362a:	4641      	mov	r1, r8
 803362c:	4638      	mov	r0, r7
 803362e:	47c8      	blx	r9
 8033630:	3001      	adds	r0, #1
 8033632:	d103      	bne.n	803363c <_printf_common+0xac>
 8033634:	f04f 30ff 	mov.w	r0, #4294967295
 8033638:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 803363c:	3501      	adds	r5, #1
 803363e:	e7c6      	b.n	80335ce <_printf_common+0x3e>
 8033640:	18e1      	adds	r1, r4, r3
 8033642:	1c5a      	adds	r2, r3, #1
 8033644:	2030      	movs	r0, #48	@ 0x30
 8033646:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 803364a:	4422      	add	r2, r4
 803364c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8033650:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8033654:	3302      	adds	r3, #2
 8033656:	e7c7      	b.n	80335e8 <_printf_common+0x58>
 8033658:	2301      	movs	r3, #1
 803365a:	4622      	mov	r2, r4
 803365c:	4641      	mov	r1, r8
 803365e:	4638      	mov	r0, r7
 8033660:	47c8      	blx	r9
 8033662:	3001      	adds	r0, #1
 8033664:	d0e6      	beq.n	8033634 <_printf_common+0xa4>
 8033666:	3601      	adds	r6, #1
 8033668:	e7d9      	b.n	803361e <_printf_common+0x8e>
	...

0803366c <_printf_i>:
 803366c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8033670:	7e0f      	ldrb	r7, [r1, #24]
 8033672:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8033674:	2f78      	cmp	r7, #120	@ 0x78
 8033676:	4691      	mov	r9, r2
 8033678:	4680      	mov	r8, r0
 803367a:	460c      	mov	r4, r1
 803367c:	469a      	mov	sl, r3
 803367e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8033682:	d807      	bhi.n	8033694 <_printf_i+0x28>
 8033684:	2f62      	cmp	r7, #98	@ 0x62
 8033686:	d80a      	bhi.n	803369e <_printf_i+0x32>
 8033688:	2f00      	cmp	r7, #0
 803368a:	f000 80d1 	beq.w	8033830 <_printf_i+0x1c4>
 803368e:	2f58      	cmp	r7, #88	@ 0x58
 8033690:	f000 80b8 	beq.w	8033804 <_printf_i+0x198>
 8033694:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8033698:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 803369c:	e03a      	b.n	8033714 <_printf_i+0xa8>
 803369e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80336a2:	2b15      	cmp	r3, #21
 80336a4:	d8f6      	bhi.n	8033694 <_printf_i+0x28>
 80336a6:	a101      	add	r1, pc, #4	@ (adr r1, 80336ac <_printf_i+0x40>)
 80336a8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80336ac:	08033705 	.word	0x08033705
 80336b0:	08033719 	.word	0x08033719
 80336b4:	08033695 	.word	0x08033695
 80336b8:	08033695 	.word	0x08033695
 80336bc:	08033695 	.word	0x08033695
 80336c0:	08033695 	.word	0x08033695
 80336c4:	08033719 	.word	0x08033719
 80336c8:	08033695 	.word	0x08033695
 80336cc:	08033695 	.word	0x08033695
 80336d0:	08033695 	.word	0x08033695
 80336d4:	08033695 	.word	0x08033695
 80336d8:	08033817 	.word	0x08033817
 80336dc:	08033743 	.word	0x08033743
 80336e0:	080337d1 	.word	0x080337d1
 80336e4:	08033695 	.word	0x08033695
 80336e8:	08033695 	.word	0x08033695
 80336ec:	08033839 	.word	0x08033839
 80336f0:	08033695 	.word	0x08033695
 80336f4:	08033743 	.word	0x08033743
 80336f8:	08033695 	.word	0x08033695
 80336fc:	08033695 	.word	0x08033695
 8033700:	080337d9 	.word	0x080337d9
 8033704:	6833      	ldr	r3, [r6, #0]
 8033706:	1d1a      	adds	r2, r3, #4
 8033708:	681b      	ldr	r3, [r3, #0]
 803370a:	6032      	str	r2, [r6, #0]
 803370c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8033710:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8033714:	2301      	movs	r3, #1
 8033716:	e09c      	b.n	8033852 <_printf_i+0x1e6>
 8033718:	6833      	ldr	r3, [r6, #0]
 803371a:	6820      	ldr	r0, [r4, #0]
 803371c:	1d19      	adds	r1, r3, #4
 803371e:	6031      	str	r1, [r6, #0]
 8033720:	0606      	lsls	r6, r0, #24
 8033722:	d501      	bpl.n	8033728 <_printf_i+0xbc>
 8033724:	681d      	ldr	r5, [r3, #0]
 8033726:	e003      	b.n	8033730 <_printf_i+0xc4>
 8033728:	0645      	lsls	r5, r0, #25
 803372a:	d5fb      	bpl.n	8033724 <_printf_i+0xb8>
 803372c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8033730:	2d00      	cmp	r5, #0
 8033732:	da03      	bge.n	803373c <_printf_i+0xd0>
 8033734:	232d      	movs	r3, #45	@ 0x2d
 8033736:	426d      	negs	r5, r5
 8033738:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 803373c:	4858      	ldr	r0, [pc, #352]	@ (80338a0 <_printf_i+0x234>)
 803373e:	230a      	movs	r3, #10
 8033740:	e011      	b.n	8033766 <_printf_i+0xfa>
 8033742:	6821      	ldr	r1, [r4, #0]
 8033744:	6833      	ldr	r3, [r6, #0]
 8033746:	0608      	lsls	r0, r1, #24
 8033748:	f853 5b04 	ldr.w	r5, [r3], #4
 803374c:	d402      	bmi.n	8033754 <_printf_i+0xe8>
 803374e:	0649      	lsls	r1, r1, #25
 8033750:	bf48      	it	mi
 8033752:	b2ad      	uxthmi	r5, r5
 8033754:	2f6f      	cmp	r7, #111	@ 0x6f
 8033756:	4852      	ldr	r0, [pc, #328]	@ (80338a0 <_printf_i+0x234>)
 8033758:	6033      	str	r3, [r6, #0]
 803375a:	bf14      	ite	ne
 803375c:	230a      	movne	r3, #10
 803375e:	2308      	moveq	r3, #8
 8033760:	2100      	movs	r1, #0
 8033762:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8033766:	6866      	ldr	r6, [r4, #4]
 8033768:	60a6      	str	r6, [r4, #8]
 803376a:	2e00      	cmp	r6, #0
 803376c:	db05      	blt.n	803377a <_printf_i+0x10e>
 803376e:	6821      	ldr	r1, [r4, #0]
 8033770:	432e      	orrs	r6, r5
 8033772:	f021 0104 	bic.w	r1, r1, #4
 8033776:	6021      	str	r1, [r4, #0]
 8033778:	d04b      	beq.n	8033812 <_printf_i+0x1a6>
 803377a:	4616      	mov	r6, r2
 803377c:	fbb5 f1f3 	udiv	r1, r5, r3
 8033780:	fb03 5711 	mls	r7, r3, r1, r5
 8033784:	5dc7      	ldrb	r7, [r0, r7]
 8033786:	f806 7d01 	strb.w	r7, [r6, #-1]!
 803378a:	462f      	mov	r7, r5
 803378c:	42bb      	cmp	r3, r7
 803378e:	460d      	mov	r5, r1
 8033790:	d9f4      	bls.n	803377c <_printf_i+0x110>
 8033792:	2b08      	cmp	r3, #8
 8033794:	d10b      	bne.n	80337ae <_printf_i+0x142>
 8033796:	6823      	ldr	r3, [r4, #0]
 8033798:	07df      	lsls	r7, r3, #31
 803379a:	d508      	bpl.n	80337ae <_printf_i+0x142>
 803379c:	6923      	ldr	r3, [r4, #16]
 803379e:	6861      	ldr	r1, [r4, #4]
 80337a0:	4299      	cmp	r1, r3
 80337a2:	bfde      	ittt	le
 80337a4:	2330      	movle	r3, #48	@ 0x30
 80337a6:	f806 3c01 	strble.w	r3, [r6, #-1]
 80337aa:	f106 36ff 	addle.w	r6, r6, #4294967295
 80337ae:	1b92      	subs	r2, r2, r6
 80337b0:	6122      	str	r2, [r4, #16]
 80337b2:	f8cd a000 	str.w	sl, [sp]
 80337b6:	464b      	mov	r3, r9
 80337b8:	aa03      	add	r2, sp, #12
 80337ba:	4621      	mov	r1, r4
 80337bc:	4640      	mov	r0, r8
 80337be:	f7ff fee7 	bl	8033590 <_printf_common>
 80337c2:	3001      	adds	r0, #1
 80337c4:	d14a      	bne.n	803385c <_printf_i+0x1f0>
 80337c6:	f04f 30ff 	mov.w	r0, #4294967295
 80337ca:	b004      	add	sp, #16
 80337cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80337d0:	6823      	ldr	r3, [r4, #0]
 80337d2:	f043 0320 	orr.w	r3, r3, #32
 80337d6:	6023      	str	r3, [r4, #0]
 80337d8:	4832      	ldr	r0, [pc, #200]	@ (80338a4 <_printf_i+0x238>)
 80337da:	2778      	movs	r7, #120	@ 0x78
 80337dc:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80337e0:	6823      	ldr	r3, [r4, #0]
 80337e2:	6831      	ldr	r1, [r6, #0]
 80337e4:	061f      	lsls	r7, r3, #24
 80337e6:	f851 5b04 	ldr.w	r5, [r1], #4
 80337ea:	d402      	bmi.n	80337f2 <_printf_i+0x186>
 80337ec:	065f      	lsls	r7, r3, #25
 80337ee:	bf48      	it	mi
 80337f0:	b2ad      	uxthmi	r5, r5
 80337f2:	6031      	str	r1, [r6, #0]
 80337f4:	07d9      	lsls	r1, r3, #31
 80337f6:	bf44      	itt	mi
 80337f8:	f043 0320 	orrmi.w	r3, r3, #32
 80337fc:	6023      	strmi	r3, [r4, #0]
 80337fe:	b11d      	cbz	r5, 8033808 <_printf_i+0x19c>
 8033800:	2310      	movs	r3, #16
 8033802:	e7ad      	b.n	8033760 <_printf_i+0xf4>
 8033804:	4826      	ldr	r0, [pc, #152]	@ (80338a0 <_printf_i+0x234>)
 8033806:	e7e9      	b.n	80337dc <_printf_i+0x170>
 8033808:	6823      	ldr	r3, [r4, #0]
 803380a:	f023 0320 	bic.w	r3, r3, #32
 803380e:	6023      	str	r3, [r4, #0]
 8033810:	e7f6      	b.n	8033800 <_printf_i+0x194>
 8033812:	4616      	mov	r6, r2
 8033814:	e7bd      	b.n	8033792 <_printf_i+0x126>
 8033816:	6833      	ldr	r3, [r6, #0]
 8033818:	6825      	ldr	r5, [r4, #0]
 803381a:	6961      	ldr	r1, [r4, #20]
 803381c:	1d18      	adds	r0, r3, #4
 803381e:	6030      	str	r0, [r6, #0]
 8033820:	062e      	lsls	r6, r5, #24
 8033822:	681b      	ldr	r3, [r3, #0]
 8033824:	d501      	bpl.n	803382a <_printf_i+0x1be>
 8033826:	6019      	str	r1, [r3, #0]
 8033828:	e002      	b.n	8033830 <_printf_i+0x1c4>
 803382a:	0668      	lsls	r0, r5, #25
 803382c:	d5fb      	bpl.n	8033826 <_printf_i+0x1ba>
 803382e:	8019      	strh	r1, [r3, #0]
 8033830:	2300      	movs	r3, #0
 8033832:	6123      	str	r3, [r4, #16]
 8033834:	4616      	mov	r6, r2
 8033836:	e7bc      	b.n	80337b2 <_printf_i+0x146>
 8033838:	6833      	ldr	r3, [r6, #0]
 803383a:	1d1a      	adds	r2, r3, #4
 803383c:	6032      	str	r2, [r6, #0]
 803383e:	681e      	ldr	r6, [r3, #0]
 8033840:	6862      	ldr	r2, [r4, #4]
 8033842:	2100      	movs	r1, #0
 8033844:	4630      	mov	r0, r6
 8033846:	f7dc fbfb 	bl	8010040 <memchr>
 803384a:	b108      	cbz	r0, 8033850 <_printf_i+0x1e4>
 803384c:	1b80      	subs	r0, r0, r6
 803384e:	6060      	str	r0, [r4, #4]
 8033850:	6863      	ldr	r3, [r4, #4]
 8033852:	6123      	str	r3, [r4, #16]
 8033854:	2300      	movs	r3, #0
 8033856:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 803385a:	e7aa      	b.n	80337b2 <_printf_i+0x146>
 803385c:	6923      	ldr	r3, [r4, #16]
 803385e:	4632      	mov	r2, r6
 8033860:	4649      	mov	r1, r9
 8033862:	4640      	mov	r0, r8
 8033864:	47d0      	blx	sl
 8033866:	3001      	adds	r0, #1
 8033868:	d0ad      	beq.n	80337c6 <_printf_i+0x15a>
 803386a:	6823      	ldr	r3, [r4, #0]
 803386c:	079b      	lsls	r3, r3, #30
 803386e:	d413      	bmi.n	8033898 <_printf_i+0x22c>
 8033870:	68e0      	ldr	r0, [r4, #12]
 8033872:	9b03      	ldr	r3, [sp, #12]
 8033874:	4298      	cmp	r0, r3
 8033876:	bfb8      	it	lt
 8033878:	4618      	movlt	r0, r3
 803387a:	e7a6      	b.n	80337ca <_printf_i+0x15e>
 803387c:	2301      	movs	r3, #1
 803387e:	4632      	mov	r2, r6
 8033880:	4649      	mov	r1, r9
 8033882:	4640      	mov	r0, r8
 8033884:	47d0      	blx	sl
 8033886:	3001      	adds	r0, #1
 8033888:	d09d      	beq.n	80337c6 <_printf_i+0x15a>
 803388a:	3501      	adds	r5, #1
 803388c:	68e3      	ldr	r3, [r4, #12]
 803388e:	9903      	ldr	r1, [sp, #12]
 8033890:	1a5b      	subs	r3, r3, r1
 8033892:	42ab      	cmp	r3, r5
 8033894:	dcf2      	bgt.n	803387c <_printf_i+0x210>
 8033896:	e7eb      	b.n	8033870 <_printf_i+0x204>
 8033898:	2500      	movs	r5, #0
 803389a:	f104 0619 	add.w	r6, r4, #25
 803389e:	e7f5      	b.n	803388c <_printf_i+0x220>
 80338a0:	0803b982 	.word	0x0803b982
 80338a4:	0803b993 	.word	0x0803b993

080338a8 <std>:
 80338a8:	2300      	movs	r3, #0
 80338aa:	b510      	push	{r4, lr}
 80338ac:	4604      	mov	r4, r0
 80338ae:	e9c0 3300 	strd	r3, r3, [r0]
 80338b2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80338b6:	6083      	str	r3, [r0, #8]
 80338b8:	8181      	strh	r1, [r0, #12]
 80338ba:	6643      	str	r3, [r0, #100]	@ 0x64
 80338bc:	81c2      	strh	r2, [r0, #14]
 80338be:	6183      	str	r3, [r0, #24]
 80338c0:	4619      	mov	r1, r3
 80338c2:	2208      	movs	r2, #8
 80338c4:	305c      	adds	r0, #92	@ 0x5c
 80338c6:	f000 fa49 	bl	8033d5c <memset>
 80338ca:	4b0d      	ldr	r3, [pc, #52]	@ (8033900 <std+0x58>)
 80338cc:	6263      	str	r3, [r4, #36]	@ 0x24
 80338ce:	4b0d      	ldr	r3, [pc, #52]	@ (8033904 <std+0x5c>)
 80338d0:	62a3      	str	r3, [r4, #40]	@ 0x28
 80338d2:	4b0d      	ldr	r3, [pc, #52]	@ (8033908 <std+0x60>)
 80338d4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80338d6:	4b0d      	ldr	r3, [pc, #52]	@ (803390c <std+0x64>)
 80338d8:	6323      	str	r3, [r4, #48]	@ 0x30
 80338da:	4b0d      	ldr	r3, [pc, #52]	@ (8033910 <std+0x68>)
 80338dc:	6224      	str	r4, [r4, #32]
 80338de:	429c      	cmp	r4, r3
 80338e0:	d006      	beq.n	80338f0 <std+0x48>
 80338e2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80338e6:	4294      	cmp	r4, r2
 80338e8:	d002      	beq.n	80338f0 <std+0x48>
 80338ea:	33d0      	adds	r3, #208	@ 0xd0
 80338ec:	429c      	cmp	r4, r3
 80338ee:	d105      	bne.n	80338fc <std+0x54>
 80338f0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80338f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80338f8:	f000 babc 	b.w	8033e74 <__retarget_lock_init_recursive>
 80338fc:	bd10      	pop	{r4, pc}
 80338fe:	bf00      	nop
 8033900:	08033b79 	.word	0x08033b79
 8033904:	08033b9b 	.word	0x08033b9b
 8033908:	08033bd3 	.word	0x08033bd3
 803390c:	08033bf7 	.word	0x08033bf7
 8033910:	200056b0 	.word	0x200056b0

08033914 <stdio_exit_handler>:
 8033914:	4a02      	ldr	r2, [pc, #8]	@ (8033920 <stdio_exit_handler+0xc>)
 8033916:	4903      	ldr	r1, [pc, #12]	@ (8033924 <stdio_exit_handler+0x10>)
 8033918:	4803      	ldr	r0, [pc, #12]	@ (8033928 <stdio_exit_handler+0x14>)
 803391a:	f000 b869 	b.w	80339f0 <_fwalk_sglue>
 803391e:	bf00      	nop
 8033920:	2000119c 	.word	0x2000119c
 8033924:	0803591d 	.word	0x0803591d
 8033928:	200011ac 	.word	0x200011ac

0803392c <cleanup_stdio>:
 803392c:	6841      	ldr	r1, [r0, #4]
 803392e:	4b0c      	ldr	r3, [pc, #48]	@ (8033960 <cleanup_stdio+0x34>)
 8033930:	4299      	cmp	r1, r3
 8033932:	b510      	push	{r4, lr}
 8033934:	4604      	mov	r4, r0
 8033936:	d001      	beq.n	803393c <cleanup_stdio+0x10>
 8033938:	f001 fff0 	bl	803591c <_fflush_r>
 803393c:	68a1      	ldr	r1, [r4, #8]
 803393e:	4b09      	ldr	r3, [pc, #36]	@ (8033964 <cleanup_stdio+0x38>)
 8033940:	4299      	cmp	r1, r3
 8033942:	d002      	beq.n	803394a <cleanup_stdio+0x1e>
 8033944:	4620      	mov	r0, r4
 8033946:	f001 ffe9 	bl	803591c <_fflush_r>
 803394a:	68e1      	ldr	r1, [r4, #12]
 803394c:	4b06      	ldr	r3, [pc, #24]	@ (8033968 <cleanup_stdio+0x3c>)
 803394e:	4299      	cmp	r1, r3
 8033950:	d004      	beq.n	803395c <cleanup_stdio+0x30>
 8033952:	4620      	mov	r0, r4
 8033954:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8033958:	f001 bfe0 	b.w	803591c <_fflush_r>
 803395c:	bd10      	pop	{r4, pc}
 803395e:	bf00      	nop
 8033960:	200056b0 	.word	0x200056b0
 8033964:	20005718 	.word	0x20005718
 8033968:	20005780 	.word	0x20005780

0803396c <global_stdio_init.part.0>:
 803396c:	b510      	push	{r4, lr}
 803396e:	4b0b      	ldr	r3, [pc, #44]	@ (803399c <global_stdio_init.part.0+0x30>)
 8033970:	4c0b      	ldr	r4, [pc, #44]	@ (80339a0 <global_stdio_init.part.0+0x34>)
 8033972:	4a0c      	ldr	r2, [pc, #48]	@ (80339a4 <global_stdio_init.part.0+0x38>)
 8033974:	601a      	str	r2, [r3, #0]
 8033976:	4620      	mov	r0, r4
 8033978:	2200      	movs	r2, #0
 803397a:	2104      	movs	r1, #4
 803397c:	f7ff ff94 	bl	80338a8 <std>
 8033980:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8033984:	2201      	movs	r2, #1
 8033986:	2109      	movs	r1, #9
 8033988:	f7ff ff8e 	bl	80338a8 <std>
 803398c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8033990:	2202      	movs	r2, #2
 8033992:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8033996:	2112      	movs	r1, #18
 8033998:	f7ff bf86 	b.w	80338a8 <std>
 803399c:	200057e8 	.word	0x200057e8
 80339a0:	200056b0 	.word	0x200056b0
 80339a4:	08033915 	.word	0x08033915

080339a8 <__sfp_lock_acquire>:
 80339a8:	4801      	ldr	r0, [pc, #4]	@ (80339b0 <__sfp_lock_acquire+0x8>)
 80339aa:	f000 ba64 	b.w	8033e76 <__retarget_lock_acquire_recursive>
 80339ae:	bf00      	nop
 80339b0:	200057f1 	.word	0x200057f1

080339b4 <__sfp_lock_release>:
 80339b4:	4801      	ldr	r0, [pc, #4]	@ (80339bc <__sfp_lock_release+0x8>)
 80339b6:	f000 ba5f 	b.w	8033e78 <__retarget_lock_release_recursive>
 80339ba:	bf00      	nop
 80339bc:	200057f1 	.word	0x200057f1

080339c0 <__sinit>:
 80339c0:	b510      	push	{r4, lr}
 80339c2:	4604      	mov	r4, r0
 80339c4:	f7ff fff0 	bl	80339a8 <__sfp_lock_acquire>
 80339c8:	6a23      	ldr	r3, [r4, #32]
 80339ca:	b11b      	cbz	r3, 80339d4 <__sinit+0x14>
 80339cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80339d0:	f7ff bff0 	b.w	80339b4 <__sfp_lock_release>
 80339d4:	4b04      	ldr	r3, [pc, #16]	@ (80339e8 <__sinit+0x28>)
 80339d6:	6223      	str	r3, [r4, #32]
 80339d8:	4b04      	ldr	r3, [pc, #16]	@ (80339ec <__sinit+0x2c>)
 80339da:	681b      	ldr	r3, [r3, #0]
 80339dc:	2b00      	cmp	r3, #0
 80339de:	d1f5      	bne.n	80339cc <__sinit+0xc>
 80339e0:	f7ff ffc4 	bl	803396c <global_stdio_init.part.0>
 80339e4:	e7f2      	b.n	80339cc <__sinit+0xc>
 80339e6:	bf00      	nop
 80339e8:	0803392d 	.word	0x0803392d
 80339ec:	200057e8 	.word	0x200057e8

080339f0 <_fwalk_sglue>:
 80339f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80339f4:	4607      	mov	r7, r0
 80339f6:	4688      	mov	r8, r1
 80339f8:	4614      	mov	r4, r2
 80339fa:	2600      	movs	r6, #0
 80339fc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8033a00:	f1b9 0901 	subs.w	r9, r9, #1
 8033a04:	d505      	bpl.n	8033a12 <_fwalk_sglue+0x22>
 8033a06:	6824      	ldr	r4, [r4, #0]
 8033a08:	2c00      	cmp	r4, #0
 8033a0a:	d1f7      	bne.n	80339fc <_fwalk_sglue+0xc>
 8033a0c:	4630      	mov	r0, r6
 8033a0e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8033a12:	89ab      	ldrh	r3, [r5, #12]
 8033a14:	2b01      	cmp	r3, #1
 8033a16:	d907      	bls.n	8033a28 <_fwalk_sglue+0x38>
 8033a18:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8033a1c:	3301      	adds	r3, #1
 8033a1e:	d003      	beq.n	8033a28 <_fwalk_sglue+0x38>
 8033a20:	4629      	mov	r1, r5
 8033a22:	4638      	mov	r0, r7
 8033a24:	47c0      	blx	r8
 8033a26:	4306      	orrs	r6, r0
 8033a28:	3568      	adds	r5, #104	@ 0x68
 8033a2a:	e7e9      	b.n	8033a00 <_fwalk_sglue+0x10>

08033a2c <iprintf>:
 8033a2c:	b40f      	push	{r0, r1, r2, r3}
 8033a2e:	b507      	push	{r0, r1, r2, lr}
 8033a30:	4906      	ldr	r1, [pc, #24]	@ (8033a4c <iprintf+0x20>)
 8033a32:	ab04      	add	r3, sp, #16
 8033a34:	6808      	ldr	r0, [r1, #0]
 8033a36:	f853 2b04 	ldr.w	r2, [r3], #4
 8033a3a:	6881      	ldr	r1, [r0, #8]
 8033a3c:	9301      	str	r3, [sp, #4]
 8033a3e:	f001 fdd1 	bl	80355e4 <_vfiprintf_r>
 8033a42:	b003      	add	sp, #12
 8033a44:	f85d eb04 	ldr.w	lr, [sp], #4
 8033a48:	b004      	add	sp, #16
 8033a4a:	4770      	bx	lr
 8033a4c:	200011a8 	.word	0x200011a8

08033a50 <_puts_r>:
 8033a50:	6a03      	ldr	r3, [r0, #32]
 8033a52:	b570      	push	{r4, r5, r6, lr}
 8033a54:	6884      	ldr	r4, [r0, #8]
 8033a56:	4605      	mov	r5, r0
 8033a58:	460e      	mov	r6, r1
 8033a5a:	b90b      	cbnz	r3, 8033a60 <_puts_r+0x10>
 8033a5c:	f7ff ffb0 	bl	80339c0 <__sinit>
 8033a60:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8033a62:	07db      	lsls	r3, r3, #31
 8033a64:	d405      	bmi.n	8033a72 <_puts_r+0x22>
 8033a66:	89a3      	ldrh	r3, [r4, #12]
 8033a68:	0598      	lsls	r0, r3, #22
 8033a6a:	d402      	bmi.n	8033a72 <_puts_r+0x22>
 8033a6c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8033a6e:	f000 fa02 	bl	8033e76 <__retarget_lock_acquire_recursive>
 8033a72:	89a3      	ldrh	r3, [r4, #12]
 8033a74:	0719      	lsls	r1, r3, #28
 8033a76:	d502      	bpl.n	8033a7e <_puts_r+0x2e>
 8033a78:	6923      	ldr	r3, [r4, #16]
 8033a7a:	2b00      	cmp	r3, #0
 8033a7c:	d135      	bne.n	8033aea <_puts_r+0x9a>
 8033a7e:	4621      	mov	r1, r4
 8033a80:	4628      	mov	r0, r5
 8033a82:	f000 f8fb 	bl	8033c7c <__swsetup_r>
 8033a86:	b380      	cbz	r0, 8033aea <_puts_r+0x9a>
 8033a88:	f04f 35ff 	mov.w	r5, #4294967295
 8033a8c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8033a8e:	07da      	lsls	r2, r3, #31
 8033a90:	d405      	bmi.n	8033a9e <_puts_r+0x4e>
 8033a92:	89a3      	ldrh	r3, [r4, #12]
 8033a94:	059b      	lsls	r3, r3, #22
 8033a96:	d402      	bmi.n	8033a9e <_puts_r+0x4e>
 8033a98:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8033a9a:	f000 f9ed 	bl	8033e78 <__retarget_lock_release_recursive>
 8033a9e:	4628      	mov	r0, r5
 8033aa0:	bd70      	pop	{r4, r5, r6, pc}
 8033aa2:	2b00      	cmp	r3, #0
 8033aa4:	da04      	bge.n	8033ab0 <_puts_r+0x60>
 8033aa6:	69a2      	ldr	r2, [r4, #24]
 8033aa8:	429a      	cmp	r2, r3
 8033aaa:	dc17      	bgt.n	8033adc <_puts_r+0x8c>
 8033aac:	290a      	cmp	r1, #10
 8033aae:	d015      	beq.n	8033adc <_puts_r+0x8c>
 8033ab0:	6823      	ldr	r3, [r4, #0]
 8033ab2:	1c5a      	adds	r2, r3, #1
 8033ab4:	6022      	str	r2, [r4, #0]
 8033ab6:	7019      	strb	r1, [r3, #0]
 8033ab8:	68a3      	ldr	r3, [r4, #8]
 8033aba:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8033abe:	3b01      	subs	r3, #1
 8033ac0:	60a3      	str	r3, [r4, #8]
 8033ac2:	2900      	cmp	r1, #0
 8033ac4:	d1ed      	bne.n	8033aa2 <_puts_r+0x52>
 8033ac6:	2b00      	cmp	r3, #0
 8033ac8:	da11      	bge.n	8033aee <_puts_r+0x9e>
 8033aca:	4622      	mov	r2, r4
 8033acc:	210a      	movs	r1, #10
 8033ace:	4628      	mov	r0, r5
 8033ad0:	f000 f895 	bl	8033bfe <__swbuf_r>
 8033ad4:	3001      	adds	r0, #1
 8033ad6:	d0d7      	beq.n	8033a88 <_puts_r+0x38>
 8033ad8:	250a      	movs	r5, #10
 8033ada:	e7d7      	b.n	8033a8c <_puts_r+0x3c>
 8033adc:	4622      	mov	r2, r4
 8033ade:	4628      	mov	r0, r5
 8033ae0:	f000 f88d 	bl	8033bfe <__swbuf_r>
 8033ae4:	3001      	adds	r0, #1
 8033ae6:	d1e7      	bne.n	8033ab8 <_puts_r+0x68>
 8033ae8:	e7ce      	b.n	8033a88 <_puts_r+0x38>
 8033aea:	3e01      	subs	r6, #1
 8033aec:	e7e4      	b.n	8033ab8 <_puts_r+0x68>
 8033aee:	6823      	ldr	r3, [r4, #0]
 8033af0:	1c5a      	adds	r2, r3, #1
 8033af2:	6022      	str	r2, [r4, #0]
 8033af4:	220a      	movs	r2, #10
 8033af6:	701a      	strb	r2, [r3, #0]
 8033af8:	e7ee      	b.n	8033ad8 <_puts_r+0x88>
	...

08033afc <puts>:
 8033afc:	4b02      	ldr	r3, [pc, #8]	@ (8033b08 <puts+0xc>)
 8033afe:	4601      	mov	r1, r0
 8033b00:	6818      	ldr	r0, [r3, #0]
 8033b02:	f7ff bfa5 	b.w	8033a50 <_puts_r>
 8033b06:	bf00      	nop
 8033b08:	200011a8 	.word	0x200011a8

08033b0c <sniprintf>:
 8033b0c:	b40c      	push	{r2, r3}
 8033b0e:	b530      	push	{r4, r5, lr}
 8033b10:	4b18      	ldr	r3, [pc, #96]	@ (8033b74 <sniprintf+0x68>)
 8033b12:	1e0c      	subs	r4, r1, #0
 8033b14:	681d      	ldr	r5, [r3, #0]
 8033b16:	b09d      	sub	sp, #116	@ 0x74
 8033b18:	da08      	bge.n	8033b2c <sniprintf+0x20>
 8033b1a:	238b      	movs	r3, #139	@ 0x8b
 8033b1c:	602b      	str	r3, [r5, #0]
 8033b1e:	f04f 30ff 	mov.w	r0, #4294967295
 8033b22:	b01d      	add	sp, #116	@ 0x74
 8033b24:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8033b28:	b002      	add	sp, #8
 8033b2a:	4770      	bx	lr
 8033b2c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8033b30:	f8ad 3014 	strh.w	r3, [sp, #20]
 8033b34:	f04f 0300 	mov.w	r3, #0
 8033b38:	931b      	str	r3, [sp, #108]	@ 0x6c
 8033b3a:	bf14      	ite	ne
 8033b3c:	f104 33ff 	addne.w	r3, r4, #4294967295
 8033b40:	4623      	moveq	r3, r4
 8033b42:	9304      	str	r3, [sp, #16]
 8033b44:	9307      	str	r3, [sp, #28]
 8033b46:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8033b4a:	9002      	str	r0, [sp, #8]
 8033b4c:	9006      	str	r0, [sp, #24]
 8033b4e:	f8ad 3016 	strh.w	r3, [sp, #22]
 8033b52:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8033b54:	ab21      	add	r3, sp, #132	@ 0x84
 8033b56:	a902      	add	r1, sp, #8
 8033b58:	4628      	mov	r0, r5
 8033b5a:	9301      	str	r3, [sp, #4]
 8033b5c:	f001 fc1c 	bl	8035398 <_svfiprintf_r>
 8033b60:	1c43      	adds	r3, r0, #1
 8033b62:	bfbc      	itt	lt
 8033b64:	238b      	movlt	r3, #139	@ 0x8b
 8033b66:	602b      	strlt	r3, [r5, #0]
 8033b68:	2c00      	cmp	r4, #0
 8033b6a:	d0da      	beq.n	8033b22 <sniprintf+0x16>
 8033b6c:	9b02      	ldr	r3, [sp, #8]
 8033b6e:	2200      	movs	r2, #0
 8033b70:	701a      	strb	r2, [r3, #0]
 8033b72:	e7d6      	b.n	8033b22 <sniprintf+0x16>
 8033b74:	200011a8 	.word	0x200011a8

08033b78 <__sread>:
 8033b78:	b510      	push	{r4, lr}
 8033b7a:	460c      	mov	r4, r1
 8033b7c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8033b80:	f000 f91a 	bl	8033db8 <_read_r>
 8033b84:	2800      	cmp	r0, #0
 8033b86:	bfab      	itete	ge
 8033b88:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8033b8a:	89a3      	ldrhlt	r3, [r4, #12]
 8033b8c:	181b      	addge	r3, r3, r0
 8033b8e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8033b92:	bfac      	ite	ge
 8033b94:	6563      	strge	r3, [r4, #84]	@ 0x54
 8033b96:	81a3      	strhlt	r3, [r4, #12]
 8033b98:	bd10      	pop	{r4, pc}

08033b9a <__swrite>:
 8033b9a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8033b9e:	461f      	mov	r7, r3
 8033ba0:	898b      	ldrh	r3, [r1, #12]
 8033ba2:	05db      	lsls	r3, r3, #23
 8033ba4:	4605      	mov	r5, r0
 8033ba6:	460c      	mov	r4, r1
 8033ba8:	4616      	mov	r6, r2
 8033baa:	d505      	bpl.n	8033bb8 <__swrite+0x1e>
 8033bac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8033bb0:	2302      	movs	r3, #2
 8033bb2:	2200      	movs	r2, #0
 8033bb4:	f000 f8ee 	bl	8033d94 <_lseek_r>
 8033bb8:	89a3      	ldrh	r3, [r4, #12]
 8033bba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8033bbe:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8033bc2:	81a3      	strh	r3, [r4, #12]
 8033bc4:	4632      	mov	r2, r6
 8033bc6:	463b      	mov	r3, r7
 8033bc8:	4628      	mov	r0, r5
 8033bca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8033bce:	f000 b915 	b.w	8033dfc <_write_r>

08033bd2 <__sseek>:
 8033bd2:	b510      	push	{r4, lr}
 8033bd4:	460c      	mov	r4, r1
 8033bd6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8033bda:	f000 f8db 	bl	8033d94 <_lseek_r>
 8033bde:	1c43      	adds	r3, r0, #1
 8033be0:	89a3      	ldrh	r3, [r4, #12]
 8033be2:	bf15      	itete	ne
 8033be4:	6560      	strne	r0, [r4, #84]	@ 0x54
 8033be6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8033bea:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8033bee:	81a3      	strheq	r3, [r4, #12]
 8033bf0:	bf18      	it	ne
 8033bf2:	81a3      	strhne	r3, [r4, #12]
 8033bf4:	bd10      	pop	{r4, pc}

08033bf6 <__sclose>:
 8033bf6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8033bfa:	f000 b8bb 	b.w	8033d74 <_close_r>

08033bfe <__swbuf_r>:
 8033bfe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8033c00:	460e      	mov	r6, r1
 8033c02:	4614      	mov	r4, r2
 8033c04:	4605      	mov	r5, r0
 8033c06:	b118      	cbz	r0, 8033c10 <__swbuf_r+0x12>
 8033c08:	6a03      	ldr	r3, [r0, #32]
 8033c0a:	b90b      	cbnz	r3, 8033c10 <__swbuf_r+0x12>
 8033c0c:	f7ff fed8 	bl	80339c0 <__sinit>
 8033c10:	69a3      	ldr	r3, [r4, #24]
 8033c12:	60a3      	str	r3, [r4, #8]
 8033c14:	89a3      	ldrh	r3, [r4, #12]
 8033c16:	071a      	lsls	r2, r3, #28
 8033c18:	d501      	bpl.n	8033c1e <__swbuf_r+0x20>
 8033c1a:	6923      	ldr	r3, [r4, #16]
 8033c1c:	b943      	cbnz	r3, 8033c30 <__swbuf_r+0x32>
 8033c1e:	4621      	mov	r1, r4
 8033c20:	4628      	mov	r0, r5
 8033c22:	f000 f82b 	bl	8033c7c <__swsetup_r>
 8033c26:	b118      	cbz	r0, 8033c30 <__swbuf_r+0x32>
 8033c28:	f04f 37ff 	mov.w	r7, #4294967295
 8033c2c:	4638      	mov	r0, r7
 8033c2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8033c30:	6823      	ldr	r3, [r4, #0]
 8033c32:	6922      	ldr	r2, [r4, #16]
 8033c34:	1a98      	subs	r0, r3, r2
 8033c36:	6963      	ldr	r3, [r4, #20]
 8033c38:	b2f6      	uxtb	r6, r6
 8033c3a:	4283      	cmp	r3, r0
 8033c3c:	4637      	mov	r7, r6
 8033c3e:	dc05      	bgt.n	8033c4c <__swbuf_r+0x4e>
 8033c40:	4621      	mov	r1, r4
 8033c42:	4628      	mov	r0, r5
 8033c44:	f001 fe6a 	bl	803591c <_fflush_r>
 8033c48:	2800      	cmp	r0, #0
 8033c4a:	d1ed      	bne.n	8033c28 <__swbuf_r+0x2a>
 8033c4c:	68a3      	ldr	r3, [r4, #8]
 8033c4e:	3b01      	subs	r3, #1
 8033c50:	60a3      	str	r3, [r4, #8]
 8033c52:	6823      	ldr	r3, [r4, #0]
 8033c54:	1c5a      	adds	r2, r3, #1
 8033c56:	6022      	str	r2, [r4, #0]
 8033c58:	701e      	strb	r6, [r3, #0]
 8033c5a:	6962      	ldr	r2, [r4, #20]
 8033c5c:	1c43      	adds	r3, r0, #1
 8033c5e:	429a      	cmp	r2, r3
 8033c60:	d004      	beq.n	8033c6c <__swbuf_r+0x6e>
 8033c62:	89a3      	ldrh	r3, [r4, #12]
 8033c64:	07db      	lsls	r3, r3, #31
 8033c66:	d5e1      	bpl.n	8033c2c <__swbuf_r+0x2e>
 8033c68:	2e0a      	cmp	r6, #10
 8033c6a:	d1df      	bne.n	8033c2c <__swbuf_r+0x2e>
 8033c6c:	4621      	mov	r1, r4
 8033c6e:	4628      	mov	r0, r5
 8033c70:	f001 fe54 	bl	803591c <_fflush_r>
 8033c74:	2800      	cmp	r0, #0
 8033c76:	d0d9      	beq.n	8033c2c <__swbuf_r+0x2e>
 8033c78:	e7d6      	b.n	8033c28 <__swbuf_r+0x2a>
	...

08033c7c <__swsetup_r>:
 8033c7c:	b538      	push	{r3, r4, r5, lr}
 8033c7e:	4b29      	ldr	r3, [pc, #164]	@ (8033d24 <__swsetup_r+0xa8>)
 8033c80:	4605      	mov	r5, r0
 8033c82:	6818      	ldr	r0, [r3, #0]
 8033c84:	460c      	mov	r4, r1
 8033c86:	b118      	cbz	r0, 8033c90 <__swsetup_r+0x14>
 8033c88:	6a03      	ldr	r3, [r0, #32]
 8033c8a:	b90b      	cbnz	r3, 8033c90 <__swsetup_r+0x14>
 8033c8c:	f7ff fe98 	bl	80339c0 <__sinit>
 8033c90:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8033c94:	0719      	lsls	r1, r3, #28
 8033c96:	d422      	bmi.n	8033cde <__swsetup_r+0x62>
 8033c98:	06da      	lsls	r2, r3, #27
 8033c9a:	d407      	bmi.n	8033cac <__swsetup_r+0x30>
 8033c9c:	2209      	movs	r2, #9
 8033c9e:	602a      	str	r2, [r5, #0]
 8033ca0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8033ca4:	81a3      	strh	r3, [r4, #12]
 8033ca6:	f04f 30ff 	mov.w	r0, #4294967295
 8033caa:	e033      	b.n	8033d14 <__swsetup_r+0x98>
 8033cac:	0758      	lsls	r0, r3, #29
 8033cae:	d512      	bpl.n	8033cd6 <__swsetup_r+0x5a>
 8033cb0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8033cb2:	b141      	cbz	r1, 8033cc6 <__swsetup_r+0x4a>
 8033cb4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8033cb8:	4299      	cmp	r1, r3
 8033cba:	d002      	beq.n	8033cc2 <__swsetup_r+0x46>
 8033cbc:	4628      	mov	r0, r5
 8033cbe:	f000 ff43 	bl	8034b48 <_free_r>
 8033cc2:	2300      	movs	r3, #0
 8033cc4:	6363      	str	r3, [r4, #52]	@ 0x34
 8033cc6:	89a3      	ldrh	r3, [r4, #12]
 8033cc8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8033ccc:	81a3      	strh	r3, [r4, #12]
 8033cce:	2300      	movs	r3, #0
 8033cd0:	6063      	str	r3, [r4, #4]
 8033cd2:	6923      	ldr	r3, [r4, #16]
 8033cd4:	6023      	str	r3, [r4, #0]
 8033cd6:	89a3      	ldrh	r3, [r4, #12]
 8033cd8:	f043 0308 	orr.w	r3, r3, #8
 8033cdc:	81a3      	strh	r3, [r4, #12]
 8033cde:	6923      	ldr	r3, [r4, #16]
 8033ce0:	b94b      	cbnz	r3, 8033cf6 <__swsetup_r+0x7a>
 8033ce2:	89a3      	ldrh	r3, [r4, #12]
 8033ce4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8033ce8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8033cec:	d003      	beq.n	8033cf6 <__swsetup_r+0x7a>
 8033cee:	4621      	mov	r1, r4
 8033cf0:	4628      	mov	r0, r5
 8033cf2:	f001 fe61 	bl	80359b8 <__smakebuf_r>
 8033cf6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8033cfa:	f013 0201 	ands.w	r2, r3, #1
 8033cfe:	d00a      	beq.n	8033d16 <__swsetup_r+0x9a>
 8033d00:	2200      	movs	r2, #0
 8033d02:	60a2      	str	r2, [r4, #8]
 8033d04:	6962      	ldr	r2, [r4, #20]
 8033d06:	4252      	negs	r2, r2
 8033d08:	61a2      	str	r2, [r4, #24]
 8033d0a:	6922      	ldr	r2, [r4, #16]
 8033d0c:	b942      	cbnz	r2, 8033d20 <__swsetup_r+0xa4>
 8033d0e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8033d12:	d1c5      	bne.n	8033ca0 <__swsetup_r+0x24>
 8033d14:	bd38      	pop	{r3, r4, r5, pc}
 8033d16:	0799      	lsls	r1, r3, #30
 8033d18:	bf58      	it	pl
 8033d1a:	6962      	ldrpl	r2, [r4, #20]
 8033d1c:	60a2      	str	r2, [r4, #8]
 8033d1e:	e7f4      	b.n	8033d0a <__swsetup_r+0x8e>
 8033d20:	2000      	movs	r0, #0
 8033d22:	e7f7      	b.n	8033d14 <__swsetup_r+0x98>
 8033d24:	200011a8 	.word	0x200011a8

08033d28 <memmove>:
 8033d28:	4288      	cmp	r0, r1
 8033d2a:	b510      	push	{r4, lr}
 8033d2c:	eb01 0402 	add.w	r4, r1, r2
 8033d30:	d902      	bls.n	8033d38 <memmove+0x10>
 8033d32:	4284      	cmp	r4, r0
 8033d34:	4623      	mov	r3, r4
 8033d36:	d807      	bhi.n	8033d48 <memmove+0x20>
 8033d38:	1e43      	subs	r3, r0, #1
 8033d3a:	42a1      	cmp	r1, r4
 8033d3c:	d008      	beq.n	8033d50 <memmove+0x28>
 8033d3e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8033d42:	f803 2f01 	strb.w	r2, [r3, #1]!
 8033d46:	e7f8      	b.n	8033d3a <memmove+0x12>
 8033d48:	4402      	add	r2, r0
 8033d4a:	4601      	mov	r1, r0
 8033d4c:	428a      	cmp	r2, r1
 8033d4e:	d100      	bne.n	8033d52 <memmove+0x2a>
 8033d50:	bd10      	pop	{r4, pc}
 8033d52:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8033d56:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8033d5a:	e7f7      	b.n	8033d4c <memmove+0x24>

08033d5c <memset>:
 8033d5c:	4402      	add	r2, r0
 8033d5e:	4603      	mov	r3, r0
 8033d60:	4293      	cmp	r3, r2
 8033d62:	d100      	bne.n	8033d66 <memset+0xa>
 8033d64:	4770      	bx	lr
 8033d66:	f803 1b01 	strb.w	r1, [r3], #1
 8033d6a:	e7f9      	b.n	8033d60 <memset+0x4>

08033d6c <_localeconv_r>:
 8033d6c:	4800      	ldr	r0, [pc, #0]	@ (8033d70 <_localeconv_r+0x4>)
 8033d6e:	4770      	bx	lr
 8033d70:	200012e8 	.word	0x200012e8

08033d74 <_close_r>:
 8033d74:	b538      	push	{r3, r4, r5, lr}
 8033d76:	4d06      	ldr	r5, [pc, #24]	@ (8033d90 <_close_r+0x1c>)
 8033d78:	2300      	movs	r3, #0
 8033d7a:	4604      	mov	r4, r0
 8033d7c:	4608      	mov	r0, r1
 8033d7e:	602b      	str	r3, [r5, #0]
 8033d80:	f7de fbe2 	bl	8012548 <_close>
 8033d84:	1c43      	adds	r3, r0, #1
 8033d86:	d102      	bne.n	8033d8e <_close_r+0x1a>
 8033d88:	682b      	ldr	r3, [r5, #0]
 8033d8a:	b103      	cbz	r3, 8033d8e <_close_r+0x1a>
 8033d8c:	6023      	str	r3, [r4, #0]
 8033d8e:	bd38      	pop	{r3, r4, r5, pc}
 8033d90:	200057ec 	.word	0x200057ec

08033d94 <_lseek_r>:
 8033d94:	b538      	push	{r3, r4, r5, lr}
 8033d96:	4d07      	ldr	r5, [pc, #28]	@ (8033db4 <_lseek_r+0x20>)
 8033d98:	4604      	mov	r4, r0
 8033d9a:	4608      	mov	r0, r1
 8033d9c:	4611      	mov	r1, r2
 8033d9e:	2200      	movs	r2, #0
 8033da0:	602a      	str	r2, [r5, #0]
 8033da2:	461a      	mov	r2, r3
 8033da4:	f7de fbdf 	bl	8012566 <_lseek>
 8033da8:	1c43      	adds	r3, r0, #1
 8033daa:	d102      	bne.n	8033db2 <_lseek_r+0x1e>
 8033dac:	682b      	ldr	r3, [r5, #0]
 8033dae:	b103      	cbz	r3, 8033db2 <_lseek_r+0x1e>
 8033db0:	6023      	str	r3, [r4, #0]
 8033db2:	bd38      	pop	{r3, r4, r5, pc}
 8033db4:	200057ec 	.word	0x200057ec

08033db8 <_read_r>:
 8033db8:	b538      	push	{r3, r4, r5, lr}
 8033dba:	4d07      	ldr	r5, [pc, #28]	@ (8033dd8 <_read_r+0x20>)
 8033dbc:	4604      	mov	r4, r0
 8033dbe:	4608      	mov	r0, r1
 8033dc0:	4611      	mov	r1, r2
 8033dc2:	2200      	movs	r2, #0
 8033dc4:	602a      	str	r2, [r5, #0]
 8033dc6:	461a      	mov	r2, r3
 8033dc8:	f7de fbad 	bl	8012526 <_read>
 8033dcc:	1c43      	adds	r3, r0, #1
 8033dce:	d102      	bne.n	8033dd6 <_read_r+0x1e>
 8033dd0:	682b      	ldr	r3, [r5, #0]
 8033dd2:	b103      	cbz	r3, 8033dd6 <_read_r+0x1e>
 8033dd4:	6023      	str	r3, [r4, #0]
 8033dd6:	bd38      	pop	{r3, r4, r5, pc}
 8033dd8:	200057ec 	.word	0x200057ec

08033ddc <_sbrk_r>:
 8033ddc:	b538      	push	{r3, r4, r5, lr}
 8033dde:	4d06      	ldr	r5, [pc, #24]	@ (8033df8 <_sbrk_r+0x1c>)
 8033de0:	2300      	movs	r3, #0
 8033de2:	4604      	mov	r4, r0
 8033de4:	4608      	mov	r0, r1
 8033de6:	602b      	str	r3, [r5, #0]
 8033de8:	f7de fbfe 	bl	80125e8 <_sbrk>
 8033dec:	1c43      	adds	r3, r0, #1
 8033dee:	d102      	bne.n	8033df6 <_sbrk_r+0x1a>
 8033df0:	682b      	ldr	r3, [r5, #0]
 8033df2:	b103      	cbz	r3, 8033df6 <_sbrk_r+0x1a>
 8033df4:	6023      	str	r3, [r4, #0]
 8033df6:	bd38      	pop	{r3, r4, r5, pc}
 8033df8:	200057ec 	.word	0x200057ec

08033dfc <_write_r>:
 8033dfc:	b538      	push	{r3, r4, r5, lr}
 8033dfe:	4d07      	ldr	r5, [pc, #28]	@ (8033e1c <_write_r+0x20>)
 8033e00:	4604      	mov	r4, r0
 8033e02:	4608      	mov	r0, r1
 8033e04:	4611      	mov	r1, r2
 8033e06:	2200      	movs	r2, #0
 8033e08:	602a      	str	r2, [r5, #0]
 8033e0a:	461a      	mov	r2, r3
 8033e0c:	f7de fb7e 	bl	801250c <_write>
 8033e10:	1c43      	adds	r3, r0, #1
 8033e12:	d102      	bne.n	8033e1a <_write_r+0x1e>
 8033e14:	682b      	ldr	r3, [r5, #0]
 8033e16:	b103      	cbz	r3, 8033e1a <_write_r+0x1e>
 8033e18:	6023      	str	r3, [r4, #0]
 8033e1a:	bd38      	pop	{r3, r4, r5, pc}
 8033e1c:	200057ec 	.word	0x200057ec

08033e20 <__errno>:
 8033e20:	4b01      	ldr	r3, [pc, #4]	@ (8033e28 <__errno+0x8>)
 8033e22:	6818      	ldr	r0, [r3, #0]
 8033e24:	4770      	bx	lr
 8033e26:	bf00      	nop
 8033e28:	200011a8 	.word	0x200011a8

08033e2c <__libc_init_array>:
 8033e2c:	b570      	push	{r4, r5, r6, lr}
 8033e2e:	4d0d      	ldr	r5, [pc, #52]	@ (8033e64 <__libc_init_array+0x38>)
 8033e30:	4c0d      	ldr	r4, [pc, #52]	@ (8033e68 <__libc_init_array+0x3c>)
 8033e32:	1b64      	subs	r4, r4, r5
 8033e34:	10a4      	asrs	r4, r4, #2
 8033e36:	2600      	movs	r6, #0
 8033e38:	42a6      	cmp	r6, r4
 8033e3a:	d109      	bne.n	8033e50 <__libc_init_array+0x24>
 8033e3c:	4d0b      	ldr	r5, [pc, #44]	@ (8033e6c <__libc_init_array+0x40>)
 8033e3e:	4c0c      	ldr	r4, [pc, #48]	@ (8033e70 <__libc_init_array+0x44>)
 8033e40:	f002 faae 	bl	80363a0 <_init>
 8033e44:	1b64      	subs	r4, r4, r5
 8033e46:	10a4      	asrs	r4, r4, #2
 8033e48:	2600      	movs	r6, #0
 8033e4a:	42a6      	cmp	r6, r4
 8033e4c:	d105      	bne.n	8033e5a <__libc_init_array+0x2e>
 8033e4e:	bd70      	pop	{r4, r5, r6, pc}
 8033e50:	f855 3b04 	ldr.w	r3, [r5], #4
 8033e54:	4798      	blx	r3
 8033e56:	3601      	adds	r6, #1
 8033e58:	e7ee      	b.n	8033e38 <__libc_init_array+0xc>
 8033e5a:	f855 3b04 	ldr.w	r3, [r5], #4
 8033e5e:	4798      	blx	r3
 8033e60:	3601      	adds	r6, #1
 8033e62:	e7f2      	b.n	8033e4a <__libc_init_array+0x1e>
 8033e64:	0803bd04 	.word	0x0803bd04
 8033e68:	0803bd04 	.word	0x0803bd04
 8033e6c:	0803bd04 	.word	0x0803bd04
 8033e70:	0803bd08 	.word	0x0803bd08

08033e74 <__retarget_lock_init_recursive>:
 8033e74:	4770      	bx	lr

08033e76 <__retarget_lock_acquire_recursive>:
 8033e76:	4770      	bx	lr

08033e78 <__retarget_lock_release_recursive>:
 8033e78:	4770      	bx	lr

08033e7a <memcpy>:
 8033e7a:	440a      	add	r2, r1
 8033e7c:	4291      	cmp	r1, r2
 8033e7e:	f100 33ff 	add.w	r3, r0, #4294967295
 8033e82:	d100      	bne.n	8033e86 <memcpy+0xc>
 8033e84:	4770      	bx	lr
 8033e86:	b510      	push	{r4, lr}
 8033e88:	f811 4b01 	ldrb.w	r4, [r1], #1
 8033e8c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8033e90:	4291      	cmp	r1, r2
 8033e92:	d1f9      	bne.n	8033e88 <memcpy+0xe>
 8033e94:	bd10      	pop	{r4, pc}

08033e96 <quorem>:
 8033e96:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8033e9a:	6903      	ldr	r3, [r0, #16]
 8033e9c:	690c      	ldr	r4, [r1, #16]
 8033e9e:	42a3      	cmp	r3, r4
 8033ea0:	4607      	mov	r7, r0
 8033ea2:	db7e      	blt.n	8033fa2 <quorem+0x10c>
 8033ea4:	3c01      	subs	r4, #1
 8033ea6:	f101 0814 	add.w	r8, r1, #20
 8033eaa:	00a3      	lsls	r3, r4, #2
 8033eac:	f100 0514 	add.w	r5, r0, #20
 8033eb0:	9300      	str	r3, [sp, #0]
 8033eb2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8033eb6:	9301      	str	r3, [sp, #4]
 8033eb8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8033ebc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8033ec0:	3301      	adds	r3, #1
 8033ec2:	429a      	cmp	r2, r3
 8033ec4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8033ec8:	fbb2 f6f3 	udiv	r6, r2, r3
 8033ecc:	d32e      	bcc.n	8033f2c <quorem+0x96>
 8033ece:	f04f 0a00 	mov.w	sl, #0
 8033ed2:	46c4      	mov	ip, r8
 8033ed4:	46ae      	mov	lr, r5
 8033ed6:	46d3      	mov	fp, sl
 8033ed8:	f85c 3b04 	ldr.w	r3, [ip], #4
 8033edc:	b298      	uxth	r0, r3
 8033ede:	fb06 a000 	mla	r0, r6, r0, sl
 8033ee2:	0c02      	lsrs	r2, r0, #16
 8033ee4:	0c1b      	lsrs	r3, r3, #16
 8033ee6:	fb06 2303 	mla	r3, r6, r3, r2
 8033eea:	f8de 2000 	ldr.w	r2, [lr]
 8033eee:	b280      	uxth	r0, r0
 8033ef0:	b292      	uxth	r2, r2
 8033ef2:	1a12      	subs	r2, r2, r0
 8033ef4:	445a      	add	r2, fp
 8033ef6:	f8de 0000 	ldr.w	r0, [lr]
 8033efa:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8033efe:	b29b      	uxth	r3, r3
 8033f00:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8033f04:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8033f08:	b292      	uxth	r2, r2
 8033f0a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8033f0e:	45e1      	cmp	r9, ip
 8033f10:	f84e 2b04 	str.w	r2, [lr], #4
 8033f14:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8033f18:	d2de      	bcs.n	8033ed8 <quorem+0x42>
 8033f1a:	9b00      	ldr	r3, [sp, #0]
 8033f1c:	58eb      	ldr	r3, [r5, r3]
 8033f1e:	b92b      	cbnz	r3, 8033f2c <quorem+0x96>
 8033f20:	9b01      	ldr	r3, [sp, #4]
 8033f22:	3b04      	subs	r3, #4
 8033f24:	429d      	cmp	r5, r3
 8033f26:	461a      	mov	r2, r3
 8033f28:	d32f      	bcc.n	8033f8a <quorem+0xf4>
 8033f2a:	613c      	str	r4, [r7, #16]
 8033f2c:	4638      	mov	r0, r7
 8033f2e:	f001 f8c7 	bl	80350c0 <__mcmp>
 8033f32:	2800      	cmp	r0, #0
 8033f34:	db25      	blt.n	8033f82 <quorem+0xec>
 8033f36:	4629      	mov	r1, r5
 8033f38:	2000      	movs	r0, #0
 8033f3a:	f858 2b04 	ldr.w	r2, [r8], #4
 8033f3e:	f8d1 c000 	ldr.w	ip, [r1]
 8033f42:	fa1f fe82 	uxth.w	lr, r2
 8033f46:	fa1f f38c 	uxth.w	r3, ip
 8033f4a:	eba3 030e 	sub.w	r3, r3, lr
 8033f4e:	4403      	add	r3, r0
 8033f50:	0c12      	lsrs	r2, r2, #16
 8033f52:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8033f56:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8033f5a:	b29b      	uxth	r3, r3
 8033f5c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8033f60:	45c1      	cmp	r9, r8
 8033f62:	f841 3b04 	str.w	r3, [r1], #4
 8033f66:	ea4f 4022 	mov.w	r0, r2, asr #16
 8033f6a:	d2e6      	bcs.n	8033f3a <quorem+0xa4>
 8033f6c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8033f70:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8033f74:	b922      	cbnz	r2, 8033f80 <quorem+0xea>
 8033f76:	3b04      	subs	r3, #4
 8033f78:	429d      	cmp	r5, r3
 8033f7a:	461a      	mov	r2, r3
 8033f7c:	d30b      	bcc.n	8033f96 <quorem+0x100>
 8033f7e:	613c      	str	r4, [r7, #16]
 8033f80:	3601      	adds	r6, #1
 8033f82:	4630      	mov	r0, r6
 8033f84:	b003      	add	sp, #12
 8033f86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8033f8a:	6812      	ldr	r2, [r2, #0]
 8033f8c:	3b04      	subs	r3, #4
 8033f8e:	2a00      	cmp	r2, #0
 8033f90:	d1cb      	bne.n	8033f2a <quorem+0x94>
 8033f92:	3c01      	subs	r4, #1
 8033f94:	e7c6      	b.n	8033f24 <quorem+0x8e>
 8033f96:	6812      	ldr	r2, [r2, #0]
 8033f98:	3b04      	subs	r3, #4
 8033f9a:	2a00      	cmp	r2, #0
 8033f9c:	d1ef      	bne.n	8033f7e <quorem+0xe8>
 8033f9e:	3c01      	subs	r4, #1
 8033fa0:	e7ea      	b.n	8033f78 <quorem+0xe2>
 8033fa2:	2000      	movs	r0, #0
 8033fa4:	e7ee      	b.n	8033f84 <quorem+0xee>
	...

08033fa8 <_dtoa_r>:
 8033fa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8033fac:	69c7      	ldr	r7, [r0, #28]
 8033fae:	b097      	sub	sp, #92	@ 0x5c
 8033fb0:	ed8d 0b04 	vstr	d0, [sp, #16]
 8033fb4:	ec55 4b10 	vmov	r4, r5, d0
 8033fb8:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8033fba:	9107      	str	r1, [sp, #28]
 8033fbc:	4681      	mov	r9, r0
 8033fbe:	920c      	str	r2, [sp, #48]	@ 0x30
 8033fc0:	9311      	str	r3, [sp, #68]	@ 0x44
 8033fc2:	b97f      	cbnz	r7, 8033fe4 <_dtoa_r+0x3c>
 8033fc4:	2010      	movs	r0, #16
 8033fc6:	f7fe ff35 	bl	8032e34 <malloc>
 8033fca:	4602      	mov	r2, r0
 8033fcc:	f8c9 001c 	str.w	r0, [r9, #28]
 8033fd0:	b920      	cbnz	r0, 8033fdc <_dtoa_r+0x34>
 8033fd2:	4ba9      	ldr	r3, [pc, #676]	@ (8034278 <_dtoa_r+0x2d0>)
 8033fd4:	21ef      	movs	r1, #239	@ 0xef
 8033fd6:	48a9      	ldr	r0, [pc, #676]	@ (803427c <_dtoa_r+0x2d4>)
 8033fd8:	f001 fd4c 	bl	8035a74 <__assert_func>
 8033fdc:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8033fe0:	6007      	str	r7, [r0, #0]
 8033fe2:	60c7      	str	r7, [r0, #12]
 8033fe4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8033fe8:	6819      	ldr	r1, [r3, #0]
 8033fea:	b159      	cbz	r1, 8034004 <_dtoa_r+0x5c>
 8033fec:	685a      	ldr	r2, [r3, #4]
 8033fee:	604a      	str	r2, [r1, #4]
 8033ff0:	2301      	movs	r3, #1
 8033ff2:	4093      	lsls	r3, r2
 8033ff4:	608b      	str	r3, [r1, #8]
 8033ff6:	4648      	mov	r0, r9
 8033ff8:	f000 fe30 	bl	8034c5c <_Bfree>
 8033ffc:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8034000:	2200      	movs	r2, #0
 8034002:	601a      	str	r2, [r3, #0]
 8034004:	1e2b      	subs	r3, r5, #0
 8034006:	bfb9      	ittee	lt
 8034008:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 803400c:	9305      	strlt	r3, [sp, #20]
 803400e:	2300      	movge	r3, #0
 8034010:	6033      	strge	r3, [r6, #0]
 8034012:	9f05      	ldr	r7, [sp, #20]
 8034014:	4b9a      	ldr	r3, [pc, #616]	@ (8034280 <_dtoa_r+0x2d8>)
 8034016:	bfbc      	itt	lt
 8034018:	2201      	movlt	r2, #1
 803401a:	6032      	strlt	r2, [r6, #0]
 803401c:	43bb      	bics	r3, r7
 803401e:	d112      	bne.n	8034046 <_dtoa_r+0x9e>
 8034020:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8034022:	f242 730f 	movw	r3, #9999	@ 0x270f
 8034026:	6013      	str	r3, [r2, #0]
 8034028:	f3c7 0313 	ubfx	r3, r7, #0, #20
 803402c:	4323      	orrs	r3, r4
 803402e:	f000 855a 	beq.w	8034ae6 <_dtoa_r+0xb3e>
 8034032:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8034034:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 8034294 <_dtoa_r+0x2ec>
 8034038:	2b00      	cmp	r3, #0
 803403a:	f000 855c 	beq.w	8034af6 <_dtoa_r+0xb4e>
 803403e:	f10a 0303 	add.w	r3, sl, #3
 8034042:	f000 bd56 	b.w	8034af2 <_dtoa_r+0xb4a>
 8034046:	ed9d 7b04 	vldr	d7, [sp, #16]
 803404a:	2200      	movs	r2, #0
 803404c:	ec51 0b17 	vmov	r0, r1, d7
 8034050:	2300      	movs	r3, #0
 8034052:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 8034056:	f7dc fc6f 	bl	8010938 <__aeabi_dcmpeq>
 803405a:	4680      	mov	r8, r0
 803405c:	b158      	cbz	r0, 8034076 <_dtoa_r+0xce>
 803405e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8034060:	2301      	movs	r3, #1
 8034062:	6013      	str	r3, [r2, #0]
 8034064:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8034066:	b113      	cbz	r3, 803406e <_dtoa_r+0xc6>
 8034068:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 803406a:	4b86      	ldr	r3, [pc, #536]	@ (8034284 <_dtoa_r+0x2dc>)
 803406c:	6013      	str	r3, [r2, #0]
 803406e:	f8df a228 	ldr.w	sl, [pc, #552]	@ 8034298 <_dtoa_r+0x2f0>
 8034072:	f000 bd40 	b.w	8034af6 <_dtoa_r+0xb4e>
 8034076:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 803407a:	aa14      	add	r2, sp, #80	@ 0x50
 803407c:	a915      	add	r1, sp, #84	@ 0x54
 803407e:	4648      	mov	r0, r9
 8034080:	f001 f8ce 	bl	8035220 <__d2b>
 8034084:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8034088:	9002      	str	r0, [sp, #8]
 803408a:	2e00      	cmp	r6, #0
 803408c:	d078      	beq.n	8034180 <_dtoa_r+0x1d8>
 803408e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8034090:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 8034094:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8034098:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 803409c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80340a0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80340a4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80340a8:	4619      	mov	r1, r3
 80340aa:	2200      	movs	r2, #0
 80340ac:	4b76      	ldr	r3, [pc, #472]	@ (8034288 <_dtoa_r+0x2e0>)
 80340ae:	f7dc f823 	bl	80100f8 <__aeabi_dsub>
 80340b2:	a36b      	add	r3, pc, #428	@ (adr r3, 8034260 <_dtoa_r+0x2b8>)
 80340b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80340b8:	f7dc f9d6 	bl	8010468 <__aeabi_dmul>
 80340bc:	a36a      	add	r3, pc, #424	@ (adr r3, 8034268 <_dtoa_r+0x2c0>)
 80340be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80340c2:	f7dc f81b 	bl	80100fc <__adddf3>
 80340c6:	4604      	mov	r4, r0
 80340c8:	4630      	mov	r0, r6
 80340ca:	460d      	mov	r5, r1
 80340cc:	f7dc f962 	bl	8010394 <__aeabi_i2d>
 80340d0:	a367      	add	r3, pc, #412	@ (adr r3, 8034270 <_dtoa_r+0x2c8>)
 80340d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80340d6:	f7dc f9c7 	bl	8010468 <__aeabi_dmul>
 80340da:	4602      	mov	r2, r0
 80340dc:	460b      	mov	r3, r1
 80340de:	4620      	mov	r0, r4
 80340e0:	4629      	mov	r1, r5
 80340e2:	f7dc f80b 	bl	80100fc <__adddf3>
 80340e6:	4604      	mov	r4, r0
 80340e8:	460d      	mov	r5, r1
 80340ea:	f7dc fc6d 	bl	80109c8 <__aeabi_d2iz>
 80340ee:	2200      	movs	r2, #0
 80340f0:	4607      	mov	r7, r0
 80340f2:	2300      	movs	r3, #0
 80340f4:	4620      	mov	r0, r4
 80340f6:	4629      	mov	r1, r5
 80340f8:	f7dc fc28 	bl	801094c <__aeabi_dcmplt>
 80340fc:	b140      	cbz	r0, 8034110 <_dtoa_r+0x168>
 80340fe:	4638      	mov	r0, r7
 8034100:	f7dc f948 	bl	8010394 <__aeabi_i2d>
 8034104:	4622      	mov	r2, r4
 8034106:	462b      	mov	r3, r5
 8034108:	f7dc fc16 	bl	8010938 <__aeabi_dcmpeq>
 803410c:	b900      	cbnz	r0, 8034110 <_dtoa_r+0x168>
 803410e:	3f01      	subs	r7, #1
 8034110:	2f16      	cmp	r7, #22
 8034112:	d852      	bhi.n	80341ba <_dtoa_r+0x212>
 8034114:	4b5d      	ldr	r3, [pc, #372]	@ (803428c <_dtoa_r+0x2e4>)
 8034116:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 803411a:	e9d3 2300 	ldrd	r2, r3, [r3]
 803411e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8034122:	f7dc fc13 	bl	801094c <__aeabi_dcmplt>
 8034126:	2800      	cmp	r0, #0
 8034128:	d049      	beq.n	80341be <_dtoa_r+0x216>
 803412a:	3f01      	subs	r7, #1
 803412c:	2300      	movs	r3, #0
 803412e:	9310      	str	r3, [sp, #64]	@ 0x40
 8034130:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8034132:	1b9b      	subs	r3, r3, r6
 8034134:	1e5a      	subs	r2, r3, #1
 8034136:	bf45      	ittet	mi
 8034138:	f1c3 0301 	rsbmi	r3, r3, #1
 803413c:	9300      	strmi	r3, [sp, #0]
 803413e:	2300      	movpl	r3, #0
 8034140:	2300      	movmi	r3, #0
 8034142:	9206      	str	r2, [sp, #24]
 8034144:	bf54      	ite	pl
 8034146:	9300      	strpl	r3, [sp, #0]
 8034148:	9306      	strmi	r3, [sp, #24]
 803414a:	2f00      	cmp	r7, #0
 803414c:	db39      	blt.n	80341c2 <_dtoa_r+0x21a>
 803414e:	9b06      	ldr	r3, [sp, #24]
 8034150:	970d      	str	r7, [sp, #52]	@ 0x34
 8034152:	443b      	add	r3, r7
 8034154:	9306      	str	r3, [sp, #24]
 8034156:	2300      	movs	r3, #0
 8034158:	9308      	str	r3, [sp, #32]
 803415a:	9b07      	ldr	r3, [sp, #28]
 803415c:	2b09      	cmp	r3, #9
 803415e:	d863      	bhi.n	8034228 <_dtoa_r+0x280>
 8034160:	2b05      	cmp	r3, #5
 8034162:	bfc4      	itt	gt
 8034164:	3b04      	subgt	r3, #4
 8034166:	9307      	strgt	r3, [sp, #28]
 8034168:	9b07      	ldr	r3, [sp, #28]
 803416a:	f1a3 0302 	sub.w	r3, r3, #2
 803416e:	bfcc      	ite	gt
 8034170:	2400      	movgt	r4, #0
 8034172:	2401      	movle	r4, #1
 8034174:	2b03      	cmp	r3, #3
 8034176:	d863      	bhi.n	8034240 <_dtoa_r+0x298>
 8034178:	e8df f003 	tbb	[pc, r3]
 803417c:	2b375452 	.word	0x2b375452
 8034180:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8034184:	441e      	add	r6, r3
 8034186:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 803418a:	2b20      	cmp	r3, #32
 803418c:	bfc1      	itttt	gt
 803418e:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8034192:	409f      	lslgt	r7, r3
 8034194:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8034198:	fa24 f303 	lsrgt.w	r3, r4, r3
 803419c:	bfd6      	itet	le
 803419e:	f1c3 0320 	rsble	r3, r3, #32
 80341a2:	ea47 0003 	orrgt.w	r0, r7, r3
 80341a6:	fa04 f003 	lslle.w	r0, r4, r3
 80341aa:	f7dc f8e3 	bl	8010374 <__aeabi_ui2d>
 80341ae:	2201      	movs	r2, #1
 80341b0:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80341b4:	3e01      	subs	r6, #1
 80341b6:	9212      	str	r2, [sp, #72]	@ 0x48
 80341b8:	e776      	b.n	80340a8 <_dtoa_r+0x100>
 80341ba:	2301      	movs	r3, #1
 80341bc:	e7b7      	b.n	803412e <_dtoa_r+0x186>
 80341be:	9010      	str	r0, [sp, #64]	@ 0x40
 80341c0:	e7b6      	b.n	8034130 <_dtoa_r+0x188>
 80341c2:	9b00      	ldr	r3, [sp, #0]
 80341c4:	1bdb      	subs	r3, r3, r7
 80341c6:	9300      	str	r3, [sp, #0]
 80341c8:	427b      	negs	r3, r7
 80341ca:	9308      	str	r3, [sp, #32]
 80341cc:	2300      	movs	r3, #0
 80341ce:	930d      	str	r3, [sp, #52]	@ 0x34
 80341d0:	e7c3      	b.n	803415a <_dtoa_r+0x1b2>
 80341d2:	2301      	movs	r3, #1
 80341d4:	9309      	str	r3, [sp, #36]	@ 0x24
 80341d6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80341d8:	eb07 0b03 	add.w	fp, r7, r3
 80341dc:	f10b 0301 	add.w	r3, fp, #1
 80341e0:	2b01      	cmp	r3, #1
 80341e2:	9303      	str	r3, [sp, #12]
 80341e4:	bfb8      	it	lt
 80341e6:	2301      	movlt	r3, #1
 80341e8:	e006      	b.n	80341f8 <_dtoa_r+0x250>
 80341ea:	2301      	movs	r3, #1
 80341ec:	9309      	str	r3, [sp, #36]	@ 0x24
 80341ee:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80341f0:	2b00      	cmp	r3, #0
 80341f2:	dd28      	ble.n	8034246 <_dtoa_r+0x29e>
 80341f4:	469b      	mov	fp, r3
 80341f6:	9303      	str	r3, [sp, #12]
 80341f8:	f8d9 001c 	ldr.w	r0, [r9, #28]
 80341fc:	2100      	movs	r1, #0
 80341fe:	2204      	movs	r2, #4
 8034200:	f102 0514 	add.w	r5, r2, #20
 8034204:	429d      	cmp	r5, r3
 8034206:	d926      	bls.n	8034256 <_dtoa_r+0x2ae>
 8034208:	6041      	str	r1, [r0, #4]
 803420a:	4648      	mov	r0, r9
 803420c:	f000 fce6 	bl	8034bdc <_Balloc>
 8034210:	4682      	mov	sl, r0
 8034212:	2800      	cmp	r0, #0
 8034214:	d142      	bne.n	803429c <_dtoa_r+0x2f4>
 8034216:	4b1e      	ldr	r3, [pc, #120]	@ (8034290 <_dtoa_r+0x2e8>)
 8034218:	4602      	mov	r2, r0
 803421a:	f240 11af 	movw	r1, #431	@ 0x1af
 803421e:	e6da      	b.n	8033fd6 <_dtoa_r+0x2e>
 8034220:	2300      	movs	r3, #0
 8034222:	e7e3      	b.n	80341ec <_dtoa_r+0x244>
 8034224:	2300      	movs	r3, #0
 8034226:	e7d5      	b.n	80341d4 <_dtoa_r+0x22c>
 8034228:	2401      	movs	r4, #1
 803422a:	2300      	movs	r3, #0
 803422c:	9307      	str	r3, [sp, #28]
 803422e:	9409      	str	r4, [sp, #36]	@ 0x24
 8034230:	f04f 3bff 	mov.w	fp, #4294967295
 8034234:	2200      	movs	r2, #0
 8034236:	f8cd b00c 	str.w	fp, [sp, #12]
 803423a:	2312      	movs	r3, #18
 803423c:	920c      	str	r2, [sp, #48]	@ 0x30
 803423e:	e7db      	b.n	80341f8 <_dtoa_r+0x250>
 8034240:	2301      	movs	r3, #1
 8034242:	9309      	str	r3, [sp, #36]	@ 0x24
 8034244:	e7f4      	b.n	8034230 <_dtoa_r+0x288>
 8034246:	f04f 0b01 	mov.w	fp, #1
 803424a:	f8cd b00c 	str.w	fp, [sp, #12]
 803424e:	465b      	mov	r3, fp
 8034250:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 8034254:	e7d0      	b.n	80341f8 <_dtoa_r+0x250>
 8034256:	3101      	adds	r1, #1
 8034258:	0052      	lsls	r2, r2, #1
 803425a:	e7d1      	b.n	8034200 <_dtoa_r+0x258>
 803425c:	f3af 8000 	nop.w
 8034260:	636f4361 	.word	0x636f4361
 8034264:	3fd287a7 	.word	0x3fd287a7
 8034268:	8b60c8b3 	.word	0x8b60c8b3
 803426c:	3fc68a28 	.word	0x3fc68a28
 8034270:	509f79fb 	.word	0x509f79fb
 8034274:	3fd34413 	.word	0x3fd34413
 8034278:	0803b9b1 	.word	0x0803b9b1
 803427c:	0803b9c8 	.word	0x0803b9c8
 8034280:	7ff00000 	.word	0x7ff00000
 8034284:	0803b981 	.word	0x0803b981
 8034288:	3ff80000 	.word	0x3ff80000
 803428c:	0803bb18 	.word	0x0803bb18
 8034290:	0803ba20 	.word	0x0803ba20
 8034294:	0803b9ad 	.word	0x0803b9ad
 8034298:	0803b980 	.word	0x0803b980
 803429c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80342a0:	6018      	str	r0, [r3, #0]
 80342a2:	9b03      	ldr	r3, [sp, #12]
 80342a4:	2b0e      	cmp	r3, #14
 80342a6:	f200 80a1 	bhi.w	80343ec <_dtoa_r+0x444>
 80342aa:	2c00      	cmp	r4, #0
 80342ac:	f000 809e 	beq.w	80343ec <_dtoa_r+0x444>
 80342b0:	2f00      	cmp	r7, #0
 80342b2:	dd33      	ble.n	803431c <_dtoa_r+0x374>
 80342b4:	4b9c      	ldr	r3, [pc, #624]	@ (8034528 <_dtoa_r+0x580>)
 80342b6:	f007 020f 	and.w	r2, r7, #15
 80342ba:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80342be:	ed93 7b00 	vldr	d7, [r3]
 80342c2:	05f8      	lsls	r0, r7, #23
 80342c4:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 80342c8:	ea4f 1427 	mov.w	r4, r7, asr #4
 80342cc:	d516      	bpl.n	80342fc <_dtoa_r+0x354>
 80342ce:	4b97      	ldr	r3, [pc, #604]	@ (803452c <_dtoa_r+0x584>)
 80342d0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80342d4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80342d8:	f7dc f9f0 	bl	80106bc <__aeabi_ddiv>
 80342dc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80342e0:	f004 040f 	and.w	r4, r4, #15
 80342e4:	2603      	movs	r6, #3
 80342e6:	4d91      	ldr	r5, [pc, #580]	@ (803452c <_dtoa_r+0x584>)
 80342e8:	b954      	cbnz	r4, 8034300 <_dtoa_r+0x358>
 80342ea:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80342ee:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80342f2:	f7dc f9e3 	bl	80106bc <__aeabi_ddiv>
 80342f6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80342fa:	e028      	b.n	803434e <_dtoa_r+0x3a6>
 80342fc:	2602      	movs	r6, #2
 80342fe:	e7f2      	b.n	80342e6 <_dtoa_r+0x33e>
 8034300:	07e1      	lsls	r1, r4, #31
 8034302:	d508      	bpl.n	8034316 <_dtoa_r+0x36e>
 8034304:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8034308:	e9d5 2300 	ldrd	r2, r3, [r5]
 803430c:	f7dc f8ac 	bl	8010468 <__aeabi_dmul>
 8034310:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8034314:	3601      	adds	r6, #1
 8034316:	1064      	asrs	r4, r4, #1
 8034318:	3508      	adds	r5, #8
 803431a:	e7e5      	b.n	80342e8 <_dtoa_r+0x340>
 803431c:	f000 80af 	beq.w	803447e <_dtoa_r+0x4d6>
 8034320:	427c      	negs	r4, r7
 8034322:	4b81      	ldr	r3, [pc, #516]	@ (8034528 <_dtoa_r+0x580>)
 8034324:	4d81      	ldr	r5, [pc, #516]	@ (803452c <_dtoa_r+0x584>)
 8034326:	f004 020f 	and.w	r2, r4, #15
 803432a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 803432e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8034332:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8034336:	f7dc f897 	bl	8010468 <__aeabi_dmul>
 803433a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 803433e:	1124      	asrs	r4, r4, #4
 8034340:	2300      	movs	r3, #0
 8034342:	2602      	movs	r6, #2
 8034344:	2c00      	cmp	r4, #0
 8034346:	f040 808f 	bne.w	8034468 <_dtoa_r+0x4c0>
 803434a:	2b00      	cmp	r3, #0
 803434c:	d1d3      	bne.n	80342f6 <_dtoa_r+0x34e>
 803434e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8034350:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8034354:	2b00      	cmp	r3, #0
 8034356:	f000 8094 	beq.w	8034482 <_dtoa_r+0x4da>
 803435a:	4b75      	ldr	r3, [pc, #468]	@ (8034530 <_dtoa_r+0x588>)
 803435c:	2200      	movs	r2, #0
 803435e:	4620      	mov	r0, r4
 8034360:	4629      	mov	r1, r5
 8034362:	f7dc faf3 	bl	801094c <__aeabi_dcmplt>
 8034366:	2800      	cmp	r0, #0
 8034368:	f000 808b 	beq.w	8034482 <_dtoa_r+0x4da>
 803436c:	9b03      	ldr	r3, [sp, #12]
 803436e:	2b00      	cmp	r3, #0
 8034370:	f000 8087 	beq.w	8034482 <_dtoa_r+0x4da>
 8034374:	f1bb 0f00 	cmp.w	fp, #0
 8034378:	dd34      	ble.n	80343e4 <_dtoa_r+0x43c>
 803437a:	4620      	mov	r0, r4
 803437c:	4b6d      	ldr	r3, [pc, #436]	@ (8034534 <_dtoa_r+0x58c>)
 803437e:	2200      	movs	r2, #0
 8034380:	4629      	mov	r1, r5
 8034382:	f7dc f871 	bl	8010468 <__aeabi_dmul>
 8034386:	e9cd 0104 	strd	r0, r1, [sp, #16]
 803438a:	f107 38ff 	add.w	r8, r7, #4294967295
 803438e:	3601      	adds	r6, #1
 8034390:	465c      	mov	r4, fp
 8034392:	4630      	mov	r0, r6
 8034394:	f7db fffe 	bl	8010394 <__aeabi_i2d>
 8034398:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 803439c:	f7dc f864 	bl	8010468 <__aeabi_dmul>
 80343a0:	4b65      	ldr	r3, [pc, #404]	@ (8034538 <_dtoa_r+0x590>)
 80343a2:	2200      	movs	r2, #0
 80343a4:	f7db feaa 	bl	80100fc <__adddf3>
 80343a8:	4605      	mov	r5, r0
 80343aa:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80343ae:	2c00      	cmp	r4, #0
 80343b0:	d16a      	bne.n	8034488 <_dtoa_r+0x4e0>
 80343b2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80343b6:	4b61      	ldr	r3, [pc, #388]	@ (803453c <_dtoa_r+0x594>)
 80343b8:	2200      	movs	r2, #0
 80343ba:	f7db fe9d 	bl	80100f8 <__aeabi_dsub>
 80343be:	4602      	mov	r2, r0
 80343c0:	460b      	mov	r3, r1
 80343c2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80343c6:	462a      	mov	r2, r5
 80343c8:	4633      	mov	r3, r6
 80343ca:	f7dc fadd 	bl	8010988 <__aeabi_dcmpgt>
 80343ce:	2800      	cmp	r0, #0
 80343d0:	f040 8298 	bne.w	8034904 <_dtoa_r+0x95c>
 80343d4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80343d8:	462a      	mov	r2, r5
 80343da:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80343de:	f7dc fab5 	bl	801094c <__aeabi_dcmplt>
 80343e2:	bb38      	cbnz	r0, 8034434 <_dtoa_r+0x48c>
 80343e4:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 80343e8:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80343ec:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80343ee:	2b00      	cmp	r3, #0
 80343f0:	f2c0 8157 	blt.w	80346a2 <_dtoa_r+0x6fa>
 80343f4:	2f0e      	cmp	r7, #14
 80343f6:	f300 8154 	bgt.w	80346a2 <_dtoa_r+0x6fa>
 80343fa:	4b4b      	ldr	r3, [pc, #300]	@ (8034528 <_dtoa_r+0x580>)
 80343fc:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8034400:	ed93 7b00 	vldr	d7, [r3]
 8034404:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8034406:	2b00      	cmp	r3, #0
 8034408:	ed8d 7b00 	vstr	d7, [sp]
 803440c:	f280 80e5 	bge.w	80345da <_dtoa_r+0x632>
 8034410:	9b03      	ldr	r3, [sp, #12]
 8034412:	2b00      	cmp	r3, #0
 8034414:	f300 80e1 	bgt.w	80345da <_dtoa_r+0x632>
 8034418:	d10c      	bne.n	8034434 <_dtoa_r+0x48c>
 803441a:	4b48      	ldr	r3, [pc, #288]	@ (803453c <_dtoa_r+0x594>)
 803441c:	2200      	movs	r2, #0
 803441e:	ec51 0b17 	vmov	r0, r1, d7
 8034422:	f7dc f821 	bl	8010468 <__aeabi_dmul>
 8034426:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 803442a:	f7dc faa3 	bl	8010974 <__aeabi_dcmpge>
 803442e:	2800      	cmp	r0, #0
 8034430:	f000 8266 	beq.w	8034900 <_dtoa_r+0x958>
 8034434:	2400      	movs	r4, #0
 8034436:	4625      	mov	r5, r4
 8034438:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 803443a:	4656      	mov	r6, sl
 803443c:	ea6f 0803 	mvn.w	r8, r3
 8034440:	2700      	movs	r7, #0
 8034442:	4621      	mov	r1, r4
 8034444:	4648      	mov	r0, r9
 8034446:	f000 fc09 	bl	8034c5c <_Bfree>
 803444a:	2d00      	cmp	r5, #0
 803444c:	f000 80bd 	beq.w	80345ca <_dtoa_r+0x622>
 8034450:	b12f      	cbz	r7, 803445e <_dtoa_r+0x4b6>
 8034452:	42af      	cmp	r7, r5
 8034454:	d003      	beq.n	803445e <_dtoa_r+0x4b6>
 8034456:	4639      	mov	r1, r7
 8034458:	4648      	mov	r0, r9
 803445a:	f000 fbff 	bl	8034c5c <_Bfree>
 803445e:	4629      	mov	r1, r5
 8034460:	4648      	mov	r0, r9
 8034462:	f000 fbfb 	bl	8034c5c <_Bfree>
 8034466:	e0b0      	b.n	80345ca <_dtoa_r+0x622>
 8034468:	07e2      	lsls	r2, r4, #31
 803446a:	d505      	bpl.n	8034478 <_dtoa_r+0x4d0>
 803446c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8034470:	f7db fffa 	bl	8010468 <__aeabi_dmul>
 8034474:	3601      	adds	r6, #1
 8034476:	2301      	movs	r3, #1
 8034478:	1064      	asrs	r4, r4, #1
 803447a:	3508      	adds	r5, #8
 803447c:	e762      	b.n	8034344 <_dtoa_r+0x39c>
 803447e:	2602      	movs	r6, #2
 8034480:	e765      	b.n	803434e <_dtoa_r+0x3a6>
 8034482:	9c03      	ldr	r4, [sp, #12]
 8034484:	46b8      	mov	r8, r7
 8034486:	e784      	b.n	8034392 <_dtoa_r+0x3ea>
 8034488:	4b27      	ldr	r3, [pc, #156]	@ (8034528 <_dtoa_r+0x580>)
 803448a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 803448c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8034490:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8034494:	4454      	add	r4, sl
 8034496:	2900      	cmp	r1, #0
 8034498:	d054      	beq.n	8034544 <_dtoa_r+0x59c>
 803449a:	4929      	ldr	r1, [pc, #164]	@ (8034540 <_dtoa_r+0x598>)
 803449c:	2000      	movs	r0, #0
 803449e:	f7dc f90d 	bl	80106bc <__aeabi_ddiv>
 80344a2:	4633      	mov	r3, r6
 80344a4:	462a      	mov	r2, r5
 80344a6:	f7db fe27 	bl	80100f8 <__aeabi_dsub>
 80344aa:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80344ae:	4656      	mov	r6, sl
 80344b0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80344b4:	f7dc fa88 	bl	80109c8 <__aeabi_d2iz>
 80344b8:	4605      	mov	r5, r0
 80344ba:	f7db ff6b 	bl	8010394 <__aeabi_i2d>
 80344be:	4602      	mov	r2, r0
 80344c0:	460b      	mov	r3, r1
 80344c2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80344c6:	f7db fe17 	bl	80100f8 <__aeabi_dsub>
 80344ca:	3530      	adds	r5, #48	@ 0x30
 80344cc:	4602      	mov	r2, r0
 80344ce:	460b      	mov	r3, r1
 80344d0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80344d4:	f806 5b01 	strb.w	r5, [r6], #1
 80344d8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80344dc:	f7dc fa36 	bl	801094c <__aeabi_dcmplt>
 80344e0:	2800      	cmp	r0, #0
 80344e2:	d172      	bne.n	80345ca <_dtoa_r+0x622>
 80344e4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80344e8:	4911      	ldr	r1, [pc, #68]	@ (8034530 <_dtoa_r+0x588>)
 80344ea:	2000      	movs	r0, #0
 80344ec:	f7db fe04 	bl	80100f8 <__aeabi_dsub>
 80344f0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80344f4:	f7dc fa2a 	bl	801094c <__aeabi_dcmplt>
 80344f8:	2800      	cmp	r0, #0
 80344fa:	f040 80b4 	bne.w	8034666 <_dtoa_r+0x6be>
 80344fe:	42a6      	cmp	r6, r4
 8034500:	f43f af70 	beq.w	80343e4 <_dtoa_r+0x43c>
 8034504:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8034508:	4b0a      	ldr	r3, [pc, #40]	@ (8034534 <_dtoa_r+0x58c>)
 803450a:	2200      	movs	r2, #0
 803450c:	f7db ffac 	bl	8010468 <__aeabi_dmul>
 8034510:	4b08      	ldr	r3, [pc, #32]	@ (8034534 <_dtoa_r+0x58c>)
 8034512:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8034516:	2200      	movs	r2, #0
 8034518:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 803451c:	f7db ffa4 	bl	8010468 <__aeabi_dmul>
 8034520:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8034524:	e7c4      	b.n	80344b0 <_dtoa_r+0x508>
 8034526:	bf00      	nop
 8034528:	0803bb18 	.word	0x0803bb18
 803452c:	0803baf0 	.word	0x0803baf0
 8034530:	3ff00000 	.word	0x3ff00000
 8034534:	40240000 	.word	0x40240000
 8034538:	401c0000 	.word	0x401c0000
 803453c:	40140000 	.word	0x40140000
 8034540:	3fe00000 	.word	0x3fe00000
 8034544:	4631      	mov	r1, r6
 8034546:	4628      	mov	r0, r5
 8034548:	f7db ff8e 	bl	8010468 <__aeabi_dmul>
 803454c:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8034550:	9413      	str	r4, [sp, #76]	@ 0x4c
 8034552:	4656      	mov	r6, sl
 8034554:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8034558:	f7dc fa36 	bl	80109c8 <__aeabi_d2iz>
 803455c:	4605      	mov	r5, r0
 803455e:	f7db ff19 	bl	8010394 <__aeabi_i2d>
 8034562:	4602      	mov	r2, r0
 8034564:	460b      	mov	r3, r1
 8034566:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 803456a:	f7db fdc5 	bl	80100f8 <__aeabi_dsub>
 803456e:	3530      	adds	r5, #48	@ 0x30
 8034570:	f806 5b01 	strb.w	r5, [r6], #1
 8034574:	4602      	mov	r2, r0
 8034576:	460b      	mov	r3, r1
 8034578:	42a6      	cmp	r6, r4
 803457a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 803457e:	f04f 0200 	mov.w	r2, #0
 8034582:	d124      	bne.n	80345ce <_dtoa_r+0x626>
 8034584:	4baf      	ldr	r3, [pc, #700]	@ (8034844 <_dtoa_r+0x89c>)
 8034586:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 803458a:	f7db fdb7 	bl	80100fc <__adddf3>
 803458e:	4602      	mov	r2, r0
 8034590:	460b      	mov	r3, r1
 8034592:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8034596:	f7dc f9f7 	bl	8010988 <__aeabi_dcmpgt>
 803459a:	2800      	cmp	r0, #0
 803459c:	d163      	bne.n	8034666 <_dtoa_r+0x6be>
 803459e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80345a2:	49a8      	ldr	r1, [pc, #672]	@ (8034844 <_dtoa_r+0x89c>)
 80345a4:	2000      	movs	r0, #0
 80345a6:	f7db fda7 	bl	80100f8 <__aeabi_dsub>
 80345aa:	4602      	mov	r2, r0
 80345ac:	460b      	mov	r3, r1
 80345ae:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80345b2:	f7dc f9cb 	bl	801094c <__aeabi_dcmplt>
 80345b6:	2800      	cmp	r0, #0
 80345b8:	f43f af14 	beq.w	80343e4 <_dtoa_r+0x43c>
 80345bc:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 80345be:	1e73      	subs	r3, r6, #1
 80345c0:	9313      	str	r3, [sp, #76]	@ 0x4c
 80345c2:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80345c6:	2b30      	cmp	r3, #48	@ 0x30
 80345c8:	d0f8      	beq.n	80345bc <_dtoa_r+0x614>
 80345ca:	4647      	mov	r7, r8
 80345cc:	e03b      	b.n	8034646 <_dtoa_r+0x69e>
 80345ce:	4b9e      	ldr	r3, [pc, #632]	@ (8034848 <_dtoa_r+0x8a0>)
 80345d0:	f7db ff4a 	bl	8010468 <__aeabi_dmul>
 80345d4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80345d8:	e7bc      	b.n	8034554 <_dtoa_r+0x5ac>
 80345da:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 80345de:	4656      	mov	r6, sl
 80345e0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80345e4:	4620      	mov	r0, r4
 80345e6:	4629      	mov	r1, r5
 80345e8:	f7dc f868 	bl	80106bc <__aeabi_ddiv>
 80345ec:	f7dc f9ec 	bl	80109c8 <__aeabi_d2iz>
 80345f0:	4680      	mov	r8, r0
 80345f2:	f7db fecf 	bl	8010394 <__aeabi_i2d>
 80345f6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80345fa:	f7db ff35 	bl	8010468 <__aeabi_dmul>
 80345fe:	4602      	mov	r2, r0
 8034600:	460b      	mov	r3, r1
 8034602:	4620      	mov	r0, r4
 8034604:	4629      	mov	r1, r5
 8034606:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 803460a:	f7db fd75 	bl	80100f8 <__aeabi_dsub>
 803460e:	f806 4b01 	strb.w	r4, [r6], #1
 8034612:	9d03      	ldr	r5, [sp, #12]
 8034614:	eba6 040a 	sub.w	r4, r6, sl
 8034618:	42a5      	cmp	r5, r4
 803461a:	4602      	mov	r2, r0
 803461c:	460b      	mov	r3, r1
 803461e:	d133      	bne.n	8034688 <_dtoa_r+0x6e0>
 8034620:	f7db fd6c 	bl	80100fc <__adddf3>
 8034624:	e9dd 2300 	ldrd	r2, r3, [sp]
 8034628:	4604      	mov	r4, r0
 803462a:	460d      	mov	r5, r1
 803462c:	f7dc f9ac 	bl	8010988 <__aeabi_dcmpgt>
 8034630:	b9c0      	cbnz	r0, 8034664 <_dtoa_r+0x6bc>
 8034632:	e9dd 2300 	ldrd	r2, r3, [sp]
 8034636:	4620      	mov	r0, r4
 8034638:	4629      	mov	r1, r5
 803463a:	f7dc f97d 	bl	8010938 <__aeabi_dcmpeq>
 803463e:	b110      	cbz	r0, 8034646 <_dtoa_r+0x69e>
 8034640:	f018 0f01 	tst.w	r8, #1
 8034644:	d10e      	bne.n	8034664 <_dtoa_r+0x6bc>
 8034646:	9902      	ldr	r1, [sp, #8]
 8034648:	4648      	mov	r0, r9
 803464a:	f000 fb07 	bl	8034c5c <_Bfree>
 803464e:	2300      	movs	r3, #0
 8034650:	7033      	strb	r3, [r6, #0]
 8034652:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8034654:	3701      	adds	r7, #1
 8034656:	601f      	str	r7, [r3, #0]
 8034658:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 803465a:	2b00      	cmp	r3, #0
 803465c:	f000 824b 	beq.w	8034af6 <_dtoa_r+0xb4e>
 8034660:	601e      	str	r6, [r3, #0]
 8034662:	e248      	b.n	8034af6 <_dtoa_r+0xb4e>
 8034664:	46b8      	mov	r8, r7
 8034666:	4633      	mov	r3, r6
 8034668:	461e      	mov	r6, r3
 803466a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 803466e:	2a39      	cmp	r2, #57	@ 0x39
 8034670:	d106      	bne.n	8034680 <_dtoa_r+0x6d8>
 8034672:	459a      	cmp	sl, r3
 8034674:	d1f8      	bne.n	8034668 <_dtoa_r+0x6c0>
 8034676:	2230      	movs	r2, #48	@ 0x30
 8034678:	f108 0801 	add.w	r8, r8, #1
 803467c:	f88a 2000 	strb.w	r2, [sl]
 8034680:	781a      	ldrb	r2, [r3, #0]
 8034682:	3201      	adds	r2, #1
 8034684:	701a      	strb	r2, [r3, #0]
 8034686:	e7a0      	b.n	80345ca <_dtoa_r+0x622>
 8034688:	4b6f      	ldr	r3, [pc, #444]	@ (8034848 <_dtoa_r+0x8a0>)
 803468a:	2200      	movs	r2, #0
 803468c:	f7db feec 	bl	8010468 <__aeabi_dmul>
 8034690:	2200      	movs	r2, #0
 8034692:	2300      	movs	r3, #0
 8034694:	4604      	mov	r4, r0
 8034696:	460d      	mov	r5, r1
 8034698:	f7dc f94e 	bl	8010938 <__aeabi_dcmpeq>
 803469c:	2800      	cmp	r0, #0
 803469e:	d09f      	beq.n	80345e0 <_dtoa_r+0x638>
 80346a0:	e7d1      	b.n	8034646 <_dtoa_r+0x69e>
 80346a2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80346a4:	2a00      	cmp	r2, #0
 80346a6:	f000 80ea 	beq.w	803487e <_dtoa_r+0x8d6>
 80346aa:	9a07      	ldr	r2, [sp, #28]
 80346ac:	2a01      	cmp	r2, #1
 80346ae:	f300 80cd 	bgt.w	803484c <_dtoa_r+0x8a4>
 80346b2:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80346b4:	2a00      	cmp	r2, #0
 80346b6:	f000 80c1 	beq.w	803483c <_dtoa_r+0x894>
 80346ba:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80346be:	9c08      	ldr	r4, [sp, #32]
 80346c0:	9e00      	ldr	r6, [sp, #0]
 80346c2:	9a00      	ldr	r2, [sp, #0]
 80346c4:	441a      	add	r2, r3
 80346c6:	9200      	str	r2, [sp, #0]
 80346c8:	9a06      	ldr	r2, [sp, #24]
 80346ca:	2101      	movs	r1, #1
 80346cc:	441a      	add	r2, r3
 80346ce:	4648      	mov	r0, r9
 80346d0:	9206      	str	r2, [sp, #24]
 80346d2:	f000 fb77 	bl	8034dc4 <__i2b>
 80346d6:	4605      	mov	r5, r0
 80346d8:	b166      	cbz	r6, 80346f4 <_dtoa_r+0x74c>
 80346da:	9b06      	ldr	r3, [sp, #24]
 80346dc:	2b00      	cmp	r3, #0
 80346de:	dd09      	ble.n	80346f4 <_dtoa_r+0x74c>
 80346e0:	42b3      	cmp	r3, r6
 80346e2:	9a00      	ldr	r2, [sp, #0]
 80346e4:	bfa8      	it	ge
 80346e6:	4633      	movge	r3, r6
 80346e8:	1ad2      	subs	r2, r2, r3
 80346ea:	9200      	str	r2, [sp, #0]
 80346ec:	9a06      	ldr	r2, [sp, #24]
 80346ee:	1af6      	subs	r6, r6, r3
 80346f0:	1ad3      	subs	r3, r2, r3
 80346f2:	9306      	str	r3, [sp, #24]
 80346f4:	9b08      	ldr	r3, [sp, #32]
 80346f6:	b30b      	cbz	r3, 803473c <_dtoa_r+0x794>
 80346f8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80346fa:	2b00      	cmp	r3, #0
 80346fc:	f000 80c6 	beq.w	803488c <_dtoa_r+0x8e4>
 8034700:	2c00      	cmp	r4, #0
 8034702:	f000 80c0 	beq.w	8034886 <_dtoa_r+0x8de>
 8034706:	4629      	mov	r1, r5
 8034708:	4622      	mov	r2, r4
 803470a:	4648      	mov	r0, r9
 803470c:	f000 fc12 	bl	8034f34 <__pow5mult>
 8034710:	9a02      	ldr	r2, [sp, #8]
 8034712:	4601      	mov	r1, r0
 8034714:	4605      	mov	r5, r0
 8034716:	4648      	mov	r0, r9
 8034718:	f000 fb6a 	bl	8034df0 <__multiply>
 803471c:	9902      	ldr	r1, [sp, #8]
 803471e:	4680      	mov	r8, r0
 8034720:	4648      	mov	r0, r9
 8034722:	f000 fa9b 	bl	8034c5c <_Bfree>
 8034726:	9b08      	ldr	r3, [sp, #32]
 8034728:	1b1b      	subs	r3, r3, r4
 803472a:	9308      	str	r3, [sp, #32]
 803472c:	f000 80b1 	beq.w	8034892 <_dtoa_r+0x8ea>
 8034730:	9a08      	ldr	r2, [sp, #32]
 8034732:	4641      	mov	r1, r8
 8034734:	4648      	mov	r0, r9
 8034736:	f000 fbfd 	bl	8034f34 <__pow5mult>
 803473a:	9002      	str	r0, [sp, #8]
 803473c:	2101      	movs	r1, #1
 803473e:	4648      	mov	r0, r9
 8034740:	f000 fb40 	bl	8034dc4 <__i2b>
 8034744:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8034746:	4604      	mov	r4, r0
 8034748:	2b00      	cmp	r3, #0
 803474a:	f000 81d8 	beq.w	8034afe <_dtoa_r+0xb56>
 803474e:	461a      	mov	r2, r3
 8034750:	4601      	mov	r1, r0
 8034752:	4648      	mov	r0, r9
 8034754:	f000 fbee 	bl	8034f34 <__pow5mult>
 8034758:	9b07      	ldr	r3, [sp, #28]
 803475a:	2b01      	cmp	r3, #1
 803475c:	4604      	mov	r4, r0
 803475e:	f300 809f 	bgt.w	80348a0 <_dtoa_r+0x8f8>
 8034762:	9b04      	ldr	r3, [sp, #16]
 8034764:	2b00      	cmp	r3, #0
 8034766:	f040 8097 	bne.w	8034898 <_dtoa_r+0x8f0>
 803476a:	9b05      	ldr	r3, [sp, #20]
 803476c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8034770:	2b00      	cmp	r3, #0
 8034772:	f040 8093 	bne.w	803489c <_dtoa_r+0x8f4>
 8034776:	9b05      	ldr	r3, [sp, #20]
 8034778:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 803477c:	0d1b      	lsrs	r3, r3, #20
 803477e:	051b      	lsls	r3, r3, #20
 8034780:	b133      	cbz	r3, 8034790 <_dtoa_r+0x7e8>
 8034782:	9b00      	ldr	r3, [sp, #0]
 8034784:	3301      	adds	r3, #1
 8034786:	9300      	str	r3, [sp, #0]
 8034788:	9b06      	ldr	r3, [sp, #24]
 803478a:	3301      	adds	r3, #1
 803478c:	9306      	str	r3, [sp, #24]
 803478e:	2301      	movs	r3, #1
 8034790:	9308      	str	r3, [sp, #32]
 8034792:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8034794:	2b00      	cmp	r3, #0
 8034796:	f000 81b8 	beq.w	8034b0a <_dtoa_r+0xb62>
 803479a:	6923      	ldr	r3, [r4, #16]
 803479c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80347a0:	6918      	ldr	r0, [r3, #16]
 80347a2:	f000 fac3 	bl	8034d2c <__hi0bits>
 80347a6:	f1c0 0020 	rsb	r0, r0, #32
 80347aa:	9b06      	ldr	r3, [sp, #24]
 80347ac:	4418      	add	r0, r3
 80347ae:	f010 001f 	ands.w	r0, r0, #31
 80347b2:	f000 8082 	beq.w	80348ba <_dtoa_r+0x912>
 80347b6:	f1c0 0320 	rsb	r3, r0, #32
 80347ba:	2b04      	cmp	r3, #4
 80347bc:	dd73      	ble.n	80348a6 <_dtoa_r+0x8fe>
 80347be:	9b00      	ldr	r3, [sp, #0]
 80347c0:	f1c0 001c 	rsb	r0, r0, #28
 80347c4:	4403      	add	r3, r0
 80347c6:	9300      	str	r3, [sp, #0]
 80347c8:	9b06      	ldr	r3, [sp, #24]
 80347ca:	4403      	add	r3, r0
 80347cc:	4406      	add	r6, r0
 80347ce:	9306      	str	r3, [sp, #24]
 80347d0:	9b00      	ldr	r3, [sp, #0]
 80347d2:	2b00      	cmp	r3, #0
 80347d4:	dd05      	ble.n	80347e2 <_dtoa_r+0x83a>
 80347d6:	9902      	ldr	r1, [sp, #8]
 80347d8:	461a      	mov	r2, r3
 80347da:	4648      	mov	r0, r9
 80347dc:	f000 fc04 	bl	8034fe8 <__lshift>
 80347e0:	9002      	str	r0, [sp, #8]
 80347e2:	9b06      	ldr	r3, [sp, #24]
 80347e4:	2b00      	cmp	r3, #0
 80347e6:	dd05      	ble.n	80347f4 <_dtoa_r+0x84c>
 80347e8:	4621      	mov	r1, r4
 80347ea:	461a      	mov	r2, r3
 80347ec:	4648      	mov	r0, r9
 80347ee:	f000 fbfb 	bl	8034fe8 <__lshift>
 80347f2:	4604      	mov	r4, r0
 80347f4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80347f6:	2b00      	cmp	r3, #0
 80347f8:	d061      	beq.n	80348be <_dtoa_r+0x916>
 80347fa:	9802      	ldr	r0, [sp, #8]
 80347fc:	4621      	mov	r1, r4
 80347fe:	f000 fc5f 	bl	80350c0 <__mcmp>
 8034802:	2800      	cmp	r0, #0
 8034804:	da5b      	bge.n	80348be <_dtoa_r+0x916>
 8034806:	2300      	movs	r3, #0
 8034808:	9902      	ldr	r1, [sp, #8]
 803480a:	220a      	movs	r2, #10
 803480c:	4648      	mov	r0, r9
 803480e:	f000 fa47 	bl	8034ca0 <__multadd>
 8034812:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8034814:	9002      	str	r0, [sp, #8]
 8034816:	f107 38ff 	add.w	r8, r7, #4294967295
 803481a:	2b00      	cmp	r3, #0
 803481c:	f000 8177 	beq.w	8034b0e <_dtoa_r+0xb66>
 8034820:	4629      	mov	r1, r5
 8034822:	2300      	movs	r3, #0
 8034824:	220a      	movs	r2, #10
 8034826:	4648      	mov	r0, r9
 8034828:	f000 fa3a 	bl	8034ca0 <__multadd>
 803482c:	f1bb 0f00 	cmp.w	fp, #0
 8034830:	4605      	mov	r5, r0
 8034832:	dc6f      	bgt.n	8034914 <_dtoa_r+0x96c>
 8034834:	9b07      	ldr	r3, [sp, #28]
 8034836:	2b02      	cmp	r3, #2
 8034838:	dc49      	bgt.n	80348ce <_dtoa_r+0x926>
 803483a:	e06b      	b.n	8034914 <_dtoa_r+0x96c>
 803483c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 803483e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8034842:	e73c      	b.n	80346be <_dtoa_r+0x716>
 8034844:	3fe00000 	.word	0x3fe00000
 8034848:	40240000 	.word	0x40240000
 803484c:	9b03      	ldr	r3, [sp, #12]
 803484e:	1e5c      	subs	r4, r3, #1
 8034850:	9b08      	ldr	r3, [sp, #32]
 8034852:	42a3      	cmp	r3, r4
 8034854:	db09      	blt.n	803486a <_dtoa_r+0x8c2>
 8034856:	1b1c      	subs	r4, r3, r4
 8034858:	9b03      	ldr	r3, [sp, #12]
 803485a:	2b00      	cmp	r3, #0
 803485c:	f6bf af30 	bge.w	80346c0 <_dtoa_r+0x718>
 8034860:	9b00      	ldr	r3, [sp, #0]
 8034862:	9a03      	ldr	r2, [sp, #12]
 8034864:	1a9e      	subs	r6, r3, r2
 8034866:	2300      	movs	r3, #0
 8034868:	e72b      	b.n	80346c2 <_dtoa_r+0x71a>
 803486a:	9b08      	ldr	r3, [sp, #32]
 803486c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 803486e:	9408      	str	r4, [sp, #32]
 8034870:	1ae3      	subs	r3, r4, r3
 8034872:	441a      	add	r2, r3
 8034874:	9e00      	ldr	r6, [sp, #0]
 8034876:	9b03      	ldr	r3, [sp, #12]
 8034878:	920d      	str	r2, [sp, #52]	@ 0x34
 803487a:	2400      	movs	r4, #0
 803487c:	e721      	b.n	80346c2 <_dtoa_r+0x71a>
 803487e:	9c08      	ldr	r4, [sp, #32]
 8034880:	9e00      	ldr	r6, [sp, #0]
 8034882:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8034884:	e728      	b.n	80346d8 <_dtoa_r+0x730>
 8034886:	f8dd 8008 	ldr.w	r8, [sp, #8]
 803488a:	e751      	b.n	8034730 <_dtoa_r+0x788>
 803488c:	9a08      	ldr	r2, [sp, #32]
 803488e:	9902      	ldr	r1, [sp, #8]
 8034890:	e750      	b.n	8034734 <_dtoa_r+0x78c>
 8034892:	f8cd 8008 	str.w	r8, [sp, #8]
 8034896:	e751      	b.n	803473c <_dtoa_r+0x794>
 8034898:	2300      	movs	r3, #0
 803489a:	e779      	b.n	8034790 <_dtoa_r+0x7e8>
 803489c:	9b04      	ldr	r3, [sp, #16]
 803489e:	e777      	b.n	8034790 <_dtoa_r+0x7e8>
 80348a0:	2300      	movs	r3, #0
 80348a2:	9308      	str	r3, [sp, #32]
 80348a4:	e779      	b.n	803479a <_dtoa_r+0x7f2>
 80348a6:	d093      	beq.n	80347d0 <_dtoa_r+0x828>
 80348a8:	9a00      	ldr	r2, [sp, #0]
 80348aa:	331c      	adds	r3, #28
 80348ac:	441a      	add	r2, r3
 80348ae:	9200      	str	r2, [sp, #0]
 80348b0:	9a06      	ldr	r2, [sp, #24]
 80348b2:	441a      	add	r2, r3
 80348b4:	441e      	add	r6, r3
 80348b6:	9206      	str	r2, [sp, #24]
 80348b8:	e78a      	b.n	80347d0 <_dtoa_r+0x828>
 80348ba:	4603      	mov	r3, r0
 80348bc:	e7f4      	b.n	80348a8 <_dtoa_r+0x900>
 80348be:	9b03      	ldr	r3, [sp, #12]
 80348c0:	2b00      	cmp	r3, #0
 80348c2:	46b8      	mov	r8, r7
 80348c4:	dc20      	bgt.n	8034908 <_dtoa_r+0x960>
 80348c6:	469b      	mov	fp, r3
 80348c8:	9b07      	ldr	r3, [sp, #28]
 80348ca:	2b02      	cmp	r3, #2
 80348cc:	dd1e      	ble.n	803490c <_dtoa_r+0x964>
 80348ce:	f1bb 0f00 	cmp.w	fp, #0
 80348d2:	f47f adb1 	bne.w	8034438 <_dtoa_r+0x490>
 80348d6:	4621      	mov	r1, r4
 80348d8:	465b      	mov	r3, fp
 80348da:	2205      	movs	r2, #5
 80348dc:	4648      	mov	r0, r9
 80348de:	f000 f9df 	bl	8034ca0 <__multadd>
 80348e2:	4601      	mov	r1, r0
 80348e4:	4604      	mov	r4, r0
 80348e6:	9802      	ldr	r0, [sp, #8]
 80348e8:	f000 fbea 	bl	80350c0 <__mcmp>
 80348ec:	2800      	cmp	r0, #0
 80348ee:	f77f ada3 	ble.w	8034438 <_dtoa_r+0x490>
 80348f2:	4656      	mov	r6, sl
 80348f4:	2331      	movs	r3, #49	@ 0x31
 80348f6:	f806 3b01 	strb.w	r3, [r6], #1
 80348fa:	f108 0801 	add.w	r8, r8, #1
 80348fe:	e59f      	b.n	8034440 <_dtoa_r+0x498>
 8034900:	9c03      	ldr	r4, [sp, #12]
 8034902:	46b8      	mov	r8, r7
 8034904:	4625      	mov	r5, r4
 8034906:	e7f4      	b.n	80348f2 <_dtoa_r+0x94a>
 8034908:	f8dd b00c 	ldr.w	fp, [sp, #12]
 803490c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 803490e:	2b00      	cmp	r3, #0
 8034910:	f000 8101 	beq.w	8034b16 <_dtoa_r+0xb6e>
 8034914:	2e00      	cmp	r6, #0
 8034916:	dd05      	ble.n	8034924 <_dtoa_r+0x97c>
 8034918:	4629      	mov	r1, r5
 803491a:	4632      	mov	r2, r6
 803491c:	4648      	mov	r0, r9
 803491e:	f000 fb63 	bl	8034fe8 <__lshift>
 8034922:	4605      	mov	r5, r0
 8034924:	9b08      	ldr	r3, [sp, #32]
 8034926:	2b00      	cmp	r3, #0
 8034928:	d05c      	beq.n	80349e4 <_dtoa_r+0xa3c>
 803492a:	6869      	ldr	r1, [r5, #4]
 803492c:	4648      	mov	r0, r9
 803492e:	f000 f955 	bl	8034bdc <_Balloc>
 8034932:	4606      	mov	r6, r0
 8034934:	b928      	cbnz	r0, 8034942 <_dtoa_r+0x99a>
 8034936:	4b82      	ldr	r3, [pc, #520]	@ (8034b40 <_dtoa_r+0xb98>)
 8034938:	4602      	mov	r2, r0
 803493a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 803493e:	f7ff bb4a 	b.w	8033fd6 <_dtoa_r+0x2e>
 8034942:	692a      	ldr	r2, [r5, #16]
 8034944:	3202      	adds	r2, #2
 8034946:	0092      	lsls	r2, r2, #2
 8034948:	f105 010c 	add.w	r1, r5, #12
 803494c:	300c      	adds	r0, #12
 803494e:	f7ff fa94 	bl	8033e7a <memcpy>
 8034952:	2201      	movs	r2, #1
 8034954:	4631      	mov	r1, r6
 8034956:	4648      	mov	r0, r9
 8034958:	f000 fb46 	bl	8034fe8 <__lshift>
 803495c:	f10a 0301 	add.w	r3, sl, #1
 8034960:	9300      	str	r3, [sp, #0]
 8034962:	eb0a 030b 	add.w	r3, sl, fp
 8034966:	9308      	str	r3, [sp, #32]
 8034968:	9b04      	ldr	r3, [sp, #16]
 803496a:	f003 0301 	and.w	r3, r3, #1
 803496e:	462f      	mov	r7, r5
 8034970:	9306      	str	r3, [sp, #24]
 8034972:	4605      	mov	r5, r0
 8034974:	9b00      	ldr	r3, [sp, #0]
 8034976:	9802      	ldr	r0, [sp, #8]
 8034978:	4621      	mov	r1, r4
 803497a:	f103 3bff 	add.w	fp, r3, #4294967295
 803497e:	f7ff fa8a 	bl	8033e96 <quorem>
 8034982:	4603      	mov	r3, r0
 8034984:	3330      	adds	r3, #48	@ 0x30
 8034986:	9003      	str	r0, [sp, #12]
 8034988:	4639      	mov	r1, r7
 803498a:	9802      	ldr	r0, [sp, #8]
 803498c:	9309      	str	r3, [sp, #36]	@ 0x24
 803498e:	f000 fb97 	bl	80350c0 <__mcmp>
 8034992:	462a      	mov	r2, r5
 8034994:	9004      	str	r0, [sp, #16]
 8034996:	4621      	mov	r1, r4
 8034998:	4648      	mov	r0, r9
 803499a:	f000 fbad 	bl	80350f8 <__mdiff>
 803499e:	68c2      	ldr	r2, [r0, #12]
 80349a0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80349a2:	4606      	mov	r6, r0
 80349a4:	bb02      	cbnz	r2, 80349e8 <_dtoa_r+0xa40>
 80349a6:	4601      	mov	r1, r0
 80349a8:	9802      	ldr	r0, [sp, #8]
 80349aa:	f000 fb89 	bl	80350c0 <__mcmp>
 80349ae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80349b0:	4602      	mov	r2, r0
 80349b2:	4631      	mov	r1, r6
 80349b4:	4648      	mov	r0, r9
 80349b6:	920c      	str	r2, [sp, #48]	@ 0x30
 80349b8:	9309      	str	r3, [sp, #36]	@ 0x24
 80349ba:	f000 f94f 	bl	8034c5c <_Bfree>
 80349be:	9b07      	ldr	r3, [sp, #28]
 80349c0:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80349c2:	9e00      	ldr	r6, [sp, #0]
 80349c4:	ea42 0103 	orr.w	r1, r2, r3
 80349c8:	9b06      	ldr	r3, [sp, #24]
 80349ca:	4319      	orrs	r1, r3
 80349cc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80349ce:	d10d      	bne.n	80349ec <_dtoa_r+0xa44>
 80349d0:	2b39      	cmp	r3, #57	@ 0x39
 80349d2:	d027      	beq.n	8034a24 <_dtoa_r+0xa7c>
 80349d4:	9a04      	ldr	r2, [sp, #16]
 80349d6:	2a00      	cmp	r2, #0
 80349d8:	dd01      	ble.n	80349de <_dtoa_r+0xa36>
 80349da:	9b03      	ldr	r3, [sp, #12]
 80349dc:	3331      	adds	r3, #49	@ 0x31
 80349de:	f88b 3000 	strb.w	r3, [fp]
 80349e2:	e52e      	b.n	8034442 <_dtoa_r+0x49a>
 80349e4:	4628      	mov	r0, r5
 80349e6:	e7b9      	b.n	803495c <_dtoa_r+0x9b4>
 80349e8:	2201      	movs	r2, #1
 80349ea:	e7e2      	b.n	80349b2 <_dtoa_r+0xa0a>
 80349ec:	9904      	ldr	r1, [sp, #16]
 80349ee:	2900      	cmp	r1, #0
 80349f0:	db04      	blt.n	80349fc <_dtoa_r+0xa54>
 80349f2:	9807      	ldr	r0, [sp, #28]
 80349f4:	4301      	orrs	r1, r0
 80349f6:	9806      	ldr	r0, [sp, #24]
 80349f8:	4301      	orrs	r1, r0
 80349fa:	d120      	bne.n	8034a3e <_dtoa_r+0xa96>
 80349fc:	2a00      	cmp	r2, #0
 80349fe:	ddee      	ble.n	80349de <_dtoa_r+0xa36>
 8034a00:	9902      	ldr	r1, [sp, #8]
 8034a02:	9300      	str	r3, [sp, #0]
 8034a04:	2201      	movs	r2, #1
 8034a06:	4648      	mov	r0, r9
 8034a08:	f000 faee 	bl	8034fe8 <__lshift>
 8034a0c:	4621      	mov	r1, r4
 8034a0e:	9002      	str	r0, [sp, #8]
 8034a10:	f000 fb56 	bl	80350c0 <__mcmp>
 8034a14:	2800      	cmp	r0, #0
 8034a16:	9b00      	ldr	r3, [sp, #0]
 8034a18:	dc02      	bgt.n	8034a20 <_dtoa_r+0xa78>
 8034a1a:	d1e0      	bne.n	80349de <_dtoa_r+0xa36>
 8034a1c:	07da      	lsls	r2, r3, #31
 8034a1e:	d5de      	bpl.n	80349de <_dtoa_r+0xa36>
 8034a20:	2b39      	cmp	r3, #57	@ 0x39
 8034a22:	d1da      	bne.n	80349da <_dtoa_r+0xa32>
 8034a24:	2339      	movs	r3, #57	@ 0x39
 8034a26:	f88b 3000 	strb.w	r3, [fp]
 8034a2a:	4633      	mov	r3, r6
 8034a2c:	461e      	mov	r6, r3
 8034a2e:	3b01      	subs	r3, #1
 8034a30:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8034a34:	2a39      	cmp	r2, #57	@ 0x39
 8034a36:	d04e      	beq.n	8034ad6 <_dtoa_r+0xb2e>
 8034a38:	3201      	adds	r2, #1
 8034a3a:	701a      	strb	r2, [r3, #0]
 8034a3c:	e501      	b.n	8034442 <_dtoa_r+0x49a>
 8034a3e:	2a00      	cmp	r2, #0
 8034a40:	dd03      	ble.n	8034a4a <_dtoa_r+0xaa2>
 8034a42:	2b39      	cmp	r3, #57	@ 0x39
 8034a44:	d0ee      	beq.n	8034a24 <_dtoa_r+0xa7c>
 8034a46:	3301      	adds	r3, #1
 8034a48:	e7c9      	b.n	80349de <_dtoa_r+0xa36>
 8034a4a:	9a00      	ldr	r2, [sp, #0]
 8034a4c:	9908      	ldr	r1, [sp, #32]
 8034a4e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8034a52:	428a      	cmp	r2, r1
 8034a54:	d028      	beq.n	8034aa8 <_dtoa_r+0xb00>
 8034a56:	9902      	ldr	r1, [sp, #8]
 8034a58:	2300      	movs	r3, #0
 8034a5a:	220a      	movs	r2, #10
 8034a5c:	4648      	mov	r0, r9
 8034a5e:	f000 f91f 	bl	8034ca0 <__multadd>
 8034a62:	42af      	cmp	r7, r5
 8034a64:	9002      	str	r0, [sp, #8]
 8034a66:	f04f 0300 	mov.w	r3, #0
 8034a6a:	f04f 020a 	mov.w	r2, #10
 8034a6e:	4639      	mov	r1, r7
 8034a70:	4648      	mov	r0, r9
 8034a72:	d107      	bne.n	8034a84 <_dtoa_r+0xadc>
 8034a74:	f000 f914 	bl	8034ca0 <__multadd>
 8034a78:	4607      	mov	r7, r0
 8034a7a:	4605      	mov	r5, r0
 8034a7c:	9b00      	ldr	r3, [sp, #0]
 8034a7e:	3301      	adds	r3, #1
 8034a80:	9300      	str	r3, [sp, #0]
 8034a82:	e777      	b.n	8034974 <_dtoa_r+0x9cc>
 8034a84:	f000 f90c 	bl	8034ca0 <__multadd>
 8034a88:	4629      	mov	r1, r5
 8034a8a:	4607      	mov	r7, r0
 8034a8c:	2300      	movs	r3, #0
 8034a8e:	220a      	movs	r2, #10
 8034a90:	4648      	mov	r0, r9
 8034a92:	f000 f905 	bl	8034ca0 <__multadd>
 8034a96:	4605      	mov	r5, r0
 8034a98:	e7f0      	b.n	8034a7c <_dtoa_r+0xad4>
 8034a9a:	f1bb 0f00 	cmp.w	fp, #0
 8034a9e:	bfcc      	ite	gt
 8034aa0:	465e      	movgt	r6, fp
 8034aa2:	2601      	movle	r6, #1
 8034aa4:	4456      	add	r6, sl
 8034aa6:	2700      	movs	r7, #0
 8034aa8:	9902      	ldr	r1, [sp, #8]
 8034aaa:	9300      	str	r3, [sp, #0]
 8034aac:	2201      	movs	r2, #1
 8034aae:	4648      	mov	r0, r9
 8034ab0:	f000 fa9a 	bl	8034fe8 <__lshift>
 8034ab4:	4621      	mov	r1, r4
 8034ab6:	9002      	str	r0, [sp, #8]
 8034ab8:	f000 fb02 	bl	80350c0 <__mcmp>
 8034abc:	2800      	cmp	r0, #0
 8034abe:	dcb4      	bgt.n	8034a2a <_dtoa_r+0xa82>
 8034ac0:	d102      	bne.n	8034ac8 <_dtoa_r+0xb20>
 8034ac2:	9b00      	ldr	r3, [sp, #0]
 8034ac4:	07db      	lsls	r3, r3, #31
 8034ac6:	d4b0      	bmi.n	8034a2a <_dtoa_r+0xa82>
 8034ac8:	4633      	mov	r3, r6
 8034aca:	461e      	mov	r6, r3
 8034acc:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8034ad0:	2a30      	cmp	r2, #48	@ 0x30
 8034ad2:	d0fa      	beq.n	8034aca <_dtoa_r+0xb22>
 8034ad4:	e4b5      	b.n	8034442 <_dtoa_r+0x49a>
 8034ad6:	459a      	cmp	sl, r3
 8034ad8:	d1a8      	bne.n	8034a2c <_dtoa_r+0xa84>
 8034ada:	2331      	movs	r3, #49	@ 0x31
 8034adc:	f108 0801 	add.w	r8, r8, #1
 8034ae0:	f88a 3000 	strb.w	r3, [sl]
 8034ae4:	e4ad      	b.n	8034442 <_dtoa_r+0x49a>
 8034ae6:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8034ae8:	f8df a058 	ldr.w	sl, [pc, #88]	@ 8034b44 <_dtoa_r+0xb9c>
 8034aec:	b11b      	cbz	r3, 8034af6 <_dtoa_r+0xb4e>
 8034aee:	f10a 0308 	add.w	r3, sl, #8
 8034af2:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8034af4:	6013      	str	r3, [r2, #0]
 8034af6:	4650      	mov	r0, sl
 8034af8:	b017      	add	sp, #92	@ 0x5c
 8034afa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8034afe:	9b07      	ldr	r3, [sp, #28]
 8034b00:	2b01      	cmp	r3, #1
 8034b02:	f77f ae2e 	ble.w	8034762 <_dtoa_r+0x7ba>
 8034b06:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8034b08:	9308      	str	r3, [sp, #32]
 8034b0a:	2001      	movs	r0, #1
 8034b0c:	e64d      	b.n	80347aa <_dtoa_r+0x802>
 8034b0e:	f1bb 0f00 	cmp.w	fp, #0
 8034b12:	f77f aed9 	ble.w	80348c8 <_dtoa_r+0x920>
 8034b16:	4656      	mov	r6, sl
 8034b18:	9802      	ldr	r0, [sp, #8]
 8034b1a:	4621      	mov	r1, r4
 8034b1c:	f7ff f9bb 	bl	8033e96 <quorem>
 8034b20:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 8034b24:	f806 3b01 	strb.w	r3, [r6], #1
 8034b28:	eba6 020a 	sub.w	r2, r6, sl
 8034b2c:	4593      	cmp	fp, r2
 8034b2e:	ddb4      	ble.n	8034a9a <_dtoa_r+0xaf2>
 8034b30:	9902      	ldr	r1, [sp, #8]
 8034b32:	2300      	movs	r3, #0
 8034b34:	220a      	movs	r2, #10
 8034b36:	4648      	mov	r0, r9
 8034b38:	f000 f8b2 	bl	8034ca0 <__multadd>
 8034b3c:	9002      	str	r0, [sp, #8]
 8034b3e:	e7eb      	b.n	8034b18 <_dtoa_r+0xb70>
 8034b40:	0803ba20 	.word	0x0803ba20
 8034b44:	0803b9a4 	.word	0x0803b9a4

08034b48 <_free_r>:
 8034b48:	b538      	push	{r3, r4, r5, lr}
 8034b4a:	4605      	mov	r5, r0
 8034b4c:	2900      	cmp	r1, #0
 8034b4e:	d041      	beq.n	8034bd4 <_free_r+0x8c>
 8034b50:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8034b54:	1f0c      	subs	r4, r1, #4
 8034b56:	2b00      	cmp	r3, #0
 8034b58:	bfb8      	it	lt
 8034b5a:	18e4      	addlt	r4, r4, r3
 8034b5c:	f7fe fa14 	bl	8032f88 <__malloc_lock>
 8034b60:	4a1d      	ldr	r2, [pc, #116]	@ (8034bd8 <_free_r+0x90>)
 8034b62:	6813      	ldr	r3, [r2, #0]
 8034b64:	b933      	cbnz	r3, 8034b74 <_free_r+0x2c>
 8034b66:	6063      	str	r3, [r4, #4]
 8034b68:	6014      	str	r4, [r2, #0]
 8034b6a:	4628      	mov	r0, r5
 8034b6c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8034b70:	f7fe ba10 	b.w	8032f94 <__malloc_unlock>
 8034b74:	42a3      	cmp	r3, r4
 8034b76:	d908      	bls.n	8034b8a <_free_r+0x42>
 8034b78:	6820      	ldr	r0, [r4, #0]
 8034b7a:	1821      	adds	r1, r4, r0
 8034b7c:	428b      	cmp	r3, r1
 8034b7e:	bf01      	itttt	eq
 8034b80:	6819      	ldreq	r1, [r3, #0]
 8034b82:	685b      	ldreq	r3, [r3, #4]
 8034b84:	1809      	addeq	r1, r1, r0
 8034b86:	6021      	streq	r1, [r4, #0]
 8034b88:	e7ed      	b.n	8034b66 <_free_r+0x1e>
 8034b8a:	461a      	mov	r2, r3
 8034b8c:	685b      	ldr	r3, [r3, #4]
 8034b8e:	b10b      	cbz	r3, 8034b94 <_free_r+0x4c>
 8034b90:	42a3      	cmp	r3, r4
 8034b92:	d9fa      	bls.n	8034b8a <_free_r+0x42>
 8034b94:	6811      	ldr	r1, [r2, #0]
 8034b96:	1850      	adds	r0, r2, r1
 8034b98:	42a0      	cmp	r0, r4
 8034b9a:	d10b      	bne.n	8034bb4 <_free_r+0x6c>
 8034b9c:	6820      	ldr	r0, [r4, #0]
 8034b9e:	4401      	add	r1, r0
 8034ba0:	1850      	adds	r0, r2, r1
 8034ba2:	4283      	cmp	r3, r0
 8034ba4:	6011      	str	r1, [r2, #0]
 8034ba6:	d1e0      	bne.n	8034b6a <_free_r+0x22>
 8034ba8:	6818      	ldr	r0, [r3, #0]
 8034baa:	685b      	ldr	r3, [r3, #4]
 8034bac:	6053      	str	r3, [r2, #4]
 8034bae:	4408      	add	r0, r1
 8034bb0:	6010      	str	r0, [r2, #0]
 8034bb2:	e7da      	b.n	8034b6a <_free_r+0x22>
 8034bb4:	d902      	bls.n	8034bbc <_free_r+0x74>
 8034bb6:	230c      	movs	r3, #12
 8034bb8:	602b      	str	r3, [r5, #0]
 8034bba:	e7d6      	b.n	8034b6a <_free_r+0x22>
 8034bbc:	6820      	ldr	r0, [r4, #0]
 8034bbe:	1821      	adds	r1, r4, r0
 8034bc0:	428b      	cmp	r3, r1
 8034bc2:	bf04      	itt	eq
 8034bc4:	6819      	ldreq	r1, [r3, #0]
 8034bc6:	685b      	ldreq	r3, [r3, #4]
 8034bc8:	6063      	str	r3, [r4, #4]
 8034bca:	bf04      	itt	eq
 8034bcc:	1809      	addeq	r1, r1, r0
 8034bce:	6021      	streq	r1, [r4, #0]
 8034bd0:	6054      	str	r4, [r2, #4]
 8034bd2:	e7ca      	b.n	8034b6a <_free_r+0x22>
 8034bd4:	bd38      	pop	{r3, r4, r5, pc}
 8034bd6:	bf00      	nop
 8034bd8:	200056ac 	.word	0x200056ac

08034bdc <_Balloc>:
 8034bdc:	b570      	push	{r4, r5, r6, lr}
 8034bde:	69c6      	ldr	r6, [r0, #28]
 8034be0:	4604      	mov	r4, r0
 8034be2:	460d      	mov	r5, r1
 8034be4:	b976      	cbnz	r6, 8034c04 <_Balloc+0x28>
 8034be6:	2010      	movs	r0, #16
 8034be8:	f7fe f924 	bl	8032e34 <malloc>
 8034bec:	4602      	mov	r2, r0
 8034bee:	61e0      	str	r0, [r4, #28]
 8034bf0:	b920      	cbnz	r0, 8034bfc <_Balloc+0x20>
 8034bf2:	4b18      	ldr	r3, [pc, #96]	@ (8034c54 <_Balloc+0x78>)
 8034bf4:	4818      	ldr	r0, [pc, #96]	@ (8034c58 <_Balloc+0x7c>)
 8034bf6:	216b      	movs	r1, #107	@ 0x6b
 8034bf8:	f000 ff3c 	bl	8035a74 <__assert_func>
 8034bfc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8034c00:	6006      	str	r6, [r0, #0]
 8034c02:	60c6      	str	r6, [r0, #12]
 8034c04:	69e6      	ldr	r6, [r4, #28]
 8034c06:	68f3      	ldr	r3, [r6, #12]
 8034c08:	b183      	cbz	r3, 8034c2c <_Balloc+0x50>
 8034c0a:	69e3      	ldr	r3, [r4, #28]
 8034c0c:	68db      	ldr	r3, [r3, #12]
 8034c0e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8034c12:	b9b8      	cbnz	r0, 8034c44 <_Balloc+0x68>
 8034c14:	2101      	movs	r1, #1
 8034c16:	fa01 f605 	lsl.w	r6, r1, r5
 8034c1a:	1d72      	adds	r2, r6, #5
 8034c1c:	0092      	lsls	r2, r2, #2
 8034c1e:	4620      	mov	r0, r4
 8034c20:	f000 ff46 	bl	8035ab0 <_calloc_r>
 8034c24:	b160      	cbz	r0, 8034c40 <_Balloc+0x64>
 8034c26:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8034c2a:	e00e      	b.n	8034c4a <_Balloc+0x6e>
 8034c2c:	2221      	movs	r2, #33	@ 0x21
 8034c2e:	2104      	movs	r1, #4
 8034c30:	4620      	mov	r0, r4
 8034c32:	f000 ff3d 	bl	8035ab0 <_calloc_r>
 8034c36:	69e3      	ldr	r3, [r4, #28]
 8034c38:	60f0      	str	r0, [r6, #12]
 8034c3a:	68db      	ldr	r3, [r3, #12]
 8034c3c:	2b00      	cmp	r3, #0
 8034c3e:	d1e4      	bne.n	8034c0a <_Balloc+0x2e>
 8034c40:	2000      	movs	r0, #0
 8034c42:	bd70      	pop	{r4, r5, r6, pc}
 8034c44:	6802      	ldr	r2, [r0, #0]
 8034c46:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8034c4a:	2300      	movs	r3, #0
 8034c4c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8034c50:	e7f7      	b.n	8034c42 <_Balloc+0x66>
 8034c52:	bf00      	nop
 8034c54:	0803b9b1 	.word	0x0803b9b1
 8034c58:	0803ba31 	.word	0x0803ba31

08034c5c <_Bfree>:
 8034c5c:	b570      	push	{r4, r5, r6, lr}
 8034c5e:	69c6      	ldr	r6, [r0, #28]
 8034c60:	4605      	mov	r5, r0
 8034c62:	460c      	mov	r4, r1
 8034c64:	b976      	cbnz	r6, 8034c84 <_Bfree+0x28>
 8034c66:	2010      	movs	r0, #16
 8034c68:	f7fe f8e4 	bl	8032e34 <malloc>
 8034c6c:	4602      	mov	r2, r0
 8034c6e:	61e8      	str	r0, [r5, #28]
 8034c70:	b920      	cbnz	r0, 8034c7c <_Bfree+0x20>
 8034c72:	4b09      	ldr	r3, [pc, #36]	@ (8034c98 <_Bfree+0x3c>)
 8034c74:	4809      	ldr	r0, [pc, #36]	@ (8034c9c <_Bfree+0x40>)
 8034c76:	218f      	movs	r1, #143	@ 0x8f
 8034c78:	f000 fefc 	bl	8035a74 <__assert_func>
 8034c7c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8034c80:	6006      	str	r6, [r0, #0]
 8034c82:	60c6      	str	r6, [r0, #12]
 8034c84:	b13c      	cbz	r4, 8034c96 <_Bfree+0x3a>
 8034c86:	69eb      	ldr	r3, [r5, #28]
 8034c88:	6862      	ldr	r2, [r4, #4]
 8034c8a:	68db      	ldr	r3, [r3, #12]
 8034c8c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8034c90:	6021      	str	r1, [r4, #0]
 8034c92:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8034c96:	bd70      	pop	{r4, r5, r6, pc}
 8034c98:	0803b9b1 	.word	0x0803b9b1
 8034c9c:	0803ba31 	.word	0x0803ba31

08034ca0 <__multadd>:
 8034ca0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8034ca4:	690d      	ldr	r5, [r1, #16]
 8034ca6:	4607      	mov	r7, r0
 8034ca8:	460c      	mov	r4, r1
 8034caa:	461e      	mov	r6, r3
 8034cac:	f101 0c14 	add.w	ip, r1, #20
 8034cb0:	2000      	movs	r0, #0
 8034cb2:	f8dc 3000 	ldr.w	r3, [ip]
 8034cb6:	b299      	uxth	r1, r3
 8034cb8:	fb02 6101 	mla	r1, r2, r1, r6
 8034cbc:	0c1e      	lsrs	r6, r3, #16
 8034cbe:	0c0b      	lsrs	r3, r1, #16
 8034cc0:	fb02 3306 	mla	r3, r2, r6, r3
 8034cc4:	b289      	uxth	r1, r1
 8034cc6:	3001      	adds	r0, #1
 8034cc8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8034ccc:	4285      	cmp	r5, r0
 8034cce:	f84c 1b04 	str.w	r1, [ip], #4
 8034cd2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8034cd6:	dcec      	bgt.n	8034cb2 <__multadd+0x12>
 8034cd8:	b30e      	cbz	r6, 8034d1e <__multadd+0x7e>
 8034cda:	68a3      	ldr	r3, [r4, #8]
 8034cdc:	42ab      	cmp	r3, r5
 8034cde:	dc19      	bgt.n	8034d14 <__multadd+0x74>
 8034ce0:	6861      	ldr	r1, [r4, #4]
 8034ce2:	4638      	mov	r0, r7
 8034ce4:	3101      	adds	r1, #1
 8034ce6:	f7ff ff79 	bl	8034bdc <_Balloc>
 8034cea:	4680      	mov	r8, r0
 8034cec:	b928      	cbnz	r0, 8034cfa <__multadd+0x5a>
 8034cee:	4602      	mov	r2, r0
 8034cf0:	4b0c      	ldr	r3, [pc, #48]	@ (8034d24 <__multadd+0x84>)
 8034cf2:	480d      	ldr	r0, [pc, #52]	@ (8034d28 <__multadd+0x88>)
 8034cf4:	21ba      	movs	r1, #186	@ 0xba
 8034cf6:	f000 febd 	bl	8035a74 <__assert_func>
 8034cfa:	6922      	ldr	r2, [r4, #16]
 8034cfc:	3202      	adds	r2, #2
 8034cfe:	f104 010c 	add.w	r1, r4, #12
 8034d02:	0092      	lsls	r2, r2, #2
 8034d04:	300c      	adds	r0, #12
 8034d06:	f7ff f8b8 	bl	8033e7a <memcpy>
 8034d0a:	4621      	mov	r1, r4
 8034d0c:	4638      	mov	r0, r7
 8034d0e:	f7ff ffa5 	bl	8034c5c <_Bfree>
 8034d12:	4644      	mov	r4, r8
 8034d14:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8034d18:	3501      	adds	r5, #1
 8034d1a:	615e      	str	r6, [r3, #20]
 8034d1c:	6125      	str	r5, [r4, #16]
 8034d1e:	4620      	mov	r0, r4
 8034d20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8034d24:	0803ba20 	.word	0x0803ba20
 8034d28:	0803ba31 	.word	0x0803ba31

08034d2c <__hi0bits>:
 8034d2c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8034d30:	4603      	mov	r3, r0
 8034d32:	bf36      	itet	cc
 8034d34:	0403      	lslcc	r3, r0, #16
 8034d36:	2000      	movcs	r0, #0
 8034d38:	2010      	movcc	r0, #16
 8034d3a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8034d3e:	bf3c      	itt	cc
 8034d40:	021b      	lslcc	r3, r3, #8
 8034d42:	3008      	addcc	r0, #8
 8034d44:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8034d48:	bf3c      	itt	cc
 8034d4a:	011b      	lslcc	r3, r3, #4
 8034d4c:	3004      	addcc	r0, #4
 8034d4e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8034d52:	bf3c      	itt	cc
 8034d54:	009b      	lslcc	r3, r3, #2
 8034d56:	3002      	addcc	r0, #2
 8034d58:	2b00      	cmp	r3, #0
 8034d5a:	db05      	blt.n	8034d68 <__hi0bits+0x3c>
 8034d5c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8034d60:	f100 0001 	add.w	r0, r0, #1
 8034d64:	bf08      	it	eq
 8034d66:	2020      	moveq	r0, #32
 8034d68:	4770      	bx	lr

08034d6a <__lo0bits>:
 8034d6a:	6803      	ldr	r3, [r0, #0]
 8034d6c:	4602      	mov	r2, r0
 8034d6e:	f013 0007 	ands.w	r0, r3, #7
 8034d72:	d00b      	beq.n	8034d8c <__lo0bits+0x22>
 8034d74:	07d9      	lsls	r1, r3, #31
 8034d76:	d421      	bmi.n	8034dbc <__lo0bits+0x52>
 8034d78:	0798      	lsls	r0, r3, #30
 8034d7a:	bf49      	itett	mi
 8034d7c:	085b      	lsrmi	r3, r3, #1
 8034d7e:	089b      	lsrpl	r3, r3, #2
 8034d80:	2001      	movmi	r0, #1
 8034d82:	6013      	strmi	r3, [r2, #0]
 8034d84:	bf5c      	itt	pl
 8034d86:	6013      	strpl	r3, [r2, #0]
 8034d88:	2002      	movpl	r0, #2
 8034d8a:	4770      	bx	lr
 8034d8c:	b299      	uxth	r1, r3
 8034d8e:	b909      	cbnz	r1, 8034d94 <__lo0bits+0x2a>
 8034d90:	0c1b      	lsrs	r3, r3, #16
 8034d92:	2010      	movs	r0, #16
 8034d94:	b2d9      	uxtb	r1, r3
 8034d96:	b909      	cbnz	r1, 8034d9c <__lo0bits+0x32>
 8034d98:	3008      	adds	r0, #8
 8034d9a:	0a1b      	lsrs	r3, r3, #8
 8034d9c:	0719      	lsls	r1, r3, #28
 8034d9e:	bf04      	itt	eq
 8034da0:	091b      	lsreq	r3, r3, #4
 8034da2:	3004      	addeq	r0, #4
 8034da4:	0799      	lsls	r1, r3, #30
 8034da6:	bf04      	itt	eq
 8034da8:	089b      	lsreq	r3, r3, #2
 8034daa:	3002      	addeq	r0, #2
 8034dac:	07d9      	lsls	r1, r3, #31
 8034dae:	d403      	bmi.n	8034db8 <__lo0bits+0x4e>
 8034db0:	085b      	lsrs	r3, r3, #1
 8034db2:	f100 0001 	add.w	r0, r0, #1
 8034db6:	d003      	beq.n	8034dc0 <__lo0bits+0x56>
 8034db8:	6013      	str	r3, [r2, #0]
 8034dba:	4770      	bx	lr
 8034dbc:	2000      	movs	r0, #0
 8034dbe:	4770      	bx	lr
 8034dc0:	2020      	movs	r0, #32
 8034dc2:	4770      	bx	lr

08034dc4 <__i2b>:
 8034dc4:	b510      	push	{r4, lr}
 8034dc6:	460c      	mov	r4, r1
 8034dc8:	2101      	movs	r1, #1
 8034dca:	f7ff ff07 	bl	8034bdc <_Balloc>
 8034dce:	4602      	mov	r2, r0
 8034dd0:	b928      	cbnz	r0, 8034dde <__i2b+0x1a>
 8034dd2:	4b05      	ldr	r3, [pc, #20]	@ (8034de8 <__i2b+0x24>)
 8034dd4:	4805      	ldr	r0, [pc, #20]	@ (8034dec <__i2b+0x28>)
 8034dd6:	f240 1145 	movw	r1, #325	@ 0x145
 8034dda:	f000 fe4b 	bl	8035a74 <__assert_func>
 8034dde:	2301      	movs	r3, #1
 8034de0:	6144      	str	r4, [r0, #20]
 8034de2:	6103      	str	r3, [r0, #16]
 8034de4:	bd10      	pop	{r4, pc}
 8034de6:	bf00      	nop
 8034de8:	0803ba20 	.word	0x0803ba20
 8034dec:	0803ba31 	.word	0x0803ba31

08034df0 <__multiply>:
 8034df0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8034df4:	4617      	mov	r7, r2
 8034df6:	690a      	ldr	r2, [r1, #16]
 8034df8:	693b      	ldr	r3, [r7, #16]
 8034dfa:	429a      	cmp	r2, r3
 8034dfc:	bfa8      	it	ge
 8034dfe:	463b      	movge	r3, r7
 8034e00:	4689      	mov	r9, r1
 8034e02:	bfa4      	itt	ge
 8034e04:	460f      	movge	r7, r1
 8034e06:	4699      	movge	r9, r3
 8034e08:	693d      	ldr	r5, [r7, #16]
 8034e0a:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8034e0e:	68bb      	ldr	r3, [r7, #8]
 8034e10:	6879      	ldr	r1, [r7, #4]
 8034e12:	eb05 060a 	add.w	r6, r5, sl
 8034e16:	42b3      	cmp	r3, r6
 8034e18:	b085      	sub	sp, #20
 8034e1a:	bfb8      	it	lt
 8034e1c:	3101      	addlt	r1, #1
 8034e1e:	f7ff fedd 	bl	8034bdc <_Balloc>
 8034e22:	b930      	cbnz	r0, 8034e32 <__multiply+0x42>
 8034e24:	4602      	mov	r2, r0
 8034e26:	4b41      	ldr	r3, [pc, #260]	@ (8034f2c <__multiply+0x13c>)
 8034e28:	4841      	ldr	r0, [pc, #260]	@ (8034f30 <__multiply+0x140>)
 8034e2a:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8034e2e:	f000 fe21 	bl	8035a74 <__assert_func>
 8034e32:	f100 0414 	add.w	r4, r0, #20
 8034e36:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8034e3a:	4623      	mov	r3, r4
 8034e3c:	2200      	movs	r2, #0
 8034e3e:	4573      	cmp	r3, lr
 8034e40:	d320      	bcc.n	8034e84 <__multiply+0x94>
 8034e42:	f107 0814 	add.w	r8, r7, #20
 8034e46:	f109 0114 	add.w	r1, r9, #20
 8034e4a:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8034e4e:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8034e52:	9302      	str	r3, [sp, #8]
 8034e54:	1beb      	subs	r3, r5, r7
 8034e56:	3b15      	subs	r3, #21
 8034e58:	f023 0303 	bic.w	r3, r3, #3
 8034e5c:	3304      	adds	r3, #4
 8034e5e:	3715      	adds	r7, #21
 8034e60:	42bd      	cmp	r5, r7
 8034e62:	bf38      	it	cc
 8034e64:	2304      	movcc	r3, #4
 8034e66:	9301      	str	r3, [sp, #4]
 8034e68:	9b02      	ldr	r3, [sp, #8]
 8034e6a:	9103      	str	r1, [sp, #12]
 8034e6c:	428b      	cmp	r3, r1
 8034e6e:	d80c      	bhi.n	8034e8a <__multiply+0x9a>
 8034e70:	2e00      	cmp	r6, #0
 8034e72:	dd03      	ble.n	8034e7c <__multiply+0x8c>
 8034e74:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8034e78:	2b00      	cmp	r3, #0
 8034e7a:	d055      	beq.n	8034f28 <__multiply+0x138>
 8034e7c:	6106      	str	r6, [r0, #16]
 8034e7e:	b005      	add	sp, #20
 8034e80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8034e84:	f843 2b04 	str.w	r2, [r3], #4
 8034e88:	e7d9      	b.n	8034e3e <__multiply+0x4e>
 8034e8a:	f8b1 a000 	ldrh.w	sl, [r1]
 8034e8e:	f1ba 0f00 	cmp.w	sl, #0
 8034e92:	d01f      	beq.n	8034ed4 <__multiply+0xe4>
 8034e94:	46c4      	mov	ip, r8
 8034e96:	46a1      	mov	r9, r4
 8034e98:	2700      	movs	r7, #0
 8034e9a:	f85c 2b04 	ldr.w	r2, [ip], #4
 8034e9e:	f8d9 3000 	ldr.w	r3, [r9]
 8034ea2:	fa1f fb82 	uxth.w	fp, r2
 8034ea6:	b29b      	uxth	r3, r3
 8034ea8:	fb0a 330b 	mla	r3, sl, fp, r3
 8034eac:	443b      	add	r3, r7
 8034eae:	f8d9 7000 	ldr.w	r7, [r9]
 8034eb2:	0c12      	lsrs	r2, r2, #16
 8034eb4:	0c3f      	lsrs	r7, r7, #16
 8034eb6:	fb0a 7202 	mla	r2, sl, r2, r7
 8034eba:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8034ebe:	b29b      	uxth	r3, r3
 8034ec0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8034ec4:	4565      	cmp	r5, ip
 8034ec6:	f849 3b04 	str.w	r3, [r9], #4
 8034eca:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8034ece:	d8e4      	bhi.n	8034e9a <__multiply+0xaa>
 8034ed0:	9b01      	ldr	r3, [sp, #4]
 8034ed2:	50e7      	str	r7, [r4, r3]
 8034ed4:	9b03      	ldr	r3, [sp, #12]
 8034ed6:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8034eda:	3104      	adds	r1, #4
 8034edc:	f1b9 0f00 	cmp.w	r9, #0
 8034ee0:	d020      	beq.n	8034f24 <__multiply+0x134>
 8034ee2:	6823      	ldr	r3, [r4, #0]
 8034ee4:	4647      	mov	r7, r8
 8034ee6:	46a4      	mov	ip, r4
 8034ee8:	f04f 0a00 	mov.w	sl, #0
 8034eec:	f8b7 b000 	ldrh.w	fp, [r7]
 8034ef0:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8034ef4:	fb09 220b 	mla	r2, r9, fp, r2
 8034ef8:	4452      	add	r2, sl
 8034efa:	b29b      	uxth	r3, r3
 8034efc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8034f00:	f84c 3b04 	str.w	r3, [ip], #4
 8034f04:	f857 3b04 	ldr.w	r3, [r7], #4
 8034f08:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8034f0c:	f8bc 3000 	ldrh.w	r3, [ip]
 8034f10:	fb09 330a 	mla	r3, r9, sl, r3
 8034f14:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8034f18:	42bd      	cmp	r5, r7
 8034f1a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8034f1e:	d8e5      	bhi.n	8034eec <__multiply+0xfc>
 8034f20:	9a01      	ldr	r2, [sp, #4]
 8034f22:	50a3      	str	r3, [r4, r2]
 8034f24:	3404      	adds	r4, #4
 8034f26:	e79f      	b.n	8034e68 <__multiply+0x78>
 8034f28:	3e01      	subs	r6, #1
 8034f2a:	e7a1      	b.n	8034e70 <__multiply+0x80>
 8034f2c:	0803ba20 	.word	0x0803ba20
 8034f30:	0803ba31 	.word	0x0803ba31

08034f34 <__pow5mult>:
 8034f34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8034f38:	4615      	mov	r5, r2
 8034f3a:	f012 0203 	ands.w	r2, r2, #3
 8034f3e:	4607      	mov	r7, r0
 8034f40:	460e      	mov	r6, r1
 8034f42:	d007      	beq.n	8034f54 <__pow5mult+0x20>
 8034f44:	4c25      	ldr	r4, [pc, #148]	@ (8034fdc <__pow5mult+0xa8>)
 8034f46:	3a01      	subs	r2, #1
 8034f48:	2300      	movs	r3, #0
 8034f4a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8034f4e:	f7ff fea7 	bl	8034ca0 <__multadd>
 8034f52:	4606      	mov	r6, r0
 8034f54:	10ad      	asrs	r5, r5, #2
 8034f56:	d03d      	beq.n	8034fd4 <__pow5mult+0xa0>
 8034f58:	69fc      	ldr	r4, [r7, #28]
 8034f5a:	b97c      	cbnz	r4, 8034f7c <__pow5mult+0x48>
 8034f5c:	2010      	movs	r0, #16
 8034f5e:	f7fd ff69 	bl	8032e34 <malloc>
 8034f62:	4602      	mov	r2, r0
 8034f64:	61f8      	str	r0, [r7, #28]
 8034f66:	b928      	cbnz	r0, 8034f74 <__pow5mult+0x40>
 8034f68:	4b1d      	ldr	r3, [pc, #116]	@ (8034fe0 <__pow5mult+0xac>)
 8034f6a:	481e      	ldr	r0, [pc, #120]	@ (8034fe4 <__pow5mult+0xb0>)
 8034f6c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8034f70:	f000 fd80 	bl	8035a74 <__assert_func>
 8034f74:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8034f78:	6004      	str	r4, [r0, #0]
 8034f7a:	60c4      	str	r4, [r0, #12]
 8034f7c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8034f80:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8034f84:	b94c      	cbnz	r4, 8034f9a <__pow5mult+0x66>
 8034f86:	f240 2171 	movw	r1, #625	@ 0x271
 8034f8a:	4638      	mov	r0, r7
 8034f8c:	f7ff ff1a 	bl	8034dc4 <__i2b>
 8034f90:	2300      	movs	r3, #0
 8034f92:	f8c8 0008 	str.w	r0, [r8, #8]
 8034f96:	4604      	mov	r4, r0
 8034f98:	6003      	str	r3, [r0, #0]
 8034f9a:	f04f 0900 	mov.w	r9, #0
 8034f9e:	07eb      	lsls	r3, r5, #31
 8034fa0:	d50a      	bpl.n	8034fb8 <__pow5mult+0x84>
 8034fa2:	4631      	mov	r1, r6
 8034fa4:	4622      	mov	r2, r4
 8034fa6:	4638      	mov	r0, r7
 8034fa8:	f7ff ff22 	bl	8034df0 <__multiply>
 8034fac:	4631      	mov	r1, r6
 8034fae:	4680      	mov	r8, r0
 8034fb0:	4638      	mov	r0, r7
 8034fb2:	f7ff fe53 	bl	8034c5c <_Bfree>
 8034fb6:	4646      	mov	r6, r8
 8034fb8:	106d      	asrs	r5, r5, #1
 8034fba:	d00b      	beq.n	8034fd4 <__pow5mult+0xa0>
 8034fbc:	6820      	ldr	r0, [r4, #0]
 8034fbe:	b938      	cbnz	r0, 8034fd0 <__pow5mult+0x9c>
 8034fc0:	4622      	mov	r2, r4
 8034fc2:	4621      	mov	r1, r4
 8034fc4:	4638      	mov	r0, r7
 8034fc6:	f7ff ff13 	bl	8034df0 <__multiply>
 8034fca:	6020      	str	r0, [r4, #0]
 8034fcc:	f8c0 9000 	str.w	r9, [r0]
 8034fd0:	4604      	mov	r4, r0
 8034fd2:	e7e4      	b.n	8034f9e <__pow5mult+0x6a>
 8034fd4:	4630      	mov	r0, r6
 8034fd6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8034fda:	bf00      	nop
 8034fdc:	0803bae4 	.word	0x0803bae4
 8034fe0:	0803b9b1 	.word	0x0803b9b1
 8034fe4:	0803ba31 	.word	0x0803ba31

08034fe8 <__lshift>:
 8034fe8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8034fec:	460c      	mov	r4, r1
 8034fee:	6849      	ldr	r1, [r1, #4]
 8034ff0:	6923      	ldr	r3, [r4, #16]
 8034ff2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8034ff6:	68a3      	ldr	r3, [r4, #8]
 8034ff8:	4607      	mov	r7, r0
 8034ffa:	4691      	mov	r9, r2
 8034ffc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8035000:	f108 0601 	add.w	r6, r8, #1
 8035004:	42b3      	cmp	r3, r6
 8035006:	db0b      	blt.n	8035020 <__lshift+0x38>
 8035008:	4638      	mov	r0, r7
 803500a:	f7ff fde7 	bl	8034bdc <_Balloc>
 803500e:	4605      	mov	r5, r0
 8035010:	b948      	cbnz	r0, 8035026 <__lshift+0x3e>
 8035012:	4602      	mov	r2, r0
 8035014:	4b28      	ldr	r3, [pc, #160]	@ (80350b8 <__lshift+0xd0>)
 8035016:	4829      	ldr	r0, [pc, #164]	@ (80350bc <__lshift+0xd4>)
 8035018:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 803501c:	f000 fd2a 	bl	8035a74 <__assert_func>
 8035020:	3101      	adds	r1, #1
 8035022:	005b      	lsls	r3, r3, #1
 8035024:	e7ee      	b.n	8035004 <__lshift+0x1c>
 8035026:	2300      	movs	r3, #0
 8035028:	f100 0114 	add.w	r1, r0, #20
 803502c:	f100 0210 	add.w	r2, r0, #16
 8035030:	4618      	mov	r0, r3
 8035032:	4553      	cmp	r3, sl
 8035034:	db33      	blt.n	803509e <__lshift+0xb6>
 8035036:	6920      	ldr	r0, [r4, #16]
 8035038:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 803503c:	f104 0314 	add.w	r3, r4, #20
 8035040:	f019 091f 	ands.w	r9, r9, #31
 8035044:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8035048:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 803504c:	d02b      	beq.n	80350a6 <__lshift+0xbe>
 803504e:	f1c9 0e20 	rsb	lr, r9, #32
 8035052:	468a      	mov	sl, r1
 8035054:	2200      	movs	r2, #0
 8035056:	6818      	ldr	r0, [r3, #0]
 8035058:	fa00 f009 	lsl.w	r0, r0, r9
 803505c:	4310      	orrs	r0, r2
 803505e:	f84a 0b04 	str.w	r0, [sl], #4
 8035062:	f853 2b04 	ldr.w	r2, [r3], #4
 8035066:	459c      	cmp	ip, r3
 8035068:	fa22 f20e 	lsr.w	r2, r2, lr
 803506c:	d8f3      	bhi.n	8035056 <__lshift+0x6e>
 803506e:	ebac 0304 	sub.w	r3, ip, r4
 8035072:	3b15      	subs	r3, #21
 8035074:	f023 0303 	bic.w	r3, r3, #3
 8035078:	3304      	adds	r3, #4
 803507a:	f104 0015 	add.w	r0, r4, #21
 803507e:	4560      	cmp	r0, ip
 8035080:	bf88      	it	hi
 8035082:	2304      	movhi	r3, #4
 8035084:	50ca      	str	r2, [r1, r3]
 8035086:	b10a      	cbz	r2, 803508c <__lshift+0xa4>
 8035088:	f108 0602 	add.w	r6, r8, #2
 803508c:	3e01      	subs	r6, #1
 803508e:	4638      	mov	r0, r7
 8035090:	612e      	str	r6, [r5, #16]
 8035092:	4621      	mov	r1, r4
 8035094:	f7ff fde2 	bl	8034c5c <_Bfree>
 8035098:	4628      	mov	r0, r5
 803509a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 803509e:	f842 0f04 	str.w	r0, [r2, #4]!
 80350a2:	3301      	adds	r3, #1
 80350a4:	e7c5      	b.n	8035032 <__lshift+0x4a>
 80350a6:	3904      	subs	r1, #4
 80350a8:	f853 2b04 	ldr.w	r2, [r3], #4
 80350ac:	f841 2f04 	str.w	r2, [r1, #4]!
 80350b0:	459c      	cmp	ip, r3
 80350b2:	d8f9      	bhi.n	80350a8 <__lshift+0xc0>
 80350b4:	e7ea      	b.n	803508c <__lshift+0xa4>
 80350b6:	bf00      	nop
 80350b8:	0803ba20 	.word	0x0803ba20
 80350bc:	0803ba31 	.word	0x0803ba31

080350c0 <__mcmp>:
 80350c0:	690a      	ldr	r2, [r1, #16]
 80350c2:	4603      	mov	r3, r0
 80350c4:	6900      	ldr	r0, [r0, #16]
 80350c6:	1a80      	subs	r0, r0, r2
 80350c8:	b530      	push	{r4, r5, lr}
 80350ca:	d10e      	bne.n	80350ea <__mcmp+0x2a>
 80350cc:	3314      	adds	r3, #20
 80350ce:	3114      	adds	r1, #20
 80350d0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80350d4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80350d8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80350dc:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80350e0:	4295      	cmp	r5, r2
 80350e2:	d003      	beq.n	80350ec <__mcmp+0x2c>
 80350e4:	d205      	bcs.n	80350f2 <__mcmp+0x32>
 80350e6:	f04f 30ff 	mov.w	r0, #4294967295
 80350ea:	bd30      	pop	{r4, r5, pc}
 80350ec:	42a3      	cmp	r3, r4
 80350ee:	d3f3      	bcc.n	80350d8 <__mcmp+0x18>
 80350f0:	e7fb      	b.n	80350ea <__mcmp+0x2a>
 80350f2:	2001      	movs	r0, #1
 80350f4:	e7f9      	b.n	80350ea <__mcmp+0x2a>
	...

080350f8 <__mdiff>:
 80350f8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80350fc:	4689      	mov	r9, r1
 80350fe:	4606      	mov	r6, r0
 8035100:	4611      	mov	r1, r2
 8035102:	4648      	mov	r0, r9
 8035104:	4614      	mov	r4, r2
 8035106:	f7ff ffdb 	bl	80350c0 <__mcmp>
 803510a:	1e05      	subs	r5, r0, #0
 803510c:	d112      	bne.n	8035134 <__mdiff+0x3c>
 803510e:	4629      	mov	r1, r5
 8035110:	4630      	mov	r0, r6
 8035112:	f7ff fd63 	bl	8034bdc <_Balloc>
 8035116:	4602      	mov	r2, r0
 8035118:	b928      	cbnz	r0, 8035126 <__mdiff+0x2e>
 803511a:	4b3f      	ldr	r3, [pc, #252]	@ (8035218 <__mdiff+0x120>)
 803511c:	f240 2137 	movw	r1, #567	@ 0x237
 8035120:	483e      	ldr	r0, [pc, #248]	@ (803521c <__mdiff+0x124>)
 8035122:	f000 fca7 	bl	8035a74 <__assert_func>
 8035126:	2301      	movs	r3, #1
 8035128:	e9c0 3504 	strd	r3, r5, [r0, #16]
 803512c:	4610      	mov	r0, r2
 803512e:	b003      	add	sp, #12
 8035130:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8035134:	bfbc      	itt	lt
 8035136:	464b      	movlt	r3, r9
 8035138:	46a1      	movlt	r9, r4
 803513a:	4630      	mov	r0, r6
 803513c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8035140:	bfba      	itte	lt
 8035142:	461c      	movlt	r4, r3
 8035144:	2501      	movlt	r5, #1
 8035146:	2500      	movge	r5, #0
 8035148:	f7ff fd48 	bl	8034bdc <_Balloc>
 803514c:	4602      	mov	r2, r0
 803514e:	b918      	cbnz	r0, 8035158 <__mdiff+0x60>
 8035150:	4b31      	ldr	r3, [pc, #196]	@ (8035218 <__mdiff+0x120>)
 8035152:	f240 2145 	movw	r1, #581	@ 0x245
 8035156:	e7e3      	b.n	8035120 <__mdiff+0x28>
 8035158:	f8d9 7010 	ldr.w	r7, [r9, #16]
 803515c:	6926      	ldr	r6, [r4, #16]
 803515e:	60c5      	str	r5, [r0, #12]
 8035160:	f109 0310 	add.w	r3, r9, #16
 8035164:	f109 0514 	add.w	r5, r9, #20
 8035168:	f104 0e14 	add.w	lr, r4, #20
 803516c:	f100 0b14 	add.w	fp, r0, #20
 8035170:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8035174:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8035178:	9301      	str	r3, [sp, #4]
 803517a:	46d9      	mov	r9, fp
 803517c:	f04f 0c00 	mov.w	ip, #0
 8035180:	9b01      	ldr	r3, [sp, #4]
 8035182:	f85e 0b04 	ldr.w	r0, [lr], #4
 8035186:	f853 af04 	ldr.w	sl, [r3, #4]!
 803518a:	9301      	str	r3, [sp, #4]
 803518c:	fa1f f38a 	uxth.w	r3, sl
 8035190:	4619      	mov	r1, r3
 8035192:	b283      	uxth	r3, r0
 8035194:	1acb      	subs	r3, r1, r3
 8035196:	0c00      	lsrs	r0, r0, #16
 8035198:	4463      	add	r3, ip
 803519a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 803519e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80351a2:	b29b      	uxth	r3, r3
 80351a4:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80351a8:	4576      	cmp	r6, lr
 80351aa:	f849 3b04 	str.w	r3, [r9], #4
 80351ae:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80351b2:	d8e5      	bhi.n	8035180 <__mdiff+0x88>
 80351b4:	1b33      	subs	r3, r6, r4
 80351b6:	3b15      	subs	r3, #21
 80351b8:	f023 0303 	bic.w	r3, r3, #3
 80351bc:	3415      	adds	r4, #21
 80351be:	3304      	adds	r3, #4
 80351c0:	42a6      	cmp	r6, r4
 80351c2:	bf38      	it	cc
 80351c4:	2304      	movcc	r3, #4
 80351c6:	441d      	add	r5, r3
 80351c8:	445b      	add	r3, fp
 80351ca:	461e      	mov	r6, r3
 80351cc:	462c      	mov	r4, r5
 80351ce:	4544      	cmp	r4, r8
 80351d0:	d30e      	bcc.n	80351f0 <__mdiff+0xf8>
 80351d2:	f108 0103 	add.w	r1, r8, #3
 80351d6:	1b49      	subs	r1, r1, r5
 80351d8:	f021 0103 	bic.w	r1, r1, #3
 80351dc:	3d03      	subs	r5, #3
 80351de:	45a8      	cmp	r8, r5
 80351e0:	bf38      	it	cc
 80351e2:	2100      	movcc	r1, #0
 80351e4:	440b      	add	r3, r1
 80351e6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80351ea:	b191      	cbz	r1, 8035212 <__mdiff+0x11a>
 80351ec:	6117      	str	r7, [r2, #16]
 80351ee:	e79d      	b.n	803512c <__mdiff+0x34>
 80351f0:	f854 1b04 	ldr.w	r1, [r4], #4
 80351f4:	46e6      	mov	lr, ip
 80351f6:	0c08      	lsrs	r0, r1, #16
 80351f8:	fa1c fc81 	uxtah	ip, ip, r1
 80351fc:	4471      	add	r1, lr
 80351fe:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8035202:	b289      	uxth	r1, r1
 8035204:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8035208:	f846 1b04 	str.w	r1, [r6], #4
 803520c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8035210:	e7dd      	b.n	80351ce <__mdiff+0xd6>
 8035212:	3f01      	subs	r7, #1
 8035214:	e7e7      	b.n	80351e6 <__mdiff+0xee>
 8035216:	bf00      	nop
 8035218:	0803ba20 	.word	0x0803ba20
 803521c:	0803ba31 	.word	0x0803ba31

08035220 <__d2b>:
 8035220:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8035224:	460f      	mov	r7, r1
 8035226:	2101      	movs	r1, #1
 8035228:	ec59 8b10 	vmov	r8, r9, d0
 803522c:	4616      	mov	r6, r2
 803522e:	f7ff fcd5 	bl	8034bdc <_Balloc>
 8035232:	4604      	mov	r4, r0
 8035234:	b930      	cbnz	r0, 8035244 <__d2b+0x24>
 8035236:	4602      	mov	r2, r0
 8035238:	4b23      	ldr	r3, [pc, #140]	@ (80352c8 <__d2b+0xa8>)
 803523a:	4824      	ldr	r0, [pc, #144]	@ (80352cc <__d2b+0xac>)
 803523c:	f240 310f 	movw	r1, #783	@ 0x30f
 8035240:	f000 fc18 	bl	8035a74 <__assert_func>
 8035244:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8035248:	f3c9 0313 	ubfx	r3, r9, #0, #20
 803524c:	b10d      	cbz	r5, 8035252 <__d2b+0x32>
 803524e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8035252:	9301      	str	r3, [sp, #4]
 8035254:	f1b8 0300 	subs.w	r3, r8, #0
 8035258:	d023      	beq.n	80352a2 <__d2b+0x82>
 803525a:	4668      	mov	r0, sp
 803525c:	9300      	str	r3, [sp, #0]
 803525e:	f7ff fd84 	bl	8034d6a <__lo0bits>
 8035262:	e9dd 1200 	ldrd	r1, r2, [sp]
 8035266:	b1d0      	cbz	r0, 803529e <__d2b+0x7e>
 8035268:	f1c0 0320 	rsb	r3, r0, #32
 803526c:	fa02 f303 	lsl.w	r3, r2, r3
 8035270:	430b      	orrs	r3, r1
 8035272:	40c2      	lsrs	r2, r0
 8035274:	6163      	str	r3, [r4, #20]
 8035276:	9201      	str	r2, [sp, #4]
 8035278:	9b01      	ldr	r3, [sp, #4]
 803527a:	61a3      	str	r3, [r4, #24]
 803527c:	2b00      	cmp	r3, #0
 803527e:	bf0c      	ite	eq
 8035280:	2201      	moveq	r2, #1
 8035282:	2202      	movne	r2, #2
 8035284:	6122      	str	r2, [r4, #16]
 8035286:	b1a5      	cbz	r5, 80352b2 <__d2b+0x92>
 8035288:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 803528c:	4405      	add	r5, r0
 803528e:	603d      	str	r5, [r7, #0]
 8035290:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8035294:	6030      	str	r0, [r6, #0]
 8035296:	4620      	mov	r0, r4
 8035298:	b003      	add	sp, #12
 803529a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 803529e:	6161      	str	r1, [r4, #20]
 80352a0:	e7ea      	b.n	8035278 <__d2b+0x58>
 80352a2:	a801      	add	r0, sp, #4
 80352a4:	f7ff fd61 	bl	8034d6a <__lo0bits>
 80352a8:	9b01      	ldr	r3, [sp, #4]
 80352aa:	6163      	str	r3, [r4, #20]
 80352ac:	3020      	adds	r0, #32
 80352ae:	2201      	movs	r2, #1
 80352b0:	e7e8      	b.n	8035284 <__d2b+0x64>
 80352b2:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80352b6:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80352ba:	6038      	str	r0, [r7, #0]
 80352bc:	6918      	ldr	r0, [r3, #16]
 80352be:	f7ff fd35 	bl	8034d2c <__hi0bits>
 80352c2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80352c6:	e7e5      	b.n	8035294 <__d2b+0x74>
 80352c8:	0803ba20 	.word	0x0803ba20
 80352cc:	0803ba31 	.word	0x0803ba31

080352d0 <_malloc_usable_size_r>:
 80352d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80352d4:	1f18      	subs	r0, r3, #4
 80352d6:	2b00      	cmp	r3, #0
 80352d8:	bfbc      	itt	lt
 80352da:	580b      	ldrlt	r3, [r1, r0]
 80352dc:	18c0      	addlt	r0, r0, r3
 80352de:	4770      	bx	lr

080352e0 <__ssputs_r>:
 80352e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80352e4:	688e      	ldr	r6, [r1, #8]
 80352e6:	461f      	mov	r7, r3
 80352e8:	42be      	cmp	r6, r7
 80352ea:	680b      	ldr	r3, [r1, #0]
 80352ec:	4682      	mov	sl, r0
 80352ee:	460c      	mov	r4, r1
 80352f0:	4690      	mov	r8, r2
 80352f2:	d82d      	bhi.n	8035350 <__ssputs_r+0x70>
 80352f4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80352f8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80352fc:	d026      	beq.n	803534c <__ssputs_r+0x6c>
 80352fe:	6965      	ldr	r5, [r4, #20]
 8035300:	6909      	ldr	r1, [r1, #16]
 8035302:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8035306:	eba3 0901 	sub.w	r9, r3, r1
 803530a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 803530e:	1c7b      	adds	r3, r7, #1
 8035310:	444b      	add	r3, r9
 8035312:	106d      	asrs	r5, r5, #1
 8035314:	429d      	cmp	r5, r3
 8035316:	bf38      	it	cc
 8035318:	461d      	movcc	r5, r3
 803531a:	0553      	lsls	r3, r2, #21
 803531c:	d527      	bpl.n	803536e <__ssputs_r+0x8e>
 803531e:	4629      	mov	r1, r5
 8035320:	f7fd fdb2 	bl	8032e88 <_malloc_r>
 8035324:	4606      	mov	r6, r0
 8035326:	b360      	cbz	r0, 8035382 <__ssputs_r+0xa2>
 8035328:	6921      	ldr	r1, [r4, #16]
 803532a:	464a      	mov	r2, r9
 803532c:	f7fe fda5 	bl	8033e7a <memcpy>
 8035330:	89a3      	ldrh	r3, [r4, #12]
 8035332:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8035336:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 803533a:	81a3      	strh	r3, [r4, #12]
 803533c:	6126      	str	r6, [r4, #16]
 803533e:	6165      	str	r5, [r4, #20]
 8035340:	444e      	add	r6, r9
 8035342:	eba5 0509 	sub.w	r5, r5, r9
 8035346:	6026      	str	r6, [r4, #0]
 8035348:	60a5      	str	r5, [r4, #8]
 803534a:	463e      	mov	r6, r7
 803534c:	42be      	cmp	r6, r7
 803534e:	d900      	bls.n	8035352 <__ssputs_r+0x72>
 8035350:	463e      	mov	r6, r7
 8035352:	6820      	ldr	r0, [r4, #0]
 8035354:	4632      	mov	r2, r6
 8035356:	4641      	mov	r1, r8
 8035358:	f7fe fce6 	bl	8033d28 <memmove>
 803535c:	68a3      	ldr	r3, [r4, #8]
 803535e:	1b9b      	subs	r3, r3, r6
 8035360:	60a3      	str	r3, [r4, #8]
 8035362:	6823      	ldr	r3, [r4, #0]
 8035364:	4433      	add	r3, r6
 8035366:	6023      	str	r3, [r4, #0]
 8035368:	2000      	movs	r0, #0
 803536a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 803536e:	462a      	mov	r2, r5
 8035370:	f7fd fe16 	bl	8032fa0 <_realloc_r>
 8035374:	4606      	mov	r6, r0
 8035376:	2800      	cmp	r0, #0
 8035378:	d1e0      	bne.n	803533c <__ssputs_r+0x5c>
 803537a:	6921      	ldr	r1, [r4, #16]
 803537c:	4650      	mov	r0, sl
 803537e:	f7ff fbe3 	bl	8034b48 <_free_r>
 8035382:	230c      	movs	r3, #12
 8035384:	f8ca 3000 	str.w	r3, [sl]
 8035388:	89a3      	ldrh	r3, [r4, #12]
 803538a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 803538e:	81a3      	strh	r3, [r4, #12]
 8035390:	f04f 30ff 	mov.w	r0, #4294967295
 8035394:	e7e9      	b.n	803536a <__ssputs_r+0x8a>
	...

08035398 <_svfiprintf_r>:
 8035398:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 803539c:	4698      	mov	r8, r3
 803539e:	898b      	ldrh	r3, [r1, #12]
 80353a0:	061b      	lsls	r3, r3, #24
 80353a2:	b09d      	sub	sp, #116	@ 0x74
 80353a4:	4607      	mov	r7, r0
 80353a6:	460d      	mov	r5, r1
 80353a8:	4614      	mov	r4, r2
 80353aa:	d510      	bpl.n	80353ce <_svfiprintf_r+0x36>
 80353ac:	690b      	ldr	r3, [r1, #16]
 80353ae:	b973      	cbnz	r3, 80353ce <_svfiprintf_r+0x36>
 80353b0:	2140      	movs	r1, #64	@ 0x40
 80353b2:	f7fd fd69 	bl	8032e88 <_malloc_r>
 80353b6:	6028      	str	r0, [r5, #0]
 80353b8:	6128      	str	r0, [r5, #16]
 80353ba:	b930      	cbnz	r0, 80353ca <_svfiprintf_r+0x32>
 80353bc:	230c      	movs	r3, #12
 80353be:	603b      	str	r3, [r7, #0]
 80353c0:	f04f 30ff 	mov.w	r0, #4294967295
 80353c4:	b01d      	add	sp, #116	@ 0x74
 80353c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80353ca:	2340      	movs	r3, #64	@ 0x40
 80353cc:	616b      	str	r3, [r5, #20]
 80353ce:	2300      	movs	r3, #0
 80353d0:	9309      	str	r3, [sp, #36]	@ 0x24
 80353d2:	2320      	movs	r3, #32
 80353d4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80353d8:	f8cd 800c 	str.w	r8, [sp, #12]
 80353dc:	2330      	movs	r3, #48	@ 0x30
 80353de:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 803557c <_svfiprintf_r+0x1e4>
 80353e2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80353e6:	f04f 0901 	mov.w	r9, #1
 80353ea:	4623      	mov	r3, r4
 80353ec:	469a      	mov	sl, r3
 80353ee:	f813 2b01 	ldrb.w	r2, [r3], #1
 80353f2:	b10a      	cbz	r2, 80353f8 <_svfiprintf_r+0x60>
 80353f4:	2a25      	cmp	r2, #37	@ 0x25
 80353f6:	d1f9      	bne.n	80353ec <_svfiprintf_r+0x54>
 80353f8:	ebba 0b04 	subs.w	fp, sl, r4
 80353fc:	d00b      	beq.n	8035416 <_svfiprintf_r+0x7e>
 80353fe:	465b      	mov	r3, fp
 8035400:	4622      	mov	r2, r4
 8035402:	4629      	mov	r1, r5
 8035404:	4638      	mov	r0, r7
 8035406:	f7ff ff6b 	bl	80352e0 <__ssputs_r>
 803540a:	3001      	adds	r0, #1
 803540c:	f000 80a7 	beq.w	803555e <_svfiprintf_r+0x1c6>
 8035410:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8035412:	445a      	add	r2, fp
 8035414:	9209      	str	r2, [sp, #36]	@ 0x24
 8035416:	f89a 3000 	ldrb.w	r3, [sl]
 803541a:	2b00      	cmp	r3, #0
 803541c:	f000 809f 	beq.w	803555e <_svfiprintf_r+0x1c6>
 8035420:	2300      	movs	r3, #0
 8035422:	f04f 32ff 	mov.w	r2, #4294967295
 8035426:	e9cd 2305 	strd	r2, r3, [sp, #20]
 803542a:	f10a 0a01 	add.w	sl, sl, #1
 803542e:	9304      	str	r3, [sp, #16]
 8035430:	9307      	str	r3, [sp, #28]
 8035432:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8035436:	931a      	str	r3, [sp, #104]	@ 0x68
 8035438:	4654      	mov	r4, sl
 803543a:	2205      	movs	r2, #5
 803543c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8035440:	484e      	ldr	r0, [pc, #312]	@ (803557c <_svfiprintf_r+0x1e4>)
 8035442:	f7da fdfd 	bl	8010040 <memchr>
 8035446:	9a04      	ldr	r2, [sp, #16]
 8035448:	b9d8      	cbnz	r0, 8035482 <_svfiprintf_r+0xea>
 803544a:	06d0      	lsls	r0, r2, #27
 803544c:	bf44      	itt	mi
 803544e:	2320      	movmi	r3, #32
 8035450:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8035454:	0711      	lsls	r1, r2, #28
 8035456:	bf44      	itt	mi
 8035458:	232b      	movmi	r3, #43	@ 0x2b
 803545a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 803545e:	f89a 3000 	ldrb.w	r3, [sl]
 8035462:	2b2a      	cmp	r3, #42	@ 0x2a
 8035464:	d015      	beq.n	8035492 <_svfiprintf_r+0xfa>
 8035466:	9a07      	ldr	r2, [sp, #28]
 8035468:	4654      	mov	r4, sl
 803546a:	2000      	movs	r0, #0
 803546c:	f04f 0c0a 	mov.w	ip, #10
 8035470:	4621      	mov	r1, r4
 8035472:	f811 3b01 	ldrb.w	r3, [r1], #1
 8035476:	3b30      	subs	r3, #48	@ 0x30
 8035478:	2b09      	cmp	r3, #9
 803547a:	d94b      	bls.n	8035514 <_svfiprintf_r+0x17c>
 803547c:	b1b0      	cbz	r0, 80354ac <_svfiprintf_r+0x114>
 803547e:	9207      	str	r2, [sp, #28]
 8035480:	e014      	b.n	80354ac <_svfiprintf_r+0x114>
 8035482:	eba0 0308 	sub.w	r3, r0, r8
 8035486:	fa09 f303 	lsl.w	r3, r9, r3
 803548a:	4313      	orrs	r3, r2
 803548c:	9304      	str	r3, [sp, #16]
 803548e:	46a2      	mov	sl, r4
 8035490:	e7d2      	b.n	8035438 <_svfiprintf_r+0xa0>
 8035492:	9b03      	ldr	r3, [sp, #12]
 8035494:	1d19      	adds	r1, r3, #4
 8035496:	681b      	ldr	r3, [r3, #0]
 8035498:	9103      	str	r1, [sp, #12]
 803549a:	2b00      	cmp	r3, #0
 803549c:	bfbb      	ittet	lt
 803549e:	425b      	neglt	r3, r3
 80354a0:	f042 0202 	orrlt.w	r2, r2, #2
 80354a4:	9307      	strge	r3, [sp, #28]
 80354a6:	9307      	strlt	r3, [sp, #28]
 80354a8:	bfb8      	it	lt
 80354aa:	9204      	strlt	r2, [sp, #16]
 80354ac:	7823      	ldrb	r3, [r4, #0]
 80354ae:	2b2e      	cmp	r3, #46	@ 0x2e
 80354b0:	d10a      	bne.n	80354c8 <_svfiprintf_r+0x130>
 80354b2:	7863      	ldrb	r3, [r4, #1]
 80354b4:	2b2a      	cmp	r3, #42	@ 0x2a
 80354b6:	d132      	bne.n	803551e <_svfiprintf_r+0x186>
 80354b8:	9b03      	ldr	r3, [sp, #12]
 80354ba:	1d1a      	adds	r2, r3, #4
 80354bc:	681b      	ldr	r3, [r3, #0]
 80354be:	9203      	str	r2, [sp, #12]
 80354c0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80354c4:	3402      	adds	r4, #2
 80354c6:	9305      	str	r3, [sp, #20]
 80354c8:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 803558c <_svfiprintf_r+0x1f4>
 80354cc:	7821      	ldrb	r1, [r4, #0]
 80354ce:	2203      	movs	r2, #3
 80354d0:	4650      	mov	r0, sl
 80354d2:	f7da fdb5 	bl	8010040 <memchr>
 80354d6:	b138      	cbz	r0, 80354e8 <_svfiprintf_r+0x150>
 80354d8:	9b04      	ldr	r3, [sp, #16]
 80354da:	eba0 000a 	sub.w	r0, r0, sl
 80354de:	2240      	movs	r2, #64	@ 0x40
 80354e0:	4082      	lsls	r2, r0
 80354e2:	4313      	orrs	r3, r2
 80354e4:	3401      	adds	r4, #1
 80354e6:	9304      	str	r3, [sp, #16]
 80354e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80354ec:	4824      	ldr	r0, [pc, #144]	@ (8035580 <_svfiprintf_r+0x1e8>)
 80354ee:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80354f2:	2206      	movs	r2, #6
 80354f4:	f7da fda4 	bl	8010040 <memchr>
 80354f8:	2800      	cmp	r0, #0
 80354fa:	d036      	beq.n	803556a <_svfiprintf_r+0x1d2>
 80354fc:	4b21      	ldr	r3, [pc, #132]	@ (8035584 <_svfiprintf_r+0x1ec>)
 80354fe:	bb1b      	cbnz	r3, 8035548 <_svfiprintf_r+0x1b0>
 8035500:	9b03      	ldr	r3, [sp, #12]
 8035502:	3307      	adds	r3, #7
 8035504:	f023 0307 	bic.w	r3, r3, #7
 8035508:	3308      	adds	r3, #8
 803550a:	9303      	str	r3, [sp, #12]
 803550c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 803550e:	4433      	add	r3, r6
 8035510:	9309      	str	r3, [sp, #36]	@ 0x24
 8035512:	e76a      	b.n	80353ea <_svfiprintf_r+0x52>
 8035514:	fb0c 3202 	mla	r2, ip, r2, r3
 8035518:	460c      	mov	r4, r1
 803551a:	2001      	movs	r0, #1
 803551c:	e7a8      	b.n	8035470 <_svfiprintf_r+0xd8>
 803551e:	2300      	movs	r3, #0
 8035520:	3401      	adds	r4, #1
 8035522:	9305      	str	r3, [sp, #20]
 8035524:	4619      	mov	r1, r3
 8035526:	f04f 0c0a 	mov.w	ip, #10
 803552a:	4620      	mov	r0, r4
 803552c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8035530:	3a30      	subs	r2, #48	@ 0x30
 8035532:	2a09      	cmp	r2, #9
 8035534:	d903      	bls.n	803553e <_svfiprintf_r+0x1a6>
 8035536:	2b00      	cmp	r3, #0
 8035538:	d0c6      	beq.n	80354c8 <_svfiprintf_r+0x130>
 803553a:	9105      	str	r1, [sp, #20]
 803553c:	e7c4      	b.n	80354c8 <_svfiprintf_r+0x130>
 803553e:	fb0c 2101 	mla	r1, ip, r1, r2
 8035542:	4604      	mov	r4, r0
 8035544:	2301      	movs	r3, #1
 8035546:	e7f0      	b.n	803552a <_svfiprintf_r+0x192>
 8035548:	ab03      	add	r3, sp, #12
 803554a:	9300      	str	r3, [sp, #0]
 803554c:	462a      	mov	r2, r5
 803554e:	4b0e      	ldr	r3, [pc, #56]	@ (8035588 <_svfiprintf_r+0x1f0>)
 8035550:	a904      	add	r1, sp, #16
 8035552:	4638      	mov	r0, r7
 8035554:	f7fd fdf2 	bl	803313c <_printf_float>
 8035558:	1c42      	adds	r2, r0, #1
 803555a:	4606      	mov	r6, r0
 803555c:	d1d6      	bne.n	803550c <_svfiprintf_r+0x174>
 803555e:	89ab      	ldrh	r3, [r5, #12]
 8035560:	065b      	lsls	r3, r3, #25
 8035562:	f53f af2d 	bmi.w	80353c0 <_svfiprintf_r+0x28>
 8035566:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8035568:	e72c      	b.n	80353c4 <_svfiprintf_r+0x2c>
 803556a:	ab03      	add	r3, sp, #12
 803556c:	9300      	str	r3, [sp, #0]
 803556e:	462a      	mov	r2, r5
 8035570:	4b05      	ldr	r3, [pc, #20]	@ (8035588 <_svfiprintf_r+0x1f0>)
 8035572:	a904      	add	r1, sp, #16
 8035574:	4638      	mov	r0, r7
 8035576:	f7fe f879 	bl	803366c <_printf_i>
 803557a:	e7ed      	b.n	8035558 <_svfiprintf_r+0x1c0>
 803557c:	0803ba8a 	.word	0x0803ba8a
 8035580:	0803ba94 	.word	0x0803ba94
 8035584:	0803313d 	.word	0x0803313d
 8035588:	080352e1 	.word	0x080352e1
 803558c:	0803ba90 	.word	0x0803ba90

08035590 <__sfputc_r>:
 8035590:	6893      	ldr	r3, [r2, #8]
 8035592:	3b01      	subs	r3, #1
 8035594:	2b00      	cmp	r3, #0
 8035596:	b410      	push	{r4}
 8035598:	6093      	str	r3, [r2, #8]
 803559a:	da08      	bge.n	80355ae <__sfputc_r+0x1e>
 803559c:	6994      	ldr	r4, [r2, #24]
 803559e:	42a3      	cmp	r3, r4
 80355a0:	db01      	blt.n	80355a6 <__sfputc_r+0x16>
 80355a2:	290a      	cmp	r1, #10
 80355a4:	d103      	bne.n	80355ae <__sfputc_r+0x1e>
 80355a6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80355aa:	f7fe bb28 	b.w	8033bfe <__swbuf_r>
 80355ae:	6813      	ldr	r3, [r2, #0]
 80355b0:	1c58      	adds	r0, r3, #1
 80355b2:	6010      	str	r0, [r2, #0]
 80355b4:	7019      	strb	r1, [r3, #0]
 80355b6:	4608      	mov	r0, r1
 80355b8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80355bc:	4770      	bx	lr

080355be <__sfputs_r>:
 80355be:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80355c0:	4606      	mov	r6, r0
 80355c2:	460f      	mov	r7, r1
 80355c4:	4614      	mov	r4, r2
 80355c6:	18d5      	adds	r5, r2, r3
 80355c8:	42ac      	cmp	r4, r5
 80355ca:	d101      	bne.n	80355d0 <__sfputs_r+0x12>
 80355cc:	2000      	movs	r0, #0
 80355ce:	e007      	b.n	80355e0 <__sfputs_r+0x22>
 80355d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80355d4:	463a      	mov	r2, r7
 80355d6:	4630      	mov	r0, r6
 80355d8:	f7ff ffda 	bl	8035590 <__sfputc_r>
 80355dc:	1c43      	adds	r3, r0, #1
 80355de:	d1f3      	bne.n	80355c8 <__sfputs_r+0xa>
 80355e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080355e4 <_vfiprintf_r>:
 80355e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80355e8:	460d      	mov	r5, r1
 80355ea:	b09d      	sub	sp, #116	@ 0x74
 80355ec:	4614      	mov	r4, r2
 80355ee:	4698      	mov	r8, r3
 80355f0:	4606      	mov	r6, r0
 80355f2:	b118      	cbz	r0, 80355fc <_vfiprintf_r+0x18>
 80355f4:	6a03      	ldr	r3, [r0, #32]
 80355f6:	b90b      	cbnz	r3, 80355fc <_vfiprintf_r+0x18>
 80355f8:	f7fe f9e2 	bl	80339c0 <__sinit>
 80355fc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80355fe:	07d9      	lsls	r1, r3, #31
 8035600:	d405      	bmi.n	803560e <_vfiprintf_r+0x2a>
 8035602:	89ab      	ldrh	r3, [r5, #12]
 8035604:	059a      	lsls	r2, r3, #22
 8035606:	d402      	bmi.n	803560e <_vfiprintf_r+0x2a>
 8035608:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 803560a:	f7fe fc34 	bl	8033e76 <__retarget_lock_acquire_recursive>
 803560e:	89ab      	ldrh	r3, [r5, #12]
 8035610:	071b      	lsls	r3, r3, #28
 8035612:	d501      	bpl.n	8035618 <_vfiprintf_r+0x34>
 8035614:	692b      	ldr	r3, [r5, #16]
 8035616:	b99b      	cbnz	r3, 8035640 <_vfiprintf_r+0x5c>
 8035618:	4629      	mov	r1, r5
 803561a:	4630      	mov	r0, r6
 803561c:	f7fe fb2e 	bl	8033c7c <__swsetup_r>
 8035620:	b170      	cbz	r0, 8035640 <_vfiprintf_r+0x5c>
 8035622:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8035624:	07dc      	lsls	r4, r3, #31
 8035626:	d504      	bpl.n	8035632 <_vfiprintf_r+0x4e>
 8035628:	f04f 30ff 	mov.w	r0, #4294967295
 803562c:	b01d      	add	sp, #116	@ 0x74
 803562e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8035632:	89ab      	ldrh	r3, [r5, #12]
 8035634:	0598      	lsls	r0, r3, #22
 8035636:	d4f7      	bmi.n	8035628 <_vfiprintf_r+0x44>
 8035638:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 803563a:	f7fe fc1d 	bl	8033e78 <__retarget_lock_release_recursive>
 803563e:	e7f3      	b.n	8035628 <_vfiprintf_r+0x44>
 8035640:	2300      	movs	r3, #0
 8035642:	9309      	str	r3, [sp, #36]	@ 0x24
 8035644:	2320      	movs	r3, #32
 8035646:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 803564a:	f8cd 800c 	str.w	r8, [sp, #12]
 803564e:	2330      	movs	r3, #48	@ 0x30
 8035650:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8035800 <_vfiprintf_r+0x21c>
 8035654:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8035658:	f04f 0901 	mov.w	r9, #1
 803565c:	4623      	mov	r3, r4
 803565e:	469a      	mov	sl, r3
 8035660:	f813 2b01 	ldrb.w	r2, [r3], #1
 8035664:	b10a      	cbz	r2, 803566a <_vfiprintf_r+0x86>
 8035666:	2a25      	cmp	r2, #37	@ 0x25
 8035668:	d1f9      	bne.n	803565e <_vfiprintf_r+0x7a>
 803566a:	ebba 0b04 	subs.w	fp, sl, r4
 803566e:	d00b      	beq.n	8035688 <_vfiprintf_r+0xa4>
 8035670:	465b      	mov	r3, fp
 8035672:	4622      	mov	r2, r4
 8035674:	4629      	mov	r1, r5
 8035676:	4630      	mov	r0, r6
 8035678:	f7ff ffa1 	bl	80355be <__sfputs_r>
 803567c:	3001      	adds	r0, #1
 803567e:	f000 80a7 	beq.w	80357d0 <_vfiprintf_r+0x1ec>
 8035682:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8035684:	445a      	add	r2, fp
 8035686:	9209      	str	r2, [sp, #36]	@ 0x24
 8035688:	f89a 3000 	ldrb.w	r3, [sl]
 803568c:	2b00      	cmp	r3, #0
 803568e:	f000 809f 	beq.w	80357d0 <_vfiprintf_r+0x1ec>
 8035692:	2300      	movs	r3, #0
 8035694:	f04f 32ff 	mov.w	r2, #4294967295
 8035698:	e9cd 2305 	strd	r2, r3, [sp, #20]
 803569c:	f10a 0a01 	add.w	sl, sl, #1
 80356a0:	9304      	str	r3, [sp, #16]
 80356a2:	9307      	str	r3, [sp, #28]
 80356a4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80356a8:	931a      	str	r3, [sp, #104]	@ 0x68
 80356aa:	4654      	mov	r4, sl
 80356ac:	2205      	movs	r2, #5
 80356ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 80356b2:	4853      	ldr	r0, [pc, #332]	@ (8035800 <_vfiprintf_r+0x21c>)
 80356b4:	f7da fcc4 	bl	8010040 <memchr>
 80356b8:	9a04      	ldr	r2, [sp, #16]
 80356ba:	b9d8      	cbnz	r0, 80356f4 <_vfiprintf_r+0x110>
 80356bc:	06d1      	lsls	r1, r2, #27
 80356be:	bf44      	itt	mi
 80356c0:	2320      	movmi	r3, #32
 80356c2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80356c6:	0713      	lsls	r3, r2, #28
 80356c8:	bf44      	itt	mi
 80356ca:	232b      	movmi	r3, #43	@ 0x2b
 80356cc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80356d0:	f89a 3000 	ldrb.w	r3, [sl]
 80356d4:	2b2a      	cmp	r3, #42	@ 0x2a
 80356d6:	d015      	beq.n	8035704 <_vfiprintf_r+0x120>
 80356d8:	9a07      	ldr	r2, [sp, #28]
 80356da:	4654      	mov	r4, sl
 80356dc:	2000      	movs	r0, #0
 80356de:	f04f 0c0a 	mov.w	ip, #10
 80356e2:	4621      	mov	r1, r4
 80356e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80356e8:	3b30      	subs	r3, #48	@ 0x30
 80356ea:	2b09      	cmp	r3, #9
 80356ec:	d94b      	bls.n	8035786 <_vfiprintf_r+0x1a2>
 80356ee:	b1b0      	cbz	r0, 803571e <_vfiprintf_r+0x13a>
 80356f0:	9207      	str	r2, [sp, #28]
 80356f2:	e014      	b.n	803571e <_vfiprintf_r+0x13a>
 80356f4:	eba0 0308 	sub.w	r3, r0, r8
 80356f8:	fa09 f303 	lsl.w	r3, r9, r3
 80356fc:	4313      	orrs	r3, r2
 80356fe:	9304      	str	r3, [sp, #16]
 8035700:	46a2      	mov	sl, r4
 8035702:	e7d2      	b.n	80356aa <_vfiprintf_r+0xc6>
 8035704:	9b03      	ldr	r3, [sp, #12]
 8035706:	1d19      	adds	r1, r3, #4
 8035708:	681b      	ldr	r3, [r3, #0]
 803570a:	9103      	str	r1, [sp, #12]
 803570c:	2b00      	cmp	r3, #0
 803570e:	bfbb      	ittet	lt
 8035710:	425b      	neglt	r3, r3
 8035712:	f042 0202 	orrlt.w	r2, r2, #2
 8035716:	9307      	strge	r3, [sp, #28]
 8035718:	9307      	strlt	r3, [sp, #28]
 803571a:	bfb8      	it	lt
 803571c:	9204      	strlt	r2, [sp, #16]
 803571e:	7823      	ldrb	r3, [r4, #0]
 8035720:	2b2e      	cmp	r3, #46	@ 0x2e
 8035722:	d10a      	bne.n	803573a <_vfiprintf_r+0x156>
 8035724:	7863      	ldrb	r3, [r4, #1]
 8035726:	2b2a      	cmp	r3, #42	@ 0x2a
 8035728:	d132      	bne.n	8035790 <_vfiprintf_r+0x1ac>
 803572a:	9b03      	ldr	r3, [sp, #12]
 803572c:	1d1a      	adds	r2, r3, #4
 803572e:	681b      	ldr	r3, [r3, #0]
 8035730:	9203      	str	r2, [sp, #12]
 8035732:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8035736:	3402      	adds	r4, #2
 8035738:	9305      	str	r3, [sp, #20]
 803573a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8035810 <_vfiprintf_r+0x22c>
 803573e:	7821      	ldrb	r1, [r4, #0]
 8035740:	2203      	movs	r2, #3
 8035742:	4650      	mov	r0, sl
 8035744:	f7da fc7c 	bl	8010040 <memchr>
 8035748:	b138      	cbz	r0, 803575a <_vfiprintf_r+0x176>
 803574a:	9b04      	ldr	r3, [sp, #16]
 803574c:	eba0 000a 	sub.w	r0, r0, sl
 8035750:	2240      	movs	r2, #64	@ 0x40
 8035752:	4082      	lsls	r2, r0
 8035754:	4313      	orrs	r3, r2
 8035756:	3401      	adds	r4, #1
 8035758:	9304      	str	r3, [sp, #16]
 803575a:	f814 1b01 	ldrb.w	r1, [r4], #1
 803575e:	4829      	ldr	r0, [pc, #164]	@ (8035804 <_vfiprintf_r+0x220>)
 8035760:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8035764:	2206      	movs	r2, #6
 8035766:	f7da fc6b 	bl	8010040 <memchr>
 803576a:	2800      	cmp	r0, #0
 803576c:	d03f      	beq.n	80357ee <_vfiprintf_r+0x20a>
 803576e:	4b26      	ldr	r3, [pc, #152]	@ (8035808 <_vfiprintf_r+0x224>)
 8035770:	bb1b      	cbnz	r3, 80357ba <_vfiprintf_r+0x1d6>
 8035772:	9b03      	ldr	r3, [sp, #12]
 8035774:	3307      	adds	r3, #7
 8035776:	f023 0307 	bic.w	r3, r3, #7
 803577a:	3308      	adds	r3, #8
 803577c:	9303      	str	r3, [sp, #12]
 803577e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8035780:	443b      	add	r3, r7
 8035782:	9309      	str	r3, [sp, #36]	@ 0x24
 8035784:	e76a      	b.n	803565c <_vfiprintf_r+0x78>
 8035786:	fb0c 3202 	mla	r2, ip, r2, r3
 803578a:	460c      	mov	r4, r1
 803578c:	2001      	movs	r0, #1
 803578e:	e7a8      	b.n	80356e2 <_vfiprintf_r+0xfe>
 8035790:	2300      	movs	r3, #0
 8035792:	3401      	adds	r4, #1
 8035794:	9305      	str	r3, [sp, #20]
 8035796:	4619      	mov	r1, r3
 8035798:	f04f 0c0a 	mov.w	ip, #10
 803579c:	4620      	mov	r0, r4
 803579e:	f810 2b01 	ldrb.w	r2, [r0], #1
 80357a2:	3a30      	subs	r2, #48	@ 0x30
 80357a4:	2a09      	cmp	r2, #9
 80357a6:	d903      	bls.n	80357b0 <_vfiprintf_r+0x1cc>
 80357a8:	2b00      	cmp	r3, #0
 80357aa:	d0c6      	beq.n	803573a <_vfiprintf_r+0x156>
 80357ac:	9105      	str	r1, [sp, #20]
 80357ae:	e7c4      	b.n	803573a <_vfiprintf_r+0x156>
 80357b0:	fb0c 2101 	mla	r1, ip, r1, r2
 80357b4:	4604      	mov	r4, r0
 80357b6:	2301      	movs	r3, #1
 80357b8:	e7f0      	b.n	803579c <_vfiprintf_r+0x1b8>
 80357ba:	ab03      	add	r3, sp, #12
 80357bc:	9300      	str	r3, [sp, #0]
 80357be:	462a      	mov	r2, r5
 80357c0:	4b12      	ldr	r3, [pc, #72]	@ (803580c <_vfiprintf_r+0x228>)
 80357c2:	a904      	add	r1, sp, #16
 80357c4:	4630      	mov	r0, r6
 80357c6:	f7fd fcb9 	bl	803313c <_printf_float>
 80357ca:	4607      	mov	r7, r0
 80357cc:	1c78      	adds	r0, r7, #1
 80357ce:	d1d6      	bne.n	803577e <_vfiprintf_r+0x19a>
 80357d0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80357d2:	07d9      	lsls	r1, r3, #31
 80357d4:	d405      	bmi.n	80357e2 <_vfiprintf_r+0x1fe>
 80357d6:	89ab      	ldrh	r3, [r5, #12]
 80357d8:	059a      	lsls	r2, r3, #22
 80357da:	d402      	bmi.n	80357e2 <_vfiprintf_r+0x1fe>
 80357dc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80357de:	f7fe fb4b 	bl	8033e78 <__retarget_lock_release_recursive>
 80357e2:	89ab      	ldrh	r3, [r5, #12]
 80357e4:	065b      	lsls	r3, r3, #25
 80357e6:	f53f af1f 	bmi.w	8035628 <_vfiprintf_r+0x44>
 80357ea:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80357ec:	e71e      	b.n	803562c <_vfiprintf_r+0x48>
 80357ee:	ab03      	add	r3, sp, #12
 80357f0:	9300      	str	r3, [sp, #0]
 80357f2:	462a      	mov	r2, r5
 80357f4:	4b05      	ldr	r3, [pc, #20]	@ (803580c <_vfiprintf_r+0x228>)
 80357f6:	a904      	add	r1, sp, #16
 80357f8:	4630      	mov	r0, r6
 80357fa:	f7fd ff37 	bl	803366c <_printf_i>
 80357fe:	e7e4      	b.n	80357ca <_vfiprintf_r+0x1e6>
 8035800:	0803ba8a 	.word	0x0803ba8a
 8035804:	0803ba94 	.word	0x0803ba94
 8035808:	0803313d 	.word	0x0803313d
 803580c:	080355bf 	.word	0x080355bf
 8035810:	0803ba90 	.word	0x0803ba90

08035814 <__sflush_r>:
 8035814:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8035818:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 803581c:	0716      	lsls	r6, r2, #28
 803581e:	4605      	mov	r5, r0
 8035820:	460c      	mov	r4, r1
 8035822:	d454      	bmi.n	80358ce <__sflush_r+0xba>
 8035824:	684b      	ldr	r3, [r1, #4]
 8035826:	2b00      	cmp	r3, #0
 8035828:	dc02      	bgt.n	8035830 <__sflush_r+0x1c>
 803582a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 803582c:	2b00      	cmp	r3, #0
 803582e:	dd48      	ble.n	80358c2 <__sflush_r+0xae>
 8035830:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8035832:	2e00      	cmp	r6, #0
 8035834:	d045      	beq.n	80358c2 <__sflush_r+0xae>
 8035836:	2300      	movs	r3, #0
 8035838:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 803583c:	682f      	ldr	r7, [r5, #0]
 803583e:	6a21      	ldr	r1, [r4, #32]
 8035840:	602b      	str	r3, [r5, #0]
 8035842:	d030      	beq.n	80358a6 <__sflush_r+0x92>
 8035844:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8035846:	89a3      	ldrh	r3, [r4, #12]
 8035848:	0759      	lsls	r1, r3, #29
 803584a:	d505      	bpl.n	8035858 <__sflush_r+0x44>
 803584c:	6863      	ldr	r3, [r4, #4]
 803584e:	1ad2      	subs	r2, r2, r3
 8035850:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8035852:	b10b      	cbz	r3, 8035858 <__sflush_r+0x44>
 8035854:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8035856:	1ad2      	subs	r2, r2, r3
 8035858:	2300      	movs	r3, #0
 803585a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 803585c:	6a21      	ldr	r1, [r4, #32]
 803585e:	4628      	mov	r0, r5
 8035860:	47b0      	blx	r6
 8035862:	1c43      	adds	r3, r0, #1
 8035864:	89a3      	ldrh	r3, [r4, #12]
 8035866:	d106      	bne.n	8035876 <__sflush_r+0x62>
 8035868:	6829      	ldr	r1, [r5, #0]
 803586a:	291d      	cmp	r1, #29
 803586c:	d82b      	bhi.n	80358c6 <__sflush_r+0xb2>
 803586e:	4a2a      	ldr	r2, [pc, #168]	@ (8035918 <__sflush_r+0x104>)
 8035870:	40ca      	lsrs	r2, r1
 8035872:	07d6      	lsls	r6, r2, #31
 8035874:	d527      	bpl.n	80358c6 <__sflush_r+0xb2>
 8035876:	2200      	movs	r2, #0
 8035878:	6062      	str	r2, [r4, #4]
 803587a:	04d9      	lsls	r1, r3, #19
 803587c:	6922      	ldr	r2, [r4, #16]
 803587e:	6022      	str	r2, [r4, #0]
 8035880:	d504      	bpl.n	803588c <__sflush_r+0x78>
 8035882:	1c42      	adds	r2, r0, #1
 8035884:	d101      	bne.n	803588a <__sflush_r+0x76>
 8035886:	682b      	ldr	r3, [r5, #0]
 8035888:	b903      	cbnz	r3, 803588c <__sflush_r+0x78>
 803588a:	6560      	str	r0, [r4, #84]	@ 0x54
 803588c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 803588e:	602f      	str	r7, [r5, #0]
 8035890:	b1b9      	cbz	r1, 80358c2 <__sflush_r+0xae>
 8035892:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8035896:	4299      	cmp	r1, r3
 8035898:	d002      	beq.n	80358a0 <__sflush_r+0x8c>
 803589a:	4628      	mov	r0, r5
 803589c:	f7ff f954 	bl	8034b48 <_free_r>
 80358a0:	2300      	movs	r3, #0
 80358a2:	6363      	str	r3, [r4, #52]	@ 0x34
 80358a4:	e00d      	b.n	80358c2 <__sflush_r+0xae>
 80358a6:	2301      	movs	r3, #1
 80358a8:	4628      	mov	r0, r5
 80358aa:	47b0      	blx	r6
 80358ac:	4602      	mov	r2, r0
 80358ae:	1c50      	adds	r0, r2, #1
 80358b0:	d1c9      	bne.n	8035846 <__sflush_r+0x32>
 80358b2:	682b      	ldr	r3, [r5, #0]
 80358b4:	2b00      	cmp	r3, #0
 80358b6:	d0c6      	beq.n	8035846 <__sflush_r+0x32>
 80358b8:	2b1d      	cmp	r3, #29
 80358ba:	d001      	beq.n	80358c0 <__sflush_r+0xac>
 80358bc:	2b16      	cmp	r3, #22
 80358be:	d11e      	bne.n	80358fe <__sflush_r+0xea>
 80358c0:	602f      	str	r7, [r5, #0]
 80358c2:	2000      	movs	r0, #0
 80358c4:	e022      	b.n	803590c <__sflush_r+0xf8>
 80358c6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80358ca:	b21b      	sxth	r3, r3
 80358cc:	e01b      	b.n	8035906 <__sflush_r+0xf2>
 80358ce:	690f      	ldr	r7, [r1, #16]
 80358d0:	2f00      	cmp	r7, #0
 80358d2:	d0f6      	beq.n	80358c2 <__sflush_r+0xae>
 80358d4:	0793      	lsls	r3, r2, #30
 80358d6:	680e      	ldr	r6, [r1, #0]
 80358d8:	bf08      	it	eq
 80358da:	694b      	ldreq	r3, [r1, #20]
 80358dc:	600f      	str	r7, [r1, #0]
 80358de:	bf18      	it	ne
 80358e0:	2300      	movne	r3, #0
 80358e2:	eba6 0807 	sub.w	r8, r6, r7
 80358e6:	608b      	str	r3, [r1, #8]
 80358e8:	f1b8 0f00 	cmp.w	r8, #0
 80358ec:	dde9      	ble.n	80358c2 <__sflush_r+0xae>
 80358ee:	6a21      	ldr	r1, [r4, #32]
 80358f0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80358f2:	4643      	mov	r3, r8
 80358f4:	463a      	mov	r2, r7
 80358f6:	4628      	mov	r0, r5
 80358f8:	47b0      	blx	r6
 80358fa:	2800      	cmp	r0, #0
 80358fc:	dc08      	bgt.n	8035910 <__sflush_r+0xfc>
 80358fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8035902:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8035906:	81a3      	strh	r3, [r4, #12]
 8035908:	f04f 30ff 	mov.w	r0, #4294967295
 803590c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8035910:	4407      	add	r7, r0
 8035912:	eba8 0800 	sub.w	r8, r8, r0
 8035916:	e7e7      	b.n	80358e8 <__sflush_r+0xd4>
 8035918:	20400001 	.word	0x20400001

0803591c <_fflush_r>:
 803591c:	b538      	push	{r3, r4, r5, lr}
 803591e:	690b      	ldr	r3, [r1, #16]
 8035920:	4605      	mov	r5, r0
 8035922:	460c      	mov	r4, r1
 8035924:	b913      	cbnz	r3, 803592c <_fflush_r+0x10>
 8035926:	2500      	movs	r5, #0
 8035928:	4628      	mov	r0, r5
 803592a:	bd38      	pop	{r3, r4, r5, pc}
 803592c:	b118      	cbz	r0, 8035936 <_fflush_r+0x1a>
 803592e:	6a03      	ldr	r3, [r0, #32]
 8035930:	b90b      	cbnz	r3, 8035936 <_fflush_r+0x1a>
 8035932:	f7fe f845 	bl	80339c0 <__sinit>
 8035936:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 803593a:	2b00      	cmp	r3, #0
 803593c:	d0f3      	beq.n	8035926 <_fflush_r+0xa>
 803593e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8035940:	07d0      	lsls	r0, r2, #31
 8035942:	d404      	bmi.n	803594e <_fflush_r+0x32>
 8035944:	0599      	lsls	r1, r3, #22
 8035946:	d402      	bmi.n	803594e <_fflush_r+0x32>
 8035948:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 803594a:	f7fe fa94 	bl	8033e76 <__retarget_lock_acquire_recursive>
 803594e:	4628      	mov	r0, r5
 8035950:	4621      	mov	r1, r4
 8035952:	f7ff ff5f 	bl	8035814 <__sflush_r>
 8035956:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8035958:	07da      	lsls	r2, r3, #31
 803595a:	4605      	mov	r5, r0
 803595c:	d4e4      	bmi.n	8035928 <_fflush_r+0xc>
 803595e:	89a3      	ldrh	r3, [r4, #12]
 8035960:	059b      	lsls	r3, r3, #22
 8035962:	d4e1      	bmi.n	8035928 <_fflush_r+0xc>
 8035964:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8035966:	f7fe fa87 	bl	8033e78 <__retarget_lock_release_recursive>
 803596a:	e7dd      	b.n	8035928 <_fflush_r+0xc>

0803596c <__swhatbuf_r>:
 803596c:	b570      	push	{r4, r5, r6, lr}
 803596e:	460c      	mov	r4, r1
 8035970:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8035974:	2900      	cmp	r1, #0
 8035976:	b096      	sub	sp, #88	@ 0x58
 8035978:	4615      	mov	r5, r2
 803597a:	461e      	mov	r6, r3
 803597c:	da0d      	bge.n	803599a <__swhatbuf_r+0x2e>
 803597e:	89a3      	ldrh	r3, [r4, #12]
 8035980:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8035984:	f04f 0100 	mov.w	r1, #0
 8035988:	bf14      	ite	ne
 803598a:	2340      	movne	r3, #64	@ 0x40
 803598c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8035990:	2000      	movs	r0, #0
 8035992:	6031      	str	r1, [r6, #0]
 8035994:	602b      	str	r3, [r5, #0]
 8035996:	b016      	add	sp, #88	@ 0x58
 8035998:	bd70      	pop	{r4, r5, r6, pc}
 803599a:	466a      	mov	r2, sp
 803599c:	f000 f848 	bl	8035a30 <_fstat_r>
 80359a0:	2800      	cmp	r0, #0
 80359a2:	dbec      	blt.n	803597e <__swhatbuf_r+0x12>
 80359a4:	9901      	ldr	r1, [sp, #4]
 80359a6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80359aa:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80359ae:	4259      	negs	r1, r3
 80359b0:	4159      	adcs	r1, r3
 80359b2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80359b6:	e7eb      	b.n	8035990 <__swhatbuf_r+0x24>

080359b8 <__smakebuf_r>:
 80359b8:	898b      	ldrh	r3, [r1, #12]
 80359ba:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80359bc:	079d      	lsls	r5, r3, #30
 80359be:	4606      	mov	r6, r0
 80359c0:	460c      	mov	r4, r1
 80359c2:	d507      	bpl.n	80359d4 <__smakebuf_r+0x1c>
 80359c4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80359c8:	6023      	str	r3, [r4, #0]
 80359ca:	6123      	str	r3, [r4, #16]
 80359cc:	2301      	movs	r3, #1
 80359ce:	6163      	str	r3, [r4, #20]
 80359d0:	b003      	add	sp, #12
 80359d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80359d4:	ab01      	add	r3, sp, #4
 80359d6:	466a      	mov	r2, sp
 80359d8:	f7ff ffc8 	bl	803596c <__swhatbuf_r>
 80359dc:	9f00      	ldr	r7, [sp, #0]
 80359de:	4605      	mov	r5, r0
 80359e0:	4639      	mov	r1, r7
 80359e2:	4630      	mov	r0, r6
 80359e4:	f7fd fa50 	bl	8032e88 <_malloc_r>
 80359e8:	b948      	cbnz	r0, 80359fe <__smakebuf_r+0x46>
 80359ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80359ee:	059a      	lsls	r2, r3, #22
 80359f0:	d4ee      	bmi.n	80359d0 <__smakebuf_r+0x18>
 80359f2:	f023 0303 	bic.w	r3, r3, #3
 80359f6:	f043 0302 	orr.w	r3, r3, #2
 80359fa:	81a3      	strh	r3, [r4, #12]
 80359fc:	e7e2      	b.n	80359c4 <__smakebuf_r+0xc>
 80359fe:	89a3      	ldrh	r3, [r4, #12]
 8035a00:	6020      	str	r0, [r4, #0]
 8035a02:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8035a06:	81a3      	strh	r3, [r4, #12]
 8035a08:	9b01      	ldr	r3, [sp, #4]
 8035a0a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8035a0e:	b15b      	cbz	r3, 8035a28 <__smakebuf_r+0x70>
 8035a10:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8035a14:	4630      	mov	r0, r6
 8035a16:	f000 f81d 	bl	8035a54 <_isatty_r>
 8035a1a:	b128      	cbz	r0, 8035a28 <__smakebuf_r+0x70>
 8035a1c:	89a3      	ldrh	r3, [r4, #12]
 8035a1e:	f023 0303 	bic.w	r3, r3, #3
 8035a22:	f043 0301 	orr.w	r3, r3, #1
 8035a26:	81a3      	strh	r3, [r4, #12]
 8035a28:	89a3      	ldrh	r3, [r4, #12]
 8035a2a:	431d      	orrs	r5, r3
 8035a2c:	81a5      	strh	r5, [r4, #12]
 8035a2e:	e7cf      	b.n	80359d0 <__smakebuf_r+0x18>

08035a30 <_fstat_r>:
 8035a30:	b538      	push	{r3, r4, r5, lr}
 8035a32:	4d07      	ldr	r5, [pc, #28]	@ (8035a50 <_fstat_r+0x20>)
 8035a34:	2300      	movs	r3, #0
 8035a36:	4604      	mov	r4, r0
 8035a38:	4608      	mov	r0, r1
 8035a3a:	4611      	mov	r1, r2
 8035a3c:	602b      	str	r3, [r5, #0]
 8035a3e:	f7dc fda3 	bl	8012588 <_fstat>
 8035a42:	1c43      	adds	r3, r0, #1
 8035a44:	d102      	bne.n	8035a4c <_fstat_r+0x1c>
 8035a46:	682b      	ldr	r3, [r5, #0]
 8035a48:	b103      	cbz	r3, 8035a4c <_fstat_r+0x1c>
 8035a4a:	6023      	str	r3, [r4, #0]
 8035a4c:	bd38      	pop	{r3, r4, r5, pc}
 8035a4e:	bf00      	nop
 8035a50:	200057ec 	.word	0x200057ec

08035a54 <_isatty_r>:
 8035a54:	b538      	push	{r3, r4, r5, lr}
 8035a56:	4d06      	ldr	r5, [pc, #24]	@ (8035a70 <_isatty_r+0x1c>)
 8035a58:	2300      	movs	r3, #0
 8035a5a:	4604      	mov	r4, r0
 8035a5c:	4608      	mov	r0, r1
 8035a5e:	602b      	str	r3, [r5, #0]
 8035a60:	f7dc fda2 	bl	80125a8 <_isatty>
 8035a64:	1c43      	adds	r3, r0, #1
 8035a66:	d102      	bne.n	8035a6e <_isatty_r+0x1a>
 8035a68:	682b      	ldr	r3, [r5, #0]
 8035a6a:	b103      	cbz	r3, 8035a6e <_isatty_r+0x1a>
 8035a6c:	6023      	str	r3, [r4, #0]
 8035a6e:	bd38      	pop	{r3, r4, r5, pc}
 8035a70:	200057ec 	.word	0x200057ec

08035a74 <__assert_func>:
 8035a74:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8035a76:	4614      	mov	r4, r2
 8035a78:	461a      	mov	r2, r3
 8035a7a:	4b09      	ldr	r3, [pc, #36]	@ (8035aa0 <__assert_func+0x2c>)
 8035a7c:	681b      	ldr	r3, [r3, #0]
 8035a7e:	4605      	mov	r5, r0
 8035a80:	68d8      	ldr	r0, [r3, #12]
 8035a82:	b14c      	cbz	r4, 8035a98 <__assert_func+0x24>
 8035a84:	4b07      	ldr	r3, [pc, #28]	@ (8035aa4 <__assert_func+0x30>)
 8035a86:	9100      	str	r1, [sp, #0]
 8035a88:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8035a8c:	4906      	ldr	r1, [pc, #24]	@ (8035aa8 <__assert_func+0x34>)
 8035a8e:	462b      	mov	r3, r5
 8035a90:	f000 f842 	bl	8035b18 <fiprintf>
 8035a94:	f000 f852 	bl	8035b3c <abort>
 8035a98:	4b04      	ldr	r3, [pc, #16]	@ (8035aac <__assert_func+0x38>)
 8035a9a:	461c      	mov	r4, r3
 8035a9c:	e7f3      	b.n	8035a86 <__assert_func+0x12>
 8035a9e:	bf00      	nop
 8035aa0:	200011a8 	.word	0x200011a8
 8035aa4:	0803baa5 	.word	0x0803baa5
 8035aa8:	0803bab2 	.word	0x0803bab2
 8035aac:	0803bae0 	.word	0x0803bae0

08035ab0 <_calloc_r>:
 8035ab0:	b570      	push	{r4, r5, r6, lr}
 8035ab2:	fba1 5402 	umull	r5, r4, r1, r2
 8035ab6:	b934      	cbnz	r4, 8035ac6 <_calloc_r+0x16>
 8035ab8:	4629      	mov	r1, r5
 8035aba:	f7fd f9e5 	bl	8032e88 <_malloc_r>
 8035abe:	4606      	mov	r6, r0
 8035ac0:	b928      	cbnz	r0, 8035ace <_calloc_r+0x1e>
 8035ac2:	4630      	mov	r0, r6
 8035ac4:	bd70      	pop	{r4, r5, r6, pc}
 8035ac6:	220c      	movs	r2, #12
 8035ac8:	6002      	str	r2, [r0, #0]
 8035aca:	2600      	movs	r6, #0
 8035acc:	e7f9      	b.n	8035ac2 <_calloc_r+0x12>
 8035ace:	462a      	mov	r2, r5
 8035ad0:	4621      	mov	r1, r4
 8035ad2:	f7fe f943 	bl	8033d5c <memset>
 8035ad6:	e7f4      	b.n	8035ac2 <_calloc_r+0x12>

08035ad8 <__ascii_mbtowc>:
 8035ad8:	b082      	sub	sp, #8
 8035ada:	b901      	cbnz	r1, 8035ade <__ascii_mbtowc+0x6>
 8035adc:	a901      	add	r1, sp, #4
 8035ade:	b142      	cbz	r2, 8035af2 <__ascii_mbtowc+0x1a>
 8035ae0:	b14b      	cbz	r3, 8035af6 <__ascii_mbtowc+0x1e>
 8035ae2:	7813      	ldrb	r3, [r2, #0]
 8035ae4:	600b      	str	r3, [r1, #0]
 8035ae6:	7812      	ldrb	r2, [r2, #0]
 8035ae8:	1e10      	subs	r0, r2, #0
 8035aea:	bf18      	it	ne
 8035aec:	2001      	movne	r0, #1
 8035aee:	b002      	add	sp, #8
 8035af0:	4770      	bx	lr
 8035af2:	4610      	mov	r0, r2
 8035af4:	e7fb      	b.n	8035aee <__ascii_mbtowc+0x16>
 8035af6:	f06f 0001 	mvn.w	r0, #1
 8035afa:	e7f8      	b.n	8035aee <__ascii_mbtowc+0x16>

08035afc <__ascii_wctomb>:
 8035afc:	4603      	mov	r3, r0
 8035afe:	4608      	mov	r0, r1
 8035b00:	b141      	cbz	r1, 8035b14 <__ascii_wctomb+0x18>
 8035b02:	2aff      	cmp	r2, #255	@ 0xff
 8035b04:	d904      	bls.n	8035b10 <__ascii_wctomb+0x14>
 8035b06:	228a      	movs	r2, #138	@ 0x8a
 8035b08:	601a      	str	r2, [r3, #0]
 8035b0a:	f04f 30ff 	mov.w	r0, #4294967295
 8035b0e:	4770      	bx	lr
 8035b10:	700a      	strb	r2, [r1, #0]
 8035b12:	2001      	movs	r0, #1
 8035b14:	4770      	bx	lr
	...

08035b18 <fiprintf>:
 8035b18:	b40e      	push	{r1, r2, r3}
 8035b1a:	b503      	push	{r0, r1, lr}
 8035b1c:	4601      	mov	r1, r0
 8035b1e:	ab03      	add	r3, sp, #12
 8035b20:	4805      	ldr	r0, [pc, #20]	@ (8035b38 <fiprintf+0x20>)
 8035b22:	f853 2b04 	ldr.w	r2, [r3], #4
 8035b26:	6800      	ldr	r0, [r0, #0]
 8035b28:	9301      	str	r3, [sp, #4]
 8035b2a:	f7ff fd5b 	bl	80355e4 <_vfiprintf_r>
 8035b2e:	b002      	add	sp, #8
 8035b30:	f85d eb04 	ldr.w	lr, [sp], #4
 8035b34:	b003      	add	sp, #12
 8035b36:	4770      	bx	lr
 8035b38:	200011a8 	.word	0x200011a8

08035b3c <abort>:
 8035b3c:	b508      	push	{r3, lr}
 8035b3e:	2006      	movs	r0, #6
 8035b40:	f000 f82c 	bl	8035b9c <raise>
 8035b44:	2001      	movs	r0, #1
 8035b46:	f000 fc29 	bl	803639c <_exit>

08035b4a <_raise_r>:
 8035b4a:	291f      	cmp	r1, #31
 8035b4c:	b538      	push	{r3, r4, r5, lr}
 8035b4e:	4605      	mov	r5, r0
 8035b50:	460c      	mov	r4, r1
 8035b52:	d904      	bls.n	8035b5e <_raise_r+0x14>
 8035b54:	2316      	movs	r3, #22
 8035b56:	6003      	str	r3, [r0, #0]
 8035b58:	f04f 30ff 	mov.w	r0, #4294967295
 8035b5c:	bd38      	pop	{r3, r4, r5, pc}
 8035b5e:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8035b60:	b112      	cbz	r2, 8035b68 <_raise_r+0x1e>
 8035b62:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8035b66:	b94b      	cbnz	r3, 8035b7c <_raise_r+0x32>
 8035b68:	4628      	mov	r0, r5
 8035b6a:	f000 f831 	bl	8035bd0 <_getpid_r>
 8035b6e:	4622      	mov	r2, r4
 8035b70:	4601      	mov	r1, r0
 8035b72:	4628      	mov	r0, r5
 8035b74:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8035b78:	f000 b818 	b.w	8035bac <_kill_r>
 8035b7c:	2b01      	cmp	r3, #1
 8035b7e:	d00a      	beq.n	8035b96 <_raise_r+0x4c>
 8035b80:	1c59      	adds	r1, r3, #1
 8035b82:	d103      	bne.n	8035b8c <_raise_r+0x42>
 8035b84:	2316      	movs	r3, #22
 8035b86:	6003      	str	r3, [r0, #0]
 8035b88:	2001      	movs	r0, #1
 8035b8a:	e7e7      	b.n	8035b5c <_raise_r+0x12>
 8035b8c:	2100      	movs	r1, #0
 8035b8e:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8035b92:	4620      	mov	r0, r4
 8035b94:	4798      	blx	r3
 8035b96:	2000      	movs	r0, #0
 8035b98:	e7e0      	b.n	8035b5c <_raise_r+0x12>
	...

08035b9c <raise>:
 8035b9c:	4b02      	ldr	r3, [pc, #8]	@ (8035ba8 <raise+0xc>)
 8035b9e:	4601      	mov	r1, r0
 8035ba0:	6818      	ldr	r0, [r3, #0]
 8035ba2:	f7ff bfd2 	b.w	8035b4a <_raise_r>
 8035ba6:	bf00      	nop
 8035ba8:	200011a8 	.word	0x200011a8

08035bac <_kill_r>:
 8035bac:	b538      	push	{r3, r4, r5, lr}
 8035bae:	4d07      	ldr	r5, [pc, #28]	@ (8035bcc <_kill_r+0x20>)
 8035bb0:	2300      	movs	r3, #0
 8035bb2:	4604      	mov	r4, r0
 8035bb4:	4608      	mov	r0, r1
 8035bb6:	4611      	mov	r1, r2
 8035bb8:	602b      	str	r3, [r5, #0]
 8035bba:	f7dc fd00 	bl	80125be <_kill>
 8035bbe:	1c43      	adds	r3, r0, #1
 8035bc0:	d102      	bne.n	8035bc8 <_kill_r+0x1c>
 8035bc2:	682b      	ldr	r3, [r5, #0]
 8035bc4:	b103      	cbz	r3, 8035bc8 <_kill_r+0x1c>
 8035bc6:	6023      	str	r3, [r4, #0]
 8035bc8:	bd38      	pop	{r3, r4, r5, pc}
 8035bca:	bf00      	nop
 8035bcc:	200057ec 	.word	0x200057ec

08035bd0 <_getpid_r>:
 8035bd0:	f7dc bd02 	b.w	80125d8 <_getpid>

08035bd4 <powf>:
 8035bd4:	b508      	push	{r3, lr}
 8035bd6:	ed2d 8b04 	vpush	{d8-d9}
 8035bda:	eeb0 8a60 	vmov.f32	s16, s1
 8035bde:	eeb0 9a40 	vmov.f32	s18, s0
 8035be2:	f000 f8a7 	bl	8035d34 <__ieee754_powf>
 8035be6:	eeb4 8a48 	vcmp.f32	s16, s16
 8035bea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8035bee:	eef0 8a40 	vmov.f32	s17, s0
 8035bf2:	d63e      	bvs.n	8035c72 <powf+0x9e>
 8035bf4:	eeb5 9a40 	vcmp.f32	s18, #0.0
 8035bf8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8035bfc:	d112      	bne.n	8035c24 <powf+0x50>
 8035bfe:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8035c02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8035c06:	d039      	beq.n	8035c7c <powf+0xa8>
 8035c08:	eeb0 0a48 	vmov.f32	s0, s16
 8035c0c:	f000 f85f 	bl	8035cce <finitef>
 8035c10:	b378      	cbz	r0, 8035c72 <powf+0x9e>
 8035c12:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8035c16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8035c1a:	d52a      	bpl.n	8035c72 <powf+0x9e>
 8035c1c:	f7fe f900 	bl	8033e20 <__errno>
 8035c20:	2322      	movs	r3, #34	@ 0x22
 8035c22:	e014      	b.n	8035c4e <powf+0x7a>
 8035c24:	f000 f853 	bl	8035cce <finitef>
 8035c28:	b998      	cbnz	r0, 8035c52 <powf+0x7e>
 8035c2a:	eeb0 0a49 	vmov.f32	s0, s18
 8035c2e:	f000 f84e 	bl	8035cce <finitef>
 8035c32:	b170      	cbz	r0, 8035c52 <powf+0x7e>
 8035c34:	eeb0 0a48 	vmov.f32	s0, s16
 8035c38:	f000 f849 	bl	8035cce <finitef>
 8035c3c:	b148      	cbz	r0, 8035c52 <powf+0x7e>
 8035c3e:	eef4 8a68 	vcmp.f32	s17, s17
 8035c42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8035c46:	d7e9      	bvc.n	8035c1c <powf+0x48>
 8035c48:	f7fe f8ea 	bl	8033e20 <__errno>
 8035c4c:	2321      	movs	r3, #33	@ 0x21
 8035c4e:	6003      	str	r3, [r0, #0]
 8035c50:	e00f      	b.n	8035c72 <powf+0x9e>
 8035c52:	eef5 8a40 	vcmp.f32	s17, #0.0
 8035c56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8035c5a:	d10a      	bne.n	8035c72 <powf+0x9e>
 8035c5c:	eeb0 0a49 	vmov.f32	s0, s18
 8035c60:	f000 f835 	bl	8035cce <finitef>
 8035c64:	b128      	cbz	r0, 8035c72 <powf+0x9e>
 8035c66:	eeb0 0a48 	vmov.f32	s0, s16
 8035c6a:	f000 f830 	bl	8035cce <finitef>
 8035c6e:	2800      	cmp	r0, #0
 8035c70:	d1d4      	bne.n	8035c1c <powf+0x48>
 8035c72:	eeb0 0a68 	vmov.f32	s0, s17
 8035c76:	ecbd 8b04 	vpop	{d8-d9}
 8035c7a:	bd08      	pop	{r3, pc}
 8035c7c:	eef7 8a00 	vmov.f32	s17, #112	@ 0x3f800000  1.0
 8035c80:	e7f7      	b.n	8035c72 <powf+0x9e>
	...

08035c84 <sqrtf>:
 8035c84:	b508      	push	{r3, lr}
 8035c86:	ed2d 8b02 	vpush	{d8}
 8035c8a:	eeb0 8a40 	vmov.f32	s16, s0
 8035c8e:	f000 f84d 	bl	8035d2c <__ieee754_sqrtf>
 8035c92:	eeb4 8a48 	vcmp.f32	s16, s16
 8035c96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8035c9a:	d60c      	bvs.n	8035cb6 <sqrtf+0x32>
 8035c9c:	eddf 8a07 	vldr	s17, [pc, #28]	@ 8035cbc <sqrtf+0x38>
 8035ca0:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8035ca4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8035ca8:	d505      	bpl.n	8035cb6 <sqrtf+0x32>
 8035caa:	f7fe f8b9 	bl	8033e20 <__errno>
 8035cae:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8035cb2:	2321      	movs	r3, #33	@ 0x21
 8035cb4:	6003      	str	r3, [r0, #0]
 8035cb6:	ecbd 8b02 	vpop	{d8}
 8035cba:	bd08      	pop	{r3, pc}
 8035cbc:	00000000 	.word	0x00000000

08035cc0 <fabsf>:
 8035cc0:	ee10 3a10 	vmov	r3, s0
 8035cc4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8035cc8:	ee00 3a10 	vmov	s0, r3
 8035ccc:	4770      	bx	lr

08035cce <finitef>:
 8035cce:	ee10 3a10 	vmov	r3, s0
 8035cd2:	f023 4000 	bic.w	r0, r3, #2147483648	@ 0x80000000
 8035cd6:	f1b0 4fff 	cmp.w	r0, #2139095040	@ 0x7f800000
 8035cda:	bfac      	ite	ge
 8035cdc:	2000      	movge	r0, #0
 8035cde:	2001      	movlt	r0, #1
 8035ce0:	4770      	bx	lr

08035ce2 <with_errnof>:
 8035ce2:	b510      	push	{r4, lr}
 8035ce4:	ed2d 8b02 	vpush	{d8}
 8035ce8:	eeb0 8a40 	vmov.f32	s16, s0
 8035cec:	4604      	mov	r4, r0
 8035cee:	f7fe f897 	bl	8033e20 <__errno>
 8035cf2:	eeb0 0a48 	vmov.f32	s0, s16
 8035cf6:	ecbd 8b02 	vpop	{d8}
 8035cfa:	6004      	str	r4, [r0, #0]
 8035cfc:	bd10      	pop	{r4, pc}

08035cfe <xflowf>:
 8035cfe:	b130      	cbz	r0, 8035d0e <xflowf+0x10>
 8035d00:	eef1 7a40 	vneg.f32	s15, s0
 8035d04:	ee27 0a80 	vmul.f32	s0, s15, s0
 8035d08:	2022      	movs	r0, #34	@ 0x22
 8035d0a:	f7ff bfea 	b.w	8035ce2 <with_errnof>
 8035d0e:	eef0 7a40 	vmov.f32	s15, s0
 8035d12:	e7f7      	b.n	8035d04 <xflowf+0x6>

08035d14 <__math_uflowf>:
 8035d14:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8035d1c <__math_uflowf+0x8>
 8035d18:	f7ff bff1 	b.w	8035cfe <xflowf>
 8035d1c:	10000000 	.word	0x10000000

08035d20 <__math_oflowf>:
 8035d20:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8035d28 <__math_oflowf+0x8>
 8035d24:	f7ff bfeb 	b.w	8035cfe <xflowf>
 8035d28:	70000000 	.word	0x70000000

08035d2c <__ieee754_sqrtf>:
 8035d2c:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8035d30:	4770      	bx	lr
	...

08035d34 <__ieee754_powf>:
 8035d34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8035d38:	ee10 4a90 	vmov	r4, s1
 8035d3c:	f034 4900 	bics.w	r9, r4, #2147483648	@ 0x80000000
 8035d40:	ed2d 8b02 	vpush	{d8}
 8035d44:	ee10 6a10 	vmov	r6, s0
 8035d48:	eeb0 8a40 	vmov.f32	s16, s0
 8035d4c:	eef0 8a60 	vmov.f32	s17, s1
 8035d50:	d10c      	bne.n	8035d6c <__ieee754_powf+0x38>
 8035d52:	f486 0680 	eor.w	r6, r6, #4194304	@ 0x400000
 8035d56:	0076      	lsls	r6, r6, #1
 8035d58:	f516 0f00 	cmn.w	r6, #8388608	@ 0x800000
 8035d5c:	f240 8274 	bls.w	8036248 <__ieee754_powf+0x514>
 8035d60:	ee38 0a28 	vadd.f32	s0, s16, s17
 8035d64:	ecbd 8b02 	vpop	{d8}
 8035d68:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8035d6c:	f026 4800 	bic.w	r8, r6, #2147483648	@ 0x80000000
 8035d70:	f1b8 4fff 	cmp.w	r8, #2139095040	@ 0x7f800000
 8035d74:	d802      	bhi.n	8035d7c <__ieee754_powf+0x48>
 8035d76:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 8035d7a:	d908      	bls.n	8035d8e <__ieee754_powf+0x5a>
 8035d7c:	f1b6 5f7e 	cmp.w	r6, #1065353216	@ 0x3f800000
 8035d80:	d1ee      	bne.n	8035d60 <__ieee754_powf+0x2c>
 8035d82:	f484 0480 	eor.w	r4, r4, #4194304	@ 0x400000
 8035d86:	0064      	lsls	r4, r4, #1
 8035d88:	f514 0f00 	cmn.w	r4, #8388608	@ 0x800000
 8035d8c:	e7e6      	b.n	8035d5c <__ieee754_powf+0x28>
 8035d8e:	2e00      	cmp	r6, #0
 8035d90:	da1f      	bge.n	8035dd2 <__ieee754_powf+0x9e>
 8035d92:	f1b9 4f97 	cmp.w	r9, #1266679808	@ 0x4b800000
 8035d96:	f080 8260 	bcs.w	803625a <__ieee754_powf+0x526>
 8035d9a:	f1b9 5f7e 	cmp.w	r9, #1065353216	@ 0x3f800000
 8035d9e:	d32f      	bcc.n	8035e00 <__ieee754_powf+0xcc>
 8035da0:	ea4f 53e9 	mov.w	r3, r9, asr #23
 8035da4:	f1c3 0396 	rsb	r3, r3, #150	@ 0x96
 8035da8:	fa49 f503 	asr.w	r5, r9, r3
 8035dac:	fa05 f303 	lsl.w	r3, r5, r3
 8035db0:	454b      	cmp	r3, r9
 8035db2:	d123      	bne.n	8035dfc <__ieee754_powf+0xc8>
 8035db4:	f005 0501 	and.w	r5, r5, #1
 8035db8:	f1c5 0502 	rsb	r5, r5, #2
 8035dbc:	f1b9 5f7e 	cmp.w	r9, #1065353216	@ 0x3f800000
 8035dc0:	d11f      	bne.n	8035e02 <__ieee754_powf+0xce>
 8035dc2:	2c00      	cmp	r4, #0
 8035dc4:	f280 8246 	bge.w	8036254 <__ieee754_powf+0x520>
 8035dc8:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8035dcc:	ee87 0a88 	vdiv.f32	s0, s15, s16
 8035dd0:	e7c8      	b.n	8035d64 <__ieee754_powf+0x30>
 8035dd2:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 8035dd6:	d111      	bne.n	8035dfc <__ieee754_powf+0xc8>
 8035dd8:	f1b8 5f7e 	cmp.w	r8, #1065353216	@ 0x3f800000
 8035ddc:	f000 8234 	beq.w	8036248 <__ieee754_powf+0x514>
 8035de0:	d906      	bls.n	8035df0 <__ieee754_powf+0xbc>
 8035de2:	ed9f 0ac5 	vldr	s0, [pc, #788]	@ 80360f8 <__ieee754_powf+0x3c4>
 8035de6:	2c00      	cmp	r4, #0
 8035de8:	bfa8      	it	ge
 8035dea:	eeb0 0a68 	vmovge.f32	s0, s17
 8035dee:	e7b9      	b.n	8035d64 <__ieee754_powf+0x30>
 8035df0:	2c00      	cmp	r4, #0
 8035df2:	f280 822c 	bge.w	803624e <__ieee754_powf+0x51a>
 8035df6:	eeb1 0a68 	vneg.f32	s0, s17
 8035dfa:	e7b3      	b.n	8035d64 <__ieee754_powf+0x30>
 8035dfc:	2500      	movs	r5, #0
 8035dfe:	e7dd      	b.n	8035dbc <__ieee754_powf+0x88>
 8035e00:	2500      	movs	r5, #0
 8035e02:	f1b4 4f80 	cmp.w	r4, #1073741824	@ 0x40000000
 8035e06:	d102      	bne.n	8035e0e <__ieee754_powf+0xda>
 8035e08:	ee28 0a08 	vmul.f32	s0, s16, s16
 8035e0c:	e7aa      	b.n	8035d64 <__ieee754_powf+0x30>
 8035e0e:	f1b4 5f7c 	cmp.w	r4, #1056964608	@ 0x3f000000
 8035e12:	f040 8227 	bne.w	8036264 <__ieee754_powf+0x530>
 8035e16:	2e00      	cmp	r6, #0
 8035e18:	f2c0 8224 	blt.w	8036264 <__ieee754_powf+0x530>
 8035e1c:	eeb0 0a48 	vmov.f32	s0, s16
 8035e20:	ecbd 8b02 	vpop	{d8}
 8035e24:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8035e28:	f7ff bf80 	b.w	8035d2c <__ieee754_sqrtf>
 8035e2c:	2d01      	cmp	r5, #1
 8035e2e:	d199      	bne.n	8035d64 <__ieee754_powf+0x30>
 8035e30:	eeb1 0a40 	vneg.f32	s0, s0
 8035e34:	e796      	b.n	8035d64 <__ieee754_powf+0x30>
 8035e36:	0ff0      	lsrs	r0, r6, #31
 8035e38:	3801      	subs	r0, #1
 8035e3a:	ea55 0300 	orrs.w	r3, r5, r0
 8035e3e:	d104      	bne.n	8035e4a <__ieee754_powf+0x116>
 8035e40:	ee38 8a48 	vsub.f32	s16, s16, s16
 8035e44:	ee88 0a08 	vdiv.f32	s0, s16, s16
 8035e48:	e78c      	b.n	8035d64 <__ieee754_powf+0x30>
 8035e4a:	f1b9 4f9a 	cmp.w	r9, #1291845632	@ 0x4d000000
 8035e4e:	d96d      	bls.n	8035f2c <__ieee754_powf+0x1f8>
 8035e50:	4baa      	ldr	r3, [pc, #680]	@ (80360fc <__ieee754_powf+0x3c8>)
 8035e52:	4598      	cmp	r8, r3
 8035e54:	d808      	bhi.n	8035e68 <__ieee754_powf+0x134>
 8035e56:	2c00      	cmp	r4, #0
 8035e58:	da0b      	bge.n	8035e72 <__ieee754_powf+0x13e>
 8035e5a:	2000      	movs	r0, #0
 8035e5c:	ecbd 8b02 	vpop	{d8}
 8035e60:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8035e64:	f7ff bf5c 	b.w	8035d20 <__math_oflowf>
 8035e68:	4ba5      	ldr	r3, [pc, #660]	@ (8036100 <__ieee754_powf+0x3cc>)
 8035e6a:	4598      	cmp	r8, r3
 8035e6c:	d908      	bls.n	8035e80 <__ieee754_powf+0x14c>
 8035e6e:	2c00      	cmp	r4, #0
 8035e70:	dcf3      	bgt.n	8035e5a <__ieee754_powf+0x126>
 8035e72:	2000      	movs	r0, #0
 8035e74:	ecbd 8b02 	vpop	{d8}
 8035e78:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8035e7c:	f7ff bf4a 	b.w	8035d14 <__math_uflowf>
 8035e80:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8035e84:	ee30 0a67 	vsub.f32	s0, s0, s15
 8035e88:	eddf 6a9e 	vldr	s13, [pc, #632]	@ 8036104 <__ieee754_powf+0x3d0>
 8035e8c:	eef5 7a00 	vmov.f32	s15, #80	@ 0x3e800000  0.250
 8035e90:	eee0 6a67 	vfms.f32	s13, s0, s15
 8035e94:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8035e98:	eee6 7ac0 	vfms.f32	s15, s13, s0
 8035e9c:	ee20 7a00 	vmul.f32	s14, s0, s0
 8035ea0:	eddf 6a99 	vldr	s13, [pc, #612]	@ 8036108 <__ieee754_powf+0x3d4>
 8035ea4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8035ea8:	eddf 7a98 	vldr	s15, [pc, #608]	@ 803610c <__ieee754_powf+0x3d8>
 8035eac:	ee67 7ac7 	vnmul.f32	s15, s15, s14
 8035eb0:	ed9f 7a97 	vldr	s14, [pc, #604]	@ 8036110 <__ieee754_powf+0x3dc>
 8035eb4:	eee0 7a07 	vfma.f32	s15, s0, s14
 8035eb8:	eeb0 7a67 	vmov.f32	s14, s15
 8035ebc:	eea0 7a26 	vfma.f32	s14, s0, s13
 8035ec0:	ee17 3a10 	vmov	r3, s14
 8035ec4:	f36f 030b 	bfc	r3, #0, #12
 8035ec8:	ee07 3a10 	vmov	s14, r3
 8035ecc:	eeb0 6a47 	vmov.f32	s12, s14
 8035ed0:	eea0 6a66 	vfms.f32	s12, s0, s13
 8035ed4:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8035ed8:	3d01      	subs	r5, #1
 8035eda:	4305      	orrs	r5, r0
 8035edc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8035ee0:	eebf 8a00 	vmov.f32	s16, #240	@ 0xbf800000 -1.0
 8035ee4:	f36f 040b 	bfc	r4, #0, #12
 8035ee8:	bf18      	it	ne
 8035eea:	eeb0 8a66 	vmovne.f32	s16, s13
 8035eee:	ee06 4a90 	vmov	s13, r4
 8035ef2:	ee67 0aa8 	vmul.f32	s1, s15, s17
 8035ef6:	ee38 6ae6 	vsub.f32	s12, s17, s13
 8035efa:	ee67 7a26 	vmul.f32	s15, s14, s13
 8035efe:	eee6 0a07 	vfma.f32	s1, s12, s14
 8035f02:	ee30 7aa7 	vadd.f32	s14, s1, s15
 8035f06:	ee17 1a10 	vmov	r1, s14
 8035f0a:	2900      	cmp	r1, #0
 8035f0c:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8035f10:	f340 80dd 	ble.w	80360ce <__ieee754_powf+0x39a>
 8035f14:	f1b3 4f86 	cmp.w	r3, #1124073472	@ 0x43000000
 8035f18:	f240 80ca 	bls.w	80360b0 <__ieee754_powf+0x37c>
 8035f1c:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8035f20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8035f24:	bf4c      	ite	mi
 8035f26:	2001      	movmi	r0, #1
 8035f28:	2000      	movpl	r0, #0
 8035f2a:	e797      	b.n	8035e5c <__ieee754_powf+0x128>
 8035f2c:	f016 4fff 	tst.w	r6, #2139095040	@ 0x7f800000
 8035f30:	bf01      	itttt	eq
 8035f32:	eddf 7a78 	vldreq	s15, [pc, #480]	@ 8036114 <__ieee754_powf+0x3e0>
 8035f36:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 8035f3a:	f06f 0317 	mvneq.w	r3, #23
 8035f3e:	ee17 7a90 	vmoveq	r7, s15
 8035f42:	ea4f 52e7 	mov.w	r2, r7, asr #23
 8035f46:	bf18      	it	ne
 8035f48:	2300      	movne	r3, #0
 8035f4a:	3a7f      	subs	r2, #127	@ 0x7f
 8035f4c:	441a      	add	r2, r3
 8035f4e:	4b72      	ldr	r3, [pc, #456]	@ (8036118 <__ieee754_powf+0x3e4>)
 8035f50:	f3c7 0716 	ubfx	r7, r7, #0, #23
 8035f54:	429f      	cmp	r7, r3
 8035f56:	f047 517e 	orr.w	r1, r7, #1065353216	@ 0x3f800000
 8035f5a:	dd06      	ble.n	8035f6a <__ieee754_powf+0x236>
 8035f5c:	4b6f      	ldr	r3, [pc, #444]	@ (803611c <__ieee754_powf+0x3e8>)
 8035f5e:	429f      	cmp	r7, r3
 8035f60:	f340 80a4 	ble.w	80360ac <__ieee754_powf+0x378>
 8035f64:	3201      	adds	r2, #1
 8035f66:	f5a1 0100 	sub.w	r1, r1, #8388608	@ 0x800000
 8035f6a:	2600      	movs	r6, #0
 8035f6c:	4b6c      	ldr	r3, [pc, #432]	@ (8036120 <__ieee754_powf+0x3ec>)
 8035f6e:	eb03 0386 	add.w	r3, r3, r6, lsl #2
 8035f72:	ee07 1a10 	vmov	s14, r1
 8035f76:	edd3 5a00 	vldr	s11, [r3]
 8035f7a:	4b6a      	ldr	r3, [pc, #424]	@ (8036124 <__ieee754_powf+0x3f0>)
 8035f7c:	ee75 7a87 	vadd.f32	s15, s11, s14
 8035f80:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8035f84:	eec6 4aa7 	vdiv.f32	s9, s13, s15
 8035f88:	1049      	asrs	r1, r1, #1
 8035f8a:	f041 5100 	orr.w	r1, r1, #536870912	@ 0x20000000
 8035f8e:	f501 2180 	add.w	r1, r1, #262144	@ 0x40000
 8035f92:	eb01 5146 	add.w	r1, r1, r6, lsl #21
 8035f96:	ee37 6a65 	vsub.f32	s12, s14, s11
 8035f9a:	ee07 1a90 	vmov	s15, r1
 8035f9e:	ee26 5a24 	vmul.f32	s10, s12, s9
 8035fa2:	ee77 5ae5 	vsub.f32	s11, s15, s11
 8035fa6:	ee15 7a10 	vmov	r7, s10
 8035faa:	401f      	ands	r7, r3
 8035fac:	ee06 7a90 	vmov	s13, r7
 8035fb0:	eea6 6ae7 	vfms.f32	s12, s13, s15
 8035fb4:	ee37 7a65 	vsub.f32	s14, s14, s11
 8035fb8:	ee65 7a05 	vmul.f32	s15, s10, s10
 8035fbc:	eea6 6ac7 	vfms.f32	s12, s13, s14
 8035fc0:	eddf 5a59 	vldr	s11, [pc, #356]	@ 8036128 <__ieee754_powf+0x3f4>
 8035fc4:	ed9f 7a59 	vldr	s14, [pc, #356]	@ 803612c <__ieee754_powf+0x3f8>
 8035fc8:	eee7 5a87 	vfma.f32	s11, s15, s14
 8035fcc:	ed9f 7a58 	vldr	s14, [pc, #352]	@ 8036130 <__ieee754_powf+0x3fc>
 8035fd0:	eea5 7aa7 	vfma.f32	s14, s11, s15
 8035fd4:	eddf 5a4b 	vldr	s11, [pc, #300]	@ 8036104 <__ieee754_powf+0x3d0>
 8035fd8:	eee7 5a27 	vfma.f32	s11, s14, s15
 8035fdc:	ed9f 7a55 	vldr	s14, [pc, #340]	@ 8036134 <__ieee754_powf+0x400>
 8035fe0:	eea5 7aa7 	vfma.f32	s14, s11, s15
 8035fe4:	eddf 5a54 	vldr	s11, [pc, #336]	@ 8036138 <__ieee754_powf+0x404>
 8035fe8:	ee26 6a24 	vmul.f32	s12, s12, s9
 8035fec:	eee7 5a27 	vfma.f32	s11, s14, s15
 8035ff0:	ee35 7a26 	vadd.f32	s14, s10, s13
 8035ff4:	ee67 4aa7 	vmul.f32	s9, s15, s15
 8035ff8:	ee27 7a06 	vmul.f32	s14, s14, s12
 8035ffc:	eef0 7a08 	vmov.f32	s15, #8	@ 0x40400000  3.0
 8036000:	eea4 7aa5 	vfma.f32	s14, s9, s11
 8036004:	eef0 5a67 	vmov.f32	s11, s15
 8036008:	eee6 5aa6 	vfma.f32	s11, s13, s13
 803600c:	ee75 5a87 	vadd.f32	s11, s11, s14
 8036010:	ee15 1a90 	vmov	r1, s11
 8036014:	4019      	ands	r1, r3
 8036016:	ee05 1a90 	vmov	s11, r1
 803601a:	ee75 7ae7 	vsub.f32	s15, s11, s15
 803601e:	eee6 7ae6 	vfms.f32	s15, s13, s13
 8036022:	ee77 7a67 	vsub.f32	s15, s14, s15
 8036026:	ee67 7a85 	vmul.f32	s15, s15, s10
 803602a:	eee6 7a25 	vfma.f32	s15, s12, s11
 803602e:	eeb0 6a67 	vmov.f32	s12, s15
 8036032:	eea6 6aa5 	vfma.f32	s12, s13, s11
 8036036:	ee16 1a10 	vmov	r1, s12
 803603a:	4019      	ands	r1, r3
 803603c:	ee06 1a10 	vmov	s12, r1
 8036040:	eeb0 7a46 	vmov.f32	s14, s12
 8036044:	eea6 7ae5 	vfms.f32	s14, s13, s11
 8036048:	493c      	ldr	r1, [pc, #240]	@ (803613c <__ieee754_powf+0x408>)
 803604a:	eb01 0186 	add.w	r1, r1, r6, lsl #2
 803604e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8036052:	ed9f 7a3b 	vldr	s14, [pc, #236]	@ 8036140 <__ieee754_powf+0x40c>
 8036056:	eddf 5a3b 	vldr	s11, [pc, #236]	@ 8036144 <__ieee754_powf+0x410>
 803605a:	ee67 7a87 	vmul.f32	s15, s15, s14
 803605e:	ed9f 7a3a 	vldr	s14, [pc, #232]	@ 8036148 <__ieee754_powf+0x414>
 8036062:	eee6 7a07 	vfma.f32	s15, s12, s14
 8036066:	ed91 7a00 	vldr	s14, [r1]
 803606a:	ee77 7a87 	vadd.f32	s15, s15, s14
 803606e:	ee07 2a10 	vmov	s14, r2
 8036072:	4a36      	ldr	r2, [pc, #216]	@ (803614c <__ieee754_powf+0x418>)
 8036074:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8036078:	eeb0 7a67 	vmov.f32	s14, s15
 803607c:	eea6 7a25 	vfma.f32	s14, s12, s11
 8036080:	eb02 0286 	add.w	r2, r2, r6, lsl #2
 8036084:	ed92 5a00 	vldr	s10, [r2]
 8036088:	ee37 7a05 	vadd.f32	s14, s14, s10
 803608c:	ee37 7a26 	vadd.f32	s14, s14, s13
 8036090:	ee17 2a10 	vmov	r2, s14
 8036094:	401a      	ands	r2, r3
 8036096:	ee07 2a10 	vmov	s14, r2
 803609a:	ee77 6a66 	vsub.f32	s13, s14, s13
 803609e:	ee76 6ac5 	vsub.f32	s13, s13, s10
 80360a2:	eee6 6a65 	vfms.f32	s13, s12, s11
 80360a6:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80360aa:	e715      	b.n	8035ed8 <__ieee754_powf+0x1a4>
 80360ac:	2601      	movs	r6, #1
 80360ae:	e75d      	b.n	8035f6c <__ieee754_powf+0x238>
 80360b0:	d152      	bne.n	8036158 <__ieee754_powf+0x424>
 80360b2:	eddf 6a27 	vldr	s13, [pc, #156]	@ 8036150 <__ieee754_powf+0x41c>
 80360b6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80360ba:	ee70 6aa6 	vadd.f32	s13, s1, s13
 80360be:	eef4 6ac7 	vcmpe.f32	s13, s14
 80360c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80360c6:	f73f af29 	bgt.w	8035f1c <__ieee754_powf+0x1e8>
 80360ca:	2386      	movs	r3, #134	@ 0x86
 80360cc:	e048      	b.n	8036160 <__ieee754_powf+0x42c>
 80360ce:	4a21      	ldr	r2, [pc, #132]	@ (8036154 <__ieee754_powf+0x420>)
 80360d0:	4293      	cmp	r3, r2
 80360d2:	d907      	bls.n	80360e4 <__ieee754_powf+0x3b0>
 80360d4:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 80360d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80360dc:	bf4c      	ite	mi
 80360de:	2001      	movmi	r0, #1
 80360e0:	2000      	movpl	r0, #0
 80360e2:	e6c7      	b.n	8035e74 <__ieee754_powf+0x140>
 80360e4:	d138      	bne.n	8036158 <__ieee754_powf+0x424>
 80360e6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80360ea:	eeb4 7ae0 	vcmpe.f32	s14, s1
 80360ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80360f2:	dbea      	blt.n	80360ca <__ieee754_powf+0x396>
 80360f4:	e7ee      	b.n	80360d4 <__ieee754_powf+0x3a0>
 80360f6:	bf00      	nop
 80360f8:	00000000 	.word	0x00000000
 80360fc:	3f7ffff3 	.word	0x3f7ffff3
 8036100:	3f800007 	.word	0x3f800007
 8036104:	3eaaaaab 	.word	0x3eaaaaab
 8036108:	3fb8aa00 	.word	0x3fb8aa00
 803610c:	3fb8aa3b 	.word	0x3fb8aa3b
 8036110:	36eca570 	.word	0x36eca570
 8036114:	4b800000 	.word	0x4b800000
 8036118:	001cc471 	.word	0x001cc471
 803611c:	005db3d6 	.word	0x005db3d6
 8036120:	0803bcf4 	.word	0x0803bcf4
 8036124:	fffff000 	.word	0xfffff000
 8036128:	3e6c3255 	.word	0x3e6c3255
 803612c:	3e53f142 	.word	0x3e53f142
 8036130:	3e8ba305 	.word	0x3e8ba305
 8036134:	3edb6db7 	.word	0x3edb6db7
 8036138:	3f19999a 	.word	0x3f19999a
 803613c:	0803bce4 	.word	0x0803bce4
 8036140:	3f76384f 	.word	0x3f76384f
 8036144:	3f763800 	.word	0x3f763800
 8036148:	369dc3a0 	.word	0x369dc3a0
 803614c:	0803bcec 	.word	0x0803bcec
 8036150:	3338aa3c 	.word	0x3338aa3c
 8036154:	43160000 	.word	0x43160000
 8036158:	f1b3 5f7c 	cmp.w	r3, #1056964608	@ 0x3f000000
 803615c:	d96f      	bls.n	803623e <__ieee754_powf+0x50a>
 803615e:	15db      	asrs	r3, r3, #23
 8036160:	3b7e      	subs	r3, #126	@ 0x7e
 8036162:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 8036166:	4118      	asrs	r0, r3
 8036168:	4408      	add	r0, r1
 803616a:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 803616e:	4a4e      	ldr	r2, [pc, #312]	@ (80362a8 <__ieee754_powf+0x574>)
 8036170:	3b7f      	subs	r3, #127	@ 0x7f
 8036172:	411a      	asrs	r2, r3
 8036174:	4002      	ands	r2, r0
 8036176:	ee07 2a10 	vmov	s14, r2
 803617a:	f3c0 0016 	ubfx	r0, r0, #0, #23
 803617e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8036182:	f1c3 0317 	rsb	r3, r3, #23
 8036186:	4118      	asrs	r0, r3
 8036188:	2900      	cmp	r1, #0
 803618a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 803618e:	bfb8      	it	lt
 8036190:	4240      	neglt	r0, r0
 8036192:	ee77 6aa0 	vadd.f32	s13, s15, s1
 8036196:	ed9f 7a45 	vldr	s14, [pc, #276]	@ 80362ac <__ieee754_powf+0x578>
 803619a:	ed9f 6a45 	vldr	s12, [pc, #276]	@ 80362b0 <__ieee754_powf+0x57c>
 803619e:	ee16 3a90 	vmov	r3, s13
 80361a2:	f36f 030b 	bfc	r3, #0, #12
 80361a6:	ee06 3a90 	vmov	s13, r3
 80361aa:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80361ae:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 80361b2:	ee70 0ae7 	vsub.f32	s1, s1, s15
 80361b6:	eddf 7a3f 	vldr	s15, [pc, #252]	@ 80362b4 <__ieee754_powf+0x580>
 80361ba:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80361be:	eee0 7a87 	vfma.f32	s15, s1, s14
 80361c2:	eeb0 7a67 	vmov.f32	s14, s15
 80361c6:	eea6 7a86 	vfma.f32	s14, s13, s12
 80361ca:	eef0 5a47 	vmov.f32	s11, s14
 80361ce:	eee6 5ac6 	vfms.f32	s11, s13, s12
 80361d2:	ee67 6a07 	vmul.f32	s13, s14, s14
 80361d6:	ee77 7ae5 	vsub.f32	s15, s15, s11
 80361da:	ed9f 6a37 	vldr	s12, [pc, #220]	@ 80362b8 <__ieee754_powf+0x584>
 80361de:	eddf 5a37 	vldr	s11, [pc, #220]	@ 80362bc <__ieee754_powf+0x588>
 80361e2:	eea6 6aa5 	vfma.f32	s12, s13, s11
 80361e6:	eddf 5a36 	vldr	s11, [pc, #216]	@ 80362c0 <__ieee754_powf+0x58c>
 80361ea:	eee6 5a26 	vfma.f32	s11, s12, s13
 80361ee:	ed9f 6a35 	vldr	s12, [pc, #212]	@ 80362c4 <__ieee754_powf+0x590>
 80361f2:	eea5 6aa6 	vfma.f32	s12, s11, s13
 80361f6:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80362c8 <__ieee754_powf+0x594>
 80361fa:	eee6 5a26 	vfma.f32	s11, s12, s13
 80361fe:	eeb0 6a47 	vmov.f32	s12, s14
 8036202:	eea5 6ae6 	vfms.f32	s12, s11, s13
 8036206:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 803620a:	ee67 5a06 	vmul.f32	s11, s14, s12
 803620e:	ee36 6a66 	vsub.f32	s12, s12, s13
 8036212:	eee7 7a27 	vfma.f32	s15, s14, s15
 8036216:	eec5 6a86 	vdiv.f32	s13, s11, s12
 803621a:	ee76 7ae7 	vsub.f32	s15, s13, s15
 803621e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8036222:	ee30 0a67 	vsub.f32	s0, s0, s15
 8036226:	ee10 3a10 	vmov	r3, s0
 803622a:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 803622e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8036232:	da06      	bge.n	8036242 <__ieee754_powf+0x50e>
 8036234:	f000 f84c 	bl	80362d0 <scalbnf>
 8036238:	ee20 0a08 	vmul.f32	s0, s0, s16
 803623c:	e592      	b.n	8035d64 <__ieee754_powf+0x30>
 803623e:	2000      	movs	r0, #0
 8036240:	e7a7      	b.n	8036192 <__ieee754_powf+0x45e>
 8036242:	ee00 3a10 	vmov	s0, r3
 8036246:	e7f7      	b.n	8036238 <__ieee754_powf+0x504>
 8036248:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 803624c:	e58a      	b.n	8035d64 <__ieee754_powf+0x30>
 803624e:	ed9f 0a1f 	vldr	s0, [pc, #124]	@ 80362cc <__ieee754_powf+0x598>
 8036252:	e587      	b.n	8035d64 <__ieee754_powf+0x30>
 8036254:	eeb0 0a48 	vmov.f32	s0, s16
 8036258:	e584      	b.n	8035d64 <__ieee754_powf+0x30>
 803625a:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 803625e:	f43f adbb 	beq.w	8035dd8 <__ieee754_powf+0xa4>
 8036262:	2502      	movs	r5, #2
 8036264:	eeb0 0a48 	vmov.f32	s0, s16
 8036268:	f7ff fd2a 	bl	8035cc0 <fabsf>
 803626c:	f026 4340 	bic.w	r3, r6, #3221225472	@ 0xc0000000
 8036270:	f1b3 5f7e 	cmp.w	r3, #1065353216	@ 0x3f800000
 8036274:	4647      	mov	r7, r8
 8036276:	d003      	beq.n	8036280 <__ieee754_powf+0x54c>
 8036278:	f1b8 0f00 	cmp.w	r8, #0
 803627c:	f47f addb 	bne.w	8035e36 <__ieee754_powf+0x102>
 8036280:	2c00      	cmp	r4, #0
 8036282:	bfbc      	itt	lt
 8036284:	eef7 7a00 	vmovlt.f32	s15, #112	@ 0x3f800000  1.0
 8036288:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 803628c:	2e00      	cmp	r6, #0
 803628e:	f6bf ad69 	bge.w	8035d64 <__ieee754_powf+0x30>
 8036292:	f1a8 587e 	sub.w	r8, r8, #1065353216	@ 0x3f800000
 8036296:	ea58 0805 	orrs.w	r8, r8, r5
 803629a:	f47f adc7 	bne.w	8035e2c <__ieee754_powf+0xf8>
 803629e:	ee70 7a40 	vsub.f32	s15, s0, s0
 80362a2:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 80362a6:	e55d      	b.n	8035d64 <__ieee754_powf+0x30>
 80362a8:	ff800000 	.word	0xff800000
 80362ac:	3f317218 	.word	0x3f317218
 80362b0:	3f317200 	.word	0x3f317200
 80362b4:	35bfbe8c 	.word	0x35bfbe8c
 80362b8:	b5ddea0e 	.word	0xb5ddea0e
 80362bc:	3331bb4c 	.word	0x3331bb4c
 80362c0:	388ab355 	.word	0x388ab355
 80362c4:	bb360b61 	.word	0xbb360b61
 80362c8:	3e2aaaab 	.word	0x3e2aaaab
 80362cc:	00000000 	.word	0x00000000

080362d0 <scalbnf>:
 80362d0:	ee10 3a10 	vmov	r3, s0
 80362d4:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 80362d8:	d02b      	beq.n	8036332 <scalbnf+0x62>
 80362da:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 80362de:	d302      	bcc.n	80362e6 <scalbnf+0x16>
 80362e0:	ee30 0a00 	vadd.f32	s0, s0, s0
 80362e4:	4770      	bx	lr
 80362e6:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 80362ea:	d123      	bne.n	8036334 <scalbnf+0x64>
 80362ec:	4b24      	ldr	r3, [pc, #144]	@ (8036380 <scalbnf+0xb0>)
 80362ee:	eddf 7a25 	vldr	s15, [pc, #148]	@ 8036384 <scalbnf+0xb4>
 80362f2:	4298      	cmp	r0, r3
 80362f4:	ee20 0a27 	vmul.f32	s0, s0, s15
 80362f8:	db17      	blt.n	803632a <scalbnf+0x5a>
 80362fa:	ee10 3a10 	vmov	r3, s0
 80362fe:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8036302:	3a19      	subs	r2, #25
 8036304:	f24c 3150 	movw	r1, #50000	@ 0xc350
 8036308:	4288      	cmp	r0, r1
 803630a:	dd15      	ble.n	8036338 <scalbnf+0x68>
 803630c:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 8036388 <scalbnf+0xb8>
 8036310:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 803638c <scalbnf+0xbc>
 8036314:	ee10 3a10 	vmov	r3, s0
 8036318:	eeb0 7a67 	vmov.f32	s14, s15
 803631c:	2b00      	cmp	r3, #0
 803631e:	bfb8      	it	lt
 8036320:	eef0 7a66 	vmovlt.f32	s15, s13
 8036324:	ee27 0a87 	vmul.f32	s0, s15, s14
 8036328:	4770      	bx	lr
 803632a:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8036390 <scalbnf+0xc0>
 803632e:	ee27 0a80 	vmul.f32	s0, s15, s0
 8036332:	4770      	bx	lr
 8036334:	0dd2      	lsrs	r2, r2, #23
 8036336:	e7e5      	b.n	8036304 <scalbnf+0x34>
 8036338:	4410      	add	r0, r2
 803633a:	28fe      	cmp	r0, #254	@ 0xfe
 803633c:	dce6      	bgt.n	803630c <scalbnf+0x3c>
 803633e:	2800      	cmp	r0, #0
 8036340:	dd06      	ble.n	8036350 <scalbnf+0x80>
 8036342:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8036346:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 803634a:	ee00 3a10 	vmov	s0, r3
 803634e:	4770      	bx	lr
 8036350:	f110 0f16 	cmn.w	r0, #22
 8036354:	da09      	bge.n	803636a <scalbnf+0x9a>
 8036356:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 8036390 <scalbnf+0xc0>
 803635a:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 8036394 <scalbnf+0xc4>
 803635e:	ee10 3a10 	vmov	r3, s0
 8036362:	eeb0 7a67 	vmov.f32	s14, s15
 8036366:	2b00      	cmp	r3, #0
 8036368:	e7d9      	b.n	803631e <scalbnf+0x4e>
 803636a:	3019      	adds	r0, #25
 803636c:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8036370:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8036374:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 8036398 <scalbnf+0xc8>
 8036378:	ee07 3a90 	vmov	s15, r3
 803637c:	e7d7      	b.n	803632e <scalbnf+0x5e>
 803637e:	bf00      	nop
 8036380:	ffff3cb0 	.word	0xffff3cb0
 8036384:	4c000000 	.word	0x4c000000
 8036388:	7149f2ca 	.word	0x7149f2ca
 803638c:	f149f2ca 	.word	0xf149f2ca
 8036390:	0da24260 	.word	0x0da24260
 8036394:	8da24260 	.word	0x8da24260
 8036398:	33000000 	.word	0x33000000

0803639c <_exit>:
 803639c:	e7fe      	b.n	803639c <_exit>
	...

080363a0 <_init>:
 80363a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80363a2:	bf00      	nop
 80363a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80363a6:	bc08      	pop	{r3}
 80363a8:	469e      	mov	lr, r3
 80363aa:	4770      	bx	lr

080363ac <_fini>:
 80363ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80363ae:	bf00      	nop
 80363b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80363b2:	bc08      	pop	{r3}
 80363b4:	469e      	mov	lr, r3
 80363b6:	4770      	bx	lr
